
ITI_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  000014a2  00001536  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800172  00800172  00001648  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e98  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010f7  00000000  00000000  000048f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f58  00000000  00000000  000059eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000958  00000000  00000000  00007944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012cd  00000000  00000000  0000829c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a48  00000000  00000000  00009569  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000afb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__vector_1>
       8:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__vector_2>
       c:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ca 06 	jmp	0xd94	; 0xd94 <__vector_6>
      1c:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__vector_10>
      2c:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9b 01 	call	0x336	; 0x336 <main>
      8a:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TempSensor>:

}

void TempSensor(void){
	//Read Voltage value from ADC conversion
	u8 Temp = ADC_u8StartConversion(0);
      92:	80 e0       	ldi	r24, 0x00	; 0
      94:	0e 94 ab 04 	call	0x956	; 0x956 <ADC_u8StartConversion>
	 * LM35 Temperature Sensor Vout Calculations with connection applied in proteus:
	 * Vout = 10 mV/C
	 * Vref = 5v
	 * Temp Calculation (Voltage Value*Voltage ref)/(10*(10^-3)*25*2^8)
	 */
	Temp = (u8)((Temp*5)/ (.01*256));
      98:	90 e0       	ldi	r25, 0x00	; 0
      9a:	bc 01       	movw	r22, r24
      9c:	66 0f       	add	r22, r22
      9e:	77 1f       	adc	r23, r23
      a0:	66 0f       	add	r22, r22
      a2:	77 1f       	adc	r23, r23
      a4:	68 0f       	add	r22, r24
      a6:	79 1f       	adc	r23, r25
      a8:	07 2e       	mov	r0, r23
      aa:	00 0c       	add	r0, r0
      ac:	88 0b       	sbc	r24, r24
      ae:	99 0b       	sbc	r25, r25
      b0:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatsisf>
      b4:	2a e0       	ldi	r18, 0x0A	; 10
      b6:	37 ed       	ldi	r19, 0xD7	; 215
      b8:	43 e2       	ldi	r20, 0x23	; 35
      ba:	50 e4       	ldi	r21, 0x40	; 64
      bc:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__divsf3>
      c0:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__fixunssfsi>
	//Check on Temp if over 35C ===> AC will work and turn off Fan if was on
	if(Temp>=35){
      c4:	63 32       	cpi	r22, 0x23	; 35
      c6:	58 f0       	brcs	.+22     	; 0xde <TempSensor+0x4c>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
      c8:	41 e0       	ldi	r20, 0x01	; 1
      ca:	66 e0       	ldi	r22, 0x06	; 6
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
      d2:	40 e0       	ldi	r20, 0x00	; 0
      d4:	67 e0       	ldi	r22, 0x07	; 7
      d6:	83 e0       	ldi	r24, 0x03	; 3
      d8:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
      dc:	08 95       	ret
	}
	//Check on Temp if over 25C ===> Fan will work and turn off AC if was on
	else if (Temp>=25){
      de:	69 31       	cpi	r22, 0x19	; 25
      e0:	58 f0       	brcs	.+22     	; 0xf8 <TempSensor+0x66>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	66 e0       	ldi	r22, 0x06	; 6
      e6:	83 e0       	ldi	r24, 0x03	; 3
      e8:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH);
      ec:	41 e0       	ldi	r20, 0x01	; 1
      ee:	67 e0       	ldi	r22, 0x07	; 7
      f0:	83 e0       	ldi	r24, 0x03	; 3
      f2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
      f6:	08 95       	ret
	}//Else State declare that Temp is lower than 25 so turning off both AC and Fan
	else{
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
      f8:	40 e0       	ldi	r20, 0x00	; 0
      fa:	66 e0       	ldi	r22, 0x06	; 6
      fc:	83 e0       	ldi	r24, 0x03	; 3
      fe:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
     102:	40 e0       	ldi	r20, 0x00	; 0
     104:	67 e0       	ldi	r22, 0x07	; 7
     106:	83 e0       	ldi	r24, 0x03	; 3
     108:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
     10c:	08 95       	ret

0000010e <void_SetEPROMLockerPass>:


}
void void_SetEPROMLockerPass(void ){
	
	Global_u8SavedDoorPassLowByte=(u8)Global_u16EPROMDoorPass;
     10e:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <Global_u16EPROMDoorPass>
     112:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     116:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <Global_u8SavedDoorPassLowByte>
	
	Global_u8SavedDoorPassHighByte=(u8)(Global_u16EPROMDoorPass>>8);
     11a:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Global_u8SavedDoorPassHighByte>
     11e:	08 95       	ret

00000120 <void_Locker>:
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
	}
}

void void_Locker(){
     120:	cf 93       	push	r28
	/*To set new pass enter your old pass and press clear*/
	/* max password digits is 4*/

	// pressed key
	u8 Local_u8Keypad_Key=KPD_u8GetPressedKey();
     122:	0e 94 3b 03 	call	0x676	; 0x676 <KPD_u8GetPressedKey>
     126:	c8 2f       	mov	r28, r24
	/* case user entered clear */
		/* two cases to enter clear
		* First : To set new pass
		* Second : clear screen and clear the entered password
		*/
	if(Local_u8Keypad_Key==KPD_CLEAR){
     128:	8d 30       	cpi	r24, 0x0D	; 13
     12a:	09 f0       	breq	.+2      	; 0x12e <void_Locker+0xe>
     12c:	74 c0       	rjmp	.+232    	; 0x216 <void_Locker+0xf6>

		// First case : set new pass
		if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
     12e:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <Local_u16DoorPassword.1766>
     132:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <Local_u16DoorPassword.1766+0x1>
     136:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <Global_u16EPROMDoorPass>
     13a:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     13e:	28 17       	cp	r18, r24
     140:	39 07       	cpc	r19, r25
     142:	09 f0       	breq	.+2      	; 0x146 <void_Locker+0x26>
     144:	5f c0       	rjmp	.+190    	; 0x204 <void_Locker+0xe4>

			LCD_voidClearDisplay();
     146:	0e 94 33 04 	call	0x866	; 0x866 <LCD_voidClearDisplay>
			// setting new password
				// clear all saved passes and digit counter
				Global_u16EPROMDoorPass=0;
     14a:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     14e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <Global_u16EPROMDoorPass>
				Local_u16DoorPassword=0;
     152:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <Local_u16DoorPassword.1766+0x1>
     156:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <Local_u16DoorPassword.1766>
				Local_u8DigitsCount=0;
     15a:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Local_u8DigitsCount.1767>

				LCD_voidSendString("Set new pass:");
     15e:	8e e6       	ldi	r24, 0x6E	; 110
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 40 04 	call	0x880	; 0x880 <LCD_voidSendString>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				while(Local_u8Keypad_Key != KPD_ENTER ){

					Local_u8Keypad_Key=KPD_u8GetPressedKey();
     166:	0e 94 3b 03 	call	0x676	; 0x676 <KPD_u8GetPressedKey>
     16a:	c8 2f       	mov	r28, r24
					// check if the user entered more than 4 digits
					if(Local_u8DigitsCount==Max_Pass_Digits+1){
     16c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Local_u8DigitsCount.1767>
     170:	85 30       	cpi	r24, 0x05	; 5
     172:	a1 f4       	brne	.+40     	; 0x19c <void_Locker+0x7c>
						LCD_voidClearDisplay();
     174:	0e 94 33 04 	call	0x866	; 0x866 <LCD_voidClearDisplay>
						LCD_voidSendString("ERROR !!!!");
     178:	8c e7       	ldi	r24, 0x7C	; 124
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 40 04 	call	0x880	; 0x880 <LCD_voidSendString>
						LCD_voidGoTOXY(1,0);
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	0e 94 37 04 	call	0x86e	; 0x86e <LCD_voidGoTOXY>
						LCD_voidSendString("Max Digits is 4");
     188:	87 e8       	ldi	r24, 0x87	; 135
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 40 04 	call	0x880	; 0x880 <LCD_voidSendString>
						Local_u8DigitsCount=0;
     190:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Local_u8DigitsCount.1767>
						Global_u16EPROMDoorPass=0;
     194:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     198:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <Global_u16EPROMDoorPass>
					}

					if(Local_u8Keypad_Key==KPD_CLEAR){
     19c:	cd 30       	cpi	r28, 0x0D	; 13
     19e:	49 f4       	brne	.+18     	; 0x1b2 <void_Locker+0x92>
						Local_u8DigitsCount=0;
     1a0:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Local_u8DigitsCount.1767>
						LCD_voidClearDisplay();
     1a4:	0e 94 33 04 	call	0x866	; 0x866 <LCD_voidClearDisplay>
						Global_u16EPROMDoorPass=0;
     1a8:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     1ac:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <Global_u16EPROMDoorPass>
     1b0:	da cf       	rjmp	.-76     	; 0x166 <void_Locker+0x46>

					}
					else if(Local_u8Keypad_Key !=KPD_NO_PRESS && Local_u8Keypad_Key!=KPD_ENTER){
     1b2:	ca 3a       	cpi	r28, 0xAA	; 170
     1b4:	c1 f2       	breq	.-80     	; 0x166 <void_Locker+0x46>
     1b6:	cc 30       	cpi	r28, 0x0C	; 12
     1b8:	09 f4       	brne	.+2      	; 0x1bc <void_Locker+0x9c>
     1ba:	86 c0       	rjmp	.+268    	; 0x2c8 <void_Locker+0x1a8>
						// if it is the first digit that user enter --> clear any previous message on the screen
						if(Local_u8DigitsCount==0)
     1bc:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Local_u8DigitsCount.1767>
     1c0:	81 11       	cpse	r24, r1
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <void_Locker+0xa8>
							LCD_voidClearDisplay();
     1c4:	0e 94 33 04 	call	0x866	; 0x866 <LCD_voidClearDisplay>
						LCD_voidSendData('*');
     1c8:	8a e2       	ldi	r24, 0x2A	; 42
     1ca:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_voidSendData>
						Local_u8DigitsCount++;
     1ce:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Local_u8DigitsCount.1767>
     1d2:	8f 5f       	subi	r24, 0xFF	; 255
     1d4:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <Local_u8DigitsCount.1767>
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
     1d8:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <Global_u16EPROMDoorPass>
     1dc:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     1e0:	9c 01       	movw	r18, r24
     1e2:	22 0f       	add	r18, r18
     1e4:	33 1f       	adc	r19, r19
     1e6:	88 0f       	add	r24, r24
     1e8:	99 1f       	adc	r25, r25
     1ea:	88 0f       	add	r24, r24
     1ec:	99 1f       	adc	r25, r25
     1ee:	88 0f       	add	r24, r24
     1f0:	99 1f       	adc	r25, r25
     1f2:	82 0f       	add	r24, r18
     1f4:	93 1f       	adc	r25, r19
     1f6:	8c 0f       	add	r24, r28
     1f8:	91 1d       	adc	r25, r1
     1fa:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     1fe:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <Global_u16EPROMDoorPass>
     202:	b1 cf       	rjmp	.-158    	; 0x166 <void_Locker+0x46>

		}

		// Second case : to clear Screen or typed password
		else{
		LCD_voidClearDisplay();
     204:	0e 94 33 04 	call	0x866	; 0x866 <LCD_voidClearDisplay>
		Local_u16DoorPassword=0;
     208:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <Local_u16DoorPassword.1766+0x1>
     20c:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <Local_u16DoorPassword.1766>
		Local_u8DigitsCount=0;
     210:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Local_u8DigitsCount.1767>
     214:	63 c0       	rjmp	.+198    	; 0x2dc <void_Locker+0x1bc>

		}
	}
	/******************************************************************************************************************************************************************/
	/* case user pressed enter or equal */
	else if(Local_u8Keypad_Key==KPD_ENTER){
     216:	8c 30       	cpi	r24, 0x0C	; 12
     218:	89 f5       	brne	.+98     	; 0x27c <void_Locker+0x15c>

		LCD_voidClearDisplay();
     21a:	0e 94 33 04 	call	0x866	; 0x866 <LCD_voidClearDisplay>
		// check if entered pass is correct
		 if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
     21e:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <Local_u16DoorPassword.1766>
     222:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <Local_u16DoorPassword.1766+0x1>
     226:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <Global_u16EPROMDoorPass>
     22a:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     22e:	28 17       	cp	r18, r24
     230:	39 07       	cpc	r19, r25
     232:	c9 f4       	brne	.+50     	; 0x266 <void_Locker+0x146>
			// check door status
			if(Local_u8DoorStatus==0){
     234:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     238:	81 11       	cpse	r24, r1
     23a:	0b c0       	rjmp	.+22     	; 0x252 <void_Locker+0x132>
				LCD_voidSendString("Door is opened");
     23c:	87 e9       	ldi	r24, 0x97	; 151
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 40 04 	call	0x880	; 0x880 <LCD_voidSendString>
				// run servo
				Servo_voidDegree(180);
     244:	84 eb       	ldi	r24, 0xB4	; 180
     246:	0e 94 7e 04 	call	0x8fc	; 0x8fc <Servo_voidDegree>
				Local_u8DoorStatus=1;
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
     250:	0e c0       	rjmp	.+28     	; 0x26e <void_Locker+0x14e>

			}
			else{
				LCD_voidSendString("Door is Closed");
     252:	86 ea       	ldi	r24, 0xA6	; 166
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 40 04 	call	0x880	; 0x880 <LCD_voidSendString>
				// stop servo
				Servo_voidDegree(0);
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <Servo_voidDegree>
				Local_u8DoorStatus=0;
     260:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
     264:	04 c0       	rjmp	.+8      	; 0x26e <void_Locker+0x14e>

			}

		}
		else
			LCD_voidSendString("Wrong password !");
     266:	85 eb       	ldi	r24, 0xB5	; 181
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 40 04 	call	0x880	; 0x880 <LCD_voidSendString>

			// reset the entered password after typing enter
			Local_u16DoorPassword=0;
     26e:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <Local_u16DoorPassword.1766+0x1>
     272:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <Local_u16DoorPassword.1766>
			Local_u8DigitsCount=0;
     276:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Local_u8DigitsCount.1767>
     27a:	30 c0       	rjmp	.+96     	; 0x2dc <void_Locker+0x1bc>
	}

	/****************************************************************************************************************************************************************/
	/* Case user pressed a digit key*/
	else if(Local_u8Keypad_Key != KPD_NO_PRESS){
     27c:	8a 3a       	cpi	r24, 0xAA	; 170
     27e:	71 f1       	breq	.+92     	; 0x2dc <void_Locker+0x1bc>
		// if it is the first digit that user enter --> clear any previous message on the screen
		if(Local_u8DigitsCount==0)
     280:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Local_u8DigitsCount.1767>
     284:	81 11       	cpse	r24, r1
     286:	02 c0       	rjmp	.+4      	; 0x28c <void_Locker+0x16c>
			LCD_voidClearDisplay();
     288:	0e 94 33 04 	call	0x866	; 0x866 <LCD_voidClearDisplay>

		LCD_voidSendData('*');
     28c:	8a e2       	ldi	r24, 0x2A	; 42
     28e:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_voidSendData>

		Local_u8DigitsCount++;
     292:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Local_u8DigitsCount.1767>
     296:	8f 5f       	subi	r24, 0xFF	; 255
     298:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <Local_u8DigitsCount.1767>
		Local_u16DoorPassword=Local_u16DoorPassword*10 + Local_u8Keypad_Key;
     29c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <Local_u16DoorPassword.1766>
     2a0:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <Local_u16DoorPassword.1766+0x1>
     2a4:	9c 01       	movw	r18, r24
     2a6:	22 0f       	add	r18, r18
     2a8:	33 1f       	adc	r19, r19
     2aa:	88 0f       	add	r24, r24
     2ac:	99 1f       	adc	r25, r25
     2ae:	88 0f       	add	r24, r24
     2b0:	99 1f       	adc	r25, r25
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	82 0f       	add	r24, r18
     2b8:	93 1f       	adc	r25, r19
     2ba:	8c 0f       	add	r24, r28
     2bc:	91 1d       	adc	r25, r1
     2be:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <Local_u16DoorPassword.1766+0x1>
     2c2:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <Local_u16DoorPassword.1766>


	}


}
     2c6:	0a c0       	rjmp	.+20     	; 0x2dc <void_Locker+0x1bc>
						Local_u8DigitsCount++;
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
					}

				}
				LCD_voidClearDisplay();
     2c8:	0e 94 33 04 	call	0x866	; 0x866 <LCD_voidClearDisplay>
				LCD_voidSendString("pass is updated");
     2cc:	86 ec       	ldi	r24, 0xC6	; 198
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 40 04 	call	0x880	; 0x880 <LCD_voidSendString>
				// reset counter
				Local_u8DigitsCount=0;
     2d4:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Local_u8DigitsCount.1767>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				// save the new pass to eeprom
				void_SetEPROMLockerPass();
     2d8:	0e 94 87 00 	call	0x10e	; 0x10e <void_SetEPROMLockerPass>


	}


}
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <void_GetEPROMLockerPass>:
}

void void_GetEPROMLockerPass(void){

	// read pass low byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
     2e0:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     2e4:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     2e8:	8b e8       	ldi	r24, 0x8B	; 139
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0e 94 d5 02 	call	0x5aa	; 0x5aa <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
     2f0:	6c e2       	ldi	r22, 0x2C	; 44
     2f2:	71 e0       	ldi	r23, 0x01	; 1
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TIMER_delay_ms>
	// read pass high byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
     2fc:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     300:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     304:	66 5f       	subi	r22, 0xF6	; 246
     306:	7f 4f       	sbci	r23, 0xFF	; 255
     308:	88 e8       	ldi	r24, 0x88	; 136
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
     310:	6c e2       	ldi	r22, 0x2C	; 44
     312:	71 e0       	ldi	r23, 0x01	; 1
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TIMER_delay_ms>
	// combine the high and low byte
	Global_u16EPROMDoorPass= ( (u16)(Global_u8SavedDoorPassHighByte<<8) )| Global_u8SavedDoorPassLowByte;
     31c:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Global_u8SavedDoorPassHighByte>
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	98 2f       	mov	r25, r24
     324:	88 27       	eor	r24, r24
     326:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <Global_u8SavedDoorPassLowByte>
     32a:	82 2b       	or	r24, r18
     32c:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     330:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <Global_u16EPROMDoorPass>
     334:	08 95       	ret

00000336 <main>:
void void_Locker(void);
void void_SetEPROMLockerPass(void);
void void_GetEPROMLockerPass(void);

void main(void)
{	
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	1f 92       	push	r1
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16EPROMSystemStateAddress=5;
	u8 Local_u8EPROMSystemState=0;
     340:	19 82       	std	Y+1, r1	; 0x01
	
	ADC_voidInit();
     342:	0e 94 a3 04 	call	0x946	; 0x946 <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_OUTPUT);
     346:	41 e0       	ldi	r20, 0x01	; 1
     348:	66 e0       	ldi	r22, 0x06	; 6
     34a:	83 e0       	ldi	r24, 0x03	; 3
     34c:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_OUTPUT);
     350:	41 e0       	ldi	r20, 0x01	; 1
     352:	67 e0       	ldi	r22, 0x07	; 7
     354:	83 e0       	ldi	r24, 0x03	; 3
     356:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_voidSetPinDirection>

	LCD_voidInit();
     35a:	0e 94 0a 04 	call	0x814	; 0x814 <LCD_voidInit>
	KPD_voidInit();
     35e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <KPD_voidInit>
	//servo pin
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
     362:	41 e0       	ldi	r20, 0x01	; 1
     364:	65 e0       	ldi	r22, 0x05	; 5
     366:	83 e0       	ldi	r24, 0x03	; 3
     368:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_voidSetPinDirection>
	Servo_voidInit();
     36c:	0e 94 75 04 	call	0x8ea	; 0x8ea <Servo_voidInit>

	TWI_voidMasterInit(0);
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 1c 07 	call	0xe38	; 0xe38 <TWI_voidMasterInit>
	
	/*Read system state form EPROM to check if this is the first time to run the project*/
	EEPROM_voidReadDataByte(&Local_u8EPROMSystemState,Local_u16EPROMSystemStateAddress);
     376:	65 e0       	ldi	r22, 0x05	; 5
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	ce 01       	movw	r24, r28
     37c:	01 96       	adiw	r24, 0x01	; 1
     37e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <EEPROM_voidReadDataByte>
	if(Local_u8EPROMSystemState !=SystemHasRunBefore){
     382:	89 81       	ldd	r24, Y+1	; 0x01
     384:	8c 31       	cpi	r24, 0x1C	; 28
     386:	c9 f0       	breq	.+50     	; 0x3ba <main+0x84>
		LCD_voidSendString("First Run");
     388:	86 ed       	ldi	r24, 0xD6	; 214
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 40 04 	call	0x880	; 0x880 <LCD_voidSendString>
		// save the system state as has run before
		Local_u8EPROMSystemState=SystemHasRunBefore;
     390:	8c e1       	ldi	r24, 0x1C	; 28
     392:	89 83       	std	Y+1, r24	; 0x01
		// save initial password = 100
		Global_u16EPROMDoorPass=1234;
     394:	82 ed       	ldi	r24, 0xD2	; 210
     396:	94 e0       	ldi	r25, 0x04	; 4
     398:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     39c:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <Global_u16EPROMDoorPass>
		void_SetEPROMLockerPass();
     3a0:	0e 94 87 00 	call	0x10e	; 0x10e <void_SetEPROMLockerPass>
		// save the system state to eprom
		EEPROM_voidSendDataByte(Local_u8EPROMSystemState,Local_u16EPROMSystemStateAddress);
     3a4:	65 e0       	ldi	r22, 0x05	; 5
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	0e 94 bd 02 	call	0x57a	; 0x57a <EEPROM_voidSendDataByte>
		TIMER_delay_ms(300);
     3ae:	6c e2       	ldi	r22, 0x2C	; 44
     3b0:	71 e0       	ldi	r23, 0x01	; 1
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TIMER_delay_ms>
	}

	// get the saved password and store it the global EPROM_variable
	void_GetEPROMLockerPass();
     3ba:	0e 94 70 01 	call	0x2e0	; 0x2e0 <void_GetEPROMLockerPass>
	
	LCD_voidSendNumber(Global_u16EPROMDoorPass);
     3be:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <Global_u16EPROMDoorPass>
     3c2:	70 91 8a 01 	lds	r23, 0x018A	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 56 04 	call	0x8ac	; 0x8ac <LCD_voidSendNumber>
	
	// Initialize USART
	USART_voidInit();
     3ce:	0e 94 8e 07 	call	0xf1c	; 0xf1c <USART_voidInit>
	//Initialize Call Back Function
	USART_voidCallBackFunction(&USART_Start);
     3d2:	8b e1       	ldi	r24, 0x1B	; 27
     3d4:	92 e0       	ldi	r25, 0x02	; 2
     3d6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <USART_voidCallBackFunction>
	//Enable USART PIE
	USART_voidEnableRxINT();
     3da:	0e 94 e6 07 	call	0xfcc	; 0xfcc <USART_voidEnableRxINT>
	//Enable GIE
	GIE_voidEnableGlobalInt();
     3de:	0e 94 df 05 	call	0xbbe	; 0xbbe <GIE_voidEnableGlobalInt>
	// LED Pins
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN5,DIO_OUTPUT);
     3e2:	41 e0       	ldi	r20, 0x01	; 1
     3e4:	65 e0       	ldi	r22, 0x05	; 5
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN6,DIO_OUTPUT);
     3ec:	41 e0       	ldi	r20, 0x01	; 1
     3ee:	66 e0       	ldi	r22, 0x06	; 6
     3f0:	82 e0       	ldi	r24, 0x02	; 2
     3f2:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN7,DIO_OUTPUT);
     3f6:	41 e0       	ldi	r20, 0x01	; 1
     3f8:	67 e0       	ldi	r22, 0x07	; 7
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_voidSetPinDirection>

	while(1){
		/*USART is Controlled by ISR TIMER1_COMPB*/
		GIE_voidEnableGlobalInt();
     400:	0e 94 df 05 	call	0xbbe	; 0xbbe <GIE_voidEnableGlobalInt>
		USART_voidEnableRxINT();
     404:	0e 94 e6 07 	call	0xfcc	; 0xfcc <USART_voidEnableRxINT>
		//Call locker Control Function
		void_Locker();
     408:	0e 94 90 00 	call	0x120	; 0x120 <void_Locker>
		//Call Temperature Sensor Control Function
		TempSensor();
     40c:	0e 94 49 00 	call	0x92	; 0x92 <TempSensor>
     410:	f7 cf       	rjmp	.-18     	; 0x400 <__LOCK_REGION_LENGTH__>

00000412 <USART_voidProcessCommand>:
}

ConditionsState USART_voidProcessCommand(u8 command,u8 Local_LightNum) {
	ConditionsState Con_St = NoErrors; // Check Variable
	//Check Command to turn Light on or off
	if (command=='1') {
     412:	81 33       	cpi	r24, 0x31	; 49
     414:	31 f4       	brne	.+12     	; 0x422 <USART_voidProcessCommand+0x10>
		// Turning ON ROOM 1 LIGHT
		DIO_voidSetPinValue(DIO_PORTC,Local_LightNum,DIO_HIGH);
     416:	41 e0       	ldi	r20, 0x01	; 1
     418:	82 e0       	ldi	r24, 0x02	; 2
     41a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
		Con_St = ROOM_LIGHT_ON;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	08 95       	ret
	}
	else if ( command=='0') {
     422:	80 33       	cpi	r24, 0x30	; 48
     424:	31 f4       	brne	.+12     	; 0x432 <USART_voidProcessCommand+0x20>
		// Turning OFF ROOM 1 LIGHT
		DIO_voidSetPinValue(DIO_PORTC,Local_LightNum,DIO_LOW);
     426:	40 e0       	ldi	r20, 0x00	; 0
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
		Con_St = ROOM_LIGHT_OFF;
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	08 95       	ret
	}
	else{ // IF input is not 0 nor 1 ==> INCORRECT INP
		Con_St = Input_Format_Is_Incorrect;
     432:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Con_St;
}
     434:	08 95       	ret

00000436 <USART_Start>:
	TIMER_delay_ms(300);
	// combine the high and low byte
	Global_u16EPROMDoorPass= ( (u16)(Global_u8SavedDoorPassHighByte<<8) )| Global_u8SavedDoorPassLowByte;
}

void USART_Start(void){
     436:	cf 92       	push	r12
     438:	df 92       	push	r13
     43a:	ef 92       	push	r14
     43c:	ff 92       	push	r15
     43e:	0f 93       	push	r16
     440:	1f 93       	push	r17
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	00 d0       	rcall	.+0      	; 0x448 <USART_Start+0x12>
     448:	00 d0       	rcall	.+0      	; 0x44a <USART_Start+0x14>
     44a:	00 d0       	rcall	.+0      	; 0x44c <USART_Start+0x16>
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
	//Save First Receieved Input AS It MUST be '*' If not return from function
	u8 FirstReceived = USART_u8ReceiverData();
     450:	0e 94 9b 07 	call	0xf36	; 0xf36 <USART_u8ReceiverData>
	if(FirstReceived!='*')
     454:	8a 32       	cpi	r24, 0x2A	; 42
     456:	09 f0       	breq	.+2      	; 0x45a <USART_Start+0x24>
     458:	81 c0       	rjmp	.+258    	; 0x55c <USART_Start+0x126>
		return;
	//Start Display Message
	USART_voidTransmitString("Expected INP Format \" *i*x*x# \" :\r");
     45a:	80 ee       	ldi	r24, 0xE0	; 224
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 cb 07 	call	0xf96	; 0xf96 <USART_voidTransmitString>

	//Display first '*'
	USART_voidTransmitData(FirstReceived);
     462:	8a e2       	ldi	r24, 0x2A	; 42
     464:	0e 94 96 07 	call	0xf2c	; 0xf2c <USART_voidTransmitData>

	//Clear LCD to Start Displaying on it
	LCD_voidClearDisplay();
     468:	0e 94 33 04 	call	0x866	; 0x866 <LCD_voidClearDisplay>
	LCD_voidSendData('*');
     46c:	8a e2       	ldi	r24, 0x2A	; 42
     46e:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_voidSendData>
     472:	8e 01       	movw	r16, r28
     474:	0f 5f       	subi	r16, 0xFF	; 255
     476:	1f 4f       	sbci	r17, 0xFF	; 255
     478:	6e 01       	movw	r12, r28
     47a:	87 e0       	ldi	r24, 0x07	; 7
     47c:	c8 0e       	add	r12, r24
     47e:	d1 1c       	adc	r13, r1

	// Loop until reaching Max val of Input, if stucked Timer will INT and Time out
	while (Max_Num) {
		//Receive data element by element
		TimeOut TimeOut_Err=100;
		 TimeOut_Err = USART_u8TimeOUTReceiverData(&DataReceived[DataIdx]);
     480:	78 01       	movw	r14, r16
     482:	c8 01       	movw	r24, r16
     484:	0e 94 9f 07 	call	0xf3e	; 0xf3e <USART_u8TimeOUTReceiverData>
		//DataReceived[DataIdx] = USART_u8ReceiverData();
		if(TimeOut_Err == TimeOUT_Occured){
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	79 f4       	brne	.+30     	; 0x4aa <USART_Start+0x74>
			 * 1- SET TCNT1 with 0 before initializing timer
			 * 2- SET Comparing Value by TIMEOUTVALUE Macro  e.g. 40000====> 5.12 sec "time waiting before time out"
			 * 3- Initialize Timer with 1024 Prescaler
			 */
			//Sending Warning Message if TIMEOUT and return from function
			USART_voidTransmitData('\r');
     48c:	8d e0       	ldi	r24, 0x0D	; 13
     48e:	0e 94 96 07 	call	0xf2c	; 0xf2c <USART_voidTransmitData>
			USART_voidTransmitString("##ERROR: Time Out");
     492:	83 e0       	ldi	r24, 0x03	; 3
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	0e 94 cb 07 	call	0xf96	; 0xf96 <USART_voidTransmitString>
			USART_voidTransmitData('\r');
     49a:	8d e0       	ldi	r24, 0x0D	; 13
     49c:	0e 94 96 07 	call	0xf2c	; 0xf2c <USART_voidTransmitData>
			//Clear LCD
			LCD_voidClearDisplay();
     4a0:	0e 94 33 04 	call	0x866	; 0x866 <LCD_voidClearDisplay>
			//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
			Servo_voidInit();
     4a4:	0e 94 75 04 	call	0x8ea	; 0x8ea <Servo_voidInit>
			return;
     4a8:	59 c0       	rjmp	.+178    	; 0x55c <USART_Start+0x126>
		}
		//Send Received Data to Display it on Virtual Terminal
		USART_voidTransmitData(DataReceived[DataIdx] );
     4aa:	f8 01       	movw	r30, r16
     4ac:	81 91       	ld	r24, Z+
     4ae:	8f 01       	movw	r16, r30
     4b0:	0e 94 96 07 	call	0xf2c	; 0xf2c <USART_voidTransmitData>
		//Display Data on LCD
		LCD_voidSendData(DataReceived[DataIdx]);
     4b4:	f7 01       	movw	r30, r14
     4b6:	80 81       	ld	r24, Z
     4b8:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_voidSendData>
		//Increment Idx
		DataIdx++;
		//Decrement Max_Num only to loop Max_Num Inside While LOOP
		Max_Num --;
		//Set Timer Counter to 0 with Each Entered Input
		TIMER_voidTimer1SetPreloadValue(0);
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 75 06 	call	0xcea	; 0xcea <TIMER_voidTimer1SetPreloadValue>

	//Containing max enter value
	u8 Max_Num = INPUT_DECIDED_LENGTH-1;

	// Loop until reaching Max val of Input, if stucked Timer will INT and Time out
	while (Max_Num) {
     4c4:	0c 15       	cp	r16, r12
     4c6:	1d 05       	cpc	r17, r13
     4c8:	d9 f6       	brne	.-74     	; 0x480 <USART_Start+0x4a>
		//Set Timer Counter to 0 with Each Entered Input
		TIMER_voidTimer1SetPreloadValue(0);
			}

	//Display Enter in the terminal
	USART_voidTransmitData('\r');
     4ca:	8d e0       	ldi	r24, 0x0D	; 13
     4cc:	0e 94 96 07 	call	0xf2c	; 0xf2c <USART_voidTransmitData>

	//Checking Input Format
	ConditionsState Con_St=NoErrors;
	//Check all input Defined values * and i and * and * and #
	if(DataReceived[0]!='i' || DataReceived[1]!='*' || DataReceived[3]!='*' || DataReceived[5]!='#'){
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	89 36       	cpi	r24, 0x69	; 105
     4d4:	49 f4       	brne	.+18     	; 0x4e8 <USART_Start+0xb2>
     4d6:	8a 81       	ldd	r24, Y+2	; 0x02
     4d8:	8a 32       	cpi	r24, 0x2A	; 42
     4da:	31 f4       	brne	.+12     	; 0x4e8 <USART_Start+0xb2>
     4dc:	8c 81       	ldd	r24, Y+4	; 0x04
     4de:	8a 32       	cpi	r24, 0x2A	; 42
     4e0:	19 f4       	brne	.+6      	; 0x4e8 <USART_Start+0xb2>
     4e2:	8e 81       	ldd	r24, Y+6	; 0x06
     4e4:	83 32       	cpi	r24, 0x23	; 35
     4e6:	39 f0       	breq	.+14     	; 0x4f6 <USART_Start+0xc0>
		Con_St = Input_Format_Is_Incorrect;
		USART_voidTransmitString("##INCORRECT INPUT FORMAT\r");
     4e8:	85 e1       	ldi	r24, 0x15	; 21
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	0e 94 cb 07 	call	0xf96	; 0xf96 <USART_voidTransmitString>
		//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
		Servo_voidInit();
     4f0:	0e 94 75 04 	call	0x8ea	; 0x8ea <Servo_voidInit>
		return;
     4f4:	33 c0       	rjmp	.+102    	; 0x55c <USART_Start+0x126>
	}
	// Check First Undefined Val to be 1 or 2 or 3
	// also, sending it to USART_voidProcessCommand to light correct led
	// Receiving return value as indicator to uncorrect second undefined Val
	if(DataReceived[2]=='1')
     4f6:	8b 81       	ldd	r24, Y+3	; 0x03
     4f8:	81 33       	cpi	r24, 0x31	; 49
     4fa:	31 f4       	brne	.+12     	; 0x508 <USART_Start+0xd2>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT1);
     4fc:	65 e0       	ldi	r22, 0x05	; 5
     4fe:	8d 81       	ldd	r24, Y+5	; 0x05
     500:	0e 94 09 02 	call	0x412	; 0x412 <USART_voidProcessCommand>
     504:	18 2f       	mov	r17, r24
     506:	0f c0       	rjmp	.+30     	; 0x526 <USART_Start+0xf0>
	else if(DataReceived[2]=='2')
     508:	82 33       	cpi	r24, 0x32	; 50
     50a:	31 f4       	brne	.+12     	; 0x518 <USART_Start+0xe2>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT2);
     50c:	66 e0       	ldi	r22, 0x06	; 6
     50e:	8d 81       	ldd	r24, Y+5	; 0x05
     510:	0e 94 09 02 	call	0x412	; 0x412 <USART_voidProcessCommand>
     514:	18 2f       	mov	r17, r24
     516:	07 c0       	rjmp	.+14     	; 0x526 <USART_Start+0xf0>
	else if (DataReceived[2]=='3')
     518:	83 33       	cpi	r24, 0x33	; 51
     51a:	39 f4       	brne	.+14     	; 0x52a <USART_Start+0xf4>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT3);
     51c:	67 e0       	ldi	r22, 0x07	; 7
     51e:	8d 81       	ldd	r24, Y+5	; 0x05
     520:	0e 94 09 02 	call	0x412	; 0x412 <USART_voidProcessCommand>
     524:	18 2f       	mov	r17, r24
	else// If First Undefined Val is not correct
		Con_St = Input_Format_Is_Incorrect;
	//Check on Con_St Condition
	if(Con_St == Input_Format_Is_Incorrect)//There's an Error in the Format Entered
     526:	13 30       	cpi	r17, 0x03	; 3
     528:	29 f4       	brne	.+10     	; 0x534 <USART_Start+0xfe>
		USART_voidTransmitString("##INCORRECT ROOM Num or State\r");
     52a:	8f e2       	ldi	r24, 0x2F	; 47
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	0e 94 cb 07 	call	0xf96	; 0xf96 <USART_voidTransmitString>
     532:	12 c0       	rjmp	.+36     	; 0x558 <USART_Start+0x122>
	else{//Check is Completed and there's no Error
		USART_voidTransmitString("ROOM ");
     534:	8e e4       	ldi	r24, 0x4E	; 78
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 cb 07 	call	0xf96	; 0xf96 <USART_voidTransmitString>
		USART_voidTransmitData(DataReceived[2]);
     53c:	8b 81       	ldd	r24, Y+3	; 0x03
     53e:	0e 94 96 07 	call	0xf2c	; 0xf2c <USART_voidTransmitData>
		if(Con_St==ROOM_LIGHT_ON)
     542:	11 30       	cpi	r17, 0x01	; 1
     544:	29 f4       	brne	.+10     	; 0x550 <USART_Start+0x11a>
			USART_voidTransmitString(" Light Is ON\r");
     546:	84 e5       	ldi	r24, 0x54	; 84
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0e 94 cb 07 	call	0xf96	; 0xf96 <USART_voidTransmitString>
     54e:	04 c0       	rjmp	.+8      	; 0x558 <USART_Start+0x122>
		else
			USART_voidTransmitString(" Light Is OFF\r");
     550:	82 e6       	ldi	r24, 0x62	; 98
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 cb 07 	call	0xf96	; 0xf96 <USART_voidTransmitString>
	}
	//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
	Servo_voidInit();
     558:	0e 94 75 04 	call	0x8ea	; 0x8ea <Servo_voidInit>
}
     55c:	26 96       	adiw	r28, 0x06	; 6
     55e:	0f b6       	in	r0, 0x3f	; 63
     560:	f8 94       	cli
     562:	de bf       	out	0x3e, r29	; 62
     564:	0f be       	out	0x3f, r0	; 63
     566:	cd bf       	out	0x3d, r28	; 61
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	ff 90       	pop	r15
     572:	ef 90       	pop	r14
     574:	df 90       	pop	r13
     576:	cf 90       	pop	r12
     578:	08 95       	ret

0000057a <EEPROM_voidSendDataByte>:

#include "../../MCAL/TWI_Driver/TWI_interface.h"
#include "EPROM_interface.h"

void EEPROM_voidSendDataByte(u8 Copy_u8DataByte,u16 Copy_u16LocationAddress)
{	u8 Address = ((0b1010<<3) | (A2<<2) | (Copy_u16LocationAddress>>8));
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	c8 2f       	mov	r28, r24
     582:	d6 2f       	mov	r29, r22
     584:	17 2f       	mov	r17, r23

	TWI_SendStartCondition();
     586:	0e 94 28 07 	call	0xe50	; 0xe50 <TWI_SendStartCondition>
	TWI_SendSlaveAddressWithWrite(Address);
     58a:	81 2f       	mov	r24, r17
     58c:	80 65       	ori	r24, 0x50	; 80
     58e:	0e 94 49 07 	call	0xe92	; 0xe92 <TWI_SendSlaveAddressWithWrite>
	//TWI_SendSlaveAddressWithWrite(0b1010000);/**/

	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
     592:	8d 2f       	mov	r24, r29
     594:	0e 94 69 07 	call	0xed2	; 0xed2 <TWI_MasterWriteDataByte>
	TWI_MasterWriteDataByte(Copy_u8DataByte);
     598:	8c 2f       	mov	r24, r28
     59a:	0e 94 69 07 	call	0xed2	; 0xed2 <TWI_MasterWriteDataByte>
	TWI_SendStopCondition();
     59e:	0e 94 87 07 	call	0xf0e	; 0xf0e <TWI_SendStopCondition>
}
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	08 95       	ret

000005aa <EEPROM_voidReadDataByte>:

void EEPROM_voidReadDataByte(u8 *Copy_u8DataByte,u16 Copy_u16LocationAddress)
{	u8 Address = ((0b1010<<3) | (A2<<2) | (Copy_u16LocationAddress>>8));
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	8c 01       	movw	r16, r24
     5b4:	d6 2f       	mov	r29, r22
     5b6:	c7 2f       	mov	r28, r23
     5b8:	c0 65       	ori	r28, 0x50	; 80
	TWI_SendStartCondition();
     5ba:	0e 94 28 07 	call	0xe50	; 0xe50 <TWI_SendStartCondition>
	TWI_SendSlaveAddressWithWrite(Address);
     5be:	8c 2f       	mov	r24, r28
     5c0:	0e 94 49 07 	call	0xe92	; 0xe92 <TWI_SendSlaveAddressWithWrite>
	//TWI_SendSlaveAddressWithWrite(0b1010000);

	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
     5c4:	8d 2f       	mov	r24, r29
     5c6:	0e 94 69 07 	call	0xed2	; 0xed2 <TWI_MasterWriteDataByte>

	TWI_SendRepeatedStart();
     5ca:	0e 94 38 07 	call	0xe70	; 0xe70 <TWI_SendRepeatedStart>

	//TWI_MasterWriteDataByte(0b10100001);/**/
	TWI_SendSlaveAddressWithRead(Address);
     5ce:	8c 2f       	mov	r24, r28
     5d0:	0e 94 59 07 	call	0xeb2	; 0xeb2 <TWI_SendSlaveAddressWithRead>
	TWI_MasterReadDataByte(Copy_u8DataByte);
     5d4:	c8 01       	movw	r24, r16
     5d6:	0e 94 73 07 	call	0xee6	; 0xee6 <TWI_MasterReadDataByte>
	TWI_SendStopCondition();
     5da:	0e 94 87 07 	call	0xf0e	; 0xf0e <TWI_SendStopCondition>
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	08 95       	ret

000005e8 <KPD_voidInit>:
			
void KPD_voidInit(){
	
	
	// set col s output high
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL0_PIN,DIO_OUTPUT);
     5e8:	41 e0       	ldi	r20, 0x01	; 1
     5ea:	62 e0       	ldi	r22, 0x02	; 2
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL1_PIN,DIO_OUTPUT);
     5f2:	41 e0       	ldi	r20, 0x01	; 1
     5f4:	63 e0       	ldi	r22, 0x03	; 3
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL2_PIN,DIO_OUTPUT);
     5fc:	41 e0       	ldi	r20, 0x01	; 1
     5fe:	64 e0       	ldi	r22, 0x04	; 4
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_voidSetPinDirection>
	//DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL3_PIN,DIO_OUTPUT);

	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL0_PIN,DIO_HIGH);
     606:	41 e0       	ldi	r20, 0x01	; 1
     608:	62 e0       	ldi	r22, 0x02	; 2
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL1_PIN,DIO_HIGH);
     610:	41 e0       	ldi	r20, 0x01	; 1
     612:	63 e0       	ldi	r22, 0x03	; 3
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL2_PIN,DIO_HIGH);
     61a:	41 e0       	ldi	r20, 0x01	; 1
     61c:	64 e0       	ldi	r22, 0x04	; 4
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL3_PIN,DIO_HIGH);

	// set rows input pull up
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_INPUT);
     624:	40 e0       	ldi	r20, 0x00	; 0
     626:	61 e0       	ldi	r22, 0x01	; 1
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_INPUT);
     62e:	40 e0       	ldi	r20, 0x00	; 0
     630:	62 e0       	ldi	r22, 0x02	; 2
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_INPUT);
     638:	40 e0       	ldi	r20, 0x00	; 0
     63a:	63 e0       	ldi	r22, 0x03	; 3
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_INPUT);
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	64 e0       	ldi	r22, 0x04	; 4
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_HIGH);
     64c:	41 e0       	ldi	r20, 0x01	; 1
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_HIGH);
     656:	41 e0       	ldi	r20, 0x01	; 1
     658:	62 e0       	ldi	r22, 0x02	; 2
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_HIGH);
     660:	41 e0       	ldi	r20, 0x01	; 1
     662:	63 e0       	ldi	r22, 0x03	; 3
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_HIGH);
     66a:	41 e0       	ldi	r20, 0x01	; 1
     66c:	64 e0       	ldi	r22, 0x04	; 4
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
     674:	08 95       	ret

00000676 <KPD_u8GetPressedKey>:

}

u8 KPD_u8GetPressedKey(void){
     676:	4f 92       	push	r4
     678:	5f 92       	push	r5
     67a:	6f 92       	push	r6
     67c:	7f 92       	push	r7
     67e:	8f 92       	push	r8
     680:	9f 92       	push	r9
     682:	af 92       	push	r10
     684:	bf 92       	push	r11
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	63 97       	sbiw	r28, 0x13	; 19
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8Pressedkey= KPD_NO_PRESS;
	u8 Local_u8RowxValue ;


	u8 Local_u8ColumnsArray[]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN};
     6a6:	22 e0       	ldi	r18, 0x02	; 2
     6a8:	29 83       	std	Y+1, r18	; 0x01
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	9a 83       	std	Y+2, r25	; 0x02
     6ae:	84 e0       	ldi	r24, 0x04	; 4
     6b0:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
     6b2:	31 e0       	ldi	r19, 0x01	; 1
     6b4:	3c 83       	std	Y+4, r19	; 0x04
     6b6:	2d 83       	std	Y+5, r18	; 0x05
     6b8:	9e 83       	std	Y+6, r25	; 0x06
     6ba:	8f 83       	std	Y+7, r24	; 0x07

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;
     6bc:	8c e0       	ldi	r24, 0x0C	; 12
     6be:	e2 e6       	ldi	r30, 0x62	; 98
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	de 01       	movw	r26, r28
     6c4:	18 96       	adiw	r26, 0x08	; 8
     6c6:	01 90       	ld	r0, Z+
     6c8:	0d 92       	st	X+, r0
     6ca:	8a 95       	dec	r24
     6cc:	e1 f7       	brne	.-8      	; 0x6c6 <KPD_u8GetPressedKey+0x50>
     6ce:	ce 01       	movw	r24, r28
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	4c 01       	movw	r8, r24
     6d4:	a1 2c       	mov	r10, r1
     6d6:	b1 2c       	mov	r11, r1


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);
     6d8:	35 01       	movw	r6, r10
     6da:	f4 01       	movw	r30, r8
     6dc:	41 90       	ld	r4, Z+
     6de:	4f 01       	movw	r8, r30
     6e0:	40 e0       	ldi	r20, 0x00	; 0
     6e2:	64 2d       	mov	r22, r4
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
     6ea:	7e 01       	movw	r14, r28
     6ec:	f4 e0       	ldi	r31, 0x04	; 4
     6ee:	ef 0e       	add	r14, r31
     6f0:	f1 1c       	adc	r15, r1
     6f2:	00 e0       	ldi	r16, 0x00	; 0
     6f4:	10 e0       	ldi	r17, 0x00	; 0

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){

			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
     6f6:	68 01       	movw	r12, r16
     6f8:	f7 01       	movw	r30, r14
     6fa:	51 90       	ld	r5, Z+
     6fc:	7f 01       	movw	r14, r30
     6fe:	65 2d       	mov	r22, r5
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_u8GetPinValue>

			if(Local_u8RowxValue==0){
     706:	81 11       	cpse	r24, r1
     708:	17 c0       	rjmp	.+46     	; 0x738 <KPD_u8GetPressedKey+0xc2>

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
     70a:	c8 01       	movw	r24, r16
     70c:	88 0f       	add	r24, r24
     70e:	99 1f       	adc	r25, r25
     710:	c8 0e       	add	r12, r24
     712:	d9 1e       	adc	r13, r25
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	8c 0f       	add	r24, r28
     71a:	9d 1f       	adc	r25, r29
     71c:	c8 0e       	add	r12, r24
     71e:	d9 1e       	adc	r13, r25
     720:	f6 01       	movw	r30, r12
     722:	e6 0d       	add	r30, r6
     724:	f7 1d       	adc	r31, r7
     726:	17 81       	ldd	r17, Z+7	; 0x07
				while(Local_u8RowxValue==0){
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
     728:	65 2d       	mov	r22, r5
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	0e 94 33 05 	call	0xa66	; 0xa66 <DIO_u8GetPinValue>
			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

			if(Local_u8RowxValue==0){

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
				while(Local_u8RowxValue==0){
     730:	88 23       	and	r24, r24
     732:	d1 f3       	breq	.-12     	; 0x728 <KPD_u8GetPressedKey+0xb2>
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

				}

				return Local_u8Pressedkey ;
     734:	81 2f       	mov	r24, r17
     736:	13 c0       	rjmp	.+38     	; 0x75e <KPD_u8GetPressedKey+0xe8>
     738:	0f 5f       	subi	r16, 0xFF	; 255
     73a:	1f 4f       	sbci	r17, 0xFF	; 255

	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){
     73c:	04 30       	cpi	r16, 0x04	; 4
     73e:	11 05       	cpc	r17, r1
     740:	d1 f6       	brne	.-76     	; 0x6f6 <KPD_u8GetPressedKey+0x80>
			}


		}

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_HIGH);
     742:	41 e0       	ldi	r20, 0x01	; 1
     744:	64 2d       	mov	r22, r4
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
     74c:	9f ef       	ldi	r25, 0xFF	; 255
     74e:	a9 1a       	sub	r10, r25
     750:	b9 0a       	sbc	r11, r25
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){
     752:	e3 e0       	ldi	r30, 0x03	; 3
     754:	ae 16       	cp	r10, r30
     756:	b1 04       	cpc	r11, r1
     758:	09 f0       	breq	.+2      	; 0x75c <KPD_u8GetPressedKey+0xe6>
     75a:	be cf       	rjmp	.-132    	; 0x6d8 <KPD_u8GetPressedKey+0x62>


	}


	return Local_u8Pressedkey ;
     75c:	8a ea       	ldi	r24, 0xAA	; 170
     75e:	63 96       	adiw	r28, 0x13	; 19
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	df 90       	pop	r13
     778:	cf 90       	pop	r12
     77a:	bf 90       	pop	r11
     77c:	af 90       	pop	r10
     77e:	9f 90       	pop	r9
     780:	8f 90       	pop	r8
     782:	7f 90       	pop	r7
     784:	6f 90       	pop	r6
     786:	5f 90       	pop	r5
     788:	4f 90       	pop	r4
     78a:	08 95       	ret

0000078c <LCD_voidSendData>:
		LCD_voidSendCommand(0b00000010);
		Local_u8AddressCounter=0;
		
	}
	else
		Local_u8AddressCounter++;
     78c:	cf 93       	push	r28
     78e:	c8 2f       	mov	r28, r24
     790:	41 e0       	ldi	r20, 0x01	; 1
     792:	65 e0       	ldi	r22, 0x05	; 5
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	66 e0       	ldi	r22, 0x06	; 6
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
     7a4:	6c 2f       	mov	r22, r28
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	0e 94 23 05 	call	0xa46	; 0xa46 <DIO_voidSetPortValue>
     7ac:	41 e0       	ldi	r20, 0x01	; 1
     7ae:	67 e0       	ldi	r22, 0x07	; 7
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
     7b6:	8f e9       	ldi	r24, 0x9F	; 159
     7b8:	9f e0       	ldi	r25, 0x0F	; 15
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	f1 f7       	brne	.-4      	; 0x7ba <LCD_voidSendData+0x2e>
     7be:	00 c0       	rjmp	.+0      	; 0x7c0 <LCD_voidSendData+0x34>
     7c0:	00 00       	nop
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	67 e0       	ldi	r22, 0x07	; 7
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret

000007d0 <LCD_voidSendCommand>:
     7d0:	cf 93       	push	r28
     7d2:	c8 2f       	mov	r28, r24
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	65 e0       	ldi	r22, 0x05	; 5
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	66 e0       	ldi	r22, 0x06	; 6
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
     7e8:	6c 2f       	mov	r22, r28
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	0e 94 23 05 	call	0xa46	; 0xa46 <DIO_voidSetPortValue>
     7f0:	41 e0       	ldi	r20, 0x01	; 1
     7f2:	67 e0       	ldi	r22, 0x07	; 7
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
     7fa:	8f e9       	ldi	r24, 0x9F	; 159
     7fc:	9f e0       	ldi	r25, 0x0F	; 15
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <LCD_voidSendCommand+0x2e>
     802:	00 c0       	rjmp	.+0      	; 0x804 <LCD_voidSendCommand+0x34>
     804:	00 00       	nop
     806:	40 e0       	ldi	r20, 0x00	; 0
     808:	67 e0       	ldi	r22, 0x07	; 7
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <DIO_voidSetPinValue>
     810:	cf 91       	pop	r28
     812:	08 95       	ret

00000814 <LCD_voidInit>:
     814:	6f ef       	ldi	r22, 0xFF	; 255
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	0e 94 13 05 	call	0xa26	; 0xa26 <DIO_voidSetPortDirection>
     81c:	41 e0       	ldi	r20, 0x01	; 1
     81e:	65 e0       	ldi	r22, 0x05	; 5
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_voidSetPinDirection>
     826:	41 e0       	ldi	r20, 0x01	; 1
     828:	66 e0       	ldi	r22, 0x06	; 6
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_voidSetPinDirection>
     830:	41 e0       	ldi	r20, 0x01	; 1
     832:	67 e0       	ldi	r22, 0x07	; 7
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	0e 94 b7 04 	call	0x96e	; 0x96e <DIO_voidSetPinDirection>
     83a:	2f ef       	ldi	r18, 0xFF	; 255
     83c:	89 ef       	ldi	r24, 0xF9	; 249
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	21 50       	subi	r18, 0x01	; 1
     842:	80 40       	sbci	r24, 0x00	; 0
     844:	90 40       	sbci	r25, 0x00	; 0
     846:	e1 f7       	brne	.-8      	; 0x840 <LCD_voidInit+0x2c>
     848:	00 c0       	rjmp	.+0      	; 0x84a <LCD_voidInit+0x36>
     84a:	00 00       	nop
     84c:	88 e3       	ldi	r24, 0x38	; 56
     84e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_voidSendCommand>
     852:	8c e0       	ldi	r24, 0x0C	; 12
     854:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_voidSendCommand>
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_voidSendCommand>
     85e:	86 e0       	ldi	r24, 0x06	; 6
     860:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_voidSendCommand>
     864:	08 95       	ret

00000866 <LCD_voidClearDisplay>:
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_voidSendCommand>
     86c:	08 95       	ret

0000086e <LCD_voidGoTOXY>:
     86e:	90 e4       	ldi	r25, 0x40	; 64
     870:	89 9f       	mul	r24, r25
     872:	60 0d       	add	r22, r0
     874:	11 24       	eor	r1, r1
     876:	86 2f       	mov	r24, r22
     878:	80 68       	ori	r24, 0x80	; 128
     87a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <LCD_voidSendCommand>
     87e:	08 95       	ret

00000880 <LCD_voidSendString>:
		
		
}

void LCD_voidSendString(u8* Copy_pcString)
{
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	fc 01       	movw	r30, r24
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
     888:	80 81       	ld	r24, Z
     88a:	88 23       	and	r24, r24
     88c:	59 f0       	breq	.+22     	; 0x8a4 <LCD_voidSendString+0x24>
     88e:	8f 01       	movw	r16, r30
     890:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
     892:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_voidSendData>
		Local_u8Index++;
     896:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_voidSendString(u8* Copy_pcString)
{
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
     898:	f8 01       	movw	r30, r16
     89a:	ec 0f       	add	r30, r28
     89c:	f1 1d       	adc	r31, r1
     89e:	80 81       	ld	r24, Z
     8a0:	81 11       	cpse	r24, r1
     8a2:	f7 cf       	rjmp	.-18     	; 0x892 <LCD_voidSendString+0x12>
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
		Local_u8Index++;
	}
}
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	08 95       	ret

000008ac <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	2a 97       	sbiw	r28, 0x0a	; 10
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	dc 01       	movw	r26, r24
     8c2:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     8c4:	4a e0       	ldi	r20, 0x0A	; 10
     8c6:	be 01       	movw	r22, r28
     8c8:	6f 5f       	subi	r22, 0xFF	; 255
     8ca:	7f 4f       	sbci	r23, 0xFF	; 255
     8cc:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__itoa_ncheck>
	u8 Local_u8Str[10];
	itoa(Copy_u32Number, Local_u8Str,10);
	LCD_voidSendString(Local_u8Str);
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	0e 94 40 04 	call	0x880	; 0x880 <LCD_voidSendString>

}
     8d8:	2a 96       	adiw	r28, 0x0a	; 10
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	de bf       	out	0x3e, r29	; 62
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	cd bf       	out	0x3d, r28	; 61
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <Servo_voidInit>:

#include"../../MCAL/TIMER_Driver/TIMER_Interface.h"
 u16 Ticks=0;
 void Servo_voidInit(void){
	 //Using Timer 1 PWM Mode,  prescaller 8 ==>010
		TIMER_voidTimer1Init(PWM,10);
     8ea:	6a e0       	ldi	r22, 0x0A	; 10
     8ec:	82 e0       	ldi	r24, 0x02	; 2
     8ee:	0e 94 01 06 	call	0xc02	; 0xc02 <TIMER_voidTimer1Init>
	 // Servo Total time = 20ms
		TIMER_voidSetOverFlow(20000);
     8f2:	80 e2       	ldi	r24, 0x20	; 32
     8f4:	9e e4       	ldi	r25, 0x4E	; 78
     8f6:	0e 94 6f 06 	call	0xcde	; 0xcde <TIMER_voidSetOverFlow>
     8fa:	08 95       	ret

000008fc <Servo_voidDegree>:

void Servo_voidDegree(u8 Copy_u8Degree){
	if(Copy_u8Degree>180)
		Copy_u8Degree = 180;
	f32 Ton = (1/180.0) * Copy_u8Degree + 1;
	Ticks = Ton * 1000;
     8fc:	85 3b       	cpi	r24, 0xB5	; 181
     8fe:	08 f0       	brcs	.+2      	; 0x902 <Servo_voidDegree+0x6>
     900:	84 eb       	ldi	r24, 0xB4	; 180
     902:	68 2f       	mov	r22, r24
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatsisf>
     90e:	21 e6       	ldi	r18, 0x61	; 97
     910:	3b e0       	ldi	r19, 0x0B	; 11
     912:	46 eb       	ldi	r20, 0xB6	; 182
     914:	5b e3       	ldi	r21, 0x3B	; 59
     916:	0e 94 ad 09 	call	0x135a	; 0x135a <__mulsf3>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e8       	ldi	r20, 0x80	; 128
     920:	5f e3       	ldi	r21, 0x3F	; 63
     922:	0e 94 12 08 	call	0x1024	; 0x1024 <__addsf3>
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	4a e7       	ldi	r20, 0x7A	; 122
     92c:	54 e4       	ldi	r21, 0x44	; 68
     92e:	0e 94 ad 09 	call	0x135a	; 0x135a <__mulsf3>
     932:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__fixunssfsi>
     936:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <Ticks+0x1>
     93a:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <Ticks>
	TIMER_voidTimer1ChannelASetCompareValue(Ticks);
     93e:	cb 01       	movw	r24, r22
     940:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_voidTimer1ChannelASetCompareValue>
     944:	08 95       	ret

00000946 <ADC_voidInit>:
	2- 8bit res --> left adjustment
	3- prescaler
	4- enable ADC
	*/
	// use AVCC
	SET_BIT(ADMUX,6);
     946:	3e 9a       	sbi	0x07, 6	; 7
	CLR_BIT(ADMUX,7);
     948:	3f 98       	cbi	0x07, 7	; 7
	// left adjust
	SET_BIT(ADMUX,5);
     94a:	3d 9a       	sbi	0x07, 5	; 7
	// prescaler  --> /64
	CLR_BIT(ADCSRA,0);
     94c:	30 98       	cbi	0x06, 0	; 6
	SET_BIT(ADCSRA,1);
     94e:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,2);
     950:	32 9a       	sbi	0x06, 2	; 6
	// enable 
	SET_BIT(ADCSRA,7);
     952:	37 9a       	sbi	0x06, 7	; 6
     954:	08 95       	ret

00000956 <ADC_u8StartConversion>:
	
}

u8 ADC_u8StartConversion(u8 Copy_u8ChannelNumber){
	// channel select
	ADMUX &= 0b11100000;
     956:	97 b1       	in	r25, 0x07	; 7
     958:	90 7e       	andi	r25, 0xE0	; 224
     95a:	97 b9       	out	0x07, r25	; 7
	ADMUX |=Copy_u8ChannelNumber;
     95c:	97 b1       	in	r25, 0x07	; 7
     95e:	89 2b       	or	r24, r25
     960:	87 b9       	out	0x07, r24	; 7
	
	// start conversion
	SET_BIT(ADCSRA,6);
     962:	36 9a       	sbi	0x06, 6	; 6
	
	// wait until conversion complete
	// by checking the flag
	while(GET_BIT(ADCSRA,4)==0);
     964:	34 9b       	sbis	0x06, 4	; 6
     966:	fe cf       	rjmp	.-4      	; 0x964 <ADC_u8StartConversion+0xe>
	
	//clear flag 
	SET_BIT(ADCSRA,4);
     968:	34 9a       	sbi	0x06, 4	; 6
	
	return ADCH;
     96a:	85 b1       	in	r24, 0x05	; 5
}
     96c:	08 95       	ret

0000096e <DIO_voidSetPinDirection>:


void DIO_voidSetPinDirection(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinState ){

	volatile u8* Local_u8PTR_DDRx;
	switch(Copy_u8PortName){
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	49 f0       	breq	.+18     	; 0x984 <DIO_voidSetPinDirection+0x16>
     972:	28 f0       	brcs	.+10     	; 0x97e <DIO_voidSetPinDirection+0x10>
     974:	82 30       	cpi	r24, 0x02	; 2
     976:	49 f0       	breq	.+18     	; 0x98a <DIO_voidSetPinDirection+0x1c>
     978:	83 30       	cpi	r24, 0x03	; 3
     97a:	51 f0       	breq	.+20     	; 0x990 <DIO_voidSetPinDirection+0x22>
     97c:	0b c0       	rjmp	.+22     	; 0x994 <DIO_voidSetPinDirection+0x26>

		case DIO_PORTA:
		Local_u8PTR_DDRx=&DDRA;
     97e:	ea e3       	ldi	r30, 0x3A	; 58
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	08 c0       	rjmp	.+16     	; 0x994 <DIO_voidSetPinDirection+0x26>
		break;
		case DIO_PORTB:
		Local_u8PTR_DDRx=&DDRB;
     984:	e7 e3       	ldi	r30, 0x37	; 55
     986:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     988:	05 c0       	rjmp	.+10     	; 0x994 <DIO_voidSetPinDirection+0x26>
		case DIO_PORTC:
		Local_u8PTR_DDRx=&DDRC;
     98a:	e4 e3       	ldi	r30, 0x34	; 52
     98c:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     98e:	02 c0       	rjmp	.+4      	; 0x994 <DIO_voidSetPinDirection+0x26>
		case DIO_PORTD:
		Local_u8PTR_DDRx=&DDRD;
     990:	e1 e3       	ldi	r30, 0x31	; 49
     992:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinState){
     994:	44 23       	and	r20, r20
     996:	69 f0       	breq	.+26     	; 0x9b2 <DIO_voidSetPinDirection+0x44>
     998:	41 30       	cpi	r20, 0x01	; 1
     99a:	b1 f4       	brne	.+44     	; 0x9c8 <DIO_voidSetPinDirection+0x5a>

		case DIO_OUTPUT:
		SET_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
     99c:	20 81       	ld	r18, Z
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <DIO_voidSetPinDirection+0x3a>
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	6a 95       	dec	r22
     9aa:	e2 f7       	brpl	.-8      	; 0x9a4 <DIO_voidSetPinDirection+0x36>
     9ac:	82 2b       	or	r24, r18
     9ae:	80 83       	st	Z, r24
		break;
     9b0:	08 95       	ret
		case DIO_INPUT:
		CLR_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
     9b2:	20 81       	ld	r18, Z
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <DIO_voidSetPinDirection+0x50>
     9ba:	88 0f       	add	r24, r24
     9bc:	99 1f       	adc	r25, r25
     9be:	6a 95       	dec	r22
     9c0:	e2 f7       	brpl	.-8      	; 0x9ba <DIO_voidSetPinDirection+0x4c>
     9c2:	80 95       	com	r24
     9c4:	82 23       	and	r24, r18
     9c6:	80 83       	st	Z, r24
     9c8:	08 95       	ret

000009ca <DIO_voidSetPinValue>:

}
void DIO_voidSetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinValue ){

	volatile u8* Local_u8PTR_PORTx;
	switch(Copy_u8PortName){
     9ca:	81 30       	cpi	r24, 0x01	; 1
     9cc:	49 f0       	breq	.+18     	; 0x9e0 <DIO_voidSetPinValue+0x16>
     9ce:	28 f0       	brcs	.+10     	; 0x9da <DIO_voidSetPinValue+0x10>
     9d0:	82 30       	cpi	r24, 0x02	; 2
     9d2:	49 f0       	breq	.+18     	; 0x9e6 <DIO_voidSetPinValue+0x1c>
     9d4:	83 30       	cpi	r24, 0x03	; 3
     9d6:	51 f0       	breq	.+20     	; 0x9ec <DIO_voidSetPinValue+0x22>
     9d8:	0b c0       	rjmp	.+22     	; 0x9f0 <DIO_voidSetPinValue+0x26>

		case DIO_PORTA:
		Local_u8PTR_PORTx=&PORTA;
     9da:	eb e3       	ldi	r30, 0x3B	; 59
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	08 c0       	rjmp	.+16     	; 0x9f0 <DIO_voidSetPinValue+0x26>
		break;
		case DIO_PORTB:
		Local_u8PTR_PORTx=&PORTB;
     9e0:	e8 e3       	ldi	r30, 0x38	; 56
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <DIO_voidSetPinValue+0x26>
		case DIO_PORTC:
		Local_u8PTR_PORTx=&PORTC;
     9e6:	e5 e3       	ldi	r30, 0x35	; 53
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <DIO_voidSetPinValue+0x26>
		case DIO_PORTD:
		Local_u8PTR_PORTx=&PORTD;
     9ec:	e2 e3       	ldi	r30, 0x32	; 50
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinValue){
     9f0:	44 23       	and	r20, r20
     9f2:	69 f0       	breq	.+26     	; 0xa0e <DIO_voidSetPinValue+0x44>
     9f4:	41 30       	cpi	r20, 0x01	; 1
     9f6:	b1 f4       	brne	.+44     	; 0xa24 <DIO_voidSetPinValue+0x5a>

		case DIO_HIGH:
		SET_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
     9f8:	20 81       	ld	r18, Z
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <DIO_voidSetPinValue+0x3a>
     a00:	88 0f       	add	r24, r24
     a02:	99 1f       	adc	r25, r25
     a04:	6a 95       	dec	r22
     a06:	e2 f7       	brpl	.-8      	; 0xa00 <DIO_voidSetPinValue+0x36>
     a08:	82 2b       	or	r24, r18
     a0a:	80 83       	st	Z, r24
		break;
     a0c:	08 95       	ret
		case DIO_LOW:
		CLR_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
     a0e:	20 81       	ld	r18, Z
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <DIO_voidSetPinValue+0x50>
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	6a 95       	dec	r22
     a1c:	e2 f7       	brpl	.-8      	; 0xa16 <DIO_voidSetPinValue+0x4c>
     a1e:	80 95       	com	r24
     a20:	82 23       	and	r24, r18
     a22:	80 83       	st	Z, r24
     a24:	08 95       	ret

00000a26 <DIO_voidSetPortDirection>:

}

void DIO_voidSetPortDirection(u8 Copy_u8PortName ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
     a26:	81 30       	cpi	r24, 0x01	; 1
     a28:	41 f0       	breq	.+16     	; 0xa3a <DIO_voidSetPortDirection+0x14>
     a2a:	28 f0       	brcs	.+10     	; 0xa36 <DIO_voidSetPortDirection+0x10>
     a2c:	82 30       	cpi	r24, 0x02	; 2
     a2e:	39 f0       	breq	.+14     	; 0xa3e <DIO_voidSetPortDirection+0x18>
     a30:	83 30       	cpi	r24, 0x03	; 3
     a32:	39 f0       	breq	.+14     	; 0xa42 <DIO_voidSetPortDirection+0x1c>
     a34:	08 95       	ret

		case DIO_PORTA:
		DDRA=Copy_u8PortValue;
     a36:	6a bb       	out	0x1a, r22	; 26
		break;
     a38:	08 95       	ret
		case DIO_PORTB:
		DDRB=Copy_u8PortValue;
     a3a:	67 bb       	out	0x17, r22	; 23
		break;
     a3c:	08 95       	ret
		case DIO_PORTC:
		DDRC=Copy_u8PortValue;
     a3e:	64 bb       	out	0x14, r22	; 20
		break;
     a40:	08 95       	ret
		case DIO_PORTD:
		DDRD=Copy_u8PortValue;
     a42:	61 bb       	out	0x11, r22	; 17
     a44:	08 95       	ret

00000a46 <DIO_voidSetPortValue>:
	}

}
void DIO_voidSetPortValue(u8 Copy_u8PortName  ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
     a46:	81 30       	cpi	r24, 0x01	; 1
     a48:	41 f0       	breq	.+16     	; 0xa5a <DIO_voidSetPortValue+0x14>
     a4a:	28 f0       	brcs	.+10     	; 0xa56 <DIO_voidSetPortValue+0x10>
     a4c:	82 30       	cpi	r24, 0x02	; 2
     a4e:	39 f0       	breq	.+14     	; 0xa5e <DIO_voidSetPortValue+0x18>
     a50:	83 30       	cpi	r24, 0x03	; 3
     a52:	39 f0       	breq	.+14     	; 0xa62 <DIO_voidSetPortValue+0x1c>
     a54:	08 95       	ret

		case DIO_PORTA:
		PORTA=Copy_u8PortValue;
     a56:	6b bb       	out	0x1b, r22	; 27
		break;
     a58:	08 95       	ret
		case DIO_PORTB:
		PORTB=Copy_u8PortValue;
     a5a:	68 bb       	out	0x18, r22	; 24
		break;
     a5c:	08 95       	ret
		case DIO_PORTC:
		PORTC=Copy_u8PortValue;
     a5e:	65 bb       	out	0x15, r22	; 21
		break;
     a60:	08 95       	ret
		case DIO_PORTD:
		PORTD=Copy_u8PortValue;
     a62:	62 bb       	out	0x12, r22	; 18
     a64:	08 95       	ret

00000a66 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber){

	
	u8 Local_u8PinValue;
	switch(Copy_u8PortName){
     a66:	81 30       	cpi	r24, 0x01	; 1
     a68:	81 f0       	breq	.+32     	; 0xa8a <DIO_u8GetPinValue+0x24>
     a6a:	28 f0       	brcs	.+10     	; 0xa76 <DIO_u8GetPinValue+0x10>
     a6c:	82 30       	cpi	r24, 0x02	; 2
     a6e:	b9 f0       	breq	.+46     	; 0xa9e <DIO_u8GetPinValue+0x38>
     a70:	83 30       	cpi	r24, 0x03	; 3
     a72:	f9 f0       	breq	.+62     	; 0xab2 <DIO_u8GetPinValue+0x4c>
     a74:	27 c0       	rjmp	.+78     	; 0xac4 <DIO_u8GetPinValue+0x5e>

		case DIO_PORTA:
		Local_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
     a76:	89 b3       	in	r24, 0x19	; 25
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <DIO_u8GetPinValue+0x1a>
     a7c:	95 95       	asr	r25
     a7e:	87 95       	ror	r24
     a80:	6a 95       	dec	r22
     a82:	e2 f7       	brpl	.-8      	; 0xa7c <DIO_u8GetPinValue+0x16>
     a84:	98 2f       	mov	r25, r24
     a86:	91 70       	andi	r25, 0x01	; 1
		break;
     a88:	1d c0       	rjmp	.+58     	; 0xac4 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTB:
		Local_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
     a8a:	86 b3       	in	r24, 0x16	; 22
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <DIO_u8GetPinValue+0x2e>
     a90:	95 95       	asr	r25
     a92:	87 95       	ror	r24
     a94:	6a 95       	dec	r22
     a96:	e2 f7       	brpl	.-8      	; 0xa90 <DIO_u8GetPinValue+0x2a>
     a98:	98 2f       	mov	r25, r24
     a9a:	91 70       	andi	r25, 0x01	; 1
		break;
     a9c:	13 c0       	rjmp	.+38     	; 0xac4 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTC:
		Local_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
     a9e:	83 b3       	in	r24, 0x13	; 19
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <DIO_u8GetPinValue+0x42>
     aa4:	95 95       	asr	r25
     aa6:	87 95       	ror	r24
     aa8:	6a 95       	dec	r22
     aaa:	e2 f7       	brpl	.-8      	; 0xaa4 <DIO_u8GetPinValue+0x3e>
     aac:	98 2f       	mov	r25, r24
     aae:	91 70       	andi	r25, 0x01	; 1
		break;
     ab0:	09 c0       	rjmp	.+18     	; 0xac4 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTD:
		Local_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
     ab2:	80 b3       	in	r24, 0x10	; 16
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <DIO_u8GetPinValue+0x56>
     ab8:	95 95       	asr	r25
     aba:	87 95       	ror	r24
     abc:	6a 95       	dec	r22
     abe:	e2 f7       	brpl	.-8      	; 0xab8 <DIO_u8GetPinValue+0x52>
     ac0:	98 2f       	mov	r25, r24
     ac2:	91 70       	andi	r25, 0x01	; 1

	

	return Local_u8PinValue;

}
     ac4:	89 2f       	mov	r24, r25
     ac6:	08 95       	ret

00000ac8 <__vector_1>:
void EXTI_voidSetCallBackINT2(void(*NotifyFunc2)(void)){
	
	Global_pvINT2NotifyFunc=NotifyFunc2;
}

ISR(INT0_vect){
     ac8:	1f 92       	push	r1
     aca:	0f 92       	push	r0
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	0f 92       	push	r0
     ad0:	11 24       	eor	r1, r1
     ad2:	2f 93       	push	r18
     ad4:	3f 93       	push	r19
     ad6:	4f 93       	push	r20
     ad8:	5f 93       	push	r21
     ada:	6f 93       	push	r22
     adc:	7f 93       	push	r23
     ade:	8f 93       	push	r24
     ae0:	9f 93       	push	r25
     ae2:	af 93       	push	r26
     ae4:	bf 93       	push	r27
     ae6:	ef 93       	push	r30
     ae8:	ff 93       	push	r31
	
	if(Global_pvINT0NotifyFunc!=NULL_PTR)
     aea:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <Global_pvINT0NotifyFunc>
     aee:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <Global_pvINT0NotifyFunc+0x1>
     af2:	30 97       	sbiw	r30, 0x00	; 0
     af4:	09 f0       	breq	.+2      	; 0xaf8 <__vector_1+0x30>
			Global_pvINT0NotifyFunc();
     af6:	09 95       	icall
	
}
     af8:	ff 91       	pop	r31
     afa:	ef 91       	pop	r30
     afc:	bf 91       	pop	r27
     afe:	af 91       	pop	r26
     b00:	9f 91       	pop	r25
     b02:	8f 91       	pop	r24
     b04:	7f 91       	pop	r23
     b06:	6f 91       	pop	r22
     b08:	5f 91       	pop	r21
     b0a:	4f 91       	pop	r20
     b0c:	3f 91       	pop	r19
     b0e:	2f 91       	pop	r18
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	1f 90       	pop	r1
     b18:	18 95       	reti

00000b1a <__vector_2>:

ISR(INT1_vect){
     b1a:	1f 92       	push	r1
     b1c:	0f 92       	push	r0
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	0f 92       	push	r0
     b22:	11 24       	eor	r1, r1
     b24:	2f 93       	push	r18
     b26:	3f 93       	push	r19
     b28:	4f 93       	push	r20
     b2a:	5f 93       	push	r21
     b2c:	6f 93       	push	r22
     b2e:	7f 93       	push	r23
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	af 93       	push	r26
     b36:	bf 93       	push	r27
     b38:	ef 93       	push	r30
     b3a:	ff 93       	push	r31
	
	if(Global_pvINT1NotifyFunc!=NULL_PTR)
     b3c:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <Global_pvINT1NotifyFunc>
     b40:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <Global_pvINT1NotifyFunc+0x1>
     b44:	30 97       	sbiw	r30, 0x00	; 0
     b46:	09 f0       	breq	.+2      	; 0xb4a <__vector_2+0x30>
			Global_pvINT1NotifyFunc();
     b48:	09 95       	icall
	
}
     b4a:	ff 91       	pop	r31
     b4c:	ef 91       	pop	r30
     b4e:	bf 91       	pop	r27
     b50:	af 91       	pop	r26
     b52:	9f 91       	pop	r25
     b54:	8f 91       	pop	r24
     b56:	7f 91       	pop	r23
     b58:	6f 91       	pop	r22
     b5a:	5f 91       	pop	r21
     b5c:	4f 91       	pop	r20
     b5e:	3f 91       	pop	r19
     b60:	2f 91       	pop	r18
     b62:	0f 90       	pop	r0
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	0f 90       	pop	r0
     b68:	1f 90       	pop	r1
     b6a:	18 95       	reti

00000b6c <__vector_3>:
ISR(INT2_vect){
     b6c:	1f 92       	push	r1
     b6e:	0f 92       	push	r0
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	0f 92       	push	r0
     b74:	11 24       	eor	r1, r1
     b76:	2f 93       	push	r18
     b78:	3f 93       	push	r19
     b7a:	4f 93       	push	r20
     b7c:	5f 93       	push	r21
     b7e:	6f 93       	push	r22
     b80:	7f 93       	push	r23
     b82:	8f 93       	push	r24
     b84:	9f 93       	push	r25
     b86:	af 93       	push	r26
     b88:	bf 93       	push	r27
     b8a:	ef 93       	push	r30
     b8c:	ff 93       	push	r31
	
	if(Global_pvINT2NotifyFunc!=NULL_PTR)
     b8e:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <Global_pvINT2NotifyFunc>
     b92:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <Global_pvINT2NotifyFunc+0x1>
     b96:	30 97       	sbiw	r30, 0x00	; 0
     b98:	09 f0       	breq	.+2      	; 0xb9c <__vector_3+0x30>
			Global_pvINT2NotifyFunc();
     b9a:	09 95       	icall
	
     b9c:	ff 91       	pop	r31
     b9e:	ef 91       	pop	r30
     ba0:	bf 91       	pop	r27
     ba2:	af 91       	pop	r26
     ba4:	9f 91       	pop	r25
     ba6:	8f 91       	pop	r24
     ba8:	7f 91       	pop	r23
     baa:	6f 91       	pop	r22
     bac:	5f 91       	pop	r21
     bae:	4f 91       	pop	r20
     bb0:	3f 91       	pop	r19
     bb2:	2f 91       	pop	r18
     bb4:	0f 90       	pop	r0
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	0f 90       	pop	r0
     bba:	1f 90       	pop	r1
     bbc:	18 95       	reti

00000bbe <GIE_voidEnableGlobalInt>:
#include<avr/io.h>
#include"../../LIB/BIT_MATH.h"

void GIE_voidEnableGlobalInt(void){
	
	SET_BIT(SREG,7);
     bbe:	8f b7       	in	r24, 0x3f	; 63
     bc0:	80 68       	ori	r24, 0x80	; 128
     bc2:	8f bf       	out	0x3f, r24	; 63
     bc4:	08 95       	ret

00000bc6 <TIMER_delay_ms>:
	GLOBAL_ICU_ISR = Copy_PTR_ICUFunction;
}

u16 ICU_u16ReadInputCapture(void){
	return ICR1;
}
     bc6:	0f 93       	push	r16
     bc8:	1f 93       	push	r17
     bca:	8b 01       	movw	r16, r22
     bcc:	9c 01       	movw	r18, r24
     bce:	67 2b       	or	r22, r23
     bd0:	68 2b       	or	r22, r24
     bd2:	69 2b       	or	r22, r25
     bd4:	69 f4       	brne	.+26     	; 0xbf0 <TIMER_delay_ms+0x2a>
     bd6:	12 c0       	rjmp	.+36     	; 0xbfc <TIMER_delay_ms+0x36>
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	f1 f7       	brne	.-4      	; 0xbd8 <TIMER_delay_ms+0x12>
     bdc:	4f 5f       	subi	r20, 0xFF	; 255
     bde:	5f 4f       	sbci	r21, 0xFF	; 255
     be0:	6f 4f       	sbci	r22, 0xFF	; 255
     be2:	7f 4f       	sbci	r23, 0xFF	; 255
     be4:	04 17       	cp	r16, r20
     be6:	15 07       	cpc	r17, r21
     be8:	26 07       	cpc	r18, r22
     bea:	37 07       	cpc	r19, r23
     bec:	21 f4       	brne	.+8      	; 0xbf6 <TIMER_delay_ms+0x30>
     bee:	06 c0       	rjmp	.+12     	; 0xbfc <TIMER_delay_ms+0x36>
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	ba 01       	movw	r22, r20
     bf6:	8e e5       	ldi	r24, 0x5E	; 94
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	ee cf       	rjmp	.-36     	; 0xbd8 <TIMER_delay_ms+0x12>
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	08 95       	ret

00000c02 <TIMER_voidTimer1Init>:
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	a1 f0       	breq	.+40     	; 0xc2e <TIMER_voidTimer1Init+0x2c>
     c06:	18 f0       	brcs	.+6      	; 0xc0e <TIMER_voidTimer1Init+0xc>
     c08:	82 30       	cpi	r24, 0x02	; 2
     c0a:	09 f1       	breq	.+66     	; 0xc4e <TIMER_voidTimer1Init+0x4c>
     c0c:	32 c0       	rjmp	.+100    	; 0xc72 <TIMER_voidTimer1Init+0x70>
     c0e:	8f b5       	in	r24, 0x2f	; 47
     c10:	8e 7f       	andi	r24, 0xFE	; 254
     c12:	8f bd       	out	0x2f, r24	; 47
     c14:	8f b5       	in	r24, 0x2f	; 47
     c16:	8d 7f       	andi	r24, 0xFD	; 253
     c18:	8f bd       	out	0x2f, r24	; 47
     c1a:	8e b5       	in	r24, 0x2e	; 46
     c1c:	87 7f       	andi	r24, 0xF7	; 247
     c1e:	8e bd       	out	0x2e, r24	; 46
     c20:	8e b5       	in	r24, 0x2e	; 46
     c22:	8f 7e       	andi	r24, 0xEF	; 239
     c24:	8e bd       	out	0x2e, r24	; 46
     c26:	89 b7       	in	r24, 0x39	; 57
     c28:	84 60       	ori	r24, 0x04	; 4
     c2a:	89 bf       	out	0x39, r24	; 57
     c2c:	22 c0       	rjmp	.+68     	; 0xc72 <TIMER_voidTimer1Init+0x70>
     c2e:	8f b5       	in	r24, 0x2f	; 47
     c30:	8e 7f       	andi	r24, 0xFE	; 254
     c32:	8f bd       	out	0x2f, r24	; 47
     c34:	8f b5       	in	r24, 0x2f	; 47
     c36:	8d 7f       	andi	r24, 0xFD	; 253
     c38:	8f bd       	out	0x2f, r24	; 47
     c3a:	8e b5       	in	r24, 0x2e	; 46
     c3c:	88 60       	ori	r24, 0x08	; 8
     c3e:	8e bd       	out	0x2e, r24	; 46
     c40:	8e b5       	in	r24, 0x2e	; 46
     c42:	8f 7e       	andi	r24, 0xEF	; 239
     c44:	8e bd       	out	0x2e, r24	; 46
     c46:	89 b7       	in	r24, 0x39	; 57
     c48:	80 61       	ori	r24, 0x10	; 16
     c4a:	89 bf       	out	0x39, r24	; 57
     c4c:	12 c0       	rjmp	.+36     	; 0xc72 <TIMER_voidTimer1Init+0x70>
     c4e:	8f b5       	in	r24, 0x2f	; 47
     c50:	8f 7b       	andi	r24, 0xBF	; 191
     c52:	8f bd       	out	0x2f, r24	; 47
     c54:	8f b5       	in	r24, 0x2f	; 47
     c56:	80 68       	ori	r24, 0x80	; 128
     c58:	8f bd       	out	0x2f, r24	; 47
     c5a:	8f b5       	in	r24, 0x2f	; 47
     c5c:	8e 7f       	andi	r24, 0xFE	; 254
     c5e:	8f bd       	out	0x2f, r24	; 47
     c60:	8f b5       	in	r24, 0x2f	; 47
     c62:	82 60       	ori	r24, 0x02	; 2
     c64:	8f bd       	out	0x2f, r24	; 47
     c66:	8e b5       	in	r24, 0x2e	; 46
     c68:	88 60       	ori	r24, 0x08	; 8
     c6a:	8e bd       	out	0x2e, r24	; 46
     c6c:	8e b5       	in	r24, 0x2e	; 46
     c6e:	80 61       	ori	r24, 0x10	; 16
     c70:	8e bd       	out	0x2e, r24	; 46
     c72:	e0 e0       	ldi	r30, 0x00	; 0
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	4d ec       	ldi	r20, 0xCD	; 205
     c78:	a1 e0       	ldi	r26, 0x01	; 1
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	64 9f       	mul	r22, r20
     c7e:	81 2d       	mov	r24, r1
     c80:	11 24       	eor	r1, r1
     c82:	86 95       	lsr	r24
     c84:	86 95       	lsr	r24
     c86:	86 95       	lsr	r24
     c88:	88 0f       	add	r24, r24
     c8a:	98 2f       	mov	r25, r24
     c8c:	99 0f       	add	r25, r25
     c8e:	99 0f       	add	r25, r25
     c90:	89 0f       	add	r24, r25
     c92:	96 2f       	mov	r25, r22
     c94:	98 1b       	sub	r25, r24
     c96:	91 30       	cpi	r25, 0x01	; 1
     c98:	59 f4       	brne	.+22     	; 0xcb0 <TIMER_voidTimer1Init+0xae>
     c9a:	2e b5       	in	r18, 0x2e	; 46
     c9c:	cd 01       	movw	r24, r26
     c9e:	0e 2e       	mov	r0, r30
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <TIMER_voidTimer1Init+0xa4>
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	0a 94       	dec	r0
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <TIMER_voidTimer1Init+0xa0>
     caa:	82 2b       	or	r24, r18
     cac:	8e bd       	out	0x2e, r24	; 46
     cae:	0c c0       	rjmp	.+24     	; 0xcc8 <TIMER_voidTimer1Init+0xc6>
     cb0:	9e b5       	in	r25, 0x2e	; 46
     cb2:	9d 01       	movw	r18, r26
     cb4:	0e 2e       	mov	r0, r30
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <TIMER_voidTimer1Init+0xba>
     cb8:	22 0f       	add	r18, r18
     cba:	33 1f       	adc	r19, r19
     cbc:	0a 94       	dec	r0
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <TIMER_voidTimer1Init+0xb6>
     cc0:	82 2f       	mov	r24, r18
     cc2:	80 95       	com	r24
     cc4:	89 23       	and	r24, r25
     cc6:	8e bd       	out	0x2e, r24	; 46
     cc8:	64 9f       	mul	r22, r20
     cca:	61 2d       	mov	r22, r1
     ccc:	11 24       	eor	r1, r1
     cce:	66 95       	lsr	r22
     cd0:	66 95       	lsr	r22
     cd2:	66 95       	lsr	r22
     cd4:	31 96       	adiw	r30, 0x01	; 1
     cd6:	e3 30       	cpi	r30, 0x03	; 3
     cd8:	f1 05       	cpc	r31, r1
     cda:	81 f6       	brne	.-96     	; 0xc7c <TIMER_voidTimer1Init+0x7a>
     cdc:	08 95       	ret

00000cde <TIMER_voidSetOverFlow>:
     cde:	97 bd       	out	0x27, r25	; 39
     ce0:	86 bd       	out	0x26, r24	; 38
     ce2:	08 95       	ret

00000ce4 <TIMER_voidTimer1ChannelASetCompareValue>:
     ce4:	9b bd       	out	0x2b, r25	; 43
     ce6:	8a bd       	out	0x2a, r24	; 42
     ce8:	08 95       	ret

00000cea <TIMER_voidTimer1SetPreloadValue>:
     cea:	9d bd       	out	0x2d, r25	; 45
     cec:	8c bd       	out	0x2c, r24	; 44
     cee:	08 95       	ret

00000cf0 <__vector_11>:



//Timer 0 Normal ISR
void __vector_11(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_11(void){
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	11 24       	eor	r1, r1
     cfa:	2f 93       	push	r18
     cfc:	3f 93       	push	r19
     cfe:	4f 93       	push	r20
     d00:	5f 93       	push	r21
     d02:	6f 93       	push	r22
     d04:	7f 93       	push	r23
     d06:	8f 93       	push	r24
     d08:	9f 93       	push	r25
     d0a:	af 93       	push	r26
     d0c:	bf 93       	push	r27
     d0e:	ef 93       	push	r30
     d10:	ff 93       	push	r31
	if(TIMER0_Normal_ISR_PTR!=0x00)
     d12:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <TIMER0_Normal_ISR_PTR>
     d16:	f0 91 85 01 	lds	r31, 0x0185	; 0x800185 <TIMER0_Normal_ISR_PTR+0x1>
     d1a:	30 97       	sbiw	r30, 0x00	; 0
     d1c:	09 f0       	breq	.+2      	; 0xd20 <__vector_11+0x30>
		TIMER0_Normal_ISR_PTR();
     d1e:	09 95       	icall
}
     d20:	ff 91       	pop	r31
     d22:	ef 91       	pop	r30
     d24:	bf 91       	pop	r27
     d26:	af 91       	pop	r26
     d28:	9f 91       	pop	r25
     d2a:	8f 91       	pop	r24
     d2c:	7f 91       	pop	r23
     d2e:	6f 91       	pop	r22
     d30:	5f 91       	pop	r21
     d32:	4f 91       	pop	r20
     d34:	3f 91       	pop	r19
     d36:	2f 91       	pop	r18
     d38:	0f 90       	pop	r0
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	0f 90       	pop	r0
     d3e:	1f 90       	pop	r1
     d40:	18 95       	reti

00000d42 <__vector_10>:

//Timer 0 CTC ISR
void __vector_10(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_10(void){
     d42:	1f 92       	push	r1
     d44:	0f 92       	push	r0
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	0f 92       	push	r0
     d4a:	11 24       	eor	r1, r1
     d4c:	2f 93       	push	r18
     d4e:	3f 93       	push	r19
     d50:	4f 93       	push	r20
     d52:	5f 93       	push	r21
     d54:	6f 93       	push	r22
     d56:	7f 93       	push	r23
     d58:	8f 93       	push	r24
     d5a:	9f 93       	push	r25
     d5c:	af 93       	push	r26
     d5e:	bf 93       	push	r27
     d60:	ef 93       	push	r30
     d62:	ff 93       	push	r31
	if(TIMER0_CTC_ISR_PTR!=0x00)
     d64:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <TIMER0_CTC_ISR_PTR>
     d68:	f0 91 83 01 	lds	r31, 0x0183	; 0x800183 <TIMER0_CTC_ISR_PTR+0x1>
     d6c:	30 97       	sbiw	r30, 0x00	; 0
     d6e:	09 f0       	breq	.+2      	; 0xd72 <__vector_10+0x30>
		TIMER0_CTC_ISR_PTR();
     d70:	09 95       	icall

}
     d72:	ff 91       	pop	r31
     d74:	ef 91       	pop	r30
     d76:	bf 91       	pop	r27
     d78:	af 91       	pop	r26
     d7a:	9f 91       	pop	r25
     d7c:	8f 91       	pop	r24
     d7e:	7f 91       	pop	r23
     d80:	6f 91       	pop	r22
     d82:	5f 91       	pop	r21
     d84:	4f 91       	pop	r20
     d86:	3f 91       	pop	r19
     d88:	2f 91       	pop	r18
     d8a:	0f 90       	pop	r0
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	0f 90       	pop	r0
     d90:	1f 90       	pop	r1
     d92:	18 95       	reti

00000d94 <__vector_6>:

//ICU
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void){
     d94:	1f 92       	push	r1
     d96:	0f 92       	push	r0
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	0f 92       	push	r0
     d9c:	11 24       	eor	r1, r1
     d9e:	2f 93       	push	r18
     da0:	3f 93       	push	r19
     da2:	4f 93       	push	r20
     da4:	5f 93       	push	r21
     da6:	6f 93       	push	r22
     da8:	7f 93       	push	r23
     daa:	8f 93       	push	r24
     dac:	9f 93       	push	r25
     dae:	af 93       	push	r26
     db0:	bf 93       	push	r27
     db2:	ef 93       	push	r30
     db4:	ff 93       	push	r31
	if(GLOBAL_ICU_ISR!=0x00)
     db6:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <GLOBAL_ICU_ISR>
     dba:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <GLOBAL_ICU_ISR+0x1>
     dbe:	30 97       	sbiw	r30, 0x00	; 0
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <__vector_6+0x30>
		GLOBAL_ICU_ISR();
     dc2:	09 95       	icall
}
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	bf 91       	pop	r27
     dca:	af 91       	pop	r26
     dcc:	9f 91       	pop	r25
     dce:	8f 91       	pop	r24
     dd0:	7f 91       	pop	r23
     dd2:	6f 91       	pop	r22
     dd4:	5f 91       	pop	r21
     dd6:	4f 91       	pop	r20
     dd8:	3f 91       	pop	r19
     dda:	2f 91       	pop	r18
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	0f 90       	pop	r0
     de2:	1f 90       	pop	r1
     de4:	18 95       	reti

00000de6 <__vector_7>:

//Timer 1 CTC ISR
void __vector_7(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_7(void){
     de6:	1f 92       	push	r1
     de8:	0f 92       	push	r0
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	0f 92       	push	r0
     dee:	11 24       	eor	r1, r1
     df0:	2f 93       	push	r18
     df2:	3f 93       	push	r19
     df4:	4f 93       	push	r20
     df6:	5f 93       	push	r21
     df8:	6f 93       	push	r22
     dfa:	7f 93       	push	r23
     dfc:	8f 93       	push	r24
     dfe:	9f 93       	push	r25
     e00:	af 93       	push	r26
     e02:	bf 93       	push	r27
     e04:	ef 93       	push	r30
     e06:	ff 93       	push	r31
	if(GLOBAL_TIMER1_COMPARE_MATCH_PTR!=0x00)
     e08:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <GLOBAL_TIMER1_COMPARE_MATCH_PTR>
     e0c:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <GLOBAL_TIMER1_COMPARE_MATCH_PTR+0x1>
     e10:	30 97       	sbiw	r30, 0x00	; 0
     e12:	09 f0       	breq	.+2      	; 0xe16 <__vector_7+0x30>
		GLOBAL_TIMER1_COMPARE_MATCH_PTR();
     e14:	09 95       	icall
}
     e16:	ff 91       	pop	r31
     e18:	ef 91       	pop	r30
     e1a:	bf 91       	pop	r27
     e1c:	af 91       	pop	r26
     e1e:	9f 91       	pop	r25
     e20:	8f 91       	pop	r24
     e22:	7f 91       	pop	r23
     e24:	6f 91       	pop	r22
     e26:	5f 91       	pop	r21
     e28:	4f 91       	pop	r20
     e2a:	3f 91       	pop	r19
     e2c:	2f 91       	pop	r18
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <TWI_voidMasterInit>:
void TWI_voidSlaveInit(u8 Copy_SlaveAddress){
	//Set Slave Address
	TWAR = Copy_SlaveAddress <<1;

	//Enable TWI
	SET_BIT(TWCR,TWEN);
     e38:	96 e9       	ldi	r25, 0x96	; 150
     e3a:	90 b9       	out	0x00, r25	; 0
     e3c:	09 98       	cbi	0x01, 1	; 1
     e3e:	08 98       	cbi	0x01, 0	; 1
     e40:	88 23       	and	r24, r24
     e42:	11 f0       	breq	.+4      	; 0xe48 <TWI_voidMasterInit+0x10>
     e44:	88 0f       	add	r24, r24
     e46:	82 b9       	out	0x02, r24	; 2
     e48:	86 b7       	in	r24, 0x36	; 54
     e4a:	84 60       	ori	r24, 0x04	; 4
     e4c:	86 bf       	out	0x36, r24	; 54
     e4e:	08 95       	ret

00000e50 <TWI_SendStartCondition>:
}

TWI_ErrStatus TWI_SendStartCondition(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
     e50:	86 b7       	in	r24, 0x36	; 54
     e52:	80 62       	ori	r24, 0x20	; 32
     e54:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     e56:	86 b7       	in	r24, 0x36	; 54
     e58:	80 68       	ori	r24, 0x80	; 128
     e5a:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     e5c:	06 b6       	in	r0, 0x36	; 54
     e5e:	07 fe       	sbrs	r0, 7
     e60:	fd cf       	rjmp	.-6      	; 0xe5c <TWI_SendStartCondition+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=START_ACK){
     e62:	91 b1       	in	r25, 0x01	; 1
		Local_ErrStatus = StartConditionErr;
		}
	return Local_ErrStatus;
     e64:	98 7f       	andi	r25, 0xF8	; 248
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	98 30       	cpi	r25, 0x08	; 8
     e6a:	09 f4       	brne	.+2      	; 0xe6e <TWI_SendStartCondition+0x1e>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
}
     e6e:	08 95       	ret

00000e70 <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
     e70:	86 b7       	in	r24, 0x36	; 54
     e72:	80 62       	ori	r24, 0x20	; 32
     e74:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     e76:	86 b7       	in	r24, 0x36	; 54
     e78:	80 68       	ori	r24, 0x80	; 128
     e7a:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     e7c:	06 b6       	in	r0, 0x36	; 54
     e7e:	07 fe       	sbrs	r0, 7
     e80:	fd cf       	rjmp	.-6      	; 0xe7c <TWI_SendRepeatedStart+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
     e82:	81 b1       	in	r24, 0x01	; 1
     e84:	88 7f       	andi	r24, 0xF8	; 248
     e86:	80 31       	cpi	r24, 0x10	; 16
     e88:	11 f0       	breq	.+4      	; 0xe8e <TWI_SendRepeatedStart+0x1e>
		Local_ErrStatus = RepeatedStartErr;
     e8a:	82 e0       	ldi	r24, 0x02	; 2
     e8c:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     e8e:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
		Local_ErrStatus = RepeatedStartErr;
		}
	return Local_ErrStatus;
}
     e90:	08 95       	ret

00000e92 <TWI_SendSlaveAddressWithWrite>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
     e92:	88 0f       	add	r24, r24
     e94:	83 b9       	out	0x03, r24	; 3
	//For Write Operation
	CLR_BIT(TWDR,0);
     e96:	18 98       	cbi	0x03, 0	; 3

	//Clear Flag to start previous operation  //Enable TWI
	TWCR=(1<<TWINT)|(1<<TWEN);
     e98:	84 e8       	ldi	r24, 0x84	; 132
     e9a:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     e9c:	06 b6       	in	r0, 0x36	; 54
     e9e:	07 fe       	sbrs	r0, 7
     ea0:	fd cf       	rjmp	.-6      	; 0xe9c <TWI_SendSlaveAddressWithWrite+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
     ea2:	81 b1       	in	r24, 0x01	; 1
     ea4:	88 7f       	andi	r24, 0xF8	; 248
     ea6:	88 31       	cpi	r24, 0x18	; 24
     ea8:	11 f0       	breq	.+4      	; 0xeae <TWI_SendSlaveAddressWithWrite+0x1c>
		Local_ErrStatus = SlaveAddressWithWriteErr;
     eaa:	83 e0       	ldi	r24, 0x03	; 3
     eac:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     eae:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
		Local_ErrStatus = SlaveAddressWithWriteErr;
		}
	return Local_ErrStatus;
}
     eb0:	08 95       	ret

00000eb2 <TWI_SendSlaveAddressWithRead>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
     eb2:	88 0f       	add	r24, r24
     eb4:	83 b9       	out	0x03, r24	; 3
	//For Read Operation
	SET_BIT(TWDR,0);
     eb6:	18 9a       	sbi	0x03, 0	; 3

	//Clear Flag to start previous operation
	TWCR=(1<<TWINT)|(1<<TWEN);
     eb8:	84 e8       	ldi	r24, 0x84	; 132
     eba:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     ebc:	06 b6       	in	r0, 0x36	; 54
     ebe:	07 fe       	sbrs	r0, 7
     ec0:	fd cf       	rjmp	.-6      	; 0xebc <TWI_SendSlaveAddressWithRead+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
     ec2:	81 b1       	in	r24, 0x01	; 1
     ec4:	88 7f       	andi	r24, 0xF8	; 248
     ec6:	80 34       	cpi	r24, 0x40	; 64
     ec8:	11 f0       	breq	.+4      	; 0xece <TWI_SendSlaveAddressWithRead+0x1c>
		Local_ErrStatus = SlaveAddressWithReadErr;
     eca:	84 e0       	ldi	r24, 0x04	; 4
     ecc:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     ece:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
		Local_ErrStatus = SlaveAddressWithReadErr;
		}
	return Local_ErrStatus;
}
     ed0:	08 95       	ret

00000ed2 <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte){
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Write Data to data byte
	TWDR = Copy_u8DataByte;
     ed2:	83 b9       	out	0x03, r24	; 3

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     ed4:	86 b7       	in	r24, 0x36	; 54
     ed6:	80 68       	ori	r24, 0x80	; 128
     ed8:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     eda:	06 b6       	in	r0, 0x36	; 54
     edc:	07 fe       	sbrs	r0, 7
     ede:	fd cf       	rjmp	.-6      	; 0xeda <TWI_MasterWriteDataByte+0x8>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MasterWriteDataByteErr){
     ee0:	81 b1       	in	r24, 0x01	; 1
		Local_ErrStatus = MasterWriteDataByteErr;
		}
	return Local_ErrStatus;

}
     ee2:	85 e0       	ldi	r24, 0x05	; 5
     ee4:	08 95       	ret

00000ee6 <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
     ee6:	fc 01       	movw	r30, r24
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Enable ACK
	SET_BIT(TWCR,TWEA);
     ee8:	96 b7       	in	r25, 0x36	; 54
     eea:	90 64       	ori	r25, 0x40	; 64
     eec:	96 bf       	out	0x36, r25	; 54
	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     eee:	96 b7       	in	r25, 0x36	; 54
     ef0:	90 68       	ori	r25, 0x80	; 128
     ef2:	96 bf       	out	0x36, r25	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     ef4:	06 b6       	in	r0, 0x36	; 54
     ef6:	07 fe       	sbrs	r0, 7
     ef8:	fd cf       	rjmp	.-6      	; 0xef4 <TWI_MasterReadDataByte+0xe>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
     efa:	91 b1       	in	r25, 0x01	; 1
     efc:	98 7f       	andi	r25, 0xF8	; 248
     efe:	90 35       	cpi	r25, 0x50	; 80
     f00:	21 f4       	brne	.+8      	; 0xf0a <TWI_MasterReadDataByte+0x24>
		Local_ErrStatus = MasterReadDataByteErr;
		}
	else{
		// Read Data
		*Copy_Pu8DataByte = TWDR;
     f02:	83 b1       	in	r24, 0x03	; 3
     f04:	80 83       	st	Z, r24

}

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	08 95       	ret
	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
		Local_ErrStatus = MasterReadDataByteErr;
     f0a:	86 e0       	ldi	r24, 0x06	; 6
		// Read Data
		*Copy_Pu8DataByte = TWDR;

	}
	return Local_ErrStatus;
}
     f0c:	08 95       	ret

00000f0e <TWI_SendStopCondition>:

void TWI_SendStopCondition(void)
{
	/* generate stop condition on the bus */
	SET_BIT(TWCR,TWSTO);
     f0e:	86 b7       	in	r24, 0x36	; 54
     f10:	80 61       	ori	r24, 0x10	; 16
     f12:	86 bf       	out	0x36, r24	; 54

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWINT);
     f14:	86 b7       	in	r24, 0x36	; 54
     f16:	80 68       	ori	r24, 0x80	; 128
     f18:	86 bf       	out	0x36, r24	; 54
     f1a:	08 95       	ret

00000f1c <USART_voidInit>:
void USART_voidEnableRxINT(void){
	SET_BIT(UCSRB,7);
}

void USART_voidDisableRxINT(void){
	CLR_BIT(UCSRB,7);
     f1c:	52 98       	cbi	0x0a, 2	; 10
     f1e:	86 e8       	ldi	r24, 0x86	; 134
     f20:	80 bd       	out	0x20, r24	; 32
     f22:	83 e3       	ldi	r24, 0x33	; 51
     f24:	89 b9       	out	0x09, r24	; 9
     f26:	53 9a       	sbi	0x0a, 3	; 10
     f28:	54 9a       	sbi	0x0a, 4	; 10
     f2a:	08 95       	ret

00000f2c <USART_voidTransmitData>:
     f2c:	5d 9b       	sbis	0x0b, 5	; 11
     f2e:	fe cf       	rjmp	.-4      	; 0xf2c <USART_voidTransmitData>
     f30:	5d 9a       	sbi	0x0b, 5	; 11
     f32:	8c b9       	out	0x0c, r24	; 12
     f34:	08 95       	ret

00000f36 <USART_u8ReceiverData>:
     f36:	5f 9b       	sbis	0x0b, 7	; 11
     f38:	fe cf       	rjmp	.-4      	; 0xf36 <USART_u8ReceiverData>
     f3a:	8c b1       	in	r24, 0x0c	; 12
     f3c:	08 95       	ret

00000f3e <USART_u8TimeOUTReceiverData>:
     f3e:	fc 01       	movw	r30, r24
     f40:	1d bc       	out	0x2d, r1	; 45
     f42:	1c bc       	out	0x2c, r1	; 44
     f44:	8f b5       	in	r24, 0x2f	; 47
     f46:	8e 7f       	andi	r24, 0xFE	; 254
     f48:	8f bd       	out	0x2f, r24	; 47
     f4a:	9f b5       	in	r25, 0x2f	; 47
     f4c:	9d 7f       	andi	r25, 0xFD	; 253
     f4e:	9f bd       	out	0x2f, r25	; 47
     f50:	9e b5       	in	r25, 0x2e	; 46
     f52:	97 7f       	andi	r25, 0xF7	; 247
     f54:	9e bd       	out	0x2e, r25	; 46
     f56:	9e b5       	in	r25, 0x2e	; 46
     f58:	9f 7e       	andi	r25, 0xEF	; 239
     f5a:	9e bd       	out	0x2e, r25	; 46
     f5c:	9e b5       	in	r25, 0x2e	; 46
     f5e:	91 60       	ori	r25, 0x01	; 1
     f60:	9e bd       	out	0x2e, r25	; 46
     f62:	9e b5       	in	r25, 0x2e	; 46
     f64:	9d 7f       	andi	r25, 0xFD	; 253
     f66:	9e bd       	out	0x2e, r25	; 46
     f68:	9e b5       	in	r25, 0x2e	; 46
     f6a:	94 60       	ori	r25, 0x04	; 4
     f6c:	9e bd       	out	0x2e, r25	; 46
     f6e:	0b c0       	rjmp	.+22     	; 0xf86 <USART_u8TimeOUTReceiverData+0x48>
     f70:	2c b5       	in	r18, 0x2c	; 44
     f72:	3d b5       	in	r19, 0x2d	; 45
     f74:	20 34       	cpi	r18, 0x40	; 64
     f76:	3c 49       	sbci	r19, 0x9C	; 156
     f78:	30 f0       	brcs	.+12     	; 0xf86 <USART_u8TimeOUTReceiverData+0x48>
     f7a:	5f 9a       	sbi	0x0b, 7	; 11
     f7c:	8e b5       	in	r24, 0x2e	; 46
     f7e:	88 7f       	andi	r24, 0xF8	; 248
     f80:	8e bd       	out	0x2e, r24	; 46
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	08 95       	ret
     f86:	5f 9b       	sbis	0x0b, 7	; 11
     f88:	f3 cf       	rjmp	.-26     	; 0xf70 <USART_u8TimeOUTReceiverData+0x32>
     f8a:	8c b1       	in	r24, 0x0c	; 12
     f8c:	80 83       	st	Z, r24
     f8e:	1d bc       	out	0x2d, r1	; 45
     f90:	1c bc       	out	0x2c, r1	; 44
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	08 95       	ret

00000f96 <USART_voidTransmitString>:
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	fc 01       	movw	r30, r24
     f9e:	80 81       	ld	r24, Z
     fa0:	88 23       	and	r24, r24
     fa2:	59 f0       	breq	.+22     	; 0xfba <USART_voidTransmitString+0x24>
     fa4:	8f 01       	movw	r16, r30
     fa6:	c0 e0       	ldi	r28, 0x00	; 0
     fa8:	0e 94 96 07 	call	0xf2c	; 0xf2c <USART_voidTransmitData>
     fac:	cf 5f       	subi	r28, 0xFF	; 255
     fae:	f8 01       	movw	r30, r16
     fb0:	ec 0f       	add	r30, r28
     fb2:	f1 1d       	adc	r31, r1
     fb4:	80 81       	ld	r24, Z
     fb6:	81 11       	cpse	r24, r1
     fb8:	f7 cf       	rjmp	.-18     	; 0xfa8 <USART_voidTransmitString+0x12>
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	08 95       	ret

00000fc2 <USART_voidCallBackFunction>:
     fc2:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <GLOBAL_PTR_CallBack+0x1>
     fc6:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <GLOBAL_PTR_CallBack>
     fca:	08 95       	ret

00000fcc <USART_voidEnableRxINT>:
     fcc:	57 9a       	sbi	0x0a, 7	; 10
     fce:	08 95       	ret

00000fd0 <__vector_13>:
}

void __vector_13 (void) __attribute__((signal));
void __vector_13 (void){
     fd0:	1f 92       	push	r1
     fd2:	0f 92       	push	r0
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	0f 92       	push	r0
     fd8:	11 24       	eor	r1, r1
     fda:	2f 93       	push	r18
     fdc:	3f 93       	push	r19
     fde:	4f 93       	push	r20
     fe0:	5f 93       	push	r21
     fe2:	6f 93       	push	r22
     fe4:	7f 93       	push	r23
     fe6:	8f 93       	push	r24
     fe8:	9f 93       	push	r25
     fea:	af 93       	push	r26
     fec:	bf 93       	push	r27
     fee:	ef 93       	push	r30
     ff0:	ff 93       	push	r31
	if(GLOBAL_PTR_CallBack!=0x00)
     ff2:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <GLOBAL_PTR_CallBack>
     ff6:	f0 91 87 01 	lds	r31, 0x0187	; 0x800187 <GLOBAL_PTR_CallBack+0x1>
     ffa:	30 97       	sbiw	r30, 0x00	; 0
     ffc:	09 f0       	breq	.+2      	; 0x1000 <__vector_13+0x30>
		GLOBAL_PTR_CallBack();
     ffe:	09 95       	icall
}
    1000:	ff 91       	pop	r31
    1002:	ef 91       	pop	r30
    1004:	bf 91       	pop	r27
    1006:	af 91       	pop	r26
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	7f 91       	pop	r23
    100e:	6f 91       	pop	r22
    1010:	5f 91       	pop	r21
    1012:	4f 91       	pop	r20
    1014:	3f 91       	pop	r19
    1016:	2f 91       	pop	r18
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <__subsf3>:
    1022:	50 58       	subi	r21, 0x80	; 128

00001024 <__addsf3>:
    1024:	bb 27       	eor	r27, r27
    1026:	aa 27       	eor	r26, r26
    1028:	0e 94 29 08 	call	0x1052	; 0x1052 <__addsf3x>
    102c:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <__fp_round>
    1030:	0e 94 65 09 	call	0x12ca	; 0x12ca <__fp_pscA>
    1034:	38 f0       	brcs	.+14     	; 0x1044 <__addsf3+0x20>
    1036:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__fp_pscB>
    103a:	20 f0       	brcs	.+8      	; 0x1044 <__addsf3+0x20>
    103c:	39 f4       	brne	.+14     	; 0x104c <__addsf3+0x28>
    103e:	9f 3f       	cpi	r25, 0xFF	; 255
    1040:	19 f4       	brne	.+6      	; 0x1048 <__addsf3+0x24>
    1042:	26 f4       	brtc	.+8      	; 0x104c <__addsf3+0x28>
    1044:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__fp_nan>
    1048:	0e f4       	brtc	.+2      	; 0x104c <__addsf3+0x28>
    104a:	e0 95       	com	r30
    104c:	e7 fb       	bst	r30, 7
    104e:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__fp_inf>

00001052 <__addsf3x>:
    1052:	e9 2f       	mov	r30, r25
    1054:	0e 94 84 09 	call	0x1308	; 0x1308 <__fp_split3>
    1058:	58 f3       	brcs	.-42     	; 0x1030 <__addsf3+0xc>
    105a:	ba 17       	cp	r27, r26
    105c:	62 07       	cpc	r22, r18
    105e:	73 07       	cpc	r23, r19
    1060:	84 07       	cpc	r24, r20
    1062:	95 07       	cpc	r25, r21
    1064:	20 f0       	brcs	.+8      	; 0x106e <__addsf3x+0x1c>
    1066:	79 f4       	brne	.+30     	; 0x1086 <__addsf3x+0x34>
    1068:	a6 f5       	brtc	.+104    	; 0x10d2 <__addsf3x+0x80>
    106a:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__fp_zero>
    106e:	0e f4       	brtc	.+2      	; 0x1072 <__addsf3x+0x20>
    1070:	e0 95       	com	r30
    1072:	0b 2e       	mov	r0, r27
    1074:	ba 2f       	mov	r27, r26
    1076:	a0 2d       	mov	r26, r0
    1078:	0b 01       	movw	r0, r22
    107a:	b9 01       	movw	r22, r18
    107c:	90 01       	movw	r18, r0
    107e:	0c 01       	movw	r0, r24
    1080:	ca 01       	movw	r24, r20
    1082:	a0 01       	movw	r20, r0
    1084:	11 24       	eor	r1, r1
    1086:	ff 27       	eor	r31, r31
    1088:	59 1b       	sub	r21, r25
    108a:	99 f0       	breq	.+38     	; 0x10b2 <__addsf3x+0x60>
    108c:	59 3f       	cpi	r21, 0xF9	; 249
    108e:	50 f4       	brcc	.+20     	; 0x10a4 <__addsf3x+0x52>
    1090:	50 3e       	cpi	r21, 0xE0	; 224
    1092:	68 f1       	brcs	.+90     	; 0x10ee <__addsf3x+0x9c>
    1094:	1a 16       	cp	r1, r26
    1096:	f0 40       	sbci	r31, 0x00	; 0
    1098:	a2 2f       	mov	r26, r18
    109a:	23 2f       	mov	r18, r19
    109c:	34 2f       	mov	r19, r20
    109e:	44 27       	eor	r20, r20
    10a0:	58 5f       	subi	r21, 0xF8	; 248
    10a2:	f3 cf       	rjmp	.-26     	; 0x108a <__addsf3x+0x38>
    10a4:	46 95       	lsr	r20
    10a6:	37 95       	ror	r19
    10a8:	27 95       	ror	r18
    10aa:	a7 95       	ror	r26
    10ac:	f0 40       	sbci	r31, 0x00	; 0
    10ae:	53 95       	inc	r21
    10b0:	c9 f7       	brne	.-14     	; 0x10a4 <__addsf3x+0x52>
    10b2:	7e f4       	brtc	.+30     	; 0x10d2 <__addsf3x+0x80>
    10b4:	1f 16       	cp	r1, r31
    10b6:	ba 0b       	sbc	r27, r26
    10b8:	62 0b       	sbc	r22, r18
    10ba:	73 0b       	sbc	r23, r19
    10bc:	84 0b       	sbc	r24, r20
    10be:	ba f0       	brmi	.+46     	; 0x10ee <__addsf3x+0x9c>
    10c0:	91 50       	subi	r25, 0x01	; 1
    10c2:	a1 f0       	breq	.+40     	; 0x10ec <__addsf3x+0x9a>
    10c4:	ff 0f       	add	r31, r31
    10c6:	bb 1f       	adc	r27, r27
    10c8:	66 1f       	adc	r22, r22
    10ca:	77 1f       	adc	r23, r23
    10cc:	88 1f       	adc	r24, r24
    10ce:	c2 f7       	brpl	.-16     	; 0x10c0 <__addsf3x+0x6e>
    10d0:	0e c0       	rjmp	.+28     	; 0x10ee <__addsf3x+0x9c>
    10d2:	ba 0f       	add	r27, r26
    10d4:	62 1f       	adc	r22, r18
    10d6:	73 1f       	adc	r23, r19
    10d8:	84 1f       	adc	r24, r20
    10da:	48 f4       	brcc	.+18     	; 0x10ee <__addsf3x+0x9c>
    10dc:	87 95       	ror	r24
    10de:	77 95       	ror	r23
    10e0:	67 95       	ror	r22
    10e2:	b7 95       	ror	r27
    10e4:	f7 95       	ror	r31
    10e6:	9e 3f       	cpi	r25, 0xFE	; 254
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <__addsf3x+0x9a>
    10ea:	b0 cf       	rjmp	.-160    	; 0x104c <__addsf3+0x28>
    10ec:	93 95       	inc	r25
    10ee:	88 0f       	add	r24, r24
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <__addsf3x+0xa2>
    10f2:	99 27       	eor	r25, r25
    10f4:	ee 0f       	add	r30, r30
    10f6:	97 95       	ror	r25
    10f8:	87 95       	ror	r24
    10fa:	08 95       	ret

000010fc <__divsf3>:
    10fc:	0e 94 92 08 	call	0x1124	; 0x1124 <__divsf3x>
    1100:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <__fp_round>
    1104:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__fp_pscB>
    1108:	58 f0       	brcs	.+22     	; 0x1120 <__divsf3+0x24>
    110a:	0e 94 65 09 	call	0x12ca	; 0x12ca <__fp_pscA>
    110e:	40 f0       	brcs	.+16     	; 0x1120 <__divsf3+0x24>
    1110:	29 f4       	brne	.+10     	; 0x111c <__divsf3+0x20>
    1112:	5f 3f       	cpi	r21, 0xFF	; 255
    1114:	29 f0       	breq	.+10     	; 0x1120 <__divsf3+0x24>
    1116:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__fp_inf>
    111a:	51 11       	cpse	r21, r1
    111c:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__fp_szero>
    1120:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__fp_nan>

00001124 <__divsf3x>:
    1124:	0e 94 84 09 	call	0x1308	; 0x1308 <__fp_split3>
    1128:	68 f3       	brcs	.-38     	; 0x1104 <__divsf3+0x8>

0000112a <__divsf3_pse>:
    112a:	99 23       	and	r25, r25
    112c:	b1 f3       	breq	.-20     	; 0x111a <__divsf3+0x1e>
    112e:	55 23       	and	r21, r21
    1130:	91 f3       	breq	.-28     	; 0x1116 <__divsf3+0x1a>
    1132:	95 1b       	sub	r25, r21
    1134:	55 0b       	sbc	r21, r21
    1136:	bb 27       	eor	r27, r27
    1138:	aa 27       	eor	r26, r26
    113a:	62 17       	cp	r22, r18
    113c:	73 07       	cpc	r23, r19
    113e:	84 07       	cpc	r24, r20
    1140:	38 f0       	brcs	.+14     	; 0x1150 <__divsf3_pse+0x26>
    1142:	9f 5f       	subi	r25, 0xFF	; 255
    1144:	5f 4f       	sbci	r21, 0xFF	; 255
    1146:	22 0f       	add	r18, r18
    1148:	33 1f       	adc	r19, r19
    114a:	44 1f       	adc	r20, r20
    114c:	aa 1f       	adc	r26, r26
    114e:	a9 f3       	breq	.-22     	; 0x113a <__divsf3_pse+0x10>
    1150:	35 d0       	rcall	.+106    	; 0x11bc <__divsf3_pse+0x92>
    1152:	0e 2e       	mov	r0, r30
    1154:	3a f0       	brmi	.+14     	; 0x1164 <__divsf3_pse+0x3a>
    1156:	e0 e8       	ldi	r30, 0x80	; 128
    1158:	32 d0       	rcall	.+100    	; 0x11be <__divsf3_pse+0x94>
    115a:	91 50       	subi	r25, 0x01	; 1
    115c:	50 40       	sbci	r21, 0x00	; 0
    115e:	e6 95       	lsr	r30
    1160:	00 1c       	adc	r0, r0
    1162:	ca f7       	brpl	.-14     	; 0x1156 <__divsf3_pse+0x2c>
    1164:	2b d0       	rcall	.+86     	; 0x11bc <__divsf3_pse+0x92>
    1166:	fe 2f       	mov	r31, r30
    1168:	29 d0       	rcall	.+82     	; 0x11bc <__divsf3_pse+0x92>
    116a:	66 0f       	add	r22, r22
    116c:	77 1f       	adc	r23, r23
    116e:	88 1f       	adc	r24, r24
    1170:	bb 1f       	adc	r27, r27
    1172:	26 17       	cp	r18, r22
    1174:	37 07       	cpc	r19, r23
    1176:	48 07       	cpc	r20, r24
    1178:	ab 07       	cpc	r26, r27
    117a:	b0 e8       	ldi	r27, 0x80	; 128
    117c:	09 f0       	breq	.+2      	; 0x1180 <__divsf3_pse+0x56>
    117e:	bb 0b       	sbc	r27, r27
    1180:	80 2d       	mov	r24, r0
    1182:	bf 01       	movw	r22, r30
    1184:	ff 27       	eor	r31, r31
    1186:	93 58       	subi	r25, 0x83	; 131
    1188:	5f 4f       	sbci	r21, 0xFF	; 255
    118a:	3a f0       	brmi	.+14     	; 0x119a <__divsf3_pse+0x70>
    118c:	9e 3f       	cpi	r25, 0xFE	; 254
    118e:	51 05       	cpc	r21, r1
    1190:	78 f0       	brcs	.+30     	; 0x11b0 <__divsf3_pse+0x86>
    1192:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__fp_inf>
    1196:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__fp_szero>
    119a:	5f 3f       	cpi	r21, 0xFF	; 255
    119c:	e4 f3       	brlt	.-8      	; 0x1196 <__divsf3_pse+0x6c>
    119e:	98 3e       	cpi	r25, 0xE8	; 232
    11a0:	d4 f3       	brlt	.-12     	; 0x1196 <__divsf3_pse+0x6c>
    11a2:	86 95       	lsr	r24
    11a4:	77 95       	ror	r23
    11a6:	67 95       	ror	r22
    11a8:	b7 95       	ror	r27
    11aa:	f7 95       	ror	r31
    11ac:	9f 5f       	subi	r25, 0xFF	; 255
    11ae:	c9 f7       	brne	.-14     	; 0x11a2 <__divsf3_pse+0x78>
    11b0:	88 0f       	add	r24, r24
    11b2:	91 1d       	adc	r25, r1
    11b4:	96 95       	lsr	r25
    11b6:	87 95       	ror	r24
    11b8:	97 f9       	bld	r25, 7
    11ba:	08 95       	ret
    11bc:	e1 e0       	ldi	r30, 0x01	; 1
    11be:	66 0f       	add	r22, r22
    11c0:	77 1f       	adc	r23, r23
    11c2:	88 1f       	adc	r24, r24
    11c4:	bb 1f       	adc	r27, r27
    11c6:	62 17       	cp	r22, r18
    11c8:	73 07       	cpc	r23, r19
    11ca:	84 07       	cpc	r24, r20
    11cc:	ba 07       	cpc	r27, r26
    11ce:	20 f0       	brcs	.+8      	; 0x11d8 <__divsf3_pse+0xae>
    11d0:	62 1b       	sub	r22, r18
    11d2:	73 0b       	sbc	r23, r19
    11d4:	84 0b       	sbc	r24, r20
    11d6:	ba 0b       	sbc	r27, r26
    11d8:	ee 1f       	adc	r30, r30
    11da:	88 f7       	brcc	.-30     	; 0x11be <__divsf3_pse+0x94>
    11dc:	e0 95       	com	r30
    11de:	08 95       	ret

000011e0 <__fixunssfsi>:
    11e0:	0e 94 8c 09 	call	0x1318	; 0x1318 <__fp_splitA>
    11e4:	88 f0       	brcs	.+34     	; 0x1208 <__fixunssfsi+0x28>
    11e6:	9f 57       	subi	r25, 0x7F	; 127
    11e8:	98 f0       	brcs	.+38     	; 0x1210 <__fixunssfsi+0x30>
    11ea:	b9 2f       	mov	r27, r25
    11ec:	99 27       	eor	r25, r25
    11ee:	b7 51       	subi	r27, 0x17	; 23
    11f0:	b0 f0       	brcs	.+44     	; 0x121e <__fixunssfsi+0x3e>
    11f2:	e1 f0       	breq	.+56     	; 0x122c <__fixunssfsi+0x4c>
    11f4:	66 0f       	add	r22, r22
    11f6:	77 1f       	adc	r23, r23
    11f8:	88 1f       	adc	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	1a f0       	brmi	.+6      	; 0x1204 <__fixunssfsi+0x24>
    11fe:	ba 95       	dec	r27
    1200:	c9 f7       	brne	.-14     	; 0x11f4 <__fixunssfsi+0x14>
    1202:	14 c0       	rjmp	.+40     	; 0x122c <__fixunssfsi+0x4c>
    1204:	b1 30       	cpi	r27, 0x01	; 1
    1206:	91 f0       	breq	.+36     	; 0x122c <__fixunssfsi+0x4c>
    1208:	0e 94 a6 09 	call	0x134c	; 0x134c <__fp_zero>
    120c:	b1 e0       	ldi	r27, 0x01	; 1
    120e:	08 95       	ret
    1210:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__fp_zero>
    1214:	67 2f       	mov	r22, r23
    1216:	78 2f       	mov	r23, r24
    1218:	88 27       	eor	r24, r24
    121a:	b8 5f       	subi	r27, 0xF8	; 248
    121c:	39 f0       	breq	.+14     	; 0x122c <__fixunssfsi+0x4c>
    121e:	b9 3f       	cpi	r27, 0xF9	; 249
    1220:	cc f3       	brlt	.-14     	; 0x1214 <__fixunssfsi+0x34>
    1222:	86 95       	lsr	r24
    1224:	77 95       	ror	r23
    1226:	67 95       	ror	r22
    1228:	b3 95       	inc	r27
    122a:	d9 f7       	brne	.-10     	; 0x1222 <__fixunssfsi+0x42>
    122c:	3e f4       	brtc	.+14     	; 0x123c <__fixunssfsi+0x5c>
    122e:	90 95       	com	r25
    1230:	80 95       	com	r24
    1232:	70 95       	com	r23
    1234:	61 95       	neg	r22
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	8f 4f       	sbci	r24, 0xFF	; 255
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	08 95       	ret

0000123e <__floatunsisf>:
    123e:	e8 94       	clt
    1240:	09 c0       	rjmp	.+18     	; 0x1254 <__floatsisf+0x12>

00001242 <__floatsisf>:
    1242:	97 fb       	bst	r25, 7
    1244:	3e f4       	brtc	.+14     	; 0x1254 <__floatsisf+0x12>
    1246:	90 95       	com	r25
    1248:	80 95       	com	r24
    124a:	70 95       	com	r23
    124c:	61 95       	neg	r22
    124e:	7f 4f       	sbci	r23, 0xFF	; 255
    1250:	8f 4f       	sbci	r24, 0xFF	; 255
    1252:	9f 4f       	sbci	r25, 0xFF	; 255
    1254:	99 23       	and	r25, r25
    1256:	a9 f0       	breq	.+42     	; 0x1282 <__floatsisf+0x40>
    1258:	f9 2f       	mov	r31, r25
    125a:	96 e9       	ldi	r25, 0x96	; 150
    125c:	bb 27       	eor	r27, r27
    125e:	93 95       	inc	r25
    1260:	f6 95       	lsr	r31
    1262:	87 95       	ror	r24
    1264:	77 95       	ror	r23
    1266:	67 95       	ror	r22
    1268:	b7 95       	ror	r27
    126a:	f1 11       	cpse	r31, r1
    126c:	f8 cf       	rjmp	.-16     	; 0x125e <__floatsisf+0x1c>
    126e:	fa f4       	brpl	.+62     	; 0x12ae <__floatsisf+0x6c>
    1270:	bb 0f       	add	r27, r27
    1272:	11 f4       	brne	.+4      	; 0x1278 <__floatsisf+0x36>
    1274:	60 ff       	sbrs	r22, 0
    1276:	1b c0       	rjmp	.+54     	; 0x12ae <__floatsisf+0x6c>
    1278:	6f 5f       	subi	r22, 0xFF	; 255
    127a:	7f 4f       	sbci	r23, 0xFF	; 255
    127c:	8f 4f       	sbci	r24, 0xFF	; 255
    127e:	9f 4f       	sbci	r25, 0xFF	; 255
    1280:	16 c0       	rjmp	.+44     	; 0x12ae <__floatsisf+0x6c>
    1282:	88 23       	and	r24, r24
    1284:	11 f0       	breq	.+4      	; 0x128a <__floatsisf+0x48>
    1286:	96 e9       	ldi	r25, 0x96	; 150
    1288:	11 c0       	rjmp	.+34     	; 0x12ac <__floatsisf+0x6a>
    128a:	77 23       	and	r23, r23
    128c:	21 f0       	breq	.+8      	; 0x1296 <__floatsisf+0x54>
    128e:	9e e8       	ldi	r25, 0x8E	; 142
    1290:	87 2f       	mov	r24, r23
    1292:	76 2f       	mov	r23, r22
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <__floatsisf+0x5e>
    1296:	66 23       	and	r22, r22
    1298:	71 f0       	breq	.+28     	; 0x12b6 <__floatsisf+0x74>
    129a:	96 e8       	ldi	r25, 0x86	; 134
    129c:	86 2f       	mov	r24, r22
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	2a f0       	brmi	.+10     	; 0x12ae <__floatsisf+0x6c>
    12a4:	9a 95       	dec	r25
    12a6:	66 0f       	add	r22, r22
    12a8:	77 1f       	adc	r23, r23
    12aa:	88 1f       	adc	r24, r24
    12ac:	da f7       	brpl	.-10     	; 0x12a4 <__floatsisf+0x62>
    12ae:	88 0f       	add	r24, r24
    12b0:	96 95       	lsr	r25
    12b2:	87 95       	ror	r24
    12b4:	97 f9       	bld	r25, 7
    12b6:	08 95       	ret

000012b8 <__fp_inf>:
    12b8:	97 f9       	bld	r25, 7
    12ba:	9f 67       	ori	r25, 0x7F	; 127
    12bc:	80 e8       	ldi	r24, 0x80	; 128
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	08 95       	ret

000012c4 <__fp_nan>:
    12c4:	9f ef       	ldi	r25, 0xFF	; 255
    12c6:	80 ec       	ldi	r24, 0xC0	; 192
    12c8:	08 95       	ret

000012ca <__fp_pscA>:
    12ca:	00 24       	eor	r0, r0
    12cc:	0a 94       	dec	r0
    12ce:	16 16       	cp	r1, r22
    12d0:	17 06       	cpc	r1, r23
    12d2:	18 06       	cpc	r1, r24
    12d4:	09 06       	cpc	r0, r25
    12d6:	08 95       	ret

000012d8 <__fp_pscB>:
    12d8:	00 24       	eor	r0, r0
    12da:	0a 94       	dec	r0
    12dc:	12 16       	cp	r1, r18
    12de:	13 06       	cpc	r1, r19
    12e0:	14 06       	cpc	r1, r20
    12e2:	05 06       	cpc	r0, r21
    12e4:	08 95       	ret

000012e6 <__fp_round>:
    12e6:	09 2e       	mov	r0, r25
    12e8:	03 94       	inc	r0
    12ea:	00 0c       	add	r0, r0
    12ec:	11 f4       	brne	.+4      	; 0x12f2 <__fp_round+0xc>
    12ee:	88 23       	and	r24, r24
    12f0:	52 f0       	brmi	.+20     	; 0x1306 <__fp_round+0x20>
    12f2:	bb 0f       	add	r27, r27
    12f4:	40 f4       	brcc	.+16     	; 0x1306 <__fp_round+0x20>
    12f6:	bf 2b       	or	r27, r31
    12f8:	11 f4       	brne	.+4      	; 0x12fe <__fp_round+0x18>
    12fa:	60 ff       	sbrs	r22, 0
    12fc:	04 c0       	rjmp	.+8      	; 0x1306 <__fp_round+0x20>
    12fe:	6f 5f       	subi	r22, 0xFF	; 255
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	8f 4f       	sbci	r24, 0xFF	; 255
    1304:	9f 4f       	sbci	r25, 0xFF	; 255
    1306:	08 95       	ret

00001308 <__fp_split3>:
    1308:	57 fd       	sbrc	r21, 7
    130a:	90 58       	subi	r25, 0x80	; 128
    130c:	44 0f       	add	r20, r20
    130e:	55 1f       	adc	r21, r21
    1310:	59 f0       	breq	.+22     	; 0x1328 <__fp_splitA+0x10>
    1312:	5f 3f       	cpi	r21, 0xFF	; 255
    1314:	71 f0       	breq	.+28     	; 0x1332 <__fp_splitA+0x1a>
    1316:	47 95       	ror	r20

00001318 <__fp_splitA>:
    1318:	88 0f       	add	r24, r24
    131a:	97 fb       	bst	r25, 7
    131c:	99 1f       	adc	r25, r25
    131e:	61 f0       	breq	.+24     	; 0x1338 <__fp_splitA+0x20>
    1320:	9f 3f       	cpi	r25, 0xFF	; 255
    1322:	79 f0       	breq	.+30     	; 0x1342 <__fp_splitA+0x2a>
    1324:	87 95       	ror	r24
    1326:	08 95       	ret
    1328:	12 16       	cp	r1, r18
    132a:	13 06       	cpc	r1, r19
    132c:	14 06       	cpc	r1, r20
    132e:	55 1f       	adc	r21, r21
    1330:	f2 cf       	rjmp	.-28     	; 0x1316 <__fp_split3+0xe>
    1332:	46 95       	lsr	r20
    1334:	f1 df       	rcall	.-30     	; 0x1318 <__fp_splitA>
    1336:	08 c0       	rjmp	.+16     	; 0x1348 <__fp_splitA+0x30>
    1338:	16 16       	cp	r1, r22
    133a:	17 06       	cpc	r1, r23
    133c:	18 06       	cpc	r1, r24
    133e:	99 1f       	adc	r25, r25
    1340:	f1 cf       	rjmp	.-30     	; 0x1324 <__fp_splitA+0xc>
    1342:	86 95       	lsr	r24
    1344:	71 05       	cpc	r23, r1
    1346:	61 05       	cpc	r22, r1
    1348:	08 94       	sec
    134a:	08 95       	ret

0000134c <__fp_zero>:
    134c:	e8 94       	clt

0000134e <__fp_szero>:
    134e:	bb 27       	eor	r27, r27
    1350:	66 27       	eor	r22, r22
    1352:	77 27       	eor	r23, r23
    1354:	cb 01       	movw	r24, r22
    1356:	97 f9       	bld	r25, 7
    1358:	08 95       	ret

0000135a <__mulsf3>:
    135a:	0e 94 c0 09 	call	0x1380	; 0x1380 <__mulsf3x>
    135e:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <__fp_round>
    1362:	0e 94 65 09 	call	0x12ca	; 0x12ca <__fp_pscA>
    1366:	38 f0       	brcs	.+14     	; 0x1376 <__mulsf3+0x1c>
    1368:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__fp_pscB>
    136c:	20 f0       	brcs	.+8      	; 0x1376 <__mulsf3+0x1c>
    136e:	95 23       	and	r25, r21
    1370:	11 f0       	breq	.+4      	; 0x1376 <__mulsf3+0x1c>
    1372:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__fp_inf>
    1376:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__fp_nan>
    137a:	11 24       	eor	r1, r1
    137c:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__fp_szero>

00001380 <__mulsf3x>:
    1380:	0e 94 84 09 	call	0x1308	; 0x1308 <__fp_split3>
    1384:	70 f3       	brcs	.-36     	; 0x1362 <__mulsf3+0x8>

00001386 <__mulsf3_pse>:
    1386:	95 9f       	mul	r25, r21
    1388:	c1 f3       	breq	.-16     	; 0x137a <__mulsf3+0x20>
    138a:	95 0f       	add	r25, r21
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	55 1f       	adc	r21, r21
    1390:	62 9f       	mul	r22, r18
    1392:	f0 01       	movw	r30, r0
    1394:	72 9f       	mul	r23, r18
    1396:	bb 27       	eor	r27, r27
    1398:	f0 0d       	add	r31, r0
    139a:	b1 1d       	adc	r27, r1
    139c:	63 9f       	mul	r22, r19
    139e:	aa 27       	eor	r26, r26
    13a0:	f0 0d       	add	r31, r0
    13a2:	b1 1d       	adc	r27, r1
    13a4:	aa 1f       	adc	r26, r26
    13a6:	64 9f       	mul	r22, r20
    13a8:	66 27       	eor	r22, r22
    13aa:	b0 0d       	add	r27, r0
    13ac:	a1 1d       	adc	r26, r1
    13ae:	66 1f       	adc	r22, r22
    13b0:	82 9f       	mul	r24, r18
    13b2:	22 27       	eor	r18, r18
    13b4:	b0 0d       	add	r27, r0
    13b6:	a1 1d       	adc	r26, r1
    13b8:	62 1f       	adc	r22, r18
    13ba:	73 9f       	mul	r23, r19
    13bc:	b0 0d       	add	r27, r0
    13be:	a1 1d       	adc	r26, r1
    13c0:	62 1f       	adc	r22, r18
    13c2:	83 9f       	mul	r24, r19
    13c4:	a0 0d       	add	r26, r0
    13c6:	61 1d       	adc	r22, r1
    13c8:	22 1f       	adc	r18, r18
    13ca:	74 9f       	mul	r23, r20
    13cc:	33 27       	eor	r19, r19
    13ce:	a0 0d       	add	r26, r0
    13d0:	61 1d       	adc	r22, r1
    13d2:	23 1f       	adc	r18, r19
    13d4:	84 9f       	mul	r24, r20
    13d6:	60 0d       	add	r22, r0
    13d8:	21 1d       	adc	r18, r1
    13da:	82 2f       	mov	r24, r18
    13dc:	76 2f       	mov	r23, r22
    13de:	6a 2f       	mov	r22, r26
    13e0:	11 24       	eor	r1, r1
    13e2:	9f 57       	subi	r25, 0x7F	; 127
    13e4:	50 40       	sbci	r21, 0x00	; 0
    13e6:	9a f0       	brmi	.+38     	; 0x140e <__mulsf3_pse+0x88>
    13e8:	f1 f0       	breq	.+60     	; 0x1426 <__mulsf3_pse+0xa0>
    13ea:	88 23       	and	r24, r24
    13ec:	4a f0       	brmi	.+18     	; 0x1400 <__mulsf3_pse+0x7a>
    13ee:	ee 0f       	add	r30, r30
    13f0:	ff 1f       	adc	r31, r31
    13f2:	bb 1f       	adc	r27, r27
    13f4:	66 1f       	adc	r22, r22
    13f6:	77 1f       	adc	r23, r23
    13f8:	88 1f       	adc	r24, r24
    13fa:	91 50       	subi	r25, 0x01	; 1
    13fc:	50 40       	sbci	r21, 0x00	; 0
    13fe:	a9 f7       	brne	.-22     	; 0x13ea <__mulsf3_pse+0x64>
    1400:	9e 3f       	cpi	r25, 0xFE	; 254
    1402:	51 05       	cpc	r21, r1
    1404:	80 f0       	brcs	.+32     	; 0x1426 <__mulsf3_pse+0xa0>
    1406:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__fp_inf>
    140a:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__fp_szero>
    140e:	5f 3f       	cpi	r21, 0xFF	; 255
    1410:	e4 f3       	brlt	.-8      	; 0x140a <__mulsf3_pse+0x84>
    1412:	98 3e       	cpi	r25, 0xE8	; 232
    1414:	d4 f3       	brlt	.-12     	; 0x140a <__mulsf3_pse+0x84>
    1416:	86 95       	lsr	r24
    1418:	77 95       	ror	r23
    141a:	67 95       	ror	r22
    141c:	b7 95       	ror	r27
    141e:	f7 95       	ror	r31
    1420:	e7 95       	ror	r30
    1422:	9f 5f       	subi	r25, 0xFF	; 255
    1424:	c1 f7       	brne	.-16     	; 0x1416 <__mulsf3_pse+0x90>
    1426:	fe 2b       	or	r31, r30
    1428:	88 0f       	add	r24, r24
    142a:	91 1d       	adc	r25, r1
    142c:	96 95       	lsr	r25
    142e:	87 95       	ror	r24
    1430:	97 f9       	bld	r25, 7
    1432:	08 95       	ret

00001434 <__itoa_ncheck>:
    1434:	bb 27       	eor	r27, r27
    1436:	4a 30       	cpi	r20, 0x0A	; 10
    1438:	31 f4       	brne	.+12     	; 0x1446 <__itoa_ncheck+0x12>
    143a:	99 23       	and	r25, r25
    143c:	22 f4       	brpl	.+8      	; 0x1446 <__itoa_ncheck+0x12>
    143e:	bd e2       	ldi	r27, 0x2D	; 45
    1440:	90 95       	com	r25
    1442:	81 95       	neg	r24
    1444:	9f 4f       	sbci	r25, 0xFF	; 255
    1446:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__utoa_common>

0000144a <__utoa_ncheck>:
    144a:	bb 27       	eor	r27, r27

0000144c <__utoa_common>:
    144c:	fb 01       	movw	r30, r22
    144e:	55 27       	eor	r21, r21
    1450:	aa 27       	eor	r26, r26
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	aa 1f       	adc	r26, r26
    1458:	a4 17       	cp	r26, r20
    145a:	10 f0       	brcs	.+4      	; 0x1460 <__utoa_common+0x14>
    145c:	a4 1b       	sub	r26, r20
    145e:	83 95       	inc	r24
    1460:	50 51       	subi	r21, 0x10	; 16
    1462:	b9 f7       	brne	.-18     	; 0x1452 <__utoa_common+0x6>
    1464:	a0 5d       	subi	r26, 0xD0	; 208
    1466:	aa 33       	cpi	r26, 0x3A	; 58
    1468:	08 f0       	brcs	.+2      	; 0x146c <__utoa_common+0x20>
    146a:	a9 5d       	subi	r26, 0xD9	; 217
    146c:	a1 93       	st	Z+, r26
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	79 f7       	brne	.-34     	; 0x1450 <__utoa_common+0x4>
    1472:	b1 11       	cpse	r27, r1
    1474:	b1 93       	st	Z+, r27
    1476:	11 92       	st	Z+, r1
    1478:	cb 01       	movw	r24, r22
    147a:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <strrev>

0000147e <strrev>:
    147e:	dc 01       	movw	r26, r24
    1480:	fc 01       	movw	r30, r24
    1482:	67 2f       	mov	r22, r23
    1484:	71 91       	ld	r23, Z+
    1486:	77 23       	and	r23, r23
    1488:	e1 f7       	brne	.-8      	; 0x1482 <strrev+0x4>
    148a:	32 97       	sbiw	r30, 0x02	; 2
    148c:	04 c0       	rjmp	.+8      	; 0x1496 <strrev+0x18>
    148e:	7c 91       	ld	r23, X
    1490:	6d 93       	st	X+, r22
    1492:	70 83       	st	Z, r23
    1494:	62 91       	ld	r22, -Z
    1496:	ae 17       	cp	r26, r30
    1498:	bf 07       	cpc	r27, r31
    149a:	c8 f3       	brcs	.-14     	; 0x148e <strrev+0x10>
    149c:	08 95       	ret

0000149e <_exit>:
    149e:	f8 94       	cli

000014a0 <__stop_program>:
    14a0:	ff cf       	rjmp	.-2      	; 0x14a0 <__stop_program>
