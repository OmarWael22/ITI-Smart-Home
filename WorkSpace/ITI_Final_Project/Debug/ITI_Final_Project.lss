
ITI_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001576  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00001576  0000160a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800192  00800192  0000173c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003006  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010df  00000000  00000000  00004b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fbe  00000000  00000000  00005c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000964  00000000  00000000  00007bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012cd  00000000  00000000  00008558  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a37  00000000  00000000  00009825  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000b25c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__vector_1>
       8:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__vector_2>
       c:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__vector_6>
      1c:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <__vector_10>
      2c:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3a       	cpi	r26, 0xAC	; 172
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 da 01 	call	0x3b4	; 0x3b4 <main>
      8a:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TempSensor>:

}

void TempSensor(void){
	//Read Voltage value from ADC conversion
	u8 Temp = ADC_u8StartConversion(0);
      92:	80 e0       	ldi	r24, 0x00	; 0
      94:	0e 94 15 05 	call	0xa2a	; 0xa2a <ADC_u8StartConversion>
	 * LM35 Temperature Sensor Vout Calculations with connection applied in proteus:
	 * Vout = 10 mV/C
	 * Vref = 5v
	 * Temp Calculation (Voltage Value*Voltage ref)/(10*(10^-3)*25*2^8)
	 */
	Temp = (u8)((Temp*5)/ (.01*256));
      98:	90 e0       	ldi	r25, 0x00	; 0
      9a:	bc 01       	movw	r22, r24
      9c:	66 0f       	add	r22, r22
      9e:	77 1f       	adc	r23, r23
      a0:	66 0f       	add	r22, r22
      a2:	77 1f       	adc	r23, r23
      a4:	68 0f       	add	r22, r24
      a6:	79 1f       	adc	r23, r25
      a8:	07 2e       	mov	r0, r23
      aa:	00 0c       	add	r0, r0
      ac:	88 0b       	sbc	r24, r24
      ae:	99 0b       	sbc	r25, r25
      b0:	0e 94 8b 09 	call	0x1316	; 0x1316 <__floatsisf>
      b4:	2a e0       	ldi	r18, 0x0A	; 10
      b6:	37 ed       	ldi	r19, 0xD7	; 215
      b8:	43 e2       	ldi	r20, 0x23	; 35
      ba:	50 e4       	ldi	r21, 0x40	; 64
      bc:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__divsf3>
      c0:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__fixunssfsi>
	//Check on Temp if over 35C ===> AC will work and turn off Fan if was on
	if(Temp>=35){
      c4:	63 32       	cpi	r22, 0x23	; 35
      c6:	58 f0       	brcs	.+22     	; 0xde <TempSensor+0x4c>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
      c8:	41 e0       	ldi	r20, 0x01	; 1
      ca:	66 e0       	ldi	r22, 0x06	; 6
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
      d2:	40 e0       	ldi	r20, 0x00	; 0
      d4:	67 e0       	ldi	r22, 0x07	; 7
      d6:	83 e0       	ldi	r24, 0x03	; 3
      d8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
      dc:	08 95       	ret
	}
	//Check on Temp if over 25C ===> Fan will work and turn off AC if was on
	else if (Temp>=25){
      de:	69 31       	cpi	r22, 0x19	; 25
      e0:	58 f0       	brcs	.+22     	; 0xf8 <TempSensor+0x66>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	66 e0       	ldi	r22, 0x06	; 6
      e6:	83 e0       	ldi	r24, 0x03	; 3
      e8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH);
      ec:	41 e0       	ldi	r20, 0x01	; 1
      ee:	67 e0       	ldi	r22, 0x07	; 7
      f0:	83 e0       	ldi	r24, 0x03	; 3
      f2:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
      f6:	08 95       	ret
	}//Else State declare that Temp is lower than 25 so turning off both AC and Fan
	else{
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
      f8:	40 e0       	ldi	r20, 0x00	; 0
      fa:	66 e0       	ldi	r22, 0x06	; 6
      fc:	83 e0       	ldi	r24, 0x03	; 3
      fe:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
     102:	40 e0       	ldi	r20, 0x00	; 0
     104:	67 e0       	ldi	r22, 0x07	; 7
     106:	83 e0       	ldi	r24, 0x03	; 3
     108:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
     10c:	08 95       	ret

0000010e <void_SetEPROMLockerPass>:


}
void void_SetEPROMLockerPass(void ){
	// get low byte
	Global_u8SavedDoorPassLowByte=(u8)Global_u16EPROMDoorPass;
     10e:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <Global_u16EPROMDoorPass>
     112:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <Global_u16EPROMDoorPass+0x1>
     116:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <Global_u8SavedDoorPassLowByte>
	// get high byte
	Global_u8SavedDoorPassHighByte=(u8)(Global_u16EPROMDoorPass>>8);
     11a:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <Global_u8SavedDoorPassHighByte>
	// save low byte
	EEPROM_voidSendDataByte(Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
     11e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     122:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     126:	0e 94 27 03 	call	0x64e	; 0x64e <EEPROM_voidSendDataByte>
	TIMER_delay_ms(300);
     12a:	6c e2       	ldi	r22, 0x2C	; 44
     12c:	71 e0       	ldi	r23, 0x01	; 1
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 4d 06 	call	0xc9a	; 0xc9a <TIMER_delay_ms>
	// save high byte
	EEPROM_voidSendDataByte(Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
     136:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     13a:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     13e:	66 5f       	subi	r22, 0xF6	; 246
     140:	7f 4f       	sbci	r23, 0xFF	; 255
     142:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Global_u8SavedDoorPassHighByte>
     146:	0e 94 27 03 	call	0x64e	; 0x64e <EEPROM_voidSendDataByte>
	TIMER_delay_ms(300);
     14a:	6c e2       	ldi	r22, 0x2C	; 44
     14c:	71 e0       	ldi	r23, 0x01	; 1
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 4d 06 	call	0xc9a	; 0xc9a <TIMER_delay_ms>
     156:	08 95       	ret

00000158 <void_Locker>:
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
	}
}

void void_Locker(){
     158:	cf 93       	push	r28
	/*To set new pass enter your old pass and press clear*/
	/* max password digits is 4*/

	// pressed key
	u8 Local_u8Keypad_Key=KPD_u8GetPressedKey();
     15a:	0e 94 a5 03 	call	0x74a	; 0x74a <KPD_u8GetPressedKey>
     15e:	c8 2f       	mov	r28, r24
	/* case user entered clear */
		/* two cases to enter clear
		* First : To set new pass
		* Second : clear screen and clear the entered password
		*/
	if(Local_u8Keypad_Key==KPD_CLEAR){
     160:	8d 30       	cpi	r24, 0x0D	; 13
     162:	09 f0       	breq	.+2      	; 0x166 <void_Locker+0xe>
     164:	85 c0       	rjmp	.+266    	; 0x270 <void_Locker+0x118>

		// First case : set new pass
		if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
     166:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <Local_u16DoorPassword.1766>
     16a:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <Local_u16DoorPassword.1766+0x1>
     16e:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <Global_u16EPROMDoorPass>
     172:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <Global_u16EPROMDoorPass+0x1>
     176:	28 17       	cp	r18, r24
     178:	39 07       	cpc	r19, r25
     17a:	09 f0       	breq	.+2      	; 0x17e <void_Locker+0x26>
     17c:	70 c0       	rjmp	.+224    	; 0x25e <void_Locker+0x106>

			LCD_voidClearDisplay();
     17e:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_voidClearDisplay>
			// setting new password
				// clear all saved passes and digit counter
				Global_u16EPROMDoorPass=0;
     182:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <Global_u16EPROMDoorPass+0x1>
     186:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <Global_u16EPROMDoorPass>
				Local_u16DoorPassword=0;
     18a:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <Local_u16DoorPassword.1766+0x1>
     18e:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <Local_u16DoorPassword.1766>
				Local_u8DigitsCount=0;
     192:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <Local_u8DigitsCount.1767>

				LCD_voidSendString("Set new pass:");
     196:	8e e6       	ldi	r24, 0x6E	; 110
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_voidSendString>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				while(Local_u8Keypad_Key != KPD_ENTER ){

					Local_u8Keypad_Key=KPD_u8GetPressedKey();
     19e:	0e 94 a5 03 	call	0x74a	; 0x74a <KPD_u8GetPressedKey>
     1a2:	c8 2f       	mov	r28, r24
					// check if the user entered more than 4 digits
					if(Local_u8DigitsCount==Max_Pass_Digits+1){
     1a4:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Local_u8DigitsCount.1767>
     1a8:	85 30       	cpi	r24, 0x05	; 5
     1aa:	a1 f4       	brne	.+40     	; 0x1d4 <void_Locker+0x7c>
						LCD_voidClearDisplay();
     1ac:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_voidClearDisplay>
						LCD_voidSendString("ERROR !!!!");
     1b0:	8c e7       	ldi	r24, 0x7C	; 124
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_voidSendString>
						LCD_voidGoTOXY(1,0);
     1b8:	60 e0       	ldi	r22, 0x00	; 0
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_voidGoTOXY>
						LCD_voidSendString("Max Digits is 4");
     1c0:	87 e8       	ldi	r24, 0x87	; 135
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_voidSendString>
						Local_u8DigitsCount=0;
     1c8:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <Local_u8DigitsCount.1767>
						Global_u16EPROMDoorPass=0;
     1cc:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <Global_u16EPROMDoorPass+0x1>
     1d0:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <Global_u16EPROMDoorPass>
					}

					if(Local_u8Keypad_Key==KPD_CLEAR){
     1d4:	cd 30       	cpi	r28, 0x0D	; 13
     1d6:	49 f4       	brne	.+18     	; 0x1ea <void_Locker+0x92>
						Local_u8DigitsCount=0;
     1d8:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <Local_u8DigitsCount.1767>
						LCD_voidClearDisplay();
     1dc:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_voidClearDisplay>
						Global_u16EPROMDoorPass=0;
     1e0:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <Global_u16EPROMDoorPass+0x1>
     1e4:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <Global_u16EPROMDoorPass>
     1e8:	da cf       	rjmp	.-76     	; 0x19e <void_Locker+0x46>

					}
					else if(Local_u8Keypad_Key !=KPD_NO_PRESS && Local_u8Keypad_Key!=KPD_ENTER){
     1ea:	ca 3a       	cpi	r28, 0xAA	; 170
     1ec:	c1 f2       	breq	.-80     	; 0x19e <void_Locker+0x46>
     1ee:	cc 30       	cpi	r28, 0x0C	; 12
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <void_Locker+0x9c>
     1f2:	a9 c0       	rjmp	.+338    	; 0x346 <void_Locker+0x1ee>
						// if it is the first digit that user enter --> clear any previous message on the screen
						if(Local_u8DigitsCount==0)
     1f4:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Local_u8DigitsCount.1767>
     1f8:	81 11       	cpse	r24, r1
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <void_Locker+0xa8>
							LCD_voidClearDisplay();
     1fc:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_voidClearDisplay>
						LCD_voidSendNumber(Local_u8Keypad_Key);
     200:	6c 2f       	mov	r22, r28
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_voidSendNumber>
						TIMER_delay_ms(1200);
     20c:	60 eb       	ldi	r22, 0xB0	; 176
     20e:	74 e0       	ldi	r23, 0x04	; 4
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 4d 06 	call	0xc9a	; 0xc9a <TIMER_delay_ms>
						LCD_voidGoTOXY(0,Local_u8DigitsCount);
     218:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <Local_u8DigitsCount.1767>
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_voidGoTOXY>
						LCD_voidSendData('*');
     222:	8a e2       	ldi	r24, 0x2A	; 42
     224:	0e 94 30 04 	call	0x860	; 0x860 <LCD_voidSendData>
						Local_u8DigitsCount++;
     228:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Local_u8DigitsCount.1767>
     22c:	8f 5f       	subi	r24, 0xFF	; 255
     22e:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Local_u8DigitsCount.1767>
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
     232:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <Global_u16EPROMDoorPass>
     236:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <Global_u16EPROMDoorPass+0x1>
     23a:	9c 01       	movw	r18, r24
     23c:	22 0f       	add	r18, r18
     23e:	33 1f       	adc	r19, r19
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	82 0f       	add	r24, r18
     24e:	93 1f       	adc	r25, r19
     250:	8c 0f       	add	r24, r28
     252:	91 1d       	adc	r25, r1
     254:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <Global_u16EPROMDoorPass+0x1>
     258:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <Global_u16EPROMDoorPass>
     25c:	a0 cf       	rjmp	.-192    	; 0x19e <void_Locker+0x46>

		}

		// Second case : to clear Screen or typed password
		else{
		LCD_voidClearDisplay();
     25e:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_voidClearDisplay>
		Local_u16DoorPassword=0;
     262:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <Local_u16DoorPassword.1766+0x1>
     266:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <Local_u16DoorPassword.1766>
		Local_u8DigitsCount=0;
     26a:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <Local_u8DigitsCount.1767>
     26e:	75 c0       	rjmp	.+234    	; 0x35a <void_Locker+0x202>

		}
	}
	/******************************************************************************************************************************************************************/
	/* case user pressed enter or equal */
	else if(Local_u8Keypad_Key==KPD_ENTER){
     270:	8c 30       	cpi	r24, 0x0C	; 12
     272:	89 f5       	brne	.+98     	; 0x2d6 <void_Locker+0x17e>

		LCD_voidClearDisplay();
     274:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_voidClearDisplay>
		// check if entered pass is correct
		 if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
     278:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <Local_u16DoorPassword.1766>
     27c:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <Local_u16DoorPassword.1766+0x1>
     280:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <Global_u16EPROMDoorPass>
     284:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <Global_u16EPROMDoorPass+0x1>
     288:	28 17       	cp	r18, r24
     28a:	39 07       	cpc	r19, r25
     28c:	c9 f4       	brne	.+50     	; 0x2c0 <void_Locker+0x168>
			// check door status
			if(Local_u8DoorStatus==0){
     28e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
     292:	81 11       	cpse	r24, r1
     294:	0b c0       	rjmp	.+22     	; 0x2ac <void_Locker+0x154>
				LCD_voidSendString("Locker is opened");
     296:	87 e9       	ldi	r24, 0x97	; 151
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_voidSendString>
				// run servo
				Servo_voidDegree(180);
     29e:	84 eb       	ldi	r24, 0xB4	; 180
     2a0:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <Servo_voidDegree>
				Local_u8DoorStatus=1;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
     2aa:	0e c0       	rjmp	.+28     	; 0x2c8 <void_Locker+0x170>

			}
			else{
				LCD_voidSendString("Locker is Closed");
     2ac:	88 ea       	ldi	r24, 0xA8	; 168
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_voidSendString>
				// stop servo
				Servo_voidDegree(0);
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <Servo_voidDegree>
				Local_u8DoorStatus=0;
     2ba:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end>
     2be:	04 c0       	rjmp	.+8      	; 0x2c8 <void_Locker+0x170>

			}

		}
		else
			LCD_voidSendString("Wrong password !");
     2c0:	89 eb       	ldi	r24, 0xB9	; 185
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_voidSendString>

			// reset the entered password after typing enter
			Local_u16DoorPassword=0;
     2c8:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <Local_u16DoorPassword.1766+0x1>
     2cc:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <Local_u16DoorPassword.1766>
			Local_u8DigitsCount=0;
     2d0:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <Local_u8DigitsCount.1767>
     2d4:	42 c0       	rjmp	.+132    	; 0x35a <void_Locker+0x202>
	}

	/****************************************************************************************************************************************************************/
	/* Case user pressed a digit key*/
	else if(Local_u8Keypad_Key != KPD_NO_PRESS){
     2d6:	8a 3a       	cpi	r24, 0xAA	; 170
     2d8:	09 f4       	brne	.+2      	; 0x2dc <void_Locker+0x184>
     2da:	3f c0       	rjmp	.+126    	; 0x35a <void_Locker+0x202>
		// if it is the first digit that user enter --> clear any previous message on the screen
		if(Local_u8DigitsCount==0)
     2dc:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Local_u8DigitsCount.1767>
     2e0:	81 11       	cpse	r24, r1
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <void_Locker+0x190>
			LCD_voidClearDisplay();
     2e4:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_voidClearDisplay>
		LCD_voidSendNumber(Local_u8Keypad_Key);
     2e8:	6c 2f       	mov	r22, r28
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_voidSendNumber>
		TIMER_delay_ms(1200);
     2f4:	60 eb       	ldi	r22, 0xB0	; 176
     2f6:	74 e0       	ldi	r23, 0x04	; 4
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 4d 06 	call	0xc9a	; 0xc9a <TIMER_delay_ms>
		LCD_voidGoTOXY(0,Local_u8DigitsCount);
     300:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <Local_u8DigitsCount.1767>
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	0e 94 a1 04 	call	0x942	; 0x942 <LCD_voidGoTOXY>
		LCD_voidSendData('*');
     30a:	8a e2       	ldi	r24, 0x2A	; 42
     30c:	0e 94 30 04 	call	0x860	; 0x860 <LCD_voidSendData>

		Local_u8DigitsCount++;
     310:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <Local_u8DigitsCount.1767>
     314:	8f 5f       	subi	r24, 0xFF	; 255
     316:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <Local_u8DigitsCount.1767>
		Local_u16DoorPassword=Local_u16DoorPassword*10 + Local_u8Keypad_Key;
     31a:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <Local_u16DoorPassword.1766>
     31e:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <Local_u16DoorPassword.1766+0x1>
     322:	9c 01       	movw	r18, r24
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	88 0f       	add	r24, r24
     332:	99 1f       	adc	r25, r25
     334:	82 0f       	add	r24, r18
     336:	93 1f       	adc	r25, r19
     338:	8c 0f       	add	r24, r28
     33a:	91 1d       	adc	r25, r1
     33c:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <Local_u16DoorPassword.1766+0x1>
     340:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <Local_u16DoorPassword.1766>


	}


}
     344:	0a c0       	rjmp	.+20     	; 0x35a <void_Locker+0x202>
						Local_u8DigitsCount++;
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
					}

				}
				LCD_voidClearDisplay();
     346:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_voidClearDisplay>
				LCD_voidSendString("pass is updated");
     34a:	8a ec       	ldi	r24, 0xCA	; 202
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_voidSendString>
				// reset counter
				Local_u8DigitsCount=0;
     352:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <Local_u8DigitsCount.1767>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				// save the new pass to eeprom
				void_SetEPROMLockerPass();
     356:	0e 94 87 00 	call	0x10e	; 0x10e <void_SetEPROMLockerPass>


	}


}
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret

0000035e <void_GetEPROMLockerPass>:
}

void void_GetEPROMLockerPass(void){

	// read pass low byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
     35e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     362:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     366:	8b ea       	ldi	r24, 0xAB	; 171
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	0e 94 3f 03 	call	0x67e	; 0x67e <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
     36e:	6c e2       	ldi	r22, 0x2C	; 44
     370:	71 e0       	ldi	r23, 0x01	; 1
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 4d 06 	call	0xc9a	; 0xc9a <TIMER_delay_ms>
	// read pass high byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
     37a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     37e:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     382:	66 5f       	subi	r22, 0xF6	; 246
     384:	7f 4f       	sbci	r23, 0xFF	; 255
     386:	88 ea       	ldi	r24, 0xA8	; 168
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	0e 94 3f 03 	call	0x67e	; 0x67e <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
     38e:	6c e2       	ldi	r22, 0x2C	; 44
     390:	71 e0       	ldi	r23, 0x01	; 1
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 4d 06 	call	0xc9a	; 0xc9a <TIMER_delay_ms>
	// combine the high and low byte
	Global_u16EPROMDoorPass= ( (u16)(Global_u8SavedDoorPassHighByte<<8) )| Global_u8SavedDoorPassLowByte;
     39a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <Global_u8SavedDoorPassHighByte>
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	98 2f       	mov	r25, r24
     3a2:	88 27       	eor	r24, r24
     3a4:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <Global_u8SavedDoorPassLowByte>
     3a8:	82 2b       	or	r24, r18
     3aa:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <Global_u16EPROMDoorPass+0x1>
     3ae:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <Global_u16EPROMDoorPass>
     3b2:	08 95       	ret

000003b4 <main>:
void void_Locker(void);
void void_SetEPROMLockerPass(void);
void void_GetEPROMLockerPass(void);

void main(void)
{	
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	1f 92       	push	r1
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16EPROMSystemStateAddress=5;
	u8 Local_u8EPROMSystemState=0;
     3be:	19 82       	std	Y+1, r1	; 0x01
	
	ADC_voidInit();
     3c0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_OUTPUT);
     3c4:	41 e0       	ldi	r20, 0x01	; 1
     3c6:	66 e0       	ldi	r22, 0x06	; 6
     3c8:	83 e0       	ldi	r24, 0x03	; 3
     3ca:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_OUTPUT);
     3ce:	41 e0       	ldi	r20, 0x01	; 1
     3d0:	67 e0       	ldi	r22, 0x07	; 7
     3d2:	83 e0       	ldi	r24, 0x03	; 3
     3d4:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_voidSetPinDirection>

	LCD_voidInit();
     3d8:	0e 94 74 04 	call	0x8e8	; 0x8e8 <LCD_voidInit>
	KPD_voidInit();
     3dc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <KPD_voidInit>
	//servo pin
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
     3e0:	41 e0       	ldi	r20, 0x01	; 1
     3e2:	65 e0       	ldi	r22, 0x05	; 5
     3e4:	83 e0       	ldi	r24, 0x03	; 3
     3e6:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_voidSetPinDirection>
	Servo_voidInit();
     3ea:	0e 94 df 04 	call	0x9be	; 0x9be <Servo_voidInit>

	TWI_voidMasterInit(0);
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	0e 94 86 07 	call	0xf0c	; 0xf0c <TWI_voidMasterInit>
	
	/*Read system state form EPROM to check if this is the first time to run the project*/
	EEPROM_voidReadDataByte(&Local_u8EPROMSystemState,Local_u16EPROMSystemStateAddress);
     3f4:	65 e0       	ldi	r22, 0x05	; 5
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	ce 01       	movw	r24, r28
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	0e 94 3f 03 	call	0x67e	; 0x67e <EEPROM_voidReadDataByte>
	if(Local_u8EPROMSystemState != SystemHasRunBefore){
     400:	89 81       	ldd	r24, Y+1	; 0x01
     402:	8c 31       	cpi	r24, 0x1C	; 28
     404:	d1 f0       	breq	.+52     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		LCD_voidSendString("First Run");
     406:	8a ed       	ldi	r24, 0xDA	; 218
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_voidSendString>
		// save the system state as has run before
		Local_u8EPROMSystemState=SystemHasRunBefore;
     40e:	8c e1       	ldi	r24, 0x1C	; 28
     410:	89 83       	std	Y+1, r24	; 0x01
		// save initial password = 100
		Global_u16EPROMDoorPass=1234;
     412:	82 ed       	ldi	r24, 0xD2	; 210
     414:	94 e0       	ldi	r25, 0x04	; 4
     416:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <Global_u16EPROMDoorPass+0x1>
     41a:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <Global_u16EPROMDoorPass>
		void_SetEPROMLockerPass();
     41e:	0e 94 87 00 	call	0x10e	; 0x10e <void_SetEPROMLockerPass>
		// save the system state to eprom
		EEPROM_voidSendDataByte(Local_u8EPROMSystemState,Local_u16EPROMSystemStateAddress);
     422:	65 e0       	ldi	r22, 0x05	; 5
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	0e 94 27 03 	call	0x64e	; 0x64e <EEPROM_voidSendDataByte>
		TIMER_delay_ms(300);
     42c:	6c e2       	ldi	r22, 0x2C	; 44
     42e:	71 e0       	ldi	r23, 0x01	; 1
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 4d 06 	call	0xc9a	; 0xc9a <TIMER_delay_ms>
     438:	04 c0       	rjmp	.+8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	}
	else
		LCD_voidSendString("System is On");
     43a:	84 ee       	ldi	r24, 0xE4	; 228
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_voidSendString>

	// get the saved password and store it the global EPROM_variable
	void_GetEPROMLockerPass();
     442:	0e 94 af 01 	call	0x35e	; 0x35e <void_GetEPROMLockerPass>
	
	//LCD_voidSendNumber(Global_u16EPROMDoorPass);
	
	// Initialize USART
	USART_voidInit();
     446:	0e 94 f8 07 	call	0xff0	; 0xff0 <USART_voidInit>
	//Initialize Call Back Function
	USART_voidCallBackFunction(&USART_Start);
     44a:	85 e8       	ldi	r24, 0x85	; 133
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	0e 94 4b 08 	call	0x1096	; 0x1096 <USART_voidCallBackFunction>
	//Enable USART PIE
	USART_voidEnableRxINT();
     452:	0e 94 50 08 	call	0x10a0	; 0x10a0 <USART_voidEnableRxINT>
	//Enable GIE
	GIE_voidEnableGlobalInt();
     456:	0e 94 49 06 	call	0xc92	; 0xc92 <GIE_voidEnableGlobalInt>
	// LED Pins
	DIO_voidSetPinDirection(DIO_PORTC,LIGHT1,DIO_OUTPUT);
     45a:	41 e0       	ldi	r20, 0x01	; 1
     45c:	65 e0       	ldi	r22, 0x05	; 5
     45e:	82 e0       	ldi	r24, 0x02	; 2
     460:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,LIGHT2,DIO_OUTPUT);
     464:	41 e0       	ldi	r20, 0x01	; 1
     466:	66 e0       	ldi	r22, 0x06	; 6
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,LIGHT3,DIO_OUTPUT);
     46e:	41 e0       	ldi	r20, 0x01	; 1
     470:	67 e0       	ldi	r22, 0x07	; 7
     472:	82 e0       	ldi	r24, 0x02	; 2
     474:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_voidSetPinDirection>

	while(1){
		/*USART is Controlled by ISR TIMER1_COMPB*/
		GIE_voidEnableGlobalInt();
     478:	0e 94 49 06 	call	0xc92	; 0xc92 <GIE_voidEnableGlobalInt>
		USART_voidEnableRxINT();
     47c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <USART_voidEnableRxINT>
		//Call locker Control Function
		void_Locker();
     480:	0e 94 ac 00 	call	0x158	; 0x158 <void_Locker>
		//Call Temperature Sensor Control Function
		TempSensor();
     484:	0e 94 49 00 	call	0x92	; 0x92 <TempSensor>
     488:	f7 cf       	rjmp	.-18     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>

0000048a <USART_voidProcessCommand>:
	}
	//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
	Servo_voidInit();
}

ConditionsState USART_voidProcessCommand(u8 command,u8 Local_LightNum) {
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	c8 2f       	mov	r28, r24
     490:	d6 2f       	mov	r29, r22
	ConditionsState Con_St = NoErrors; // Check Variable
	LCD_voidClearDisplay();
     492:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_voidClearDisplay>
	//Check Command to turn Light on or off
	if (command=='1') {
     496:	c1 33       	cpi	r28, 0x31	; 49
     498:	c9 f4       	brne	.+50     	; 0x4cc <USART_voidProcessCommand+0x42>
		// Turning ON ROOM 1 LIGHT
		DIO_voidSetPinValue(DIO_PORTC,Local_LightNum,DIO_HIGH);
     49a:	41 e0       	ldi	r20, 0x01	; 1
     49c:	6d 2f       	mov	r22, r29
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
		LCD_voidSendString("ROOM ");
     4a4:	81 ef       	ldi	r24, 0xF1	; 241
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_voidSendString>
		// display the room number
		LCD_voidSendNumber(Local_LightNum-4);
     4ac:	6d 2f       	mov	r22, r29
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	64 50       	subi	r22, 0x04	; 4
     4b2:	71 09       	sbc	r23, r1
     4b4:	07 2e       	mov	r0, r23
     4b6:	00 0c       	add	r0, r0
     4b8:	88 0b       	sbc	r24, r24
     4ba:	99 0b       	sbc	r25, r25
     4bc:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_voidSendNumber>
		LCD_voidSendString(" is ON");
     4c0:	87 ef       	ldi	r24, 0xF7	; 247
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_voidSendString>
		Con_St = ROOM_LIGHT_ON;
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	1c c0       	rjmp	.+56     	; 0x504 <USART_voidProcessCommand+0x7a>
	}
	else if ( command=='0') {
     4cc:	c0 33       	cpi	r28, 0x30	; 48
     4ce:	c9 f4       	brne	.+50     	; 0x502 <USART_voidProcessCommand+0x78>
		// Turning OFF ROOM 1 LIGHT
		DIO_voidSetPinValue(DIO_PORTC,Local_LightNum,DIO_LOW);
     4d0:	40 e0       	ldi	r20, 0x00	; 0
     4d2:	6d 2f       	mov	r22, r29
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
		LCD_voidSendString("ROOM ");
     4da:	81 ef       	ldi	r24, 0xF1	; 241
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_voidSendString>
		// display the room number
		LCD_voidSendNumber(Local_LightNum-4);
     4e2:	6d 2f       	mov	r22, r29
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	64 50       	subi	r22, 0x04	; 4
     4e8:	71 09       	sbc	r23, r1
     4ea:	07 2e       	mov	r0, r23
     4ec:	00 0c       	add	r0, r0
     4ee:	88 0b       	sbc	r24, r24
     4f0:	99 0b       	sbc	r25, r25
     4f2:	0e 94 c0 04 	call	0x980	; 0x980 <LCD_voidSendNumber>
		LCD_voidSendString(" is OFF");
     4f6:	8e ef       	ldi	r24, 0xFE	; 254
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_voidSendString>
		Con_St = ROOM_LIGHT_OFF;
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	01 c0       	rjmp	.+2      	; 0x504 <USART_voidProcessCommand+0x7a>
	}
	else{ // IF input is not 0 nor 1 ==> INCORRECT INP
		Con_St = Input_Format_Is_Incorrect;
     502:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Con_St;
}
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	08 95       	ret

0000050a <USART_Start>:
	TIMER_delay_ms(300);
	// combine the high and low byte
	Global_u16EPROMDoorPass= ( (u16)(Global_u8SavedDoorPassHighByte<<8) )| Global_u8SavedDoorPassLowByte;
}

void USART_Start(void){
     50a:	cf 92       	push	r12
     50c:	df 92       	push	r13
     50e:	ef 92       	push	r14
     510:	ff 92       	push	r15
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	00 d0       	rcall	.+0      	; 0x51c <USART_Start+0x12>
     51c:	00 d0       	rcall	.+0      	; 0x51e <USART_Start+0x14>
     51e:	00 d0       	rcall	.+0      	; 0x520 <USART_Start+0x16>
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
	//Save First Receieved Input AS It MUST be '*' If not return from function
	u8 FirstReceived = USART_u8ReceiverData();
     524:	0e 94 05 08 	call	0x100a	; 0x100a <USART_u8ReceiverData>
	if(FirstReceived!='*')
     528:	8a 32       	cpi	r24, 0x2A	; 42
     52a:	09 f0       	breq	.+2      	; 0x52e <USART_Start+0x24>
     52c:	81 c0       	rjmp	.+258    	; 0x630 <USART_Start+0x126>
		return;
	//Start Display Message
	USART_voidTransmitString("Expected INP Format \" *i*x*x# \" :\r");
     52e:	86 e0       	ldi	r24, 0x06	; 6
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	0e 94 35 08 	call	0x106a	; 0x106a <USART_voidTransmitString>

	//Display first '*'
	USART_voidTransmitData(FirstReceived);
     536:	8a e2       	ldi	r24, 0x2A	; 42
     538:	0e 94 00 08 	call	0x1000	; 0x1000 <USART_voidTransmitData>

	//Clear LCD to Start Displaying on it
	LCD_voidClearDisplay();
     53c:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_voidClearDisplay>
	LCD_voidSendData('*');
     540:	8a e2       	ldi	r24, 0x2A	; 42
     542:	0e 94 30 04 	call	0x860	; 0x860 <LCD_voidSendData>
     546:	8e 01       	movw	r16, r28
     548:	0f 5f       	subi	r16, 0xFF	; 255
     54a:	1f 4f       	sbci	r17, 0xFF	; 255
     54c:	6e 01       	movw	r12, r28
     54e:	87 e0       	ldi	r24, 0x07	; 7
     550:	c8 0e       	add	r12, r24
     552:	d1 1c       	adc	r13, r1

	// Loop until reaching Max val of Input, if stucked Timer will INT and Time out
	while (Max_Num) {
		 //Receive data element by element
		 TimeOut TimeOut_Err=100;
		 TimeOut_Err = USART_u8TimeOUTReceiverData(&DataReceived[DataIdx]);
     554:	78 01       	movw	r14, r16
     556:	c8 01       	movw	r24, r16
     558:	0e 94 09 08 	call	0x1012	; 0x1012 <USART_u8TimeOUTReceiverData>
		//DataReceived[DataIdx] = USART_u8ReceiverData();
		if(TimeOut_Err == TimeOUT_Occured){
     55c:	81 30       	cpi	r24, 0x01	; 1
     55e:	79 f4       	brne	.+30     	; 0x57e <USART_Start+0x74>
			 * 1- SET TCNT1 with 0 before initializing timer
			 * 2- SET Comparing Value by TIMEOUTVALUE Macro  e.g. 40000====> 5.12 sec "time waiting before time out"
			 * 3- Initialize Timer with 1024 Prescaler
			 */
			//Sending Warning Message if TIMEOUT and return from function
			USART_voidTransmitData('\r');
     560:	8d e0       	ldi	r24, 0x0D	; 13
     562:	0e 94 00 08 	call	0x1000	; 0x1000 <USART_voidTransmitData>
			USART_voidTransmitString("##ERROR: Time Out");
     566:	89 e2       	ldi	r24, 0x29	; 41
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	0e 94 35 08 	call	0x106a	; 0x106a <USART_voidTransmitString>
			USART_voidTransmitData('\r');
     56e:	8d e0       	ldi	r24, 0x0D	; 13
     570:	0e 94 00 08 	call	0x1000	; 0x1000 <USART_voidTransmitData>
			//Clear LCD
			LCD_voidClearDisplay();
     574:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_voidClearDisplay>
			//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
			Servo_voidInit();
     578:	0e 94 df 04 	call	0x9be	; 0x9be <Servo_voidInit>
			return;
     57c:	59 c0       	rjmp	.+178    	; 0x630 <USART_Start+0x126>
		}
		//Send Received Data to Display it on Virtual Terminal
		USART_voidTransmitData(DataReceived[DataIdx] );
     57e:	f8 01       	movw	r30, r16
     580:	81 91       	ld	r24, Z+
     582:	8f 01       	movw	r16, r30
     584:	0e 94 00 08 	call	0x1000	; 0x1000 <USART_voidTransmitData>
		//Display Data on LCD
		LCD_voidSendData(DataReceived[DataIdx]);
     588:	f7 01       	movw	r30, r14
     58a:	80 81       	ld	r24, Z
     58c:	0e 94 30 04 	call	0x860	; 0x860 <LCD_voidSendData>
		//Increment Idx
		DataIdx++;
		//Decrement Max_Num only to loop Max_Num Inside While LOOP
		Max_Num --;
		//Set Timer Counter to 0 with Each Entered Input
		TIMER_voidTimer1SetPreloadValue(0);
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 df 06 	call	0xdbe	; 0xdbe <TIMER_voidTimer1SetPreloadValue>

	//Containing max enter value
	u8 Max_Num = INPUT_DECIDED_LENGTH-1;

	// Loop until reaching Max val of Input, if stucked Timer will INT and Time out
	while (Max_Num) {
     598:	0c 15       	cp	r16, r12
     59a:	1d 05       	cpc	r17, r13
     59c:	d9 f6       	brne	.-74     	; 0x554 <USART_Start+0x4a>
		//Set Timer Counter to 0 with Each Entered Input
		TIMER_voidTimer1SetPreloadValue(0);
			}

	//Display Enter in the terminal
	USART_voidTransmitData('\r');
     59e:	8d e0       	ldi	r24, 0x0D	; 13
     5a0:	0e 94 00 08 	call	0x1000	; 0x1000 <USART_voidTransmitData>

	//Checking Input Format
	ConditionsState Con_St=NoErrors;
	//Check all input Defined values * and i and * and * and #
	if(DataReceived[0]!='i' || DataReceived[1]!='*' || DataReceived[3]!='*' || DataReceived[5]!='#'){
     5a4:	89 81       	ldd	r24, Y+1	; 0x01
     5a6:	89 36       	cpi	r24, 0x69	; 105
     5a8:	49 f4       	brne	.+18     	; 0x5bc <USART_Start+0xb2>
     5aa:	8a 81       	ldd	r24, Y+2	; 0x02
     5ac:	8a 32       	cpi	r24, 0x2A	; 42
     5ae:	31 f4       	brne	.+12     	; 0x5bc <USART_Start+0xb2>
     5b0:	8c 81       	ldd	r24, Y+4	; 0x04
     5b2:	8a 32       	cpi	r24, 0x2A	; 42
     5b4:	19 f4       	brne	.+6      	; 0x5bc <USART_Start+0xb2>
     5b6:	8e 81       	ldd	r24, Y+6	; 0x06
     5b8:	83 32       	cpi	r24, 0x23	; 35
     5ba:	39 f0       	breq	.+14     	; 0x5ca <USART_Start+0xc0>
		Con_St = Input_Format_Is_Incorrect;
		USART_voidTransmitString("##INCORRECT INPUT FORMAT\r");
     5bc:	8b e3       	ldi	r24, 0x3B	; 59
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 35 08 	call	0x106a	; 0x106a <USART_voidTransmitString>
		//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
		Servo_voidInit();
     5c4:	0e 94 df 04 	call	0x9be	; 0x9be <Servo_voidInit>
		return;
     5c8:	33 c0       	rjmp	.+102    	; 0x630 <USART_Start+0x126>
	}
	// Check First Undefined Val to be 1 or 2 or 3
	// also, sending it to USART_voidProcessCommand to light correct led
	// Receiving return value as indicator to incorrect second undefined Val
	if(DataReceived[2]=='1')
     5ca:	8b 81       	ldd	r24, Y+3	; 0x03
     5cc:	81 33       	cpi	r24, 0x31	; 49
     5ce:	31 f4       	brne	.+12     	; 0x5dc <USART_Start+0xd2>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT1);
     5d0:	65 e0       	ldi	r22, 0x05	; 5
     5d2:	8d 81       	ldd	r24, Y+5	; 0x05
     5d4:	0e 94 45 02 	call	0x48a	; 0x48a <USART_voidProcessCommand>
     5d8:	18 2f       	mov	r17, r24
     5da:	0f c0       	rjmp	.+30     	; 0x5fa <USART_Start+0xf0>
	else if(DataReceived[2]=='2')
     5dc:	82 33       	cpi	r24, 0x32	; 50
     5de:	31 f4       	brne	.+12     	; 0x5ec <USART_Start+0xe2>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT2);
     5e0:	66 e0       	ldi	r22, 0x06	; 6
     5e2:	8d 81       	ldd	r24, Y+5	; 0x05
     5e4:	0e 94 45 02 	call	0x48a	; 0x48a <USART_voidProcessCommand>
     5e8:	18 2f       	mov	r17, r24
     5ea:	07 c0       	rjmp	.+14     	; 0x5fa <USART_Start+0xf0>
	else if (DataReceived[2]=='3')
     5ec:	83 33       	cpi	r24, 0x33	; 51
     5ee:	39 f4       	brne	.+14     	; 0x5fe <USART_Start+0xf4>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT3);
     5f0:	67 e0       	ldi	r22, 0x07	; 7
     5f2:	8d 81       	ldd	r24, Y+5	; 0x05
     5f4:	0e 94 45 02 	call	0x48a	; 0x48a <USART_voidProcessCommand>
     5f8:	18 2f       	mov	r17, r24
	else// If First Undefined Val is not correct
		Con_St = Input_Format_Is_Incorrect;
	//Check on Con_St Condition
	if(Con_St == Input_Format_Is_Incorrect)//There's an Error in the Format Entered
     5fa:	13 30       	cpi	r17, 0x03	; 3
     5fc:	29 f4       	brne	.+10     	; 0x608 <USART_Start+0xfe>
		USART_voidTransmitString("##INCORRECT ROOM Num or State\r");
     5fe:	85 e5       	ldi	r24, 0x55	; 85
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 35 08 	call	0x106a	; 0x106a <USART_voidTransmitString>
     606:	12 c0       	rjmp	.+36     	; 0x62c <USART_Start+0x122>
	else{//Check is Completed and there's no Error
		USART_voidTransmitString("ROOM ");
     608:	81 ef       	ldi	r24, 0xF1	; 241
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 35 08 	call	0x106a	; 0x106a <USART_voidTransmitString>
		USART_voidTransmitData(DataReceived[2]);
     610:	8b 81       	ldd	r24, Y+3	; 0x03
     612:	0e 94 00 08 	call	0x1000	; 0x1000 <USART_voidTransmitData>
		if(Con_St==ROOM_LIGHT_ON)
     616:	11 30       	cpi	r17, 0x01	; 1
     618:	29 f4       	brne	.+10     	; 0x624 <USART_Start+0x11a>
			USART_voidTransmitString(" Light Is ON\r");
     61a:	84 e7       	ldi	r24, 0x74	; 116
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	0e 94 35 08 	call	0x106a	; 0x106a <USART_voidTransmitString>
     622:	04 c0       	rjmp	.+8      	; 0x62c <USART_Start+0x122>
		else
			USART_voidTransmitString(" Light Is OFF\r");
     624:	82 e8       	ldi	r24, 0x82	; 130
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	0e 94 35 08 	call	0x106a	; 0x106a <USART_voidTransmitString>
	}
	//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
	Servo_voidInit();
     62c:	0e 94 df 04 	call	0x9be	; 0x9be <Servo_voidInit>
}
     630:	26 96       	adiw	r28, 0x06	; 6
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
     648:	df 90       	pop	r13
     64a:	cf 90       	pop	r12
     64c:	08 95       	ret

0000064e <EEPROM_voidSendDataByte>:

#include "../../MCAL/TWI_Driver/TWI_interface.h"
#include "EPROM_interface.h"

void EEPROM_voidSendDataByte(u8 Copy_u8DataByte,u16 Copy_u16LocationAddress)
{	u8 Address = ((0b1010<<3) | (A2<<2) | (Copy_u16LocationAddress>>8));
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	c8 2f       	mov	r28, r24
     656:	d6 2f       	mov	r29, r22
     658:	17 2f       	mov	r17, r23

	TWI_SendStartCondition();
     65a:	0e 94 92 07 	call	0xf24	; 0xf24 <TWI_SendStartCondition>
	TWI_SendSlaveAddressWithWrite(Address);
     65e:	81 2f       	mov	r24, r17
     660:	80 65       	ori	r24, 0x50	; 80
     662:	0e 94 b3 07 	call	0xf66	; 0xf66 <TWI_SendSlaveAddressWithWrite>
	//TWI_SendSlaveAddressWithWrite(0b1010000);/**/

	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
     666:	8d 2f       	mov	r24, r29
     668:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <TWI_MasterWriteDataByte>
	TWI_MasterWriteDataByte(Copy_u8DataByte);
     66c:	8c 2f       	mov	r24, r28
     66e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <TWI_MasterWriteDataByte>
	TWI_SendStopCondition();
     672:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TWI_SendStopCondition>
}
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	08 95       	ret

0000067e <EEPROM_voidReadDataByte>:

void EEPROM_voidReadDataByte(u8 *Copy_u8DataByte,u16 Copy_u16LocationAddress)
{	u8 Address = ((0b1010<<3) | (A2<<2) | (Copy_u16LocationAddress>>8));
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	8c 01       	movw	r16, r24
     688:	d6 2f       	mov	r29, r22
     68a:	c7 2f       	mov	r28, r23
     68c:	c0 65       	ori	r28, 0x50	; 80
	TWI_SendStartCondition();
     68e:	0e 94 92 07 	call	0xf24	; 0xf24 <TWI_SendStartCondition>
	TWI_SendSlaveAddressWithWrite(Address);
     692:	8c 2f       	mov	r24, r28
     694:	0e 94 b3 07 	call	0xf66	; 0xf66 <TWI_SendSlaveAddressWithWrite>
	//TWI_SendSlaveAddressWithWrite(0b1010000);

	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
     698:	8d 2f       	mov	r24, r29
     69a:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <TWI_MasterWriteDataByte>

	TWI_SendRepeatedStart();
     69e:	0e 94 a2 07 	call	0xf44	; 0xf44 <TWI_SendRepeatedStart>

	//TWI_MasterWriteDataByte(0b10100001);/**/
	TWI_SendSlaveAddressWithRead(Address);
     6a2:	8c 2f       	mov	r24, r28
     6a4:	0e 94 c3 07 	call	0xf86	; 0xf86 <TWI_SendSlaveAddressWithRead>
	TWI_MasterReadDataByte(Copy_u8DataByte);
     6a8:	c8 01       	movw	r24, r16
     6aa:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_MasterReadDataByte>
	TWI_SendStopCondition();
     6ae:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TWI_SendStopCondition>
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	08 95       	ret

000006bc <KPD_voidInit>:
			
void KPD_voidInit(){
	
	
	// set col s output high
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL0_PIN,DIO_OUTPUT);
     6bc:	41 e0       	ldi	r20, 0x01	; 1
     6be:	62 e0       	ldi	r22, 0x02	; 2
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL1_PIN,DIO_OUTPUT);
     6c6:	41 e0       	ldi	r20, 0x01	; 1
     6c8:	63 e0       	ldi	r22, 0x03	; 3
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL2_PIN,DIO_OUTPUT);
     6d0:	41 e0       	ldi	r20, 0x01	; 1
     6d2:	64 e0       	ldi	r22, 0x04	; 4
     6d4:	82 e0       	ldi	r24, 0x02	; 2
     6d6:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_voidSetPinDirection>
	//DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL3_PIN,DIO_OUTPUT);

	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL0_PIN,DIO_HIGH);
     6da:	41 e0       	ldi	r20, 0x01	; 1
     6dc:	62 e0       	ldi	r22, 0x02	; 2
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL1_PIN,DIO_HIGH);
     6e4:	41 e0       	ldi	r20, 0x01	; 1
     6e6:	63 e0       	ldi	r22, 0x03	; 3
     6e8:	82 e0       	ldi	r24, 0x02	; 2
     6ea:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL2_PIN,DIO_HIGH);
     6ee:	41 e0       	ldi	r20, 0x01	; 1
     6f0:	64 e0       	ldi	r22, 0x04	; 4
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL3_PIN,DIO_HIGH);

	// set rows input pull up
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_INPUT);
     6f8:	40 e0       	ldi	r20, 0x00	; 0
     6fa:	61 e0       	ldi	r22, 0x01	; 1
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_INPUT);
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	62 e0       	ldi	r22, 0x02	; 2
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_INPUT);
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	63 e0       	ldi	r22, 0x03	; 3
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_INPUT);
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	64 e0       	ldi	r22, 0x04	; 4
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_HIGH);
     720:	41 e0       	ldi	r20, 0x01	; 1
     722:	61 e0       	ldi	r22, 0x01	; 1
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_HIGH);
     72a:	41 e0       	ldi	r20, 0x01	; 1
     72c:	62 e0       	ldi	r22, 0x02	; 2
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_HIGH);
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	63 e0       	ldi	r22, 0x03	; 3
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_HIGH);
     73e:	41 e0       	ldi	r20, 0x01	; 1
     740:	64 e0       	ldi	r22, 0x04	; 4
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
     748:	08 95       	ret

0000074a <KPD_u8GetPressedKey>:

}

u8 KPD_u8GetPressedKey(void){
     74a:	4f 92       	push	r4
     74c:	5f 92       	push	r5
     74e:	6f 92       	push	r6
     750:	7f 92       	push	r7
     752:	8f 92       	push	r8
     754:	9f 92       	push	r9
     756:	af 92       	push	r10
     758:	bf 92       	push	r11
     75a:	cf 92       	push	r12
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
     76e:	63 97       	sbiw	r28, 0x13	; 19
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8Pressedkey= KPD_NO_PRESS;
	u8 Local_u8RowxValue ;


	u8 Local_u8ColumnsArray[]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN};
     77a:	22 e0       	ldi	r18, 0x02	; 2
     77c:	29 83       	std	Y+1, r18	; 0x01
     77e:	93 e0       	ldi	r25, 0x03	; 3
     780:	9a 83       	std	Y+2, r25	; 0x02
     782:	84 e0       	ldi	r24, 0x04	; 4
     784:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
     786:	31 e0       	ldi	r19, 0x01	; 1
     788:	3c 83       	std	Y+4, r19	; 0x04
     78a:	2d 83       	std	Y+5, r18	; 0x05
     78c:	9e 83       	std	Y+6, r25	; 0x06
     78e:	8f 83       	std	Y+7, r24	; 0x07

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;
     790:	8c e0       	ldi	r24, 0x0C	; 12
     792:	e2 e6       	ldi	r30, 0x62	; 98
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	de 01       	movw	r26, r28
     798:	18 96       	adiw	r26, 0x08	; 8
     79a:	01 90       	ld	r0, Z+
     79c:	0d 92       	st	X+, r0
     79e:	8a 95       	dec	r24
     7a0:	e1 f7       	brne	.-8      	; 0x79a <KPD_u8GetPressedKey+0x50>
     7a2:	ce 01       	movw	r24, r28
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	4c 01       	movw	r8, r24
     7a8:	a1 2c       	mov	r10, r1
     7aa:	b1 2c       	mov	r11, r1


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);
     7ac:	35 01       	movw	r6, r10
     7ae:	f4 01       	movw	r30, r8
     7b0:	41 90       	ld	r4, Z+
     7b2:	4f 01       	movw	r8, r30
     7b4:	40 e0       	ldi	r20, 0x00	; 0
     7b6:	64 2d       	mov	r22, r4
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
     7be:	7e 01       	movw	r14, r28
     7c0:	f4 e0       	ldi	r31, 0x04	; 4
     7c2:	ef 0e       	add	r14, r31
     7c4:	f1 1c       	adc	r15, r1
     7c6:	00 e0       	ldi	r16, 0x00	; 0
     7c8:	10 e0       	ldi	r17, 0x00	; 0

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){

			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
     7ca:	68 01       	movw	r12, r16
     7cc:	f7 01       	movw	r30, r14
     7ce:	51 90       	ld	r5, Z+
     7d0:	7f 01       	movw	r14, r30
     7d2:	65 2d       	mov	r22, r5
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	0e 94 9d 05 	call	0xb3a	; 0xb3a <DIO_u8GetPinValue>

			if(Local_u8RowxValue==0){
     7da:	81 11       	cpse	r24, r1
     7dc:	17 c0       	rjmp	.+46     	; 0x80c <KPD_u8GetPressedKey+0xc2>

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
     7de:	c8 01       	movw	r24, r16
     7e0:	88 0f       	add	r24, r24
     7e2:	99 1f       	adc	r25, r25
     7e4:	c8 0e       	add	r12, r24
     7e6:	d9 1e       	adc	r13, r25
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	8c 0f       	add	r24, r28
     7ee:	9d 1f       	adc	r25, r29
     7f0:	c8 0e       	add	r12, r24
     7f2:	d9 1e       	adc	r13, r25
     7f4:	f6 01       	movw	r30, r12
     7f6:	e6 0d       	add	r30, r6
     7f8:	f7 1d       	adc	r31, r7
     7fa:	17 81       	ldd	r17, Z+7	; 0x07
				while(Local_u8RowxValue==0){
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
     7fc:	65 2d       	mov	r22, r5
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	0e 94 9d 05 	call	0xb3a	; 0xb3a <DIO_u8GetPinValue>
			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

			if(Local_u8RowxValue==0){

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
				while(Local_u8RowxValue==0){
     804:	88 23       	and	r24, r24
     806:	d1 f3       	breq	.-12     	; 0x7fc <KPD_u8GetPressedKey+0xb2>
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

				}

				return Local_u8Pressedkey ;
     808:	81 2f       	mov	r24, r17
     80a:	13 c0       	rjmp	.+38     	; 0x832 <KPD_u8GetPressedKey+0xe8>
     80c:	0f 5f       	subi	r16, 0xFF	; 255
     80e:	1f 4f       	sbci	r17, 0xFF	; 255

	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){
     810:	04 30       	cpi	r16, 0x04	; 4
     812:	11 05       	cpc	r17, r1
     814:	d1 f6       	brne	.-76     	; 0x7ca <KPD_u8GetPressedKey+0x80>
			}


		}

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_HIGH);
     816:	41 e0       	ldi	r20, 0x01	; 1
     818:	64 2d       	mov	r22, r4
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
     820:	9f ef       	ldi	r25, 0xFF	; 255
     822:	a9 1a       	sub	r10, r25
     824:	b9 0a       	sbc	r11, r25
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){
     826:	e3 e0       	ldi	r30, 0x03	; 3
     828:	ae 16       	cp	r10, r30
     82a:	b1 04       	cpc	r11, r1
     82c:	09 f0       	breq	.+2      	; 0x830 <KPD_u8GetPressedKey+0xe6>
     82e:	be cf       	rjmp	.-132    	; 0x7ac <KPD_u8GetPressedKey+0x62>


	}


	return Local_u8Pressedkey ;
     830:	8a ea       	ldi	r24, 0xAA	; 170
     832:	63 96       	adiw	r28, 0x13	; 19
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	f8 94       	cli
     838:	de bf       	out	0x3e, r29	; 62
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	cd bf       	out	0x3d, r28	; 61
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	ff 90       	pop	r15
     848:	ef 90       	pop	r14
     84a:	df 90       	pop	r13
     84c:	cf 90       	pop	r12
     84e:	bf 90       	pop	r11
     850:	af 90       	pop	r10
     852:	9f 90       	pop	r9
     854:	8f 90       	pop	r8
     856:	7f 90       	pop	r7
     858:	6f 90       	pop	r6
     85a:	5f 90       	pop	r5
     85c:	4f 90       	pop	r4
     85e:	08 95       	ret

00000860 <LCD_voidSendData>:
		LCD_voidSendCommand(0b00000010);
		Local_u8AddressCounter=0;
		
	}
	else
		Local_u8AddressCounter++;
     860:	cf 93       	push	r28
     862:	c8 2f       	mov	r28, r24
     864:	41 e0       	ldi	r20, 0x01	; 1
     866:	65 e0       	ldi	r22, 0x05	; 5
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	66 e0       	ldi	r22, 0x06	; 6
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
     878:	6c 2f       	mov	r22, r28
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <DIO_voidSetPortValue>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	67 e0       	ldi	r22, 0x07	; 7
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
     88a:	8f e9       	ldi	r24, 0x9F	; 159
     88c:	9f e0       	ldi	r25, 0x0F	; 15
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	f1 f7       	brne	.-4      	; 0x88e <LCD_voidSendData+0x2e>
     892:	00 c0       	rjmp	.+0      	; 0x894 <LCD_voidSendData+0x34>
     894:	00 00       	nop
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	67 e0       	ldi	r22, 0x07	; 7
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <LCD_voidSendCommand>:
     8a4:	cf 93       	push	r28
     8a6:	c8 2f       	mov	r28, r24
     8a8:	40 e0       	ldi	r20, 0x00	; 0
     8aa:	65 e0       	ldi	r22, 0x05	; 5
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	66 e0       	ldi	r22, 0x06	; 6
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
     8bc:	6c 2f       	mov	r22, r28
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	0e 94 8d 05 	call	0xb1a	; 0xb1a <DIO_voidSetPortValue>
     8c4:	41 e0       	ldi	r20, 0x01	; 1
     8c6:	67 e0       	ldi	r22, 0x07	; 7
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
     8ce:	8f e9       	ldi	r24, 0x9F	; 159
     8d0:	9f e0       	ldi	r25, 0x0F	; 15
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <LCD_voidSendCommand+0x2e>
     8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <LCD_voidSendCommand+0x34>
     8d8:	00 00       	nop
     8da:	40 e0       	ldi	r20, 0x00	; 0
     8dc:	67 e0       	ldi	r22, 0x07	; 7
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_voidSetPinValue>
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <LCD_voidInit>:
     8e8:	6f ef       	ldi	r22, 0xFF	; 255
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	0e 94 7d 05 	call	0xafa	; 0xafa <DIO_voidSetPortDirection>
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	65 e0       	ldi	r22, 0x05	; 5
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_voidSetPinDirection>
     8fa:	41 e0       	ldi	r20, 0x01	; 1
     8fc:	66 e0       	ldi	r22, 0x06	; 6
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_voidSetPinDirection>
     904:	41 e0       	ldi	r20, 0x01	; 1
     906:	67 e0       	ldi	r22, 0x07	; 7
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	0e 94 21 05 	call	0xa42	; 0xa42 <DIO_voidSetPinDirection>
     90e:	2f ef       	ldi	r18, 0xFF	; 255
     910:	89 ef       	ldi	r24, 0xF9	; 249
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	21 50       	subi	r18, 0x01	; 1
     916:	80 40       	sbci	r24, 0x00	; 0
     918:	90 40       	sbci	r25, 0x00	; 0
     91a:	e1 f7       	brne	.-8      	; 0x914 <LCD_voidInit+0x2c>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <LCD_voidInit+0x36>
     91e:	00 00       	nop
     920:	88 e3       	ldi	r24, 0x38	; 56
     922:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_voidSendCommand>
     926:	8c e0       	ldi	r24, 0x0C	; 12
     928:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_voidSendCommand>
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_voidSendCommand>
     932:	86 e0       	ldi	r24, 0x06	; 6
     934:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_voidSendCommand>
     938:	08 95       	ret

0000093a <LCD_voidClearDisplay>:
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_voidSendCommand>
     940:	08 95       	ret

00000942 <LCD_voidGoTOXY>:
     942:	90 e4       	ldi	r25, 0x40	; 64
     944:	89 9f       	mul	r24, r25
     946:	60 0d       	add	r22, r0
     948:	11 24       	eor	r1, r1
     94a:	86 2f       	mov	r24, r22
     94c:	80 68       	ori	r24, 0x80	; 128
     94e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_voidSendCommand>
     952:	08 95       	ret

00000954 <LCD_voidSendString>:
		
		
}

void LCD_voidSendString(u8* Copy_pcString)
{
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	fc 01       	movw	r30, r24
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
     95c:	80 81       	ld	r24, Z
     95e:	88 23       	and	r24, r24
     960:	59 f0       	breq	.+22     	; 0x978 <LCD_voidSendString+0x24>
     962:	8f 01       	movw	r16, r30
     964:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
     966:	0e 94 30 04 	call	0x860	; 0x860 <LCD_voidSendData>
		Local_u8Index++;
     96a:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_voidSendString(u8* Copy_pcString)
{
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
     96c:	f8 01       	movw	r30, r16
     96e:	ec 0f       	add	r30, r28
     970:	f1 1d       	adc	r31, r1
     972:	80 81       	ld	r24, Z
     974:	81 11       	cpse	r24, r1
     976:	f7 cf       	rjmp	.-18     	; 0x966 <LCD_voidSendString+0x12>
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
		Local_u8Index++;
	}
}
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	08 95       	ret

00000980 <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
     988:	2a 97       	sbiw	r28, 0x0a	; 10
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	de bf       	out	0x3e, r29	; 62
     990:	0f be       	out	0x3f, r0	; 63
     992:	cd bf       	out	0x3d, r28	; 61
     994:	dc 01       	movw	r26, r24
     996:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     998:	4a e0       	ldi	r20, 0x0A	; 10
     99a:	be 01       	movw	r22, r28
     99c:	6f 5f       	subi	r22, 0xFF	; 255
     99e:	7f 4f       	sbci	r23, 0xFF	; 255
     9a0:	0e 94 84 0a 	call	0x1508	; 0x1508 <__itoa_ncheck>
	u8 Local_u8Str[10];
	itoa(Copy_u32Number, Local_u8Str,10);
	LCD_voidSendString(Local_u8Str);
     9a4:	ce 01       	movw	r24, r28
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	0e 94 aa 04 	call	0x954	; 0x954 <LCD_voidSendString>

}
     9ac:	2a 96       	adiw	r28, 0x0a	; 10
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	cd bf       	out	0x3d, r28	; 61
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <Servo_voidInit>:

#include"../../MCAL/TIMER_Driver/TIMER_Interface.h"
 u16 Ticks=0;
 void Servo_voidInit(void){
	 //Using Timer 1 PWM Mode,  prescaller 8 ==>010
		TIMER_voidTimer1Init(PWM,10);
     9be:	6a e0       	ldi	r22, 0x0A	; 10
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <TIMER_voidTimer1Init>
	 // Servo Total time = 20ms
		TIMER_voidSetOverFlow(20000);
     9c6:	80 e2       	ldi	r24, 0x20	; 32
     9c8:	9e e4       	ldi	r25, 0x4E	; 78
     9ca:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <TIMER_voidSetOverFlow>
     9ce:	08 95       	ret

000009d0 <Servo_voidDegree>:

void Servo_voidDegree(u8 Copy_u8Degree){
	if(Copy_u8Degree>180)
		Copy_u8Degree = 180;
	f32 Ton = (1/180.0) * Copy_u8Degree + 1;
	Ticks = Ton * 1000;
     9d0:	85 3b       	cpi	r24, 0xB5	; 181
     9d2:	08 f0       	brcs	.+2      	; 0x9d6 <Servo_voidDegree+0x6>
     9d4:	84 eb       	ldi	r24, 0xB4	; 180
     9d6:	68 2f       	mov	r22, r24
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 8b 09 	call	0x1316	; 0x1316 <__floatsisf>
     9e2:	21 e6       	ldi	r18, 0x61	; 97
     9e4:	3b e0       	ldi	r19, 0x0B	; 11
     9e6:	46 eb       	ldi	r20, 0xB6	; 182
     9e8:	5b e3       	ldi	r21, 0x3B	; 59
     9ea:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	40 e8       	ldi	r20, 0x80	; 128
     9f4:	5f e3       	ldi	r21, 0x3F	; 63
     9f6:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__addsf3>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	4a e7       	ldi	r20, 0x7A	; 122
     a00:	54 e4       	ldi	r21, 0x44	; 68
     a02:	0e 94 17 0a 	call	0x142e	; 0x142e <__mulsf3>
     a06:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__fixunssfsi>
     a0a:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <Ticks+0x1>
     a0e:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <Ticks>
	TIMER_voidTimer1ChannelASetCompareValue(Ticks);
     a12:	cb 01       	movw	r24, r22
     a14:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <TIMER_voidTimer1ChannelASetCompareValue>
     a18:	08 95       	ret

00000a1a <ADC_voidInit>:
	2- 8bit res --> left adjustment
	3- prescaler
	4- enable ADC
	*/
	// use AVCC
	SET_BIT(ADMUX,6);
     a1a:	3e 9a       	sbi	0x07, 6	; 7
	CLR_BIT(ADMUX,7);
     a1c:	3f 98       	cbi	0x07, 7	; 7
	// left adjust
	SET_BIT(ADMUX,5);
     a1e:	3d 9a       	sbi	0x07, 5	; 7
	// prescaler  --> /64
	CLR_BIT(ADCSRA,0);
     a20:	30 98       	cbi	0x06, 0	; 6
	SET_BIT(ADCSRA,1);
     a22:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,2);
     a24:	32 9a       	sbi	0x06, 2	; 6
	// enable 
	SET_BIT(ADCSRA,7);
     a26:	37 9a       	sbi	0x06, 7	; 6
     a28:	08 95       	ret

00000a2a <ADC_u8StartConversion>:
	
}

u8 ADC_u8StartConversion(u8 Copy_u8ChannelNumber){
	// channel select
	ADMUX &= 0b11100000;
     a2a:	97 b1       	in	r25, 0x07	; 7
     a2c:	90 7e       	andi	r25, 0xE0	; 224
     a2e:	97 b9       	out	0x07, r25	; 7
	ADMUX |=Copy_u8ChannelNumber;
     a30:	97 b1       	in	r25, 0x07	; 7
     a32:	89 2b       	or	r24, r25
     a34:	87 b9       	out	0x07, r24	; 7
	
	// start conversion
	SET_BIT(ADCSRA,6);
     a36:	36 9a       	sbi	0x06, 6	; 6
	
	// wait until conversion complete
	// by checking the flag
	while(GET_BIT(ADCSRA,4)==0);
     a38:	34 9b       	sbis	0x06, 4	; 6
     a3a:	fe cf       	rjmp	.-4      	; 0xa38 <ADC_u8StartConversion+0xe>
	
	//clear flag 
	SET_BIT(ADCSRA,4);
     a3c:	34 9a       	sbi	0x06, 4	; 6
	
	return ADCH;
     a3e:	85 b1       	in	r24, 0x05	; 5
}
     a40:	08 95       	ret

00000a42 <DIO_voidSetPinDirection>:


void DIO_voidSetPinDirection(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinState ){

	volatile u8* Local_u8PTR_DDRx;
	switch(Copy_u8PortName){
     a42:	81 30       	cpi	r24, 0x01	; 1
     a44:	49 f0       	breq	.+18     	; 0xa58 <DIO_voidSetPinDirection+0x16>
     a46:	28 f0       	brcs	.+10     	; 0xa52 <DIO_voidSetPinDirection+0x10>
     a48:	82 30       	cpi	r24, 0x02	; 2
     a4a:	49 f0       	breq	.+18     	; 0xa5e <DIO_voidSetPinDirection+0x1c>
     a4c:	83 30       	cpi	r24, 0x03	; 3
     a4e:	51 f0       	breq	.+20     	; 0xa64 <DIO_voidSetPinDirection+0x22>
     a50:	0b c0       	rjmp	.+22     	; 0xa68 <DIO_voidSetPinDirection+0x26>

		case DIO_PORTA:
		Local_u8PTR_DDRx=&DDRA;
     a52:	ea e3       	ldi	r30, 0x3A	; 58
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	08 c0       	rjmp	.+16     	; 0xa68 <DIO_voidSetPinDirection+0x26>
		break;
		case DIO_PORTB:
		Local_u8PTR_DDRx=&DDRB;
     a58:	e7 e3       	ldi	r30, 0x37	; 55
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     a5c:	05 c0       	rjmp	.+10     	; 0xa68 <DIO_voidSetPinDirection+0x26>
		case DIO_PORTC:
		Local_u8PTR_DDRx=&DDRC;
     a5e:	e4 e3       	ldi	r30, 0x34	; 52
     a60:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <DIO_voidSetPinDirection+0x26>
		case DIO_PORTD:
		Local_u8PTR_DDRx=&DDRD;
     a64:	e1 e3       	ldi	r30, 0x31	; 49
     a66:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinState){
     a68:	44 23       	and	r20, r20
     a6a:	69 f0       	breq	.+26     	; 0xa86 <DIO_voidSetPinDirection+0x44>
     a6c:	41 30       	cpi	r20, 0x01	; 1
     a6e:	b1 f4       	brne	.+44     	; 0xa9c <DIO_voidSetPinDirection+0x5a>

		case DIO_OUTPUT:
		SET_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
     a70:	20 81       	ld	r18, Z
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <DIO_voidSetPinDirection+0x3a>
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	6a 95       	dec	r22
     a7e:	e2 f7       	brpl	.-8      	; 0xa78 <DIO_voidSetPinDirection+0x36>
     a80:	82 2b       	or	r24, r18
     a82:	80 83       	st	Z, r24
		break;
     a84:	08 95       	ret
		case DIO_INPUT:
		CLR_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
     a86:	20 81       	ld	r18, Z
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <DIO_voidSetPinDirection+0x50>
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	6a 95       	dec	r22
     a94:	e2 f7       	brpl	.-8      	; 0xa8e <DIO_voidSetPinDirection+0x4c>
     a96:	80 95       	com	r24
     a98:	82 23       	and	r24, r18
     a9a:	80 83       	st	Z, r24
     a9c:	08 95       	ret

00000a9e <DIO_voidSetPinValue>:

}
void DIO_voidSetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinValue ){

	volatile u8* Local_u8PTR_PORTx;
	switch(Copy_u8PortName){
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	49 f0       	breq	.+18     	; 0xab4 <DIO_voidSetPinValue+0x16>
     aa2:	28 f0       	brcs	.+10     	; 0xaae <DIO_voidSetPinValue+0x10>
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	49 f0       	breq	.+18     	; 0xaba <DIO_voidSetPinValue+0x1c>
     aa8:	83 30       	cpi	r24, 0x03	; 3
     aaa:	51 f0       	breq	.+20     	; 0xac0 <DIO_voidSetPinValue+0x22>
     aac:	0b c0       	rjmp	.+22     	; 0xac4 <DIO_voidSetPinValue+0x26>

		case DIO_PORTA:
		Local_u8PTR_PORTx=&PORTA;
     aae:	eb e3       	ldi	r30, 0x3B	; 59
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	08 c0       	rjmp	.+16     	; 0xac4 <DIO_voidSetPinValue+0x26>
		break;
		case DIO_PORTB:
		Local_u8PTR_PORTx=&PORTB;
     ab4:	e8 e3       	ldi	r30, 0x38	; 56
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     ab8:	05 c0       	rjmp	.+10     	; 0xac4 <DIO_voidSetPinValue+0x26>
		case DIO_PORTC:
		Local_u8PTR_PORTx=&PORTC;
     aba:	e5 e3       	ldi	r30, 0x35	; 53
     abc:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <DIO_voidSetPinValue+0x26>
		case DIO_PORTD:
		Local_u8PTR_PORTx=&PORTD;
     ac0:	e2 e3       	ldi	r30, 0x32	; 50
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinValue){
     ac4:	44 23       	and	r20, r20
     ac6:	69 f0       	breq	.+26     	; 0xae2 <DIO_voidSetPinValue+0x44>
     ac8:	41 30       	cpi	r20, 0x01	; 1
     aca:	b1 f4       	brne	.+44     	; 0xaf8 <DIO_voidSetPinValue+0x5a>

		case DIO_HIGH:
		SET_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
     acc:	20 81       	ld	r18, Z
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <DIO_voidSetPinValue+0x3a>
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	6a 95       	dec	r22
     ada:	e2 f7       	brpl	.-8      	; 0xad4 <DIO_voidSetPinValue+0x36>
     adc:	82 2b       	or	r24, r18
     ade:	80 83       	st	Z, r24
		break;
     ae0:	08 95       	ret
		case DIO_LOW:
		CLR_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
     ae2:	20 81       	ld	r18, Z
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <DIO_voidSetPinValue+0x50>
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	6a 95       	dec	r22
     af0:	e2 f7       	brpl	.-8      	; 0xaea <DIO_voidSetPinValue+0x4c>
     af2:	80 95       	com	r24
     af4:	82 23       	and	r24, r18
     af6:	80 83       	st	Z, r24
     af8:	08 95       	ret

00000afa <DIO_voidSetPortDirection>:

}

void DIO_voidSetPortDirection(u8 Copy_u8PortName ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
     afa:	81 30       	cpi	r24, 0x01	; 1
     afc:	41 f0       	breq	.+16     	; 0xb0e <DIO_voidSetPortDirection+0x14>
     afe:	28 f0       	brcs	.+10     	; 0xb0a <DIO_voidSetPortDirection+0x10>
     b00:	82 30       	cpi	r24, 0x02	; 2
     b02:	39 f0       	breq	.+14     	; 0xb12 <DIO_voidSetPortDirection+0x18>
     b04:	83 30       	cpi	r24, 0x03	; 3
     b06:	39 f0       	breq	.+14     	; 0xb16 <DIO_voidSetPortDirection+0x1c>
     b08:	08 95       	ret

		case DIO_PORTA:
		DDRA=Copy_u8PortValue;
     b0a:	6a bb       	out	0x1a, r22	; 26
		break;
     b0c:	08 95       	ret
		case DIO_PORTB:
		DDRB=Copy_u8PortValue;
     b0e:	67 bb       	out	0x17, r22	; 23
		break;
     b10:	08 95       	ret
		case DIO_PORTC:
		DDRC=Copy_u8PortValue;
     b12:	64 bb       	out	0x14, r22	; 20
		break;
     b14:	08 95       	ret
		case DIO_PORTD:
		DDRD=Copy_u8PortValue;
     b16:	61 bb       	out	0x11, r22	; 17
     b18:	08 95       	ret

00000b1a <DIO_voidSetPortValue>:
	}

}
void DIO_voidSetPortValue(u8 Copy_u8PortName  ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
     b1a:	81 30       	cpi	r24, 0x01	; 1
     b1c:	41 f0       	breq	.+16     	; 0xb2e <DIO_voidSetPortValue+0x14>
     b1e:	28 f0       	brcs	.+10     	; 0xb2a <DIO_voidSetPortValue+0x10>
     b20:	82 30       	cpi	r24, 0x02	; 2
     b22:	39 f0       	breq	.+14     	; 0xb32 <DIO_voidSetPortValue+0x18>
     b24:	83 30       	cpi	r24, 0x03	; 3
     b26:	39 f0       	breq	.+14     	; 0xb36 <DIO_voidSetPortValue+0x1c>
     b28:	08 95       	ret

		case DIO_PORTA:
		PORTA=Copy_u8PortValue;
     b2a:	6b bb       	out	0x1b, r22	; 27
		break;
     b2c:	08 95       	ret
		case DIO_PORTB:
		PORTB=Copy_u8PortValue;
     b2e:	68 bb       	out	0x18, r22	; 24
		break;
     b30:	08 95       	ret
		case DIO_PORTC:
		PORTC=Copy_u8PortValue;
     b32:	65 bb       	out	0x15, r22	; 21
		break;
     b34:	08 95       	ret
		case DIO_PORTD:
		PORTD=Copy_u8PortValue;
     b36:	62 bb       	out	0x12, r22	; 18
     b38:	08 95       	ret

00000b3a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber){

	
	u8 Local_u8PinValue;
	switch(Copy_u8PortName){
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	81 f0       	breq	.+32     	; 0xb5e <DIO_u8GetPinValue+0x24>
     b3e:	28 f0       	brcs	.+10     	; 0xb4a <DIO_u8GetPinValue+0x10>
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	b9 f0       	breq	.+46     	; 0xb72 <DIO_u8GetPinValue+0x38>
     b44:	83 30       	cpi	r24, 0x03	; 3
     b46:	f9 f0       	breq	.+62     	; 0xb86 <DIO_u8GetPinValue+0x4c>
     b48:	27 c0       	rjmp	.+78     	; 0xb98 <DIO_u8GetPinValue+0x5e>

		case DIO_PORTA:
		Local_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
     b4a:	89 b3       	in	r24, 0x19	; 25
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <DIO_u8GetPinValue+0x1a>
     b50:	95 95       	asr	r25
     b52:	87 95       	ror	r24
     b54:	6a 95       	dec	r22
     b56:	e2 f7       	brpl	.-8      	; 0xb50 <DIO_u8GetPinValue+0x16>
     b58:	98 2f       	mov	r25, r24
     b5a:	91 70       	andi	r25, 0x01	; 1
		break;
     b5c:	1d c0       	rjmp	.+58     	; 0xb98 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTB:
		Local_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
     b5e:	86 b3       	in	r24, 0x16	; 22
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <DIO_u8GetPinValue+0x2e>
     b64:	95 95       	asr	r25
     b66:	87 95       	ror	r24
     b68:	6a 95       	dec	r22
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <DIO_u8GetPinValue+0x2a>
     b6c:	98 2f       	mov	r25, r24
     b6e:	91 70       	andi	r25, 0x01	; 1
		break;
     b70:	13 c0       	rjmp	.+38     	; 0xb98 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTC:
		Local_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
     b72:	83 b3       	in	r24, 0x13	; 19
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <DIO_u8GetPinValue+0x42>
     b78:	95 95       	asr	r25
     b7a:	87 95       	ror	r24
     b7c:	6a 95       	dec	r22
     b7e:	e2 f7       	brpl	.-8      	; 0xb78 <DIO_u8GetPinValue+0x3e>
     b80:	98 2f       	mov	r25, r24
     b82:	91 70       	andi	r25, 0x01	; 1
		break;
     b84:	09 c0       	rjmp	.+18     	; 0xb98 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTD:
		Local_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
     b86:	80 b3       	in	r24, 0x10	; 16
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <DIO_u8GetPinValue+0x56>
     b8c:	95 95       	asr	r25
     b8e:	87 95       	ror	r24
     b90:	6a 95       	dec	r22
     b92:	e2 f7       	brpl	.-8      	; 0xb8c <DIO_u8GetPinValue+0x52>
     b94:	98 2f       	mov	r25, r24
     b96:	91 70       	andi	r25, 0x01	; 1

	

	return Local_u8PinValue;

}
     b98:	89 2f       	mov	r24, r25
     b9a:	08 95       	ret

00000b9c <__vector_1>:
void EXTI_voidSetCallBackINT2(void(*NotifyFunc2)(void)){
	
	Global_pvINT2NotifyFunc=NotifyFunc2;
}

ISR(INT0_vect){
     b9c:	1f 92       	push	r1
     b9e:	0f 92       	push	r0
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	0f 92       	push	r0
     ba4:	11 24       	eor	r1, r1
     ba6:	2f 93       	push	r18
     ba8:	3f 93       	push	r19
     baa:	4f 93       	push	r20
     bac:	5f 93       	push	r21
     bae:	6f 93       	push	r22
     bb0:	7f 93       	push	r23
     bb2:	8f 93       	push	r24
     bb4:	9f 93       	push	r25
     bb6:	af 93       	push	r26
     bb8:	bf 93       	push	r27
     bba:	ef 93       	push	r30
     bbc:	ff 93       	push	r31
	
	if(Global_pvINT0NotifyFunc!=NULL_PTR)
     bbe:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <Global_pvINT0NotifyFunc>
     bc2:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <Global_pvINT0NotifyFunc+0x1>
     bc6:	30 97       	sbiw	r30, 0x00	; 0
     bc8:	09 f0       	breq	.+2      	; 0xbcc <__vector_1+0x30>
			Global_pvINT0NotifyFunc();
     bca:	09 95       	icall
	
}
     bcc:	ff 91       	pop	r31
     bce:	ef 91       	pop	r30
     bd0:	bf 91       	pop	r27
     bd2:	af 91       	pop	r26
     bd4:	9f 91       	pop	r25
     bd6:	8f 91       	pop	r24
     bd8:	7f 91       	pop	r23
     bda:	6f 91       	pop	r22
     bdc:	5f 91       	pop	r21
     bde:	4f 91       	pop	r20
     be0:	3f 91       	pop	r19
     be2:	2f 91       	pop	r18
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f 90       	pop	r0
     bea:	1f 90       	pop	r1
     bec:	18 95       	reti

00000bee <__vector_2>:

ISR(INT1_vect){
     bee:	1f 92       	push	r1
     bf0:	0f 92       	push	r0
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	0f 92       	push	r0
     bf6:	11 24       	eor	r1, r1
     bf8:	2f 93       	push	r18
     bfa:	3f 93       	push	r19
     bfc:	4f 93       	push	r20
     bfe:	5f 93       	push	r21
     c00:	6f 93       	push	r22
     c02:	7f 93       	push	r23
     c04:	8f 93       	push	r24
     c06:	9f 93       	push	r25
     c08:	af 93       	push	r26
     c0a:	bf 93       	push	r27
     c0c:	ef 93       	push	r30
     c0e:	ff 93       	push	r31
	
	if(Global_pvINT1NotifyFunc!=NULL_PTR)
     c10:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <Global_pvINT1NotifyFunc>
     c14:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <Global_pvINT1NotifyFunc+0x1>
     c18:	30 97       	sbiw	r30, 0x00	; 0
     c1a:	09 f0       	breq	.+2      	; 0xc1e <__vector_2+0x30>
			Global_pvINT1NotifyFunc();
     c1c:	09 95       	icall
	
}
     c1e:	ff 91       	pop	r31
     c20:	ef 91       	pop	r30
     c22:	bf 91       	pop	r27
     c24:	af 91       	pop	r26
     c26:	9f 91       	pop	r25
     c28:	8f 91       	pop	r24
     c2a:	7f 91       	pop	r23
     c2c:	6f 91       	pop	r22
     c2e:	5f 91       	pop	r21
     c30:	4f 91       	pop	r20
     c32:	3f 91       	pop	r19
     c34:	2f 91       	pop	r18
     c36:	0f 90       	pop	r0
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	0f 90       	pop	r0
     c3c:	1f 90       	pop	r1
     c3e:	18 95       	reti

00000c40 <__vector_3>:
ISR(INT2_vect){
     c40:	1f 92       	push	r1
     c42:	0f 92       	push	r0
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	0f 92       	push	r0
     c48:	11 24       	eor	r1, r1
     c4a:	2f 93       	push	r18
     c4c:	3f 93       	push	r19
     c4e:	4f 93       	push	r20
     c50:	5f 93       	push	r21
     c52:	6f 93       	push	r22
     c54:	7f 93       	push	r23
     c56:	8f 93       	push	r24
     c58:	9f 93       	push	r25
     c5a:	af 93       	push	r26
     c5c:	bf 93       	push	r27
     c5e:	ef 93       	push	r30
     c60:	ff 93       	push	r31
	
	if(Global_pvINT2NotifyFunc!=NULL_PTR)
     c62:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <Global_pvINT2NotifyFunc>
     c66:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <Global_pvINT2NotifyFunc+0x1>
     c6a:	30 97       	sbiw	r30, 0x00	; 0
     c6c:	09 f0       	breq	.+2      	; 0xc70 <__vector_3+0x30>
			Global_pvINT2NotifyFunc();
     c6e:	09 95       	icall
	
     c70:	ff 91       	pop	r31
     c72:	ef 91       	pop	r30
     c74:	bf 91       	pop	r27
     c76:	af 91       	pop	r26
     c78:	9f 91       	pop	r25
     c7a:	8f 91       	pop	r24
     c7c:	7f 91       	pop	r23
     c7e:	6f 91       	pop	r22
     c80:	5f 91       	pop	r21
     c82:	4f 91       	pop	r20
     c84:	3f 91       	pop	r19
     c86:	2f 91       	pop	r18
     c88:	0f 90       	pop	r0
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	0f 90       	pop	r0
     c8e:	1f 90       	pop	r1
     c90:	18 95       	reti

00000c92 <GIE_voidEnableGlobalInt>:
#include<avr/io.h>
#include"../../LIB/BIT_MATH.h"

void GIE_voidEnableGlobalInt(void){
	
	SET_BIT(SREG,7);
     c92:	8f b7       	in	r24, 0x3f	; 63
     c94:	80 68       	ori	r24, 0x80	; 128
     c96:	8f bf       	out	0x3f, r24	; 63
     c98:	08 95       	ret

00000c9a <TIMER_delay_ms>:
	GLOBAL_ICU_ISR = Copy_PTR_ICUFunction;
}

u16 ICU_u16ReadInputCapture(void){
	return ICR1;
}
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	8b 01       	movw	r16, r22
     ca0:	9c 01       	movw	r18, r24
     ca2:	67 2b       	or	r22, r23
     ca4:	68 2b       	or	r22, r24
     ca6:	69 2b       	or	r22, r25
     ca8:	69 f4       	brne	.+26     	; 0xcc4 <TIMER_delay_ms+0x2a>
     caa:	12 c0       	rjmp	.+36     	; 0xcd0 <TIMER_delay_ms+0x36>
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <TIMER_delay_ms+0x12>
     cb0:	4f 5f       	subi	r20, 0xFF	; 255
     cb2:	5f 4f       	sbci	r21, 0xFF	; 255
     cb4:	6f 4f       	sbci	r22, 0xFF	; 255
     cb6:	7f 4f       	sbci	r23, 0xFF	; 255
     cb8:	04 17       	cp	r16, r20
     cba:	15 07       	cpc	r17, r21
     cbc:	26 07       	cpc	r18, r22
     cbe:	37 07       	cpc	r19, r23
     cc0:	21 f4       	brne	.+8      	; 0xcca <TIMER_delay_ms+0x30>
     cc2:	06 c0       	rjmp	.+12     	; 0xcd0 <TIMER_delay_ms+0x36>
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	ba 01       	movw	r22, r20
     cca:	8e e5       	ldi	r24, 0x5E	; 94
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	ee cf       	rjmp	.-36     	; 0xcac <TIMER_delay_ms+0x12>
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	08 95       	ret

00000cd6 <TIMER_voidTimer1Init>:
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	a1 f0       	breq	.+40     	; 0xd02 <TIMER_voidTimer1Init+0x2c>
     cda:	18 f0       	brcs	.+6      	; 0xce2 <TIMER_voidTimer1Init+0xc>
     cdc:	82 30       	cpi	r24, 0x02	; 2
     cde:	09 f1       	breq	.+66     	; 0xd22 <TIMER_voidTimer1Init+0x4c>
     ce0:	32 c0       	rjmp	.+100    	; 0xd46 <TIMER_voidTimer1Init+0x70>
     ce2:	8f b5       	in	r24, 0x2f	; 47
     ce4:	8e 7f       	andi	r24, 0xFE	; 254
     ce6:	8f bd       	out	0x2f, r24	; 47
     ce8:	8f b5       	in	r24, 0x2f	; 47
     cea:	8d 7f       	andi	r24, 0xFD	; 253
     cec:	8f bd       	out	0x2f, r24	; 47
     cee:	8e b5       	in	r24, 0x2e	; 46
     cf0:	87 7f       	andi	r24, 0xF7	; 247
     cf2:	8e bd       	out	0x2e, r24	; 46
     cf4:	8e b5       	in	r24, 0x2e	; 46
     cf6:	8f 7e       	andi	r24, 0xEF	; 239
     cf8:	8e bd       	out	0x2e, r24	; 46
     cfa:	89 b7       	in	r24, 0x39	; 57
     cfc:	84 60       	ori	r24, 0x04	; 4
     cfe:	89 bf       	out	0x39, r24	; 57
     d00:	22 c0       	rjmp	.+68     	; 0xd46 <TIMER_voidTimer1Init+0x70>
     d02:	8f b5       	in	r24, 0x2f	; 47
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	8f bd       	out	0x2f, r24	; 47
     d08:	8f b5       	in	r24, 0x2f	; 47
     d0a:	8d 7f       	andi	r24, 0xFD	; 253
     d0c:	8f bd       	out	0x2f, r24	; 47
     d0e:	8e b5       	in	r24, 0x2e	; 46
     d10:	88 60       	ori	r24, 0x08	; 8
     d12:	8e bd       	out	0x2e, r24	; 46
     d14:	8e b5       	in	r24, 0x2e	; 46
     d16:	8f 7e       	andi	r24, 0xEF	; 239
     d18:	8e bd       	out	0x2e, r24	; 46
     d1a:	89 b7       	in	r24, 0x39	; 57
     d1c:	80 61       	ori	r24, 0x10	; 16
     d1e:	89 bf       	out	0x39, r24	; 57
     d20:	12 c0       	rjmp	.+36     	; 0xd46 <TIMER_voidTimer1Init+0x70>
     d22:	8f b5       	in	r24, 0x2f	; 47
     d24:	8f 7b       	andi	r24, 0xBF	; 191
     d26:	8f bd       	out	0x2f, r24	; 47
     d28:	8f b5       	in	r24, 0x2f	; 47
     d2a:	80 68       	ori	r24, 0x80	; 128
     d2c:	8f bd       	out	0x2f, r24	; 47
     d2e:	8f b5       	in	r24, 0x2f	; 47
     d30:	8e 7f       	andi	r24, 0xFE	; 254
     d32:	8f bd       	out	0x2f, r24	; 47
     d34:	8f b5       	in	r24, 0x2f	; 47
     d36:	82 60       	ori	r24, 0x02	; 2
     d38:	8f bd       	out	0x2f, r24	; 47
     d3a:	8e b5       	in	r24, 0x2e	; 46
     d3c:	88 60       	ori	r24, 0x08	; 8
     d3e:	8e bd       	out	0x2e, r24	; 46
     d40:	8e b5       	in	r24, 0x2e	; 46
     d42:	80 61       	ori	r24, 0x10	; 16
     d44:	8e bd       	out	0x2e, r24	; 46
     d46:	e0 e0       	ldi	r30, 0x00	; 0
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	4d ec       	ldi	r20, 0xCD	; 205
     d4c:	a1 e0       	ldi	r26, 0x01	; 1
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	64 9f       	mul	r22, r20
     d52:	81 2d       	mov	r24, r1
     d54:	11 24       	eor	r1, r1
     d56:	86 95       	lsr	r24
     d58:	86 95       	lsr	r24
     d5a:	86 95       	lsr	r24
     d5c:	88 0f       	add	r24, r24
     d5e:	98 2f       	mov	r25, r24
     d60:	99 0f       	add	r25, r25
     d62:	99 0f       	add	r25, r25
     d64:	89 0f       	add	r24, r25
     d66:	96 2f       	mov	r25, r22
     d68:	98 1b       	sub	r25, r24
     d6a:	91 30       	cpi	r25, 0x01	; 1
     d6c:	59 f4       	brne	.+22     	; 0xd84 <TIMER_voidTimer1Init+0xae>
     d6e:	2e b5       	in	r18, 0x2e	; 46
     d70:	cd 01       	movw	r24, r26
     d72:	0e 2e       	mov	r0, r30
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <TIMER_voidTimer1Init+0xa4>
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <TIMER_voidTimer1Init+0xa0>
     d7e:	82 2b       	or	r24, r18
     d80:	8e bd       	out	0x2e, r24	; 46
     d82:	0c c0       	rjmp	.+24     	; 0xd9c <TIMER_voidTimer1Init+0xc6>
     d84:	9e b5       	in	r25, 0x2e	; 46
     d86:	9d 01       	movw	r18, r26
     d88:	0e 2e       	mov	r0, r30
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <TIMER_voidTimer1Init+0xba>
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <TIMER_voidTimer1Init+0xb6>
     d94:	82 2f       	mov	r24, r18
     d96:	80 95       	com	r24
     d98:	89 23       	and	r24, r25
     d9a:	8e bd       	out	0x2e, r24	; 46
     d9c:	64 9f       	mul	r22, r20
     d9e:	61 2d       	mov	r22, r1
     da0:	11 24       	eor	r1, r1
     da2:	66 95       	lsr	r22
     da4:	66 95       	lsr	r22
     da6:	66 95       	lsr	r22
     da8:	31 96       	adiw	r30, 0x01	; 1
     daa:	e3 30       	cpi	r30, 0x03	; 3
     dac:	f1 05       	cpc	r31, r1
     dae:	81 f6       	brne	.-96     	; 0xd50 <TIMER_voidTimer1Init+0x7a>
     db0:	08 95       	ret

00000db2 <TIMER_voidSetOverFlow>:
     db2:	97 bd       	out	0x27, r25	; 39
     db4:	86 bd       	out	0x26, r24	; 38
     db6:	08 95       	ret

00000db8 <TIMER_voidTimer1ChannelASetCompareValue>:
     db8:	9b bd       	out	0x2b, r25	; 43
     dba:	8a bd       	out	0x2a, r24	; 42
     dbc:	08 95       	ret

00000dbe <TIMER_voidTimer1SetPreloadValue>:
     dbe:	9d bd       	out	0x2d, r25	; 45
     dc0:	8c bd       	out	0x2c, r24	; 44
     dc2:	08 95       	ret

00000dc4 <__vector_11>:



//Timer 0 Normal ISR
void __vector_11(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_11(void){
     dc4:	1f 92       	push	r1
     dc6:	0f 92       	push	r0
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	0f 92       	push	r0
     dcc:	11 24       	eor	r1, r1
     dce:	2f 93       	push	r18
     dd0:	3f 93       	push	r19
     dd2:	4f 93       	push	r20
     dd4:	5f 93       	push	r21
     dd6:	6f 93       	push	r22
     dd8:	7f 93       	push	r23
     dda:	8f 93       	push	r24
     ddc:	9f 93       	push	r25
     dde:	af 93       	push	r26
     de0:	bf 93       	push	r27
     de2:	ef 93       	push	r30
     de4:	ff 93       	push	r31
	if(TIMER0_Normal_ISR_PTR!=0x00)
     de6:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <TIMER0_Normal_ISR_PTR>
     dea:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <TIMER0_Normal_ISR_PTR+0x1>
     dee:	30 97       	sbiw	r30, 0x00	; 0
     df0:	09 f0       	breq	.+2      	; 0xdf4 <__vector_11+0x30>
		TIMER0_Normal_ISR_PTR();
     df2:	09 95       	icall
}
     df4:	ff 91       	pop	r31
     df6:	ef 91       	pop	r30
     df8:	bf 91       	pop	r27
     dfa:	af 91       	pop	r26
     dfc:	9f 91       	pop	r25
     dfe:	8f 91       	pop	r24
     e00:	7f 91       	pop	r23
     e02:	6f 91       	pop	r22
     e04:	5f 91       	pop	r21
     e06:	4f 91       	pop	r20
     e08:	3f 91       	pop	r19
     e0a:	2f 91       	pop	r18
     e0c:	0f 90       	pop	r0
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	0f 90       	pop	r0
     e12:	1f 90       	pop	r1
     e14:	18 95       	reti

00000e16 <__vector_10>:

//Timer 0 CTC ISR
void __vector_10(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_10(void){
     e16:	1f 92       	push	r1
     e18:	0f 92       	push	r0
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	0f 92       	push	r0
     e1e:	11 24       	eor	r1, r1
     e20:	2f 93       	push	r18
     e22:	3f 93       	push	r19
     e24:	4f 93       	push	r20
     e26:	5f 93       	push	r21
     e28:	6f 93       	push	r22
     e2a:	7f 93       	push	r23
     e2c:	8f 93       	push	r24
     e2e:	9f 93       	push	r25
     e30:	af 93       	push	r26
     e32:	bf 93       	push	r27
     e34:	ef 93       	push	r30
     e36:	ff 93       	push	r31
	if(TIMER0_CTC_ISR_PTR!=0x00)
     e38:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <TIMER0_CTC_ISR_PTR>
     e3c:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <TIMER0_CTC_ISR_PTR+0x1>
     e40:	30 97       	sbiw	r30, 0x00	; 0
     e42:	09 f0       	breq	.+2      	; 0xe46 <__vector_10+0x30>
		TIMER0_CTC_ISR_PTR();
     e44:	09 95       	icall

}
     e46:	ff 91       	pop	r31
     e48:	ef 91       	pop	r30
     e4a:	bf 91       	pop	r27
     e4c:	af 91       	pop	r26
     e4e:	9f 91       	pop	r25
     e50:	8f 91       	pop	r24
     e52:	7f 91       	pop	r23
     e54:	6f 91       	pop	r22
     e56:	5f 91       	pop	r21
     e58:	4f 91       	pop	r20
     e5a:	3f 91       	pop	r19
     e5c:	2f 91       	pop	r18
     e5e:	0f 90       	pop	r0
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	0f 90       	pop	r0
     e64:	1f 90       	pop	r1
     e66:	18 95       	reti

00000e68 <__vector_6>:

//ICU
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void){
     e68:	1f 92       	push	r1
     e6a:	0f 92       	push	r0
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	0f 92       	push	r0
     e70:	11 24       	eor	r1, r1
     e72:	2f 93       	push	r18
     e74:	3f 93       	push	r19
     e76:	4f 93       	push	r20
     e78:	5f 93       	push	r21
     e7a:	6f 93       	push	r22
     e7c:	7f 93       	push	r23
     e7e:	8f 93       	push	r24
     e80:	9f 93       	push	r25
     e82:	af 93       	push	r26
     e84:	bf 93       	push	r27
     e86:	ef 93       	push	r30
     e88:	ff 93       	push	r31
	if(GLOBAL_ICU_ISR!=0x00)
     e8a:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <GLOBAL_ICU_ISR>
     e8e:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <GLOBAL_ICU_ISR+0x1>
     e92:	30 97       	sbiw	r30, 0x00	; 0
     e94:	09 f0       	breq	.+2      	; 0xe98 <__vector_6+0x30>
		GLOBAL_ICU_ISR();
     e96:	09 95       	icall
}
     e98:	ff 91       	pop	r31
     e9a:	ef 91       	pop	r30
     e9c:	bf 91       	pop	r27
     e9e:	af 91       	pop	r26
     ea0:	9f 91       	pop	r25
     ea2:	8f 91       	pop	r24
     ea4:	7f 91       	pop	r23
     ea6:	6f 91       	pop	r22
     ea8:	5f 91       	pop	r21
     eaa:	4f 91       	pop	r20
     eac:	3f 91       	pop	r19
     eae:	2f 91       	pop	r18
     eb0:	0f 90       	pop	r0
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	0f 90       	pop	r0
     eb6:	1f 90       	pop	r1
     eb8:	18 95       	reti

00000eba <__vector_7>:

//Timer 1 CTC ISR
void __vector_7(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_7(void){
     eba:	1f 92       	push	r1
     ebc:	0f 92       	push	r0
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	0f 92       	push	r0
     ec2:	11 24       	eor	r1, r1
     ec4:	2f 93       	push	r18
     ec6:	3f 93       	push	r19
     ec8:	4f 93       	push	r20
     eca:	5f 93       	push	r21
     ecc:	6f 93       	push	r22
     ece:	7f 93       	push	r23
     ed0:	8f 93       	push	r24
     ed2:	9f 93       	push	r25
     ed4:	af 93       	push	r26
     ed6:	bf 93       	push	r27
     ed8:	ef 93       	push	r30
     eda:	ff 93       	push	r31
	if(GLOBAL_TIMER1_COMPARE_MATCH_PTR!=0x00)
     edc:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <GLOBAL_TIMER1_COMPARE_MATCH_PTR>
     ee0:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <GLOBAL_TIMER1_COMPARE_MATCH_PTR+0x1>
     ee4:	30 97       	sbiw	r30, 0x00	; 0
     ee6:	09 f0       	breq	.+2      	; 0xeea <__vector_7+0x30>
		GLOBAL_TIMER1_COMPARE_MATCH_PTR();
     ee8:	09 95       	icall
}
     eea:	ff 91       	pop	r31
     eec:	ef 91       	pop	r30
     eee:	bf 91       	pop	r27
     ef0:	af 91       	pop	r26
     ef2:	9f 91       	pop	r25
     ef4:	8f 91       	pop	r24
     ef6:	7f 91       	pop	r23
     ef8:	6f 91       	pop	r22
     efa:	5f 91       	pop	r21
     efc:	4f 91       	pop	r20
     efe:	3f 91       	pop	r19
     f00:	2f 91       	pop	r18
     f02:	0f 90       	pop	r0
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	0f 90       	pop	r0
     f08:	1f 90       	pop	r1
     f0a:	18 95       	reti

00000f0c <TWI_voidMasterInit>:
void TWI_voidSlaveInit(u8 Copy_SlaveAddress){
	//Set Slave Address
	TWAR = Copy_SlaveAddress <<1;

	//Enable TWI
	SET_BIT(TWCR,TWEN);
     f0c:	96 e9       	ldi	r25, 0x96	; 150
     f0e:	90 b9       	out	0x00, r25	; 0
     f10:	09 98       	cbi	0x01, 1	; 1
     f12:	08 98       	cbi	0x01, 0	; 1
     f14:	88 23       	and	r24, r24
     f16:	11 f0       	breq	.+4      	; 0xf1c <TWI_voidMasterInit+0x10>
     f18:	88 0f       	add	r24, r24
     f1a:	82 b9       	out	0x02, r24	; 2
     f1c:	86 b7       	in	r24, 0x36	; 54
     f1e:	84 60       	ori	r24, 0x04	; 4
     f20:	86 bf       	out	0x36, r24	; 54
     f22:	08 95       	ret

00000f24 <TWI_SendStartCondition>:
}

TWI_ErrStatus TWI_SendStartCondition(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
     f24:	86 b7       	in	r24, 0x36	; 54
     f26:	80 62       	ori	r24, 0x20	; 32
     f28:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     f2a:	86 b7       	in	r24, 0x36	; 54
     f2c:	80 68       	ori	r24, 0x80	; 128
     f2e:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f30:	06 b6       	in	r0, 0x36	; 54
     f32:	07 fe       	sbrs	r0, 7
     f34:	fd cf       	rjmp	.-6      	; 0xf30 <TWI_SendStartCondition+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=START_ACK){
     f36:	91 b1       	in	r25, 0x01	; 1
		Local_ErrStatus = StartConditionErr;
		}
	return Local_ErrStatus;
     f38:	98 7f       	andi	r25, 0xF8	; 248
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	98 30       	cpi	r25, 0x08	; 8
     f3e:	09 f4       	brne	.+2      	; 0xf42 <TWI_SendStartCondition+0x1e>
     f40:	80 e0       	ldi	r24, 0x00	; 0
}
     f42:	08 95       	ret

00000f44 <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
     f44:	86 b7       	in	r24, 0x36	; 54
     f46:	80 62       	ori	r24, 0x20	; 32
     f48:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     f4a:	86 b7       	in	r24, 0x36	; 54
     f4c:	80 68       	ori	r24, 0x80	; 128
     f4e:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f50:	06 b6       	in	r0, 0x36	; 54
     f52:	07 fe       	sbrs	r0, 7
     f54:	fd cf       	rjmp	.-6      	; 0xf50 <TWI_SendRepeatedStart+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
     f56:	81 b1       	in	r24, 0x01	; 1
     f58:	88 7f       	andi	r24, 0xF8	; 248
     f5a:	80 31       	cpi	r24, 0x10	; 16
     f5c:	11 f0       	breq	.+4      	; 0xf62 <TWI_SendRepeatedStart+0x1e>
		Local_ErrStatus = RepeatedStartErr;
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     f62:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
		Local_ErrStatus = RepeatedStartErr;
		}
	return Local_ErrStatus;
}
     f64:	08 95       	ret

00000f66 <TWI_SendSlaveAddressWithWrite>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
     f66:	88 0f       	add	r24, r24
     f68:	83 b9       	out	0x03, r24	; 3
	//For Write Operation
	CLR_BIT(TWDR,0);
     f6a:	18 98       	cbi	0x03, 0	; 3

	//Clear Flag to start previous operation  //Enable TWI
	TWCR=(1<<TWINT)|(1<<TWEN);
     f6c:	84 e8       	ldi	r24, 0x84	; 132
     f6e:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f70:	06 b6       	in	r0, 0x36	; 54
     f72:	07 fe       	sbrs	r0, 7
     f74:	fd cf       	rjmp	.-6      	; 0xf70 <TWI_SendSlaveAddressWithWrite+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
     f76:	81 b1       	in	r24, 0x01	; 1
     f78:	88 7f       	andi	r24, 0xF8	; 248
     f7a:	88 31       	cpi	r24, 0x18	; 24
     f7c:	11 f0       	breq	.+4      	; 0xf82 <TWI_SendSlaveAddressWithWrite+0x1c>
		Local_ErrStatus = SlaveAddressWithWriteErr;
     f7e:	83 e0       	ldi	r24, 0x03	; 3
     f80:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     f82:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
		Local_ErrStatus = SlaveAddressWithWriteErr;
		}
	return Local_ErrStatus;
}
     f84:	08 95       	ret

00000f86 <TWI_SendSlaveAddressWithRead>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
     f86:	88 0f       	add	r24, r24
     f88:	83 b9       	out	0x03, r24	; 3
	//For Read Operation
	SET_BIT(TWDR,0);
     f8a:	18 9a       	sbi	0x03, 0	; 3

	//Clear Flag to start previous operation
	TWCR=(1<<TWINT)|(1<<TWEN);
     f8c:	84 e8       	ldi	r24, 0x84	; 132
     f8e:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f90:	06 b6       	in	r0, 0x36	; 54
     f92:	07 fe       	sbrs	r0, 7
     f94:	fd cf       	rjmp	.-6      	; 0xf90 <TWI_SendSlaveAddressWithRead+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
     f96:	81 b1       	in	r24, 0x01	; 1
     f98:	88 7f       	andi	r24, 0xF8	; 248
     f9a:	80 34       	cpi	r24, 0x40	; 64
     f9c:	11 f0       	breq	.+4      	; 0xfa2 <TWI_SendSlaveAddressWithRead+0x1c>
		Local_ErrStatus = SlaveAddressWithReadErr;
     f9e:	84 e0       	ldi	r24, 0x04	; 4
     fa0:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     fa2:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
		Local_ErrStatus = SlaveAddressWithReadErr;
		}
	return Local_ErrStatus;
}
     fa4:	08 95       	ret

00000fa6 <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte){
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Write Data to data byte
	TWDR = Copy_u8DataByte;
     fa6:	83 b9       	out	0x03, r24	; 3

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     fa8:	86 b7       	in	r24, 0x36	; 54
     faa:	80 68       	ori	r24, 0x80	; 128
     fac:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     fae:	06 b6       	in	r0, 0x36	; 54
     fb0:	07 fe       	sbrs	r0, 7
     fb2:	fd cf       	rjmp	.-6      	; 0xfae <TWI_MasterWriteDataByte+0x8>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MasterWriteDataByteErr){
     fb4:	81 b1       	in	r24, 0x01	; 1
		Local_ErrStatus = MasterWriteDataByteErr;
		}
	return Local_ErrStatus;

}
     fb6:	85 e0       	ldi	r24, 0x05	; 5
     fb8:	08 95       	ret

00000fba <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
     fba:	fc 01       	movw	r30, r24
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Enable ACK
	SET_BIT(TWCR,TWEA);
     fbc:	96 b7       	in	r25, 0x36	; 54
     fbe:	90 64       	ori	r25, 0x40	; 64
     fc0:	96 bf       	out	0x36, r25	; 54
	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     fc2:	96 b7       	in	r25, 0x36	; 54
     fc4:	90 68       	ori	r25, 0x80	; 128
     fc6:	96 bf       	out	0x36, r25	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     fc8:	06 b6       	in	r0, 0x36	; 54
     fca:	07 fe       	sbrs	r0, 7
     fcc:	fd cf       	rjmp	.-6      	; 0xfc8 <TWI_MasterReadDataByte+0xe>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
     fce:	91 b1       	in	r25, 0x01	; 1
     fd0:	98 7f       	andi	r25, 0xF8	; 248
     fd2:	90 35       	cpi	r25, 0x50	; 80
     fd4:	21 f4       	brne	.+8      	; 0xfde <TWI_MasterReadDataByte+0x24>
		Local_ErrStatus = MasterReadDataByteErr;
		}
	else{
		// Read Data
		*Copy_Pu8DataByte = TWDR;
     fd6:	83 b1       	in	r24, 0x03	; 3
     fd8:	80 83       	st	Z, r24

}

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	08 95       	ret
	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
		Local_ErrStatus = MasterReadDataByteErr;
     fde:	86 e0       	ldi	r24, 0x06	; 6
		// Read Data
		*Copy_Pu8DataByte = TWDR;

	}
	return Local_ErrStatus;
}
     fe0:	08 95       	ret

00000fe2 <TWI_SendStopCondition>:

void TWI_SendStopCondition(void)
{
	/* generate stop condition on the bus */
	SET_BIT(TWCR,TWSTO);
     fe2:	86 b7       	in	r24, 0x36	; 54
     fe4:	80 61       	ori	r24, 0x10	; 16
     fe6:	86 bf       	out	0x36, r24	; 54

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWINT);
     fe8:	86 b7       	in	r24, 0x36	; 54
     fea:	80 68       	ori	r24, 0x80	; 128
     fec:	86 bf       	out	0x36, r24	; 54
     fee:	08 95       	ret

00000ff0 <USART_voidInit>:
void USART_voidEnableRxINT(void){
	SET_BIT(UCSRB,7);
}

void USART_voidDisableRxINT(void){
	CLR_BIT(UCSRB,7);
     ff0:	52 98       	cbi	0x0a, 2	; 10
     ff2:	86 e8       	ldi	r24, 0x86	; 134
     ff4:	80 bd       	out	0x20, r24	; 32
     ff6:	83 e3       	ldi	r24, 0x33	; 51
     ff8:	89 b9       	out	0x09, r24	; 9
     ffa:	53 9a       	sbi	0x0a, 3	; 10
     ffc:	54 9a       	sbi	0x0a, 4	; 10
     ffe:	08 95       	ret

00001000 <USART_voidTransmitData>:
    1000:	5d 9b       	sbis	0x0b, 5	; 11
    1002:	fe cf       	rjmp	.-4      	; 0x1000 <USART_voidTransmitData>
    1004:	5d 9a       	sbi	0x0b, 5	; 11
    1006:	8c b9       	out	0x0c, r24	; 12
    1008:	08 95       	ret

0000100a <USART_u8ReceiverData>:
    100a:	5f 9b       	sbis	0x0b, 7	; 11
    100c:	fe cf       	rjmp	.-4      	; 0x100a <USART_u8ReceiverData>
    100e:	8c b1       	in	r24, 0x0c	; 12
    1010:	08 95       	ret

00001012 <USART_u8TimeOUTReceiverData>:
    1012:	fc 01       	movw	r30, r24
    1014:	1d bc       	out	0x2d, r1	; 45
    1016:	1c bc       	out	0x2c, r1	; 44
    1018:	8f b5       	in	r24, 0x2f	; 47
    101a:	8e 7f       	andi	r24, 0xFE	; 254
    101c:	8f bd       	out	0x2f, r24	; 47
    101e:	9f b5       	in	r25, 0x2f	; 47
    1020:	9d 7f       	andi	r25, 0xFD	; 253
    1022:	9f bd       	out	0x2f, r25	; 47
    1024:	9e b5       	in	r25, 0x2e	; 46
    1026:	97 7f       	andi	r25, 0xF7	; 247
    1028:	9e bd       	out	0x2e, r25	; 46
    102a:	9e b5       	in	r25, 0x2e	; 46
    102c:	9f 7e       	andi	r25, 0xEF	; 239
    102e:	9e bd       	out	0x2e, r25	; 46
    1030:	9e b5       	in	r25, 0x2e	; 46
    1032:	91 60       	ori	r25, 0x01	; 1
    1034:	9e bd       	out	0x2e, r25	; 46
    1036:	9e b5       	in	r25, 0x2e	; 46
    1038:	9d 7f       	andi	r25, 0xFD	; 253
    103a:	9e bd       	out	0x2e, r25	; 46
    103c:	9e b5       	in	r25, 0x2e	; 46
    103e:	94 60       	ori	r25, 0x04	; 4
    1040:	9e bd       	out	0x2e, r25	; 46
    1042:	0b c0       	rjmp	.+22     	; 0x105a <USART_u8TimeOUTReceiverData+0x48>
    1044:	2c b5       	in	r18, 0x2c	; 44
    1046:	3d b5       	in	r19, 0x2d	; 45
    1048:	20 34       	cpi	r18, 0x40	; 64
    104a:	3c 49       	sbci	r19, 0x9C	; 156
    104c:	30 f0       	brcs	.+12     	; 0x105a <USART_u8TimeOUTReceiverData+0x48>
    104e:	5f 9a       	sbi	0x0b, 7	; 11
    1050:	8e b5       	in	r24, 0x2e	; 46
    1052:	88 7f       	andi	r24, 0xF8	; 248
    1054:	8e bd       	out	0x2e, r24	; 46
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	08 95       	ret
    105a:	5f 9b       	sbis	0x0b, 7	; 11
    105c:	f3 cf       	rjmp	.-26     	; 0x1044 <USART_u8TimeOUTReceiverData+0x32>
    105e:	8c b1       	in	r24, 0x0c	; 12
    1060:	80 83       	st	Z, r24
    1062:	1d bc       	out	0x2d, r1	; 45
    1064:	1c bc       	out	0x2c, r1	; 44
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	08 95       	ret

0000106a <USART_voidTransmitString>:
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	fc 01       	movw	r30, r24
    1072:	80 81       	ld	r24, Z
    1074:	88 23       	and	r24, r24
    1076:	59 f0       	breq	.+22     	; 0x108e <USART_voidTransmitString+0x24>
    1078:	8f 01       	movw	r16, r30
    107a:	c0 e0       	ldi	r28, 0x00	; 0
    107c:	0e 94 00 08 	call	0x1000	; 0x1000 <USART_voidTransmitData>
    1080:	cf 5f       	subi	r28, 0xFF	; 255
    1082:	f8 01       	movw	r30, r16
    1084:	ec 0f       	add	r30, r28
    1086:	f1 1d       	adc	r31, r1
    1088:	80 81       	ld	r24, Z
    108a:	81 11       	cpse	r24, r1
    108c:	f7 cf       	rjmp	.-18     	; 0x107c <USART_voidTransmitString+0x12>
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	08 95       	ret

00001096 <USART_voidCallBackFunction>:
    1096:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <GLOBAL_PTR_CallBack+0x1>
    109a:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <GLOBAL_PTR_CallBack>
    109e:	08 95       	ret

000010a0 <USART_voidEnableRxINT>:
    10a0:	57 9a       	sbi	0x0a, 7	; 10
    10a2:	08 95       	ret

000010a4 <__vector_13>:
}

void __vector_13 (void) __attribute__((signal));
void __vector_13 (void){
    10a4:	1f 92       	push	r1
    10a6:	0f 92       	push	r0
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	0f 92       	push	r0
    10ac:	11 24       	eor	r1, r1
    10ae:	2f 93       	push	r18
    10b0:	3f 93       	push	r19
    10b2:	4f 93       	push	r20
    10b4:	5f 93       	push	r21
    10b6:	6f 93       	push	r22
    10b8:	7f 93       	push	r23
    10ba:	8f 93       	push	r24
    10bc:	9f 93       	push	r25
    10be:	af 93       	push	r26
    10c0:	bf 93       	push	r27
    10c2:	ef 93       	push	r30
    10c4:	ff 93       	push	r31
	if(GLOBAL_PTR_CallBack!=0x00)
    10c6:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <GLOBAL_PTR_CallBack>
    10ca:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <GLOBAL_PTR_CallBack+0x1>
    10ce:	30 97       	sbiw	r30, 0x00	; 0
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <__vector_13+0x30>
		GLOBAL_PTR_CallBack();
    10d2:	09 95       	icall
}
    10d4:	ff 91       	pop	r31
    10d6:	ef 91       	pop	r30
    10d8:	bf 91       	pop	r27
    10da:	af 91       	pop	r26
    10dc:	9f 91       	pop	r25
    10de:	8f 91       	pop	r24
    10e0:	7f 91       	pop	r23
    10e2:	6f 91       	pop	r22
    10e4:	5f 91       	pop	r21
    10e6:	4f 91       	pop	r20
    10e8:	3f 91       	pop	r19
    10ea:	2f 91       	pop	r18
    10ec:	0f 90       	pop	r0
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	0f 90       	pop	r0
    10f2:	1f 90       	pop	r1
    10f4:	18 95       	reti

000010f6 <__subsf3>:
    10f6:	50 58       	subi	r21, 0x80	; 128

000010f8 <__addsf3>:
    10f8:	bb 27       	eor	r27, r27
    10fa:	aa 27       	eor	r26, r26
    10fc:	0e 94 93 08 	call	0x1126	; 0x1126 <__addsf3x>
    1100:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__fp_round>
    1104:	0e 94 cf 09 	call	0x139e	; 0x139e <__fp_pscA>
    1108:	38 f0       	brcs	.+14     	; 0x1118 <__addsf3+0x20>
    110a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__fp_pscB>
    110e:	20 f0       	brcs	.+8      	; 0x1118 <__addsf3+0x20>
    1110:	39 f4       	brne	.+14     	; 0x1120 <__addsf3+0x28>
    1112:	9f 3f       	cpi	r25, 0xFF	; 255
    1114:	19 f4       	brne	.+6      	; 0x111c <__addsf3+0x24>
    1116:	26 f4       	brtc	.+8      	; 0x1120 <__addsf3+0x28>
    1118:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__fp_nan>
    111c:	0e f4       	brtc	.+2      	; 0x1120 <__addsf3+0x28>
    111e:	e0 95       	com	r30
    1120:	e7 fb       	bst	r30, 7
    1122:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_inf>

00001126 <__addsf3x>:
    1126:	e9 2f       	mov	r30, r25
    1128:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__fp_split3>
    112c:	58 f3       	brcs	.-42     	; 0x1104 <__addsf3+0xc>
    112e:	ba 17       	cp	r27, r26
    1130:	62 07       	cpc	r22, r18
    1132:	73 07       	cpc	r23, r19
    1134:	84 07       	cpc	r24, r20
    1136:	95 07       	cpc	r25, r21
    1138:	20 f0       	brcs	.+8      	; 0x1142 <__addsf3x+0x1c>
    113a:	79 f4       	brne	.+30     	; 0x115a <__addsf3x+0x34>
    113c:	a6 f5       	brtc	.+104    	; 0x11a6 <__addsf3x+0x80>
    113e:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__fp_zero>
    1142:	0e f4       	brtc	.+2      	; 0x1146 <__addsf3x+0x20>
    1144:	e0 95       	com	r30
    1146:	0b 2e       	mov	r0, r27
    1148:	ba 2f       	mov	r27, r26
    114a:	a0 2d       	mov	r26, r0
    114c:	0b 01       	movw	r0, r22
    114e:	b9 01       	movw	r22, r18
    1150:	90 01       	movw	r18, r0
    1152:	0c 01       	movw	r0, r24
    1154:	ca 01       	movw	r24, r20
    1156:	a0 01       	movw	r20, r0
    1158:	11 24       	eor	r1, r1
    115a:	ff 27       	eor	r31, r31
    115c:	59 1b       	sub	r21, r25
    115e:	99 f0       	breq	.+38     	; 0x1186 <__addsf3x+0x60>
    1160:	59 3f       	cpi	r21, 0xF9	; 249
    1162:	50 f4       	brcc	.+20     	; 0x1178 <__addsf3x+0x52>
    1164:	50 3e       	cpi	r21, 0xE0	; 224
    1166:	68 f1       	brcs	.+90     	; 0x11c2 <__addsf3x+0x9c>
    1168:	1a 16       	cp	r1, r26
    116a:	f0 40       	sbci	r31, 0x00	; 0
    116c:	a2 2f       	mov	r26, r18
    116e:	23 2f       	mov	r18, r19
    1170:	34 2f       	mov	r19, r20
    1172:	44 27       	eor	r20, r20
    1174:	58 5f       	subi	r21, 0xF8	; 248
    1176:	f3 cf       	rjmp	.-26     	; 0x115e <__addsf3x+0x38>
    1178:	46 95       	lsr	r20
    117a:	37 95       	ror	r19
    117c:	27 95       	ror	r18
    117e:	a7 95       	ror	r26
    1180:	f0 40       	sbci	r31, 0x00	; 0
    1182:	53 95       	inc	r21
    1184:	c9 f7       	brne	.-14     	; 0x1178 <__addsf3x+0x52>
    1186:	7e f4       	brtc	.+30     	; 0x11a6 <__addsf3x+0x80>
    1188:	1f 16       	cp	r1, r31
    118a:	ba 0b       	sbc	r27, r26
    118c:	62 0b       	sbc	r22, r18
    118e:	73 0b       	sbc	r23, r19
    1190:	84 0b       	sbc	r24, r20
    1192:	ba f0       	brmi	.+46     	; 0x11c2 <__addsf3x+0x9c>
    1194:	91 50       	subi	r25, 0x01	; 1
    1196:	a1 f0       	breq	.+40     	; 0x11c0 <__addsf3x+0x9a>
    1198:	ff 0f       	add	r31, r31
    119a:	bb 1f       	adc	r27, r27
    119c:	66 1f       	adc	r22, r22
    119e:	77 1f       	adc	r23, r23
    11a0:	88 1f       	adc	r24, r24
    11a2:	c2 f7       	brpl	.-16     	; 0x1194 <__addsf3x+0x6e>
    11a4:	0e c0       	rjmp	.+28     	; 0x11c2 <__addsf3x+0x9c>
    11a6:	ba 0f       	add	r27, r26
    11a8:	62 1f       	adc	r22, r18
    11aa:	73 1f       	adc	r23, r19
    11ac:	84 1f       	adc	r24, r20
    11ae:	48 f4       	brcc	.+18     	; 0x11c2 <__addsf3x+0x9c>
    11b0:	87 95       	ror	r24
    11b2:	77 95       	ror	r23
    11b4:	67 95       	ror	r22
    11b6:	b7 95       	ror	r27
    11b8:	f7 95       	ror	r31
    11ba:	9e 3f       	cpi	r25, 0xFE	; 254
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <__addsf3x+0x9a>
    11be:	b0 cf       	rjmp	.-160    	; 0x1120 <__addsf3+0x28>
    11c0:	93 95       	inc	r25
    11c2:	88 0f       	add	r24, r24
    11c4:	08 f0       	brcs	.+2      	; 0x11c8 <__addsf3x+0xa2>
    11c6:	99 27       	eor	r25, r25
    11c8:	ee 0f       	add	r30, r30
    11ca:	97 95       	ror	r25
    11cc:	87 95       	ror	r24
    11ce:	08 95       	ret

000011d0 <__divsf3>:
    11d0:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__divsf3x>
    11d4:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__fp_round>
    11d8:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__fp_pscB>
    11dc:	58 f0       	brcs	.+22     	; 0x11f4 <__divsf3+0x24>
    11de:	0e 94 cf 09 	call	0x139e	; 0x139e <__fp_pscA>
    11e2:	40 f0       	brcs	.+16     	; 0x11f4 <__divsf3+0x24>
    11e4:	29 f4       	brne	.+10     	; 0x11f0 <__divsf3+0x20>
    11e6:	5f 3f       	cpi	r21, 0xFF	; 255
    11e8:	29 f0       	breq	.+10     	; 0x11f4 <__divsf3+0x24>
    11ea:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_inf>
    11ee:	51 11       	cpse	r21, r1
    11f0:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__fp_szero>
    11f4:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__fp_nan>

000011f8 <__divsf3x>:
    11f8:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__fp_split3>
    11fc:	68 f3       	brcs	.-38     	; 0x11d8 <__divsf3+0x8>

000011fe <__divsf3_pse>:
    11fe:	99 23       	and	r25, r25
    1200:	b1 f3       	breq	.-20     	; 0x11ee <__divsf3+0x1e>
    1202:	55 23       	and	r21, r21
    1204:	91 f3       	breq	.-28     	; 0x11ea <__divsf3+0x1a>
    1206:	95 1b       	sub	r25, r21
    1208:	55 0b       	sbc	r21, r21
    120a:	bb 27       	eor	r27, r27
    120c:	aa 27       	eor	r26, r26
    120e:	62 17       	cp	r22, r18
    1210:	73 07       	cpc	r23, r19
    1212:	84 07       	cpc	r24, r20
    1214:	38 f0       	brcs	.+14     	; 0x1224 <__divsf3_pse+0x26>
    1216:	9f 5f       	subi	r25, 0xFF	; 255
    1218:	5f 4f       	sbci	r21, 0xFF	; 255
    121a:	22 0f       	add	r18, r18
    121c:	33 1f       	adc	r19, r19
    121e:	44 1f       	adc	r20, r20
    1220:	aa 1f       	adc	r26, r26
    1222:	a9 f3       	breq	.-22     	; 0x120e <__divsf3_pse+0x10>
    1224:	35 d0       	rcall	.+106    	; 0x1290 <__divsf3_pse+0x92>
    1226:	0e 2e       	mov	r0, r30
    1228:	3a f0       	brmi	.+14     	; 0x1238 <__divsf3_pse+0x3a>
    122a:	e0 e8       	ldi	r30, 0x80	; 128
    122c:	32 d0       	rcall	.+100    	; 0x1292 <__divsf3_pse+0x94>
    122e:	91 50       	subi	r25, 0x01	; 1
    1230:	50 40       	sbci	r21, 0x00	; 0
    1232:	e6 95       	lsr	r30
    1234:	00 1c       	adc	r0, r0
    1236:	ca f7       	brpl	.-14     	; 0x122a <__divsf3_pse+0x2c>
    1238:	2b d0       	rcall	.+86     	; 0x1290 <__divsf3_pse+0x92>
    123a:	fe 2f       	mov	r31, r30
    123c:	29 d0       	rcall	.+82     	; 0x1290 <__divsf3_pse+0x92>
    123e:	66 0f       	add	r22, r22
    1240:	77 1f       	adc	r23, r23
    1242:	88 1f       	adc	r24, r24
    1244:	bb 1f       	adc	r27, r27
    1246:	26 17       	cp	r18, r22
    1248:	37 07       	cpc	r19, r23
    124a:	48 07       	cpc	r20, r24
    124c:	ab 07       	cpc	r26, r27
    124e:	b0 e8       	ldi	r27, 0x80	; 128
    1250:	09 f0       	breq	.+2      	; 0x1254 <__divsf3_pse+0x56>
    1252:	bb 0b       	sbc	r27, r27
    1254:	80 2d       	mov	r24, r0
    1256:	bf 01       	movw	r22, r30
    1258:	ff 27       	eor	r31, r31
    125a:	93 58       	subi	r25, 0x83	; 131
    125c:	5f 4f       	sbci	r21, 0xFF	; 255
    125e:	3a f0       	brmi	.+14     	; 0x126e <__divsf3_pse+0x70>
    1260:	9e 3f       	cpi	r25, 0xFE	; 254
    1262:	51 05       	cpc	r21, r1
    1264:	78 f0       	brcs	.+30     	; 0x1284 <__divsf3_pse+0x86>
    1266:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_inf>
    126a:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__fp_szero>
    126e:	5f 3f       	cpi	r21, 0xFF	; 255
    1270:	e4 f3       	brlt	.-8      	; 0x126a <__divsf3_pse+0x6c>
    1272:	98 3e       	cpi	r25, 0xE8	; 232
    1274:	d4 f3       	brlt	.-12     	; 0x126a <__divsf3_pse+0x6c>
    1276:	86 95       	lsr	r24
    1278:	77 95       	ror	r23
    127a:	67 95       	ror	r22
    127c:	b7 95       	ror	r27
    127e:	f7 95       	ror	r31
    1280:	9f 5f       	subi	r25, 0xFF	; 255
    1282:	c9 f7       	brne	.-14     	; 0x1276 <__divsf3_pse+0x78>
    1284:	88 0f       	add	r24, r24
    1286:	91 1d       	adc	r25, r1
    1288:	96 95       	lsr	r25
    128a:	87 95       	ror	r24
    128c:	97 f9       	bld	r25, 7
    128e:	08 95       	ret
    1290:	e1 e0       	ldi	r30, 0x01	; 1
    1292:	66 0f       	add	r22, r22
    1294:	77 1f       	adc	r23, r23
    1296:	88 1f       	adc	r24, r24
    1298:	bb 1f       	adc	r27, r27
    129a:	62 17       	cp	r22, r18
    129c:	73 07       	cpc	r23, r19
    129e:	84 07       	cpc	r24, r20
    12a0:	ba 07       	cpc	r27, r26
    12a2:	20 f0       	brcs	.+8      	; 0x12ac <__divsf3_pse+0xae>
    12a4:	62 1b       	sub	r22, r18
    12a6:	73 0b       	sbc	r23, r19
    12a8:	84 0b       	sbc	r24, r20
    12aa:	ba 0b       	sbc	r27, r26
    12ac:	ee 1f       	adc	r30, r30
    12ae:	88 f7       	brcc	.-30     	; 0x1292 <__divsf3_pse+0x94>
    12b0:	e0 95       	com	r30
    12b2:	08 95       	ret

000012b4 <__fixunssfsi>:
    12b4:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__fp_splitA>
    12b8:	88 f0       	brcs	.+34     	; 0x12dc <__fixunssfsi+0x28>
    12ba:	9f 57       	subi	r25, 0x7F	; 127
    12bc:	98 f0       	brcs	.+38     	; 0x12e4 <__fixunssfsi+0x30>
    12be:	b9 2f       	mov	r27, r25
    12c0:	99 27       	eor	r25, r25
    12c2:	b7 51       	subi	r27, 0x17	; 23
    12c4:	b0 f0       	brcs	.+44     	; 0x12f2 <__fixunssfsi+0x3e>
    12c6:	e1 f0       	breq	.+56     	; 0x1300 <__fixunssfsi+0x4c>
    12c8:	66 0f       	add	r22, r22
    12ca:	77 1f       	adc	r23, r23
    12cc:	88 1f       	adc	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	1a f0       	brmi	.+6      	; 0x12d8 <__fixunssfsi+0x24>
    12d2:	ba 95       	dec	r27
    12d4:	c9 f7       	brne	.-14     	; 0x12c8 <__fixunssfsi+0x14>
    12d6:	14 c0       	rjmp	.+40     	; 0x1300 <__fixunssfsi+0x4c>
    12d8:	b1 30       	cpi	r27, 0x01	; 1
    12da:	91 f0       	breq	.+36     	; 0x1300 <__fixunssfsi+0x4c>
    12dc:	0e 94 10 0a 	call	0x1420	; 0x1420 <__fp_zero>
    12e0:	b1 e0       	ldi	r27, 0x01	; 1
    12e2:	08 95       	ret
    12e4:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__fp_zero>
    12e8:	67 2f       	mov	r22, r23
    12ea:	78 2f       	mov	r23, r24
    12ec:	88 27       	eor	r24, r24
    12ee:	b8 5f       	subi	r27, 0xF8	; 248
    12f0:	39 f0       	breq	.+14     	; 0x1300 <__fixunssfsi+0x4c>
    12f2:	b9 3f       	cpi	r27, 0xF9	; 249
    12f4:	cc f3       	brlt	.-14     	; 0x12e8 <__fixunssfsi+0x34>
    12f6:	86 95       	lsr	r24
    12f8:	77 95       	ror	r23
    12fa:	67 95       	ror	r22
    12fc:	b3 95       	inc	r27
    12fe:	d9 f7       	brne	.-10     	; 0x12f6 <__fixunssfsi+0x42>
    1300:	3e f4       	brtc	.+14     	; 0x1310 <__fixunssfsi+0x5c>
    1302:	90 95       	com	r25
    1304:	80 95       	com	r24
    1306:	70 95       	com	r23
    1308:	61 95       	neg	r22
    130a:	7f 4f       	sbci	r23, 0xFF	; 255
    130c:	8f 4f       	sbci	r24, 0xFF	; 255
    130e:	9f 4f       	sbci	r25, 0xFF	; 255
    1310:	08 95       	ret

00001312 <__floatunsisf>:
    1312:	e8 94       	clt
    1314:	09 c0       	rjmp	.+18     	; 0x1328 <__floatsisf+0x12>

00001316 <__floatsisf>:
    1316:	97 fb       	bst	r25, 7
    1318:	3e f4       	brtc	.+14     	; 0x1328 <__floatsisf+0x12>
    131a:	90 95       	com	r25
    131c:	80 95       	com	r24
    131e:	70 95       	com	r23
    1320:	61 95       	neg	r22
    1322:	7f 4f       	sbci	r23, 0xFF	; 255
    1324:	8f 4f       	sbci	r24, 0xFF	; 255
    1326:	9f 4f       	sbci	r25, 0xFF	; 255
    1328:	99 23       	and	r25, r25
    132a:	a9 f0       	breq	.+42     	; 0x1356 <__floatsisf+0x40>
    132c:	f9 2f       	mov	r31, r25
    132e:	96 e9       	ldi	r25, 0x96	; 150
    1330:	bb 27       	eor	r27, r27
    1332:	93 95       	inc	r25
    1334:	f6 95       	lsr	r31
    1336:	87 95       	ror	r24
    1338:	77 95       	ror	r23
    133a:	67 95       	ror	r22
    133c:	b7 95       	ror	r27
    133e:	f1 11       	cpse	r31, r1
    1340:	f8 cf       	rjmp	.-16     	; 0x1332 <__floatsisf+0x1c>
    1342:	fa f4       	brpl	.+62     	; 0x1382 <__floatsisf+0x6c>
    1344:	bb 0f       	add	r27, r27
    1346:	11 f4       	brne	.+4      	; 0x134c <__floatsisf+0x36>
    1348:	60 ff       	sbrs	r22, 0
    134a:	1b c0       	rjmp	.+54     	; 0x1382 <__floatsisf+0x6c>
    134c:	6f 5f       	subi	r22, 0xFF	; 255
    134e:	7f 4f       	sbci	r23, 0xFF	; 255
    1350:	8f 4f       	sbci	r24, 0xFF	; 255
    1352:	9f 4f       	sbci	r25, 0xFF	; 255
    1354:	16 c0       	rjmp	.+44     	; 0x1382 <__floatsisf+0x6c>
    1356:	88 23       	and	r24, r24
    1358:	11 f0       	breq	.+4      	; 0x135e <__floatsisf+0x48>
    135a:	96 e9       	ldi	r25, 0x96	; 150
    135c:	11 c0       	rjmp	.+34     	; 0x1380 <__floatsisf+0x6a>
    135e:	77 23       	and	r23, r23
    1360:	21 f0       	breq	.+8      	; 0x136a <__floatsisf+0x54>
    1362:	9e e8       	ldi	r25, 0x8E	; 142
    1364:	87 2f       	mov	r24, r23
    1366:	76 2f       	mov	r23, r22
    1368:	05 c0       	rjmp	.+10     	; 0x1374 <__floatsisf+0x5e>
    136a:	66 23       	and	r22, r22
    136c:	71 f0       	breq	.+28     	; 0x138a <__floatsisf+0x74>
    136e:	96 e8       	ldi	r25, 0x86	; 134
    1370:	86 2f       	mov	r24, r22
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	2a f0       	brmi	.+10     	; 0x1382 <__floatsisf+0x6c>
    1378:	9a 95       	dec	r25
    137a:	66 0f       	add	r22, r22
    137c:	77 1f       	adc	r23, r23
    137e:	88 1f       	adc	r24, r24
    1380:	da f7       	brpl	.-10     	; 0x1378 <__floatsisf+0x62>
    1382:	88 0f       	add	r24, r24
    1384:	96 95       	lsr	r25
    1386:	87 95       	ror	r24
    1388:	97 f9       	bld	r25, 7
    138a:	08 95       	ret

0000138c <__fp_inf>:
    138c:	97 f9       	bld	r25, 7
    138e:	9f 67       	ori	r25, 0x7F	; 127
    1390:	80 e8       	ldi	r24, 0x80	; 128
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	08 95       	ret

00001398 <__fp_nan>:
    1398:	9f ef       	ldi	r25, 0xFF	; 255
    139a:	80 ec       	ldi	r24, 0xC0	; 192
    139c:	08 95       	ret

0000139e <__fp_pscA>:
    139e:	00 24       	eor	r0, r0
    13a0:	0a 94       	dec	r0
    13a2:	16 16       	cp	r1, r22
    13a4:	17 06       	cpc	r1, r23
    13a6:	18 06       	cpc	r1, r24
    13a8:	09 06       	cpc	r0, r25
    13aa:	08 95       	ret

000013ac <__fp_pscB>:
    13ac:	00 24       	eor	r0, r0
    13ae:	0a 94       	dec	r0
    13b0:	12 16       	cp	r1, r18
    13b2:	13 06       	cpc	r1, r19
    13b4:	14 06       	cpc	r1, r20
    13b6:	05 06       	cpc	r0, r21
    13b8:	08 95       	ret

000013ba <__fp_round>:
    13ba:	09 2e       	mov	r0, r25
    13bc:	03 94       	inc	r0
    13be:	00 0c       	add	r0, r0
    13c0:	11 f4       	brne	.+4      	; 0x13c6 <__fp_round+0xc>
    13c2:	88 23       	and	r24, r24
    13c4:	52 f0       	brmi	.+20     	; 0x13da <__fp_round+0x20>
    13c6:	bb 0f       	add	r27, r27
    13c8:	40 f4       	brcc	.+16     	; 0x13da <__fp_round+0x20>
    13ca:	bf 2b       	or	r27, r31
    13cc:	11 f4       	brne	.+4      	; 0x13d2 <__fp_round+0x18>
    13ce:	60 ff       	sbrs	r22, 0
    13d0:	04 c0       	rjmp	.+8      	; 0x13da <__fp_round+0x20>
    13d2:	6f 5f       	subi	r22, 0xFF	; 255
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	8f 4f       	sbci	r24, 0xFF	; 255
    13d8:	9f 4f       	sbci	r25, 0xFF	; 255
    13da:	08 95       	ret

000013dc <__fp_split3>:
    13dc:	57 fd       	sbrc	r21, 7
    13de:	90 58       	subi	r25, 0x80	; 128
    13e0:	44 0f       	add	r20, r20
    13e2:	55 1f       	adc	r21, r21
    13e4:	59 f0       	breq	.+22     	; 0x13fc <__fp_splitA+0x10>
    13e6:	5f 3f       	cpi	r21, 0xFF	; 255
    13e8:	71 f0       	breq	.+28     	; 0x1406 <__fp_splitA+0x1a>
    13ea:	47 95       	ror	r20

000013ec <__fp_splitA>:
    13ec:	88 0f       	add	r24, r24
    13ee:	97 fb       	bst	r25, 7
    13f0:	99 1f       	adc	r25, r25
    13f2:	61 f0       	breq	.+24     	; 0x140c <__fp_splitA+0x20>
    13f4:	9f 3f       	cpi	r25, 0xFF	; 255
    13f6:	79 f0       	breq	.+30     	; 0x1416 <__fp_splitA+0x2a>
    13f8:	87 95       	ror	r24
    13fa:	08 95       	ret
    13fc:	12 16       	cp	r1, r18
    13fe:	13 06       	cpc	r1, r19
    1400:	14 06       	cpc	r1, r20
    1402:	55 1f       	adc	r21, r21
    1404:	f2 cf       	rjmp	.-28     	; 0x13ea <__fp_split3+0xe>
    1406:	46 95       	lsr	r20
    1408:	f1 df       	rcall	.-30     	; 0x13ec <__fp_splitA>
    140a:	08 c0       	rjmp	.+16     	; 0x141c <__fp_splitA+0x30>
    140c:	16 16       	cp	r1, r22
    140e:	17 06       	cpc	r1, r23
    1410:	18 06       	cpc	r1, r24
    1412:	99 1f       	adc	r25, r25
    1414:	f1 cf       	rjmp	.-30     	; 0x13f8 <__fp_splitA+0xc>
    1416:	86 95       	lsr	r24
    1418:	71 05       	cpc	r23, r1
    141a:	61 05       	cpc	r22, r1
    141c:	08 94       	sec
    141e:	08 95       	ret

00001420 <__fp_zero>:
    1420:	e8 94       	clt

00001422 <__fp_szero>:
    1422:	bb 27       	eor	r27, r27
    1424:	66 27       	eor	r22, r22
    1426:	77 27       	eor	r23, r23
    1428:	cb 01       	movw	r24, r22
    142a:	97 f9       	bld	r25, 7
    142c:	08 95       	ret

0000142e <__mulsf3>:
    142e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__mulsf3x>
    1432:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__fp_round>
    1436:	0e 94 cf 09 	call	0x139e	; 0x139e <__fp_pscA>
    143a:	38 f0       	brcs	.+14     	; 0x144a <__mulsf3+0x1c>
    143c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__fp_pscB>
    1440:	20 f0       	brcs	.+8      	; 0x144a <__mulsf3+0x1c>
    1442:	95 23       	and	r25, r21
    1444:	11 f0       	breq	.+4      	; 0x144a <__mulsf3+0x1c>
    1446:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_inf>
    144a:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__fp_nan>
    144e:	11 24       	eor	r1, r1
    1450:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__fp_szero>

00001454 <__mulsf3x>:
    1454:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__fp_split3>
    1458:	70 f3       	brcs	.-36     	; 0x1436 <__mulsf3+0x8>

0000145a <__mulsf3_pse>:
    145a:	95 9f       	mul	r25, r21
    145c:	c1 f3       	breq	.-16     	; 0x144e <__mulsf3+0x20>
    145e:	95 0f       	add	r25, r21
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	55 1f       	adc	r21, r21
    1464:	62 9f       	mul	r22, r18
    1466:	f0 01       	movw	r30, r0
    1468:	72 9f       	mul	r23, r18
    146a:	bb 27       	eor	r27, r27
    146c:	f0 0d       	add	r31, r0
    146e:	b1 1d       	adc	r27, r1
    1470:	63 9f       	mul	r22, r19
    1472:	aa 27       	eor	r26, r26
    1474:	f0 0d       	add	r31, r0
    1476:	b1 1d       	adc	r27, r1
    1478:	aa 1f       	adc	r26, r26
    147a:	64 9f       	mul	r22, r20
    147c:	66 27       	eor	r22, r22
    147e:	b0 0d       	add	r27, r0
    1480:	a1 1d       	adc	r26, r1
    1482:	66 1f       	adc	r22, r22
    1484:	82 9f       	mul	r24, r18
    1486:	22 27       	eor	r18, r18
    1488:	b0 0d       	add	r27, r0
    148a:	a1 1d       	adc	r26, r1
    148c:	62 1f       	adc	r22, r18
    148e:	73 9f       	mul	r23, r19
    1490:	b0 0d       	add	r27, r0
    1492:	a1 1d       	adc	r26, r1
    1494:	62 1f       	adc	r22, r18
    1496:	83 9f       	mul	r24, r19
    1498:	a0 0d       	add	r26, r0
    149a:	61 1d       	adc	r22, r1
    149c:	22 1f       	adc	r18, r18
    149e:	74 9f       	mul	r23, r20
    14a0:	33 27       	eor	r19, r19
    14a2:	a0 0d       	add	r26, r0
    14a4:	61 1d       	adc	r22, r1
    14a6:	23 1f       	adc	r18, r19
    14a8:	84 9f       	mul	r24, r20
    14aa:	60 0d       	add	r22, r0
    14ac:	21 1d       	adc	r18, r1
    14ae:	82 2f       	mov	r24, r18
    14b0:	76 2f       	mov	r23, r22
    14b2:	6a 2f       	mov	r22, r26
    14b4:	11 24       	eor	r1, r1
    14b6:	9f 57       	subi	r25, 0x7F	; 127
    14b8:	50 40       	sbci	r21, 0x00	; 0
    14ba:	9a f0       	brmi	.+38     	; 0x14e2 <__mulsf3_pse+0x88>
    14bc:	f1 f0       	breq	.+60     	; 0x14fa <__mulsf3_pse+0xa0>
    14be:	88 23       	and	r24, r24
    14c0:	4a f0       	brmi	.+18     	; 0x14d4 <__mulsf3_pse+0x7a>
    14c2:	ee 0f       	add	r30, r30
    14c4:	ff 1f       	adc	r31, r31
    14c6:	bb 1f       	adc	r27, r27
    14c8:	66 1f       	adc	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	88 1f       	adc	r24, r24
    14ce:	91 50       	subi	r25, 0x01	; 1
    14d0:	50 40       	sbci	r21, 0x00	; 0
    14d2:	a9 f7       	brne	.-22     	; 0x14be <__mulsf3_pse+0x64>
    14d4:	9e 3f       	cpi	r25, 0xFE	; 254
    14d6:	51 05       	cpc	r21, r1
    14d8:	80 f0       	brcs	.+32     	; 0x14fa <__mulsf3_pse+0xa0>
    14da:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_inf>
    14de:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__fp_szero>
    14e2:	5f 3f       	cpi	r21, 0xFF	; 255
    14e4:	e4 f3       	brlt	.-8      	; 0x14de <__mulsf3_pse+0x84>
    14e6:	98 3e       	cpi	r25, 0xE8	; 232
    14e8:	d4 f3       	brlt	.-12     	; 0x14de <__mulsf3_pse+0x84>
    14ea:	86 95       	lsr	r24
    14ec:	77 95       	ror	r23
    14ee:	67 95       	ror	r22
    14f0:	b7 95       	ror	r27
    14f2:	f7 95       	ror	r31
    14f4:	e7 95       	ror	r30
    14f6:	9f 5f       	subi	r25, 0xFF	; 255
    14f8:	c1 f7       	brne	.-16     	; 0x14ea <__mulsf3_pse+0x90>
    14fa:	fe 2b       	or	r31, r30
    14fc:	88 0f       	add	r24, r24
    14fe:	91 1d       	adc	r25, r1
    1500:	96 95       	lsr	r25
    1502:	87 95       	ror	r24
    1504:	97 f9       	bld	r25, 7
    1506:	08 95       	ret

00001508 <__itoa_ncheck>:
    1508:	bb 27       	eor	r27, r27
    150a:	4a 30       	cpi	r20, 0x0A	; 10
    150c:	31 f4       	brne	.+12     	; 0x151a <__itoa_ncheck+0x12>
    150e:	99 23       	and	r25, r25
    1510:	22 f4       	brpl	.+8      	; 0x151a <__itoa_ncheck+0x12>
    1512:	bd e2       	ldi	r27, 0x2D	; 45
    1514:	90 95       	com	r25
    1516:	81 95       	neg	r24
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <__utoa_common>

0000151e <__utoa_ncheck>:
    151e:	bb 27       	eor	r27, r27

00001520 <__utoa_common>:
    1520:	fb 01       	movw	r30, r22
    1522:	55 27       	eor	r21, r21
    1524:	aa 27       	eor	r26, r26
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	aa 1f       	adc	r26, r26
    152c:	a4 17       	cp	r26, r20
    152e:	10 f0       	brcs	.+4      	; 0x1534 <__utoa_common+0x14>
    1530:	a4 1b       	sub	r26, r20
    1532:	83 95       	inc	r24
    1534:	50 51       	subi	r21, 0x10	; 16
    1536:	b9 f7       	brne	.-18     	; 0x1526 <__utoa_common+0x6>
    1538:	a0 5d       	subi	r26, 0xD0	; 208
    153a:	aa 33       	cpi	r26, 0x3A	; 58
    153c:	08 f0       	brcs	.+2      	; 0x1540 <__utoa_common+0x20>
    153e:	a9 5d       	subi	r26, 0xD9	; 217
    1540:	a1 93       	st	Z+, r26
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	79 f7       	brne	.-34     	; 0x1524 <__utoa_common+0x4>
    1546:	b1 11       	cpse	r27, r1
    1548:	b1 93       	st	Z+, r27
    154a:	11 92       	st	Z+, r1
    154c:	cb 01       	movw	r24, r22
    154e:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <strrev>

00001552 <strrev>:
    1552:	dc 01       	movw	r26, r24
    1554:	fc 01       	movw	r30, r24
    1556:	67 2f       	mov	r22, r23
    1558:	71 91       	ld	r23, Z+
    155a:	77 23       	and	r23, r23
    155c:	e1 f7       	brne	.-8      	; 0x1556 <strrev+0x4>
    155e:	32 97       	sbiw	r30, 0x02	; 2
    1560:	04 c0       	rjmp	.+8      	; 0x156a <strrev+0x18>
    1562:	7c 91       	ld	r23, X
    1564:	6d 93       	st	X+, r22
    1566:	70 83       	st	Z, r23
    1568:	62 91       	ld	r22, -Z
    156a:	ae 17       	cp	r26, r30
    156c:	bf 07       	cpc	r27, r31
    156e:	c8 f3       	brcs	.-14     	; 0x1562 <strrev+0x10>
    1570:	08 95       	ret

00001572 <_exit>:
    1572:	f8 94       	cli

00001574 <__stop_program>:
    1574:	ff cf       	rjmp	.-2      	; 0x1574 <__stop_program>
