
ITI_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  000010b0  00001144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  008000d6  008000d6  000011ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026d5  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e6d  00000000  00000000  00003bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001982  00000000  00000000  00004a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000740  00000000  00000000  000063dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fae  00000000  00000000  00006b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014db  00000000  00000000  00007aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00008fa5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__vector_1>
       8:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__vector_2>
       c:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__vector_10>
      2c:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3d       	cpi	r26, 0xD6	; 214
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 ed       	ldi	r26, 0xD6	; 214
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3e       	cpi	r26, 0xED	; 237
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a7 01 	call	0x34e	; 0x34e <main>
      8a:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TempSensor>:
	}

}

void TempSensor(void){
	u8 Temp = ADC_u8StartConversion(0);
      92:	80 e0       	ldi	r24, 0x00	; 0
      94:	0e 94 ee 03 	call	0x7dc	; 0x7dc <ADC_u8StartConversion>
	 * LM35 Temperatur Sensor Vout Calculations with connection applied in proteus:
	 * Vout = 10 mV/C
	 * 25 C ===> (10*(10^-3)*25*2^8) / 5 = 12.8
	 * 35 C ===> (10*(10^-3)*35*2^8) / 5 = 17.9
	 */
	if(Temp>=18){
      98:	82 31       	cpi	r24, 0x12	; 18
      9a:	58 f0       	brcs	.+22     	; 0xb2 <TempSensor+0x20>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
      9c:	41 e0       	ldi	r20, 0x01	; 1
      9e:	66 e0       	ldi	r22, 0x06	; 6
      a0:	83 e0       	ldi	r24, 0x03	; 3
      a2:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	67 e0       	ldi	r22, 0x07	; 7
      aa:	83 e0       	ldi	r24, 0x03	; 3
      ac:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
      b0:	08 95       	ret
	}
	else if (Temp>=13){
      b2:	8d 30       	cpi	r24, 0x0D	; 13
      b4:	58 f0       	brcs	.+22     	; 0xcc <TempSensor+0x3a>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	66 e0       	ldi	r22, 0x06	; 6
      ba:	83 e0       	ldi	r24, 0x03	; 3
      bc:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH);
      c0:	41 e0       	ldi	r20, 0x01	; 1
      c2:	67 e0       	ldi	r22, 0x07	; 7
      c4:	83 e0       	ldi	r24, 0x03	; 3
      c6:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
      ca:	08 95       	ret
	}
	else{
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
      cc:	40 e0       	ldi	r20, 0x00	; 0
      ce:	66 e0       	ldi	r22, 0x06	; 6
      d0:	83 e0       	ldi	r24, 0x03	; 3
      d2:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
      d6:	40 e0       	ldi	r20, 0x00	; 0
      d8:	67 e0       	ldi	r22, 0x07	; 7
      da:	83 e0       	ldi	r24, 0x03	; 3
      dc:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
      e0:	08 95       	ret

000000e2 <DoorPass>:
	}
}

void DoorPass(){
      e2:	cf 93       	push	r28
	/*To set new pass enter your old pass and press clear*/
	/* max password digits is 4*/
	
	// pressed key
	u8 Local_u8Keypad_Key=KPD_u8GetPressedKey();
      e4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <KPD_u8GetPressedKey>
      e8:	c8 2f       	mov	r28, r24
	/* case user entered clear */
		/* two cases to enter clear
		* First : To set new pass
		* Second : clear screen and clear the entered password 
		*/
	if(Local_u8Keypad_Key==KPD_CLEAR){
      ea:	8d 30       	cpi	r24, 0x0D	; 13
      ec:	09 f0       	breq	.+2      	; 0xf0 <DoorPass+0xe>
      ee:	84 c0       	rjmp	.+264    	; 0x1f8 <DoorPass+0x116>
		
		// First case : set new pass
		if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
      f0:	20 91 d9 00 	lds	r18, 0x00D9	; 0x8000d9 <Local_u16DoorPassword.1912>
      f4:	30 91 da 00 	lds	r19, 0x00DA	; 0x8000da <Local_u16DoorPassword.1912+0x1>
      f8:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <Global_u16EPROMDoorPass>
      fc:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <Global_u16EPROMDoorPass+0x1>
     100:	28 17       	cp	r18, r24
     102:	39 07       	cpc	r19, r25
     104:	09 f0       	breq	.+2      	; 0x108 <DoorPass+0x26>
     106:	6d c0       	rjmp	.+218    	; 0x1e2 <DoorPass+0x100>
			
			LCD_voidClearDisplay();
     108:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_voidClearDisplay>
			// setting new password
				// clear all saved passes and digit counter
				Global_u16EPROMDoorPass=0;
     10c:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <Global_u16EPROMDoorPass+0x1>
     110:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <Global_u16EPROMDoorPass>
				Local_u16DoorPassword=0;
     114:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <Local_u16DoorPassword.1912+0x1>
     118:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <Local_u16DoorPassword.1912>
				Local_u8DigitsCount=0;
     11c:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <Local_u8DigitsCount.1913+0x1>
     120:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <Local_u8DigitsCount.1913>
				
				LCD_voidSendString("Set new pass:");
     124:	8e e6       	ldi	r24, 0x6E	; 110
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	0e 94 83 03 	call	0x706	; 0x706 <LCD_voidSendString>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				while(Local_u8Keypad_Key != KPD_ENTER ){
					
					Local_u8Keypad_Key=KPD_u8GetPressedKey();
     12c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <KPD_u8GetPressedKey>
     130:	c8 2f       	mov	r28, r24
					// check if the user entered more than 4 digits
					if(Local_u8DigitsCount==Max_Pass_Digits+1){
     132:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <Local_u8DigitsCount.1913>
     136:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <Local_u8DigitsCount.1913+0x1>
     13a:	05 97       	sbiw	r24, 0x05	; 5
     13c:	b1 f4       	brne	.+44     	; 0x16a <DoorPass+0x88>
						LCD_voidClearDisplay();
     13e:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_voidClearDisplay>
						LCD_voidSendString("ERROR !!!!");
     142:	8c e7       	ldi	r24, 0x7C	; 124
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 83 03 	call	0x706	; 0x706 <LCD_voidSendString>
						LCD_voidGoTOXY(1,0);
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_voidGoTOXY>
						LCD_voidSendString("Max Digits is 4");
     152:	87 e8       	ldi	r24, 0x87	; 135
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 83 03 	call	0x706	; 0x706 <LCD_voidSendString>
						Local_u8DigitsCount=0;
     15a:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <Local_u8DigitsCount.1913+0x1>
     15e:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <Local_u8DigitsCount.1913>
						Global_u16EPROMDoorPass=0;
     162:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <Global_u16EPROMDoorPass+0x1>
     166:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <Global_u16EPROMDoorPass>
					}
					
					if(Local_u8Keypad_Key==KPD_CLEAR){
     16a:	cd 30       	cpi	r28, 0x0D	; 13
     16c:	59 f4       	brne	.+22     	; 0x184 <DoorPass+0xa2>
						Local_u8DigitsCount=0;
     16e:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <Local_u8DigitsCount.1913+0x1>
     172:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <Local_u8DigitsCount.1913>
						LCD_voidClearDisplay();
     176:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_voidClearDisplay>
						Global_u16EPROMDoorPass=0;
     17a:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <Global_u16EPROMDoorPass+0x1>
     17e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <Global_u16EPROMDoorPass>
     182:	d4 cf       	rjmp	.-88     	; 0x12c <DoorPass+0x4a>
					
					}
					else if(Local_u8Keypad_Key !=KPD_NO_PRESS && Local_u8Keypad_Key!=KPD_ENTER){
     184:	ca 3a       	cpi	r28, 0xAA	; 170
     186:	91 f2       	breq	.-92     	; 0x12c <DoorPass+0x4a>
     188:	cc 30       	cpi	r28, 0x0C	; 12
     18a:	09 f4       	brne	.+2      	; 0x18e <DoorPass+0xac>
     18c:	97 c0       	rjmp	.+302    	; 0x2bc <DoorPass+0x1da>
						// if it is the first digit that user enter --> clear any previous message on the screen
						if(Local_u8DigitsCount==0)
     18e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <Local_u8DigitsCount.1913>
     192:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <Local_u8DigitsCount.1913+0x1>
     196:	89 2b       	or	r24, r25
     198:	11 f4       	brne	.+4      	; 0x19e <DoorPass+0xbc>
							LCD_voidClearDisplay();
     19a:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_voidClearDisplay>
						LCD_voidSendData('*');
     19e:	8a e2       	ldi	r24, 0x2A	; 42
     1a0:	0e 94 09 03 	call	0x612	; 0x612 <LCD_voidSendData>
						Local_u8DigitsCount++;
     1a4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <Local_u8DigitsCount.1913>
     1a8:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <Local_u8DigitsCount.1913+0x1>
     1ac:	01 96       	adiw	r24, 0x01	; 1
     1ae:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <Local_u8DigitsCount.1913+0x1>
     1b2:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <Local_u8DigitsCount.1913>
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
     1b6:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <Global_u16EPROMDoorPass>
     1ba:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <Global_u16EPROMDoorPass+0x1>
     1be:	9c 01       	movw	r18, r24
     1c0:	22 0f       	add	r18, r18
     1c2:	33 1f       	adc	r19, r19
     1c4:	88 0f       	add	r24, r24
     1c6:	99 1f       	adc	r25, r25
     1c8:	88 0f       	add	r24, r24
     1ca:	99 1f       	adc	r25, r25
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	82 0f       	add	r24, r18
     1d2:	93 1f       	adc	r25, r19
     1d4:	8c 0f       	add	r24, r28
     1d6:	91 1d       	adc	r25, r1
     1d8:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <Global_u16EPROMDoorPass+0x1>
     1dc:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <Global_u16EPROMDoorPass>
     1e0:	a5 cf       	rjmp	.-182    	; 0x12c <DoorPass+0x4a>
				
		}
		
		// Second case : to clear Screen or typed password
		else{
		LCD_voidClearDisplay();
     1e2:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_voidClearDisplay>
		Local_u16DoorPassword=0;
     1e6:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <Local_u16DoorPassword.1912+0x1>
     1ea:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <Local_u16DoorPassword.1912>
		Local_u8DigitsCount=0;
     1ee:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <Local_u8DigitsCount.1913+0x1>
     1f2:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <Local_u8DigitsCount.1913>
     1f6:	88 c0       	rjmp	.+272    	; 0x308 <DoorPass+0x226>
		
		}
	}
	/******************************************************************************************************************************************************************/
	/* case user pressed enter or equal */
	else if(Local_u8Keypad_Key==KPD_ENTER){
     1f8:	8c 30       	cpi	r24, 0x0C	; 12
     1fa:	99 f5       	brne	.+102    	; 0x262 <DoorPass+0x180>
		
		LCD_voidClearDisplay();
     1fc:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_voidClearDisplay>
		// check if entered pass is correct
		 if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
     200:	20 91 d9 00 	lds	r18, 0x00D9	; 0x8000d9 <Local_u16DoorPassword.1912>
     204:	30 91 da 00 	lds	r19, 0x00DA	; 0x8000da <Local_u16DoorPassword.1912+0x1>
     208:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <Global_u16EPROMDoorPass>
     20c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <Global_u16EPROMDoorPass+0x1>
     210:	28 17       	cp	r18, r24
     212:	39 07       	cpc	r19, r25
     214:	c9 f4       	brne	.+50     	; 0x248 <DoorPass+0x166>
			// check door status
			if(Local_u8DoorStatus==0){
     216:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
     21a:	81 11       	cpse	r24, r1
     21c:	0b c0       	rjmp	.+22     	; 0x234 <DoorPass+0x152>
				LCD_voidSendString("Door is opened");
     21e:	87 e9       	ldi	r24, 0x97	; 151
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 83 03 	call	0x706	; 0x706 <LCD_voidSendString>
				// run servo
				Servo_VoidDegree(180);
     226:	84 eb       	ldi	r24, 0xB4	; 180
     228:	0e 94 c1 03 	call	0x782	; 0x782 <Servo_VoidDegree>
				Local_u8DoorStatus=1;
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__data_end>
     232:	0e c0       	rjmp	.+28     	; 0x250 <DoorPass+0x16e>
				
			}
			else{
				LCD_voidSendString("Door is Closed");
     234:	86 ea       	ldi	r24, 0xA6	; 166
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 83 03 	call	0x706	; 0x706 <LCD_voidSendString>
				// stop servo 
				Servo_VoidDegree(0);
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	0e 94 c1 03 	call	0x782	; 0x782 <Servo_VoidDegree>
				Local_u8DoorStatus=0;
     242:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <__data_end>
     246:	04 c0       	rjmp	.+8      	; 0x250 <DoorPass+0x16e>
				
			}
			
		}
		else
			LCD_voidSendString("Wrong password !");
     248:	85 eb       	ldi	r24, 0xB5	; 181
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 83 03 	call	0x706	; 0x706 <LCD_voidSendString>
			
			// reset the entered password after typing enter 
			Local_u16DoorPassword=0;
     250:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <Local_u16DoorPassword.1912+0x1>
     254:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <Local_u16DoorPassword.1912>
			Local_u8DigitsCount=0;
     258:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <Local_u8DigitsCount.1913+0x1>
     25c:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <Local_u8DigitsCount.1913>
     260:	53 c0       	rjmp	.+166    	; 0x308 <DoorPass+0x226>
	}
	
	/****************************************************************************************************************************************************************/
	/* Case user pressed a digit key*/
	else if(Local_u8Keypad_Key != KPD_NO_PRESS){
     262:	8a 3a       	cpi	r24, 0xAA	; 170
     264:	09 f4       	brne	.+2      	; 0x268 <DoorPass+0x186>
     266:	50 c0       	rjmp	.+160    	; 0x308 <DoorPass+0x226>
		// if it is the first digit that user enter --> clear any previous message on the screen
		if(Local_u8DigitsCount==0)
     268:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <Local_u8DigitsCount.1913>
     26c:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <Local_u8DigitsCount.1913+0x1>
     270:	89 2b       	or	r24, r25
     272:	11 f4       	brne	.+4      	; 0x278 <DoorPass+0x196>
			LCD_voidClearDisplay();
     274:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_voidClearDisplay>
			
		LCD_voidSendData('*');
     278:	8a e2       	ldi	r24, 0x2A	; 42
     27a:	0e 94 09 03 	call	0x612	; 0x612 <LCD_voidSendData>
		
		Local_u8DigitsCount++;
     27e:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <Local_u8DigitsCount.1913>
     282:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <Local_u8DigitsCount.1913+0x1>
     286:	01 96       	adiw	r24, 0x01	; 1
     288:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <Local_u8DigitsCount.1913+0x1>
     28c:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <Local_u8DigitsCount.1913>
		Local_u16DoorPassword=Local_u16DoorPassword*10 + Local_u8Keypad_Key;
     290:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <Local_u16DoorPassword.1912>
     294:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <Local_u16DoorPassword.1912+0x1>
     298:	9c 01       	movw	r18, r24
     29a:	22 0f       	add	r18, r18
     29c:	33 1f       	adc	r19, r19
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	88 0f       	add	r24, r24
     2a4:	99 1f       	adc	r25, r25
     2a6:	88 0f       	add	r24, r24
     2a8:	99 1f       	adc	r25, r25
     2aa:	82 0f       	add	r24, r18
     2ac:	93 1f       	adc	r25, r19
     2ae:	8c 0f       	add	r24, r28
     2b0:	91 1d       	adc	r25, r1
     2b2:	90 93 da 00 	sts	0x00DA, r25	; 0x8000da <Local_u16DoorPassword.1912+0x1>
     2b6:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <Local_u16DoorPassword.1912>
		
		
	}
	
	
}
     2ba:	26 c0       	rjmp	.+76     	; 0x308 <DoorPass+0x226>
						Local_u8DigitsCount++;
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
					}
					
				}
				LCD_voidClearDisplay();
     2bc:	0e 94 76 03 	call	0x6ec	; 0x6ec <LCD_voidClearDisplay>
				LCD_voidSendString("pass is updated");
     2c0:	86 ec       	ldi	r24, 0xC6	; 198
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 83 03 	call	0x706	; 0x706 <LCD_voidSendString>
				// reset counter
				Local_u8DigitsCount=0;
     2c8:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <Local_u8DigitsCount.1913+0x1>
     2cc:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <Local_u8DigitsCount.1913>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				// save the new pass to eeprom
				// save low byte
				Global_u8SavedDoorPassLowByte=(u8)Global_u16EPROMDoorPass;
     2d0:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <Global_u16EPROMDoorPass>
     2d4:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <Global_u8SavedDoorPassLowByte>
				EEPROM_voidSendDataByte(Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
     2d8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     2dc:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     2e0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <EEPROM_voidSendDataByte>
				TIMER_delay_ms(300);
     2e4:	6c e2       	ldi	r22, 0x2C	; 44
     2e6:	71 e0       	ldi	r23, 0x01	; 1
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 22 05 	call	0xa44	; 0xa44 <TIMER_delay_ms>
				// save high byte
				Global_u8SavedDoorPassHighByte=(u8)(Global_u16EPROMDoorPass>>8);
     2f0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <Global_u16EPROMDoorPass+0x1>
     2f4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <Global_u8SavedDoorPassHighByte>
				EEPROM_voidSendDataByte(Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
     2f8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     2fc:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     300:	66 5f       	subi	r22, 0xF6	; 246
     302:	7f 4f       	sbci	r23, 0xFF	; 255
     304:	0e 94 fe 01 	call	0x3fc	; 0x3fc <EEPROM_voidSendDataByte>
		
		
	}
	
	
}
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <InitDoorPass>:
void InitDoorPass(u16 Copy_Globalu16EPROMDoorPass ){
	
	Global_u8SavedDoorPassLowByte=(u8)Copy_Globalu16EPROMDoorPass;
     30c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <Global_u8SavedDoorPassLowByte>
	
	Global_u8SavedDoorPassHighByte=(u8)(Copy_Globalu16EPROMDoorPass>>8);
     310:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <Global_u8SavedDoorPassHighByte>
	EEPROM_voidSendDataByte(Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
     314:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     318:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     31c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <EEPROM_voidSendDataByte>
	TIMER_delay_ms(300);
     320:	6c e2       	ldi	r22, 0x2C	; 44
     322:	71 e0       	ldi	r23, 0x01	; 1
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 22 05 	call	0xa44	; 0xa44 <TIMER_delay_ms>
	
	EEPROM_voidSendDataByte(Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
     32c:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     330:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     334:	66 5f       	subi	r22, 0xF6	; 246
     336:	7f 4f       	sbci	r23, 0xFF	; 255
     338:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <Global_u8SavedDoorPassHighByte>
     33c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <EEPROM_voidSendDataByte>
	TIMER_delay_ms(300);
     340:	6c e2       	ldi	r22, 0x2C	; 44
     342:	71 e0       	ldi	r23, 0x01	; 1
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 22 05 	call	0xa44	; 0xa44 <TIMER_delay_ms>
     34c:	08 95       	ret

0000034e <main>:
void TempSensor(void);
void DoorPass(void);
void InitDoorPass(u16 );
void main(void)
{	
	ADC_voidInit();
     34e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_OUTPUT);
     352:	41 e0       	ldi	r20, 0x01	; 1
     354:	66 e0       	ldi	r22, 0x06	; 6
     356:	83 e0       	ldi	r24, 0x03	; 3
     358:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_OUTPUT);
     35c:	41 e0       	ldi	r20, 0x01	; 1
     35e:	67 e0       	ldi	r22, 0x07	; 7
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <DIO_voidSetPinDirection>
	
	LCD_voidInit();
     366:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_voidInit>
	KPD_voidInit();
     36a:	0e 94 35 02 	call	0x46a	; 0x46a <KPD_voidInit>
	//servo pin
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
     36e:	41 e0       	ldi	r20, 0x01	; 1
     370:	65 e0       	ldi	r22, 0x05	; 5
     372:	83 e0       	ldi	r24, 0x03	; 3
     374:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <DIO_voidSetPinDirection>
	Servo_VoidInit();
     378:	0e 94 b8 03 	call	0x770	; 0x770 <Servo_VoidInit>
	
	TWI_voidMasterInit(0);
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	0e 94 1c 06 	call	0xc38	; 0xc38 <TWI_voidMasterInit>
	// save initial password = 100
	Global_u16EPROMDoorPass=200;
     382:	88 ec       	ldi	r24, 0xC8	; 200
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <Global_u16EPROMDoorPass+0x1>
     38a:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <Global_u16EPROMDoorPass>
	InitDoorPass(700);
     38e:	8c eb       	ldi	r24, 0xBC	; 188
     390:	92 e0       	ldi	r25, 0x02	; 2
     392:	0e 94 86 01 	call	0x30c	; 0x30c <InitDoorPass>
	
	// read pass low byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
     396:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     39a:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     39e:	8c ee       	ldi	r24, 0xEC	; 236
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 16 02 	call	0x42c	; 0x42c <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
     3a6:	6c e2       	ldi	r22, 0x2C	; 44
     3a8:	71 e0       	ldi	r23, 0x01	; 1
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 22 05 	call	0xa44	; 0xa44 <TIMER_delay_ms>
	// read pass high byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
     3b2:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     3b6:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     3ba:	66 5f       	subi	r22, 0xF6	; 246
     3bc:	7f 4f       	sbci	r23, 0xFF	; 255
     3be:	89 ee       	ldi	r24, 0xE9	; 233
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 16 02 	call	0x42c	; 0x42c <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
     3c6:	6c e2       	ldi	r22, 0x2C	; 44
     3c8:	71 e0       	ldi	r23, 0x01	; 1
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 22 05 	call	0xa44	; 0xa44 <TIMER_delay_ms>
	// combine the high and low byte
	Global_u16EPROMDoorPass= ( (u16)(Global_u8SavedDoorPassHighByte<<8) )| Global_u8SavedDoorPassLowByte;
     3d2:	60 91 e9 00 	lds	r22, 0x00E9	; 0x8000e9 <Global_u8SavedDoorPassHighByte>
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	76 2f       	mov	r23, r22
     3da:	66 27       	eor	r22, r22
     3dc:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <Global_u8SavedDoorPassLowByte>
     3e0:	68 2b       	or	r22, r24
     3e2:	70 93 eb 00 	sts	0x00EB, r23	; 0x8000eb <Global_u16EPROMDoorPass+0x1>
     3e6:	60 93 ea 00 	sts	0x00EA, r22	; 0x8000ea <Global_u16EPROMDoorPass>
	LCD_voidSendNumber(Global_u16EPROMDoorPass);
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 99 03 	call	0x732	; 0x732 <LCD_voidSendNumber>
	while(1){
		
		DoorPass();
     3f2:	0e 94 71 00 	call	0xe2	; 0xe2 <DoorPass>
		TempSensor();
     3f6:	0e 94 49 00 	call	0x92	; 0x92 <TempSensor>
     3fa:	fb cf       	rjmp	.-10     	; 0x3f2 <main+0xa4>

000003fc <EEPROM_voidSendDataByte>:

#include "../../MCAL/TWI_Driver/TWI_interface.h"
#include "EPROM_interface.h"

void EEPROM_voidSendDataByte(u8 Copy_u8DataByte,u16 Copy_u16LocationAddress)
{	u8 Address = ((0b1010<<3) | (A2<<2) | (Copy_u16LocationAddress>>8));
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	c8 2f       	mov	r28, r24
     404:	d6 2f       	mov	r29, r22
     406:	17 2f       	mov	r17, r23

	TWI_SendStartCondition();
     408:	0e 94 28 06 	call	0xc50	; 0xc50 <TWI_SendStartCondition>
	TWI_SendSlaveAddressWithWrite(Address);
     40c:	81 2f       	mov	r24, r17
     40e:	80 65       	ori	r24, 0x50	; 80
     410:	0e 94 49 06 	call	0xc92	; 0xc92 <TWI_SendSlaveAddressWithWrite>
	//TWI_SendSlaveAddressWithWrite(0b1010000);/**/

	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
     414:	8d 2f       	mov	r24, r29
     416:	0e 94 69 06 	call	0xcd2	; 0xcd2 <TWI_MasterWriteDataByte>
	TWI_MasterWriteDataByte(Copy_u8DataByte);
     41a:	8c 2f       	mov	r24, r28
     41c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <TWI_MasterWriteDataByte>
	TWI_SendStopCondition();
     420:	0e 94 87 06 	call	0xd0e	; 0xd0e <TWI_SendStopCondition>
}
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	08 95       	ret

0000042c <EEPROM_voidReadDataByte>:

void EEPROM_voidReadDataByte(u8 *Copy_u8DataByte,u16 Copy_u16LocationAddress)
{	u8 Address = ((0b1010<<3) | (A2<<2) | (Copy_u16LocationAddress>>8));
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	8c 01       	movw	r16, r24
     436:	d6 2f       	mov	r29, r22
     438:	c7 2f       	mov	r28, r23
     43a:	c0 65       	ori	r28, 0x50	; 80
	TWI_SendStartCondition();
     43c:	0e 94 28 06 	call	0xc50	; 0xc50 <TWI_SendStartCondition>
	TWI_SendSlaveAddressWithWrite(Address);
     440:	8c 2f       	mov	r24, r28
     442:	0e 94 49 06 	call	0xc92	; 0xc92 <TWI_SendSlaveAddressWithWrite>
	//TWI_SendSlaveAddressWithWrite(0b1010000);

	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
     446:	8d 2f       	mov	r24, r29
     448:	0e 94 69 06 	call	0xcd2	; 0xcd2 <TWI_MasterWriteDataByte>

	TWI_SendRepeatedStart();
     44c:	0e 94 38 06 	call	0xc70	; 0xc70 <TWI_SendRepeatedStart>

	//TWI_MasterWriteDataByte(0b10100001);/**/
	TWI_SendSlaveAddressWithRead(Address);
     450:	8c 2f       	mov	r24, r28
     452:	0e 94 59 06 	call	0xcb2	; 0xcb2 <TWI_SendSlaveAddressWithRead>
	TWI_MasterReadDataByte(Copy_u8DataByte);
     456:	c8 01       	movw	r24, r16
     458:	0e 94 73 06 	call	0xce6	; 0xce6 <TWI_MasterReadDataByte>
	TWI_SendStopCondition();
     45c:	0e 94 87 06 	call	0xd0e	; 0xd0e <TWI_SendStopCondition>
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	08 95       	ret

0000046a <KPD_voidInit>:
			
void KPD_voidInit(){
	
	
	// set col s output high
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL0_PIN,DIO_OUTPUT);
     46a:	41 e0       	ldi	r20, 0x01	; 1
     46c:	64 e0       	ldi	r22, 0x04	; 4
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL1_PIN,DIO_OUTPUT);
     474:	41 e0       	ldi	r20, 0x01	; 1
     476:	65 e0       	ldi	r22, 0x05	; 5
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL2_PIN,DIO_OUTPUT);
     47e:	41 e0       	ldi	r20, 0x01	; 1
     480:	66 e0       	ldi	r22, 0x06	; 6
     482:	82 e0       	ldi	r24, 0x02	; 2
     484:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <DIO_voidSetPinDirection>
	//DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL3_PIN,DIO_OUTPUT);

	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL0_PIN,DIO_HIGH);
     488:	41 e0       	ldi	r20, 0x01	; 1
     48a:	64 e0       	ldi	r22, 0x04	; 4
     48c:	82 e0       	ldi	r24, 0x02	; 2
     48e:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL1_PIN,DIO_HIGH);
     492:	41 e0       	ldi	r20, 0x01	; 1
     494:	65 e0       	ldi	r22, 0x05	; 5
     496:	82 e0       	ldi	r24, 0x02	; 2
     498:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL2_PIN,DIO_HIGH);
     49c:	41 e0       	ldi	r20, 0x01	; 1
     49e:	66 e0       	ldi	r22, 0x06	; 6
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL3_PIN,DIO_HIGH);

	// set rows input pull up
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_INPUT);
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	61 e0       	ldi	r22, 0x01	; 1
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_INPUT);
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	62 e0       	ldi	r22, 0x02	; 2
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_INPUT);
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	63 e0       	ldi	r22, 0x03	; 3
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_INPUT);
     4c4:	40 e0       	ldi	r20, 0x00	; 0
     4c6:	64 e0       	ldi	r22, 0x04	; 4
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_HIGH);
     4ce:	41 e0       	ldi	r20, 0x01	; 1
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_HIGH);
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	62 e0       	ldi	r22, 0x02	; 2
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_HIGH);
     4e2:	41 e0       	ldi	r20, 0x01	; 1
     4e4:	63 e0       	ldi	r22, 0x03	; 3
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_HIGH);
     4ec:	41 e0       	ldi	r20, 0x01	; 1
     4ee:	64 e0       	ldi	r22, 0x04	; 4
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
     4f6:	08 95       	ret

000004f8 <KPD_u8GetPressedKey>:

}

u8 KPD_u8GetPressedKey(void){
     4f8:	4f 92       	push	r4
     4fa:	5f 92       	push	r5
     4fc:	6f 92       	push	r6
     4fe:	7f 92       	push	r7
     500:	8f 92       	push	r8
     502:	9f 92       	push	r9
     504:	af 92       	push	r10
     506:	bf 92       	push	r11
     508:	cf 92       	push	r12
     50a:	df 92       	push	r13
     50c:	ef 92       	push	r14
     50e:	ff 92       	push	r15
     510:	0f 93       	push	r16
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
     51c:	63 97       	sbiw	r28, 0x13	; 19
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	de bf       	out	0x3e, r29	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8Pressedkey= KPD_NO_PRESS;
	u8 Local_u8RowxValue ;


	u8 Local_u8ColumnsArray[]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN};
     528:	84 e0       	ldi	r24, 0x04	; 4
     52a:	89 83       	std	Y+1, r24	; 0x01
     52c:	95 e0       	ldi	r25, 0x05	; 5
     52e:	9a 83       	std	Y+2, r25	; 0x02
     530:	96 e0       	ldi	r25, 0x06	; 6
     532:	9b 83       	std	Y+3, r25	; 0x03
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	9c 83       	std	Y+4, r25	; 0x04
     538:	92 e0       	ldi	r25, 0x02	; 2
     53a:	9d 83       	std	Y+5, r25	; 0x05
     53c:	93 e0       	ldi	r25, 0x03	; 3
     53e:	9e 83       	std	Y+6, r25	; 0x06
     540:	8f 83       	std	Y+7, r24	; 0x07

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;
     542:	8c e0       	ldi	r24, 0x0C	; 12
     544:	e2 e6       	ldi	r30, 0x62	; 98
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	de 01       	movw	r26, r28
     54a:	18 96       	adiw	r26, 0x08	; 8
     54c:	01 90       	ld	r0, Z+
     54e:	0d 92       	st	X+, r0
     550:	8a 95       	dec	r24
     552:	e1 f7       	brne	.-8      	; 0x54c <KPD_u8GetPressedKey+0x54>
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	4c 01       	movw	r8, r24
     55a:	a1 2c       	mov	r10, r1
     55c:	b1 2c       	mov	r11, r1


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);
     55e:	35 01       	movw	r6, r10
     560:	f4 01       	movw	r30, r8
     562:	41 90       	ld	r4, Z+
     564:	4f 01       	movw	r8, r30
     566:	40 e0       	ldi	r20, 0x00	; 0
     568:	64 2d       	mov	r22, r4
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
     570:	7e 01       	movw	r14, r28
     572:	f4 e0       	ldi	r31, 0x04	; 4
     574:	ef 0e       	add	r14, r31
     576:	f1 1c       	adc	r15, r1
     578:	00 e0       	ldi	r16, 0x00	; 0
     57a:	10 e0       	ldi	r17, 0x00	; 0

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){

			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
     57c:	68 01       	movw	r12, r16
     57e:	f7 01       	movw	r30, r14
     580:	51 90       	ld	r5, Z+
     582:	7f 01       	movw	r14, r30
     584:	65 2d       	mov	r22, r5
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 76 04 	call	0x8ec	; 0x8ec <DIO_u8GetPinValue>

			if(Local_u8RowxValue==0){
     58c:	81 11       	cpse	r24, r1
     58e:	17 c0       	rjmp	.+46     	; 0x5be <KPD_u8GetPressedKey+0xc6>

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
     590:	c8 01       	movw	r24, r16
     592:	88 0f       	add	r24, r24
     594:	99 1f       	adc	r25, r25
     596:	c8 0e       	add	r12, r24
     598:	d9 1e       	adc	r13, r25
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	8c 0f       	add	r24, r28
     5a0:	9d 1f       	adc	r25, r29
     5a2:	c8 0e       	add	r12, r24
     5a4:	d9 1e       	adc	r13, r25
     5a6:	f6 01       	movw	r30, r12
     5a8:	e6 0d       	add	r30, r6
     5aa:	f7 1d       	adc	r31, r7
     5ac:	17 81       	ldd	r17, Z+7	; 0x07
				while(Local_u8RowxValue==0){
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
     5ae:	65 2d       	mov	r22, r5
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	0e 94 76 04 	call	0x8ec	; 0x8ec <DIO_u8GetPinValue>
			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

			if(Local_u8RowxValue==0){

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
				while(Local_u8RowxValue==0){
     5b6:	88 23       	and	r24, r24
     5b8:	d1 f3       	breq	.-12     	; 0x5ae <KPD_u8GetPressedKey+0xb6>
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

				}

				return Local_u8Pressedkey ;
     5ba:	81 2f       	mov	r24, r17
     5bc:	13 c0       	rjmp	.+38     	; 0x5e4 <KPD_u8GetPressedKey+0xec>
     5be:	0f 5f       	subi	r16, 0xFF	; 255
     5c0:	1f 4f       	sbci	r17, 0xFF	; 255

	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){
     5c2:	04 30       	cpi	r16, 0x04	; 4
     5c4:	11 05       	cpc	r17, r1
     5c6:	d1 f6       	brne	.-76     	; 0x57c <KPD_u8GetPressedKey+0x84>
			}


		}

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_HIGH);
     5c8:	41 e0       	ldi	r20, 0x01	; 1
     5ca:	64 2d       	mov	r22, r4
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
     5d2:	9f ef       	ldi	r25, 0xFF	; 255
     5d4:	a9 1a       	sub	r10, r25
     5d6:	b9 0a       	sbc	r11, r25
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){
     5d8:	e3 e0       	ldi	r30, 0x03	; 3
     5da:	ae 16       	cp	r10, r30
     5dc:	b1 04       	cpc	r11, r1
     5de:	09 f0       	breq	.+2      	; 0x5e2 <KPD_u8GetPressedKey+0xea>
     5e0:	be cf       	rjmp	.-132    	; 0x55e <KPD_u8GetPressedKey+0x66>


	}


	return Local_u8Pressedkey ;
     5e2:	8a ea       	ldi	r24, 0xAA	; 170
     5e4:	63 96       	adiw	r28, 0x13	; 19
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	df 90       	pop	r13
     5fe:	cf 90       	pop	r12
     600:	bf 90       	pop	r11
     602:	af 90       	pop	r10
     604:	9f 90       	pop	r9
     606:	8f 90       	pop	r8
     608:	7f 90       	pop	r7
     60a:	6f 90       	pop	r6
     60c:	5f 90       	pop	r5
     60e:	4f 90       	pop	r4
     610:	08 95       	ret

00000612 <LCD_voidSendData>:
		LCD_voidSendCommand(0b00000010);
		Local_u8AddressCounter=0;
		
	}
	else
		Local_u8AddressCounter++;
     612:	cf 93       	push	r28
     614:	c8 2f       	mov	r28, r24
     616:	41 e0       	ldi	r20, 0x01	; 1
     618:	65 e0       	ldi	r22, 0x05	; 5
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
     620:	40 e0       	ldi	r20, 0x00	; 0
     622:	66 e0       	ldi	r22, 0x06	; 6
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
     62a:	6c 2f       	mov	r22, r28
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	0e 94 66 04 	call	0x8cc	; 0x8cc <DIO_voidSetPortValue>
     632:	41 e0       	ldi	r20, 0x01	; 1
     634:	67 e0       	ldi	r22, 0x07	; 7
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
     63c:	8f e9       	ldi	r24, 0x9F	; 159
     63e:	9f e0       	ldi	r25, 0x0F	; 15
     640:	01 97       	sbiw	r24, 0x01	; 1
     642:	f1 f7       	brne	.-4      	; 0x640 <LCD_voidSendData+0x2e>
     644:	00 c0       	rjmp	.+0      	; 0x646 <LCD_voidSendData+0x34>
     646:	00 00       	nop
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	67 e0       	ldi	r22, 0x07	; 7
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <LCD_voidSendCommand>:
     656:	cf 93       	push	r28
     658:	c8 2f       	mov	r28, r24
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	65 e0       	ldi	r22, 0x05	; 5
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	66 e0       	ldi	r22, 0x06	; 6
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
     66e:	6c 2f       	mov	r22, r28
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	0e 94 66 04 	call	0x8cc	; 0x8cc <DIO_voidSetPortValue>
     676:	41 e0       	ldi	r20, 0x01	; 1
     678:	67 e0       	ldi	r22, 0x07	; 7
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
     680:	8f e9       	ldi	r24, 0x9F	; 159
     682:	9f e0       	ldi	r25, 0x0F	; 15
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	f1 f7       	brne	.-4      	; 0x684 <LCD_voidSendCommand+0x2e>
     688:	00 c0       	rjmp	.+0      	; 0x68a <LCD_voidSendCommand+0x34>
     68a:	00 00       	nop
     68c:	40 e0       	ldi	r20, 0x00	; 0
     68e:	67 e0       	ldi	r22, 0x07	; 7
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	0e 94 28 04 	call	0x850	; 0x850 <DIO_voidSetPinValue>
     696:	cf 91       	pop	r28
     698:	08 95       	ret

0000069a <LCD_voidInit>:
     69a:	6f ef       	ldi	r22, 0xFF	; 255
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	0e 94 56 04 	call	0x8ac	; 0x8ac <DIO_voidSetPortDirection>
     6a2:	41 e0       	ldi	r20, 0x01	; 1
     6a4:	65 e0       	ldi	r22, 0x05	; 5
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <DIO_voidSetPinDirection>
     6ac:	41 e0       	ldi	r20, 0x01	; 1
     6ae:	66 e0       	ldi	r22, 0x06	; 6
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <DIO_voidSetPinDirection>
     6b6:	41 e0       	ldi	r20, 0x01	; 1
     6b8:	67 e0       	ldi	r22, 0x07	; 7
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <DIO_voidSetPinDirection>
     6c0:	2f ef       	ldi	r18, 0xFF	; 255
     6c2:	89 ef       	ldi	r24, 0xF9	; 249
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	21 50       	subi	r18, 0x01	; 1
     6c8:	80 40       	sbci	r24, 0x00	; 0
     6ca:	90 40       	sbci	r25, 0x00	; 0
     6cc:	e1 f7       	brne	.-8      	; 0x6c6 <LCD_voidInit+0x2c>
     6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <LCD_voidInit+0x36>
     6d0:	00 00       	nop
     6d2:	88 e3       	ldi	r24, 0x38	; 56
     6d4:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_voidSendCommand>
     6d8:	8c e0       	ldi	r24, 0x0C	; 12
     6da:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_voidSendCommand>
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_voidSendCommand>
     6e4:	86 e0       	ldi	r24, 0x06	; 6
     6e6:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_voidSendCommand>
     6ea:	08 95       	ret

000006ec <LCD_voidClearDisplay>:
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_voidSendCommand>
     6f2:	08 95       	ret

000006f4 <LCD_voidGoTOXY>:
     6f4:	90 e4       	ldi	r25, 0x40	; 64
     6f6:	89 9f       	mul	r24, r25
     6f8:	60 0d       	add	r22, r0
     6fa:	11 24       	eor	r1, r1
     6fc:	86 2f       	mov	r24, r22
     6fe:	80 68       	ori	r24, 0x80	; 128
     700:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_voidSendCommand>
     704:	08 95       	ret

00000706 <LCD_voidSendString>:
		
		
}

void LCD_voidSendString(u8* Copy_pcString)
{
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	fc 01       	movw	r30, r24
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
     70e:	80 81       	ld	r24, Z
     710:	88 23       	and	r24, r24
     712:	59 f0       	breq	.+22     	; 0x72a <LCD_voidSendString+0x24>
     714:	8f 01       	movw	r16, r30
     716:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
     718:	0e 94 09 03 	call	0x612	; 0x612 <LCD_voidSendData>
		Local_u8Index++;
     71c:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_voidSendString(u8* Copy_pcString)
{
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
     71e:	f8 01       	movw	r30, r16
     720:	ec 0f       	add	r30, r28
     722:	f1 1d       	adc	r31, r1
     724:	80 81       	ld	r24, Z
     726:	81 11       	cpse	r24, r1
     728:	f7 cf       	rjmp	.-18     	; 0x718 <LCD_voidSendString+0x12>
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
		Local_u8Index++;
	}
}
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	08 95       	ret

00000732 <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	2a 97       	sbiw	r28, 0x0a	; 10
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	dc 01       	movw	r26, r24
     748:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     74a:	4a e0       	ldi	r20, 0x0A	; 10
     74c:	be 01       	movw	r22, r28
     74e:	6f 5f       	subi	r22, 0xFF	; 255
     750:	7f 4f       	sbci	r23, 0xFF	; 255
     752:	0e 94 21 08 	call	0x1042	; 0x1042 <__itoa_ncheck>
	u8 Local_u8Str[10];
	itoa(Copy_u32Number, Local_u8Str,10);
	LCD_voidSendString(Local_u8Str);
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	0e 94 83 03 	call	0x706	; 0x706 <LCD_voidSendString>

}
     75e:	2a 96       	adiw	r28, 0x0a	; 10
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	08 95       	ret

00000770 <Servo_VoidInit>:

#include"../../MCAL/TIMER_Driver/TIMER_Interface.h"
 u16 Ticks=0;
 void Servo_VoidInit(void){
	 //Using Timer 1 PWM Mode,  prescaller 8 ==>010
		TIMER_VoidTimer1Init(PWM,10);
     770:	6a e0       	ldi	r22, 0x0A	; 10
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	0e 94 40 05 	call	0xa80	; 0xa80 <TIMER_VoidTimer1Init>
	 // Servo Total time = 20ms
		TIMER_VoidSetOverFlow(20000);
     778:	80 e2       	ldi	r24, 0x20	; 32
     77a:	9e e4       	ldi	r25, 0x4E	; 78
     77c:	0e 94 9b 05 	call	0xb36	; 0xb36 <TIMER_VoidSetOverFlow>
     780:	08 95       	ret

00000782 <Servo_VoidDegree>:

void Servo_VoidDegree(u8 Copy_u8Degree){
	if(Copy_u8Degree>180)
		Copy_u8Degree = 180;
	f32 Ton = (1/180.0) * Copy_u8Degree + 1;
	Ticks = Ton * 1000;
     782:	85 3b       	cpi	r24, 0xB5	; 181
     784:	08 f0       	brcs	.+2      	; 0x788 <Servo_VoidDegree+0x6>
     786:	84 eb       	ldi	r24, 0xB4	; 180
     788:	68 2f       	mov	r22, r24
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 28 07 	call	0xe50	; 0xe50 <__floatsisf>
     794:	21 e6       	ldi	r18, 0x61	; 97
     796:	3b e0       	ldi	r19, 0x0B	; 11
     798:	46 eb       	ldi	r20, 0xB6	; 182
     79a:	5b e3       	ldi	r21, 0x3B	; 59
     79c:	0e 94 b4 07 	call	0xf68	; 0xf68 <__mulsf3>
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	40 e8       	ldi	r20, 0x80	; 128
     7a6:	5f e3       	ldi	r21, 0x3F	; 63
     7a8:	0e 94 8b 06 	call	0xd16	; 0xd16 <__addsf3>
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	4a e7       	ldi	r20, 0x7A	; 122
     7b2:	54 e4       	ldi	r21, 0x44	; 68
     7b4:	0e 94 b4 07 	call	0xf68	; 0xf68 <__mulsf3>
     7b8:	0e 94 f7 06 	call	0xdee	; 0xdee <__fixunssfsi>
     7bc:	70 93 dc 00 	sts	0x00DC, r23	; 0x8000dc <Ticks+0x1>
     7c0:	60 93 db 00 	sts	0x00DB, r22	; 0x8000db <Ticks>
	TIMER_VoidTimer1ChannelASetCompareValue(Ticks);
     7c4:	cb 01       	movw	r24, r22
     7c6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <TIMER_VoidTimer1ChannelASetCompareValue>
     7ca:	08 95       	ret

000007cc <ADC_voidInit>:
	2- 8bit res --> left adjustment
	3- prescaler
	4- enable ADC
	*/
	// use AVCC
	SET_BIT(ADMUX,6);
     7cc:	3e 9a       	sbi	0x07, 6	; 7
	CLR_BIT(ADMUX,7);
     7ce:	3f 98       	cbi	0x07, 7	; 7
	// left adjust
	SET_BIT(ADMUX,5);
     7d0:	3d 9a       	sbi	0x07, 5	; 7
	// prescaler  --> /64
	CLR_BIT(ADCSRA,0);
     7d2:	30 98       	cbi	0x06, 0	; 6
	SET_BIT(ADCSRA,1);
     7d4:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,2);
     7d6:	32 9a       	sbi	0x06, 2	; 6
	// enable 
	SET_BIT(ADCSRA,7);
     7d8:	37 9a       	sbi	0x06, 7	; 6
     7da:	08 95       	ret

000007dc <ADC_u8StartConversion>:
	
}

u8 ADC_u8StartConversion(u8 Copy_u8ChannelNumber){
	// channel select
	ADMUX &= 0b11100000;
     7dc:	97 b1       	in	r25, 0x07	; 7
     7de:	90 7e       	andi	r25, 0xE0	; 224
     7e0:	97 b9       	out	0x07, r25	; 7
	ADMUX |=Copy_u8ChannelNumber;
     7e2:	97 b1       	in	r25, 0x07	; 7
     7e4:	89 2b       	or	r24, r25
     7e6:	87 b9       	out	0x07, r24	; 7
	
	// start conversion
	SET_BIT(ADCSRA,6);
     7e8:	36 9a       	sbi	0x06, 6	; 6
	
	// wait until conversion complete
	// by checking the flag
	while(GET_BIT(ADCSRA,4)==0);
     7ea:	34 9b       	sbis	0x06, 4	; 6
     7ec:	fe cf       	rjmp	.-4      	; 0x7ea <ADC_u8StartConversion+0xe>
	
	//clear flag 
	SET_BIT(ADCSRA,4);
     7ee:	34 9a       	sbi	0x06, 4	; 6
	
	return ADCH;
     7f0:	85 b1       	in	r24, 0x05	; 5
}
     7f2:	08 95       	ret

000007f4 <DIO_voidSetPinDirection>:


void DIO_voidSetPinDirection(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinState ){

	volatile u8* Local_u8PTR_DDRx;
	switch(Copy_u8PortName){
     7f4:	81 30       	cpi	r24, 0x01	; 1
     7f6:	49 f0       	breq	.+18     	; 0x80a <DIO_voidSetPinDirection+0x16>
     7f8:	28 f0       	brcs	.+10     	; 0x804 <DIO_voidSetPinDirection+0x10>
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	49 f0       	breq	.+18     	; 0x810 <DIO_voidSetPinDirection+0x1c>
     7fe:	83 30       	cpi	r24, 0x03	; 3
     800:	51 f0       	breq	.+20     	; 0x816 <DIO_voidSetPinDirection+0x22>
     802:	0b c0       	rjmp	.+22     	; 0x81a <DIO_voidSetPinDirection+0x26>

		case DIO_PORTA:
		Local_u8PTR_DDRx=&DDRA;
     804:	ea e3       	ldi	r30, 0x3A	; 58
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	08 c0       	rjmp	.+16     	; 0x81a <DIO_voidSetPinDirection+0x26>
		break;
		case DIO_PORTB:
		Local_u8PTR_DDRx=&DDRB;
     80a:	e7 e3       	ldi	r30, 0x37	; 55
     80c:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     80e:	05 c0       	rjmp	.+10     	; 0x81a <DIO_voidSetPinDirection+0x26>
		case DIO_PORTC:
		Local_u8PTR_DDRx=&DDRC;
     810:	e4 e3       	ldi	r30, 0x34	; 52
     812:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     814:	02 c0       	rjmp	.+4      	; 0x81a <DIO_voidSetPinDirection+0x26>
		case DIO_PORTD:
		Local_u8PTR_DDRx=&DDRD;
     816:	e1 e3       	ldi	r30, 0x31	; 49
     818:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinState){
     81a:	44 23       	and	r20, r20
     81c:	69 f0       	breq	.+26     	; 0x838 <DIO_voidSetPinDirection+0x44>
     81e:	41 30       	cpi	r20, 0x01	; 1
     820:	b1 f4       	brne	.+44     	; 0x84e <DIO_voidSetPinDirection+0x5a>

		case DIO_OUTPUT:
		SET_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
     822:	20 81       	ld	r18, Z
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	02 c0       	rjmp	.+4      	; 0x82e <DIO_voidSetPinDirection+0x3a>
     82a:	88 0f       	add	r24, r24
     82c:	99 1f       	adc	r25, r25
     82e:	6a 95       	dec	r22
     830:	e2 f7       	brpl	.-8      	; 0x82a <DIO_voidSetPinDirection+0x36>
     832:	82 2b       	or	r24, r18
     834:	80 83       	st	Z, r24
		break;
     836:	08 95       	ret
		case DIO_INPUT:
		CLR_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
     838:	20 81       	ld	r18, Z
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	02 c0       	rjmp	.+4      	; 0x844 <DIO_voidSetPinDirection+0x50>
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	6a 95       	dec	r22
     846:	e2 f7       	brpl	.-8      	; 0x840 <DIO_voidSetPinDirection+0x4c>
     848:	80 95       	com	r24
     84a:	82 23       	and	r24, r18
     84c:	80 83       	st	Z, r24
     84e:	08 95       	ret

00000850 <DIO_voidSetPinValue>:

}
void DIO_voidSetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinValue ){

	volatile u8* Local_u8PTR_PORTx;
	switch(Copy_u8PortName){
     850:	81 30       	cpi	r24, 0x01	; 1
     852:	49 f0       	breq	.+18     	; 0x866 <__stack+0x7>
     854:	28 f0       	brcs	.+10     	; 0x860 <__stack+0x1>
     856:	82 30       	cpi	r24, 0x02	; 2
     858:	49 f0       	breq	.+18     	; 0x86c <__stack+0xd>
     85a:	83 30       	cpi	r24, 0x03	; 3
     85c:	51 f0       	breq	.+20     	; 0x872 <__stack+0x13>
     85e:	0b c0       	rjmp	.+22     	; 0x876 <__stack+0x17>

		case DIO_PORTA:
		Local_u8PTR_PORTx=&PORTA;
     860:	eb e3       	ldi	r30, 0x3B	; 59
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	08 c0       	rjmp	.+16     	; 0x876 <__stack+0x17>
		break;
		case DIO_PORTB:
		Local_u8PTR_PORTx=&PORTB;
     866:	e8 e3       	ldi	r30, 0x38	; 56
     868:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     86a:	05 c0       	rjmp	.+10     	; 0x876 <__stack+0x17>
		case DIO_PORTC:
		Local_u8PTR_PORTx=&PORTC;
     86c:	e5 e3       	ldi	r30, 0x35	; 53
     86e:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     870:	02 c0       	rjmp	.+4      	; 0x876 <__stack+0x17>
		case DIO_PORTD:
		Local_u8PTR_PORTx=&PORTD;
     872:	e2 e3       	ldi	r30, 0x32	; 50
     874:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinValue){
     876:	44 23       	and	r20, r20
     878:	69 f0       	breq	.+26     	; 0x894 <__stack+0x35>
     87a:	41 30       	cpi	r20, 0x01	; 1
     87c:	b1 f4       	brne	.+44     	; 0x8aa <__stack+0x4b>

		case DIO_HIGH:
		SET_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
     87e:	20 81       	ld	r18, Z
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	6a 95       	dec	r22
     88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
     88e:	82 2b       	or	r24, r18
     890:	80 83       	st	Z, r24
		break;
     892:	08 95       	ret
		case DIO_LOW:
		CLR_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
     894:	20 81       	ld	r18, Z
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__stack+0x41>
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	6a 95       	dec	r22
     8a2:	e2 f7       	brpl	.-8      	; 0x89c <__stack+0x3d>
     8a4:	80 95       	com	r24
     8a6:	82 23       	and	r24, r18
     8a8:	80 83       	st	Z, r24
     8aa:	08 95       	ret

000008ac <DIO_voidSetPortDirection>:

}

void DIO_voidSetPortDirection(u8 Copy_u8PortName ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
     8ac:	81 30       	cpi	r24, 0x01	; 1
     8ae:	41 f0       	breq	.+16     	; 0x8c0 <DIO_voidSetPortDirection+0x14>
     8b0:	28 f0       	brcs	.+10     	; 0x8bc <DIO_voidSetPortDirection+0x10>
     8b2:	82 30       	cpi	r24, 0x02	; 2
     8b4:	39 f0       	breq	.+14     	; 0x8c4 <DIO_voidSetPortDirection+0x18>
     8b6:	83 30       	cpi	r24, 0x03	; 3
     8b8:	39 f0       	breq	.+14     	; 0x8c8 <DIO_voidSetPortDirection+0x1c>
     8ba:	08 95       	ret

		case DIO_PORTA:
		DDRA=Copy_u8PortValue;
     8bc:	6a bb       	out	0x1a, r22	; 26
		break;
     8be:	08 95       	ret
		case DIO_PORTB:
		DDRB=Copy_u8PortValue;
     8c0:	67 bb       	out	0x17, r22	; 23
		break;
     8c2:	08 95       	ret
		case DIO_PORTC:
		DDRC=Copy_u8PortValue;
     8c4:	64 bb       	out	0x14, r22	; 20
		break;
     8c6:	08 95       	ret
		case DIO_PORTD:
		DDRD=Copy_u8PortValue;
     8c8:	61 bb       	out	0x11, r22	; 17
     8ca:	08 95       	ret

000008cc <DIO_voidSetPortValue>:
	}

}
void DIO_voidSetPortValue(u8 Copy_u8PortName  ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
     8cc:	81 30       	cpi	r24, 0x01	; 1
     8ce:	41 f0       	breq	.+16     	; 0x8e0 <DIO_voidSetPortValue+0x14>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <DIO_voidSetPortValue+0x10>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	39 f0       	breq	.+14     	; 0x8e4 <DIO_voidSetPortValue+0x18>
     8d6:	83 30       	cpi	r24, 0x03	; 3
     8d8:	39 f0       	breq	.+14     	; 0x8e8 <DIO_voidSetPortValue+0x1c>
     8da:	08 95       	ret

		case DIO_PORTA:
		PORTA=Copy_u8PortValue;
     8dc:	6b bb       	out	0x1b, r22	; 27
		break;
     8de:	08 95       	ret
		case DIO_PORTB:
		PORTB=Copy_u8PortValue;
     8e0:	68 bb       	out	0x18, r22	; 24
		break;
     8e2:	08 95       	ret
		case DIO_PORTC:
		PORTC=Copy_u8PortValue;
     8e4:	65 bb       	out	0x15, r22	; 21
		break;
     8e6:	08 95       	ret
		case DIO_PORTD:
		PORTD=Copy_u8PortValue;
     8e8:	62 bb       	out	0x12, r22	; 18
     8ea:	08 95       	ret

000008ec <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber){

	
	u8 Local_u8PinValue;
	switch(Copy_u8PortName){
     8ec:	81 30       	cpi	r24, 0x01	; 1
     8ee:	81 f0       	breq	.+32     	; 0x910 <DIO_u8GetPinValue+0x24>
     8f0:	28 f0       	brcs	.+10     	; 0x8fc <DIO_u8GetPinValue+0x10>
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	b9 f0       	breq	.+46     	; 0x924 <DIO_u8GetPinValue+0x38>
     8f6:	83 30       	cpi	r24, 0x03	; 3
     8f8:	f9 f0       	breq	.+62     	; 0x938 <DIO_u8GetPinValue+0x4c>
     8fa:	27 c0       	rjmp	.+78     	; 0x94a <DIO_u8GetPinValue+0x5e>

		case DIO_PORTA:
		Local_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
     8fc:	89 b3       	in	r24, 0x19	; 25
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	02 c0       	rjmp	.+4      	; 0x906 <DIO_u8GetPinValue+0x1a>
     902:	95 95       	asr	r25
     904:	87 95       	ror	r24
     906:	6a 95       	dec	r22
     908:	e2 f7       	brpl	.-8      	; 0x902 <DIO_u8GetPinValue+0x16>
     90a:	98 2f       	mov	r25, r24
     90c:	91 70       	andi	r25, 0x01	; 1
		break;
     90e:	1d c0       	rjmp	.+58     	; 0x94a <DIO_u8GetPinValue+0x5e>
		case DIO_PORTB:
		Local_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
     910:	86 b3       	in	r24, 0x16	; 22
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	02 c0       	rjmp	.+4      	; 0x91a <DIO_u8GetPinValue+0x2e>
     916:	95 95       	asr	r25
     918:	87 95       	ror	r24
     91a:	6a 95       	dec	r22
     91c:	e2 f7       	brpl	.-8      	; 0x916 <DIO_u8GetPinValue+0x2a>
     91e:	98 2f       	mov	r25, r24
     920:	91 70       	andi	r25, 0x01	; 1
		break;
     922:	13 c0       	rjmp	.+38     	; 0x94a <DIO_u8GetPinValue+0x5e>
		case DIO_PORTC:
		Local_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
     924:	83 b3       	in	r24, 0x13	; 19
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	02 c0       	rjmp	.+4      	; 0x92e <DIO_u8GetPinValue+0x42>
     92a:	95 95       	asr	r25
     92c:	87 95       	ror	r24
     92e:	6a 95       	dec	r22
     930:	e2 f7       	brpl	.-8      	; 0x92a <DIO_u8GetPinValue+0x3e>
     932:	98 2f       	mov	r25, r24
     934:	91 70       	andi	r25, 0x01	; 1
		break;
     936:	09 c0       	rjmp	.+18     	; 0x94a <DIO_u8GetPinValue+0x5e>
		case DIO_PORTD:
		Local_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
     938:	80 b3       	in	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	02 c0       	rjmp	.+4      	; 0x942 <DIO_u8GetPinValue+0x56>
     93e:	95 95       	asr	r25
     940:	87 95       	ror	r24
     942:	6a 95       	dec	r22
     944:	e2 f7       	brpl	.-8      	; 0x93e <DIO_u8GetPinValue+0x52>
     946:	98 2f       	mov	r25, r24
     948:	91 70       	andi	r25, 0x01	; 1

	

	return Local_u8PinValue;

}
     94a:	89 2f       	mov	r24, r25
     94c:	08 95       	ret

0000094e <__vector_1>:
void EXTI_voidSetCallBackINT2(void(*NotifyFunc2)(void)){
	
	Global_pvINT2NotifyFunc=NotifyFunc2;
}

ISR(INT0_vect){
     94e:	1f 92       	push	r1
     950:	0f 92       	push	r0
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	0f 92       	push	r0
     956:	11 24       	eor	r1, r1
     958:	2f 93       	push	r18
     95a:	3f 93       	push	r19
     95c:	4f 93       	push	r20
     95e:	5f 93       	push	r21
     960:	6f 93       	push	r22
     962:	7f 93       	push	r23
     964:	8f 93       	push	r24
     966:	9f 93       	push	r25
     968:	af 93       	push	r26
     96a:	bf 93       	push	r27
     96c:	ef 93       	push	r30
     96e:	ff 93       	push	r31
	
	if(Global_pvINT0NotifyFunc!=NULL_PTR)
     970:	e0 91 e1 00 	lds	r30, 0x00E1	; 0x8000e1 <Global_pvINT0NotifyFunc>
     974:	f0 91 e2 00 	lds	r31, 0x00E2	; 0x8000e2 <Global_pvINT0NotifyFunc+0x1>
     978:	30 97       	sbiw	r30, 0x00	; 0
     97a:	09 f0       	breq	.+2      	; 0x97e <__vector_1+0x30>
			Global_pvINT0NotifyFunc();
     97c:	09 95       	icall
	
}
     97e:	ff 91       	pop	r31
     980:	ef 91       	pop	r30
     982:	bf 91       	pop	r27
     984:	af 91       	pop	r26
     986:	9f 91       	pop	r25
     988:	8f 91       	pop	r24
     98a:	7f 91       	pop	r23
     98c:	6f 91       	pop	r22
     98e:	5f 91       	pop	r21
     990:	4f 91       	pop	r20
     992:	3f 91       	pop	r19
     994:	2f 91       	pop	r18
     996:	0f 90       	pop	r0
     998:	0f be       	out	0x3f, r0	; 63
     99a:	0f 90       	pop	r0
     99c:	1f 90       	pop	r1
     99e:	18 95       	reti

000009a0 <__vector_2>:

ISR(INT1_vect){
     9a0:	1f 92       	push	r1
     9a2:	0f 92       	push	r0
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	0f 92       	push	r0
     9a8:	11 24       	eor	r1, r1
     9aa:	2f 93       	push	r18
     9ac:	3f 93       	push	r19
     9ae:	4f 93       	push	r20
     9b0:	5f 93       	push	r21
     9b2:	6f 93       	push	r22
     9b4:	7f 93       	push	r23
     9b6:	8f 93       	push	r24
     9b8:	9f 93       	push	r25
     9ba:	af 93       	push	r26
     9bc:	bf 93       	push	r27
     9be:	ef 93       	push	r30
     9c0:	ff 93       	push	r31
	
	if(Global_pvINT1NotifyFunc!=NULL_PTR)
     9c2:	e0 91 df 00 	lds	r30, 0x00DF	; 0x8000df <Global_pvINT1NotifyFunc>
     9c6:	f0 91 e0 00 	lds	r31, 0x00E0	; 0x8000e0 <Global_pvINT1NotifyFunc+0x1>
     9ca:	30 97       	sbiw	r30, 0x00	; 0
     9cc:	09 f0       	breq	.+2      	; 0x9d0 <__vector_2+0x30>
			Global_pvINT1NotifyFunc();
     9ce:	09 95       	icall
	
}
     9d0:	ff 91       	pop	r31
     9d2:	ef 91       	pop	r30
     9d4:	bf 91       	pop	r27
     9d6:	af 91       	pop	r26
     9d8:	9f 91       	pop	r25
     9da:	8f 91       	pop	r24
     9dc:	7f 91       	pop	r23
     9de:	6f 91       	pop	r22
     9e0:	5f 91       	pop	r21
     9e2:	4f 91       	pop	r20
     9e4:	3f 91       	pop	r19
     9e6:	2f 91       	pop	r18
     9e8:	0f 90       	pop	r0
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	0f 90       	pop	r0
     9ee:	1f 90       	pop	r1
     9f0:	18 95       	reti

000009f2 <__vector_3>:
ISR(INT2_vect){
     9f2:	1f 92       	push	r1
     9f4:	0f 92       	push	r0
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	0f 92       	push	r0
     9fa:	11 24       	eor	r1, r1
     9fc:	2f 93       	push	r18
     9fe:	3f 93       	push	r19
     a00:	4f 93       	push	r20
     a02:	5f 93       	push	r21
     a04:	6f 93       	push	r22
     a06:	7f 93       	push	r23
     a08:	8f 93       	push	r24
     a0a:	9f 93       	push	r25
     a0c:	af 93       	push	r26
     a0e:	bf 93       	push	r27
     a10:	ef 93       	push	r30
     a12:	ff 93       	push	r31
	
	if(Global_pvINT2NotifyFunc!=NULL_PTR)
     a14:	e0 91 dd 00 	lds	r30, 0x00DD	; 0x8000dd <Global_pvINT2NotifyFunc>
     a18:	f0 91 de 00 	lds	r31, 0x00DE	; 0x8000de <Global_pvINT2NotifyFunc+0x1>
     a1c:	30 97       	sbiw	r30, 0x00	; 0
     a1e:	09 f0       	breq	.+2      	; 0xa22 <__vector_3+0x30>
			Global_pvINT2NotifyFunc();
     a20:	09 95       	icall
	
     a22:	ff 91       	pop	r31
     a24:	ef 91       	pop	r30
     a26:	bf 91       	pop	r27
     a28:	af 91       	pop	r26
     a2a:	9f 91       	pop	r25
     a2c:	8f 91       	pop	r24
     a2e:	7f 91       	pop	r23
     a30:	6f 91       	pop	r22
     a32:	5f 91       	pop	r21
     a34:	4f 91       	pop	r20
     a36:	3f 91       	pop	r19
     a38:	2f 91       	pop	r18
     a3a:	0f 90       	pop	r0
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	0f 90       	pop	r0
     a40:	1f 90       	pop	r1
     a42:	18 95       	reti

00000a44 <TIMER_delay_ms>:
	GLOBAL_ICU_ISR = Copy_PTR_ICUFunction;
}

u16 ICU_u16ReadInputCapture(void){
	return ICR1;
}
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	8b 01       	movw	r16, r22
     a4a:	9c 01       	movw	r18, r24
     a4c:	67 2b       	or	r22, r23
     a4e:	68 2b       	or	r22, r24
     a50:	69 2b       	or	r22, r25
     a52:	69 f4       	brne	.+26     	; 0xa6e <TIMER_delay_ms+0x2a>
     a54:	12 c0       	rjmp	.+36     	; 0xa7a <TIMER_delay_ms+0x36>
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	f1 f7       	brne	.-4      	; 0xa56 <TIMER_delay_ms+0x12>
     a5a:	4f 5f       	subi	r20, 0xFF	; 255
     a5c:	5f 4f       	sbci	r21, 0xFF	; 255
     a5e:	6f 4f       	sbci	r22, 0xFF	; 255
     a60:	7f 4f       	sbci	r23, 0xFF	; 255
     a62:	04 17       	cp	r16, r20
     a64:	15 07       	cpc	r17, r21
     a66:	26 07       	cpc	r18, r22
     a68:	37 07       	cpc	r19, r23
     a6a:	21 f4       	brne	.+8      	; 0xa74 <TIMER_delay_ms+0x30>
     a6c:	06 c0       	rjmp	.+12     	; 0xa7a <TIMER_delay_ms+0x36>
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	ba 01       	movw	r22, r20
     a74:	8e e5       	ldi	r24, 0x5E	; 94
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	ee cf       	rjmp	.-36     	; 0xa56 <TIMER_delay_ms+0x12>
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	08 95       	ret

00000a80 <TIMER_VoidTimer1Init>:
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	5d ec       	ldi	r21, 0xCD	; 205
     a86:	a1 e0       	ldi	r26, 0x01	; 1
     a88:	b0 e0       	ldi	r27, 0x00	; 0
     a8a:	65 9f       	mul	r22, r21
     a8c:	91 2d       	mov	r25, r1
     a8e:	11 24       	eor	r1, r1
     a90:	96 95       	lsr	r25
     a92:	96 95       	lsr	r25
     a94:	96 95       	lsr	r25
     a96:	99 0f       	add	r25, r25
     a98:	49 2f       	mov	r20, r25
     a9a:	44 0f       	add	r20, r20
     a9c:	44 0f       	add	r20, r20
     a9e:	94 0f       	add	r25, r20
     aa0:	46 2f       	mov	r20, r22
     aa2:	49 1b       	sub	r20, r25
     aa4:	41 30       	cpi	r20, 0x01	; 1
     aa6:	59 f4       	brne	.+22     	; 0xabe <TIMER_VoidTimer1Init+0x3e>
     aa8:	9e b5       	in	r25, 0x2e	; 46
     aaa:	fd 01       	movw	r30, r26
     aac:	02 2e       	mov	r0, r18
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <TIMER_VoidTimer1Init+0x34>
     ab0:	ee 0f       	add	r30, r30
     ab2:	ff 1f       	adc	r31, r31
     ab4:	0a 94       	dec	r0
     ab6:	e2 f7       	brpl	.-8      	; 0xab0 <TIMER_VoidTimer1Init+0x30>
     ab8:	e9 2b       	or	r30, r25
     aba:	ee bd       	out	0x2e, r30	; 46
     abc:	0c c0       	rjmp	.+24     	; 0xad6 <TIMER_VoidTimer1Init+0x56>
     abe:	4e b5       	in	r20, 0x2e	; 46
     ac0:	fd 01       	movw	r30, r26
     ac2:	02 2e       	mov	r0, r18
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <TIMER_VoidTimer1Init+0x4a>
     ac6:	ee 0f       	add	r30, r30
     ac8:	ff 1f       	adc	r31, r31
     aca:	0a 94       	dec	r0
     acc:	e2 f7       	brpl	.-8      	; 0xac6 <TIMER_VoidTimer1Init+0x46>
     ace:	9e 2f       	mov	r25, r30
     ad0:	90 95       	com	r25
     ad2:	94 23       	and	r25, r20
     ad4:	9e bd       	out	0x2e, r25	; 46
     ad6:	65 9f       	mul	r22, r21
     ad8:	61 2d       	mov	r22, r1
     ada:	11 24       	eor	r1, r1
     adc:	66 95       	lsr	r22
     ade:	66 95       	lsr	r22
     ae0:	66 95       	lsr	r22
     ae2:	2f 5f       	subi	r18, 0xFF	; 255
     ae4:	3f 4f       	sbci	r19, 0xFF	; 255
     ae6:	23 30       	cpi	r18, 0x03	; 3
     ae8:	31 05       	cpc	r19, r1
     aea:	79 f6       	brne	.-98     	; 0xa8a <TIMER_VoidTimer1Init+0xa>
     aec:	88 23       	and	r24, r24
     aee:	19 f0       	breq	.+6      	; 0xaf6 <TIMER_VoidTimer1Init+0x76>
     af0:	82 30       	cpi	r24, 0x02	; 2
     af2:	71 f0       	breq	.+28     	; 0xb10 <TIMER_VoidTimer1Init+0x90>
     af4:	08 95       	ret
     af6:	8f b5       	in	r24, 0x2f	; 47
     af8:	8e 7f       	andi	r24, 0xFE	; 254
     afa:	8f bd       	out	0x2f, r24	; 47
     afc:	8f b5       	in	r24, 0x2f	; 47
     afe:	8d 7f       	andi	r24, 0xFD	; 253
     b00:	8f bd       	out	0x2f, r24	; 47
     b02:	8e b5       	in	r24, 0x2e	; 46
     b04:	87 7f       	andi	r24, 0xF7	; 247
     b06:	8e bd       	out	0x2e, r24	; 46
     b08:	8e b5       	in	r24, 0x2e	; 46
     b0a:	8f 7e       	andi	r24, 0xEF	; 239
     b0c:	8e bd       	out	0x2e, r24	; 46
     b0e:	08 95       	ret
     b10:	8f b5       	in	r24, 0x2f	; 47
     b12:	8f 7b       	andi	r24, 0xBF	; 191
     b14:	8f bd       	out	0x2f, r24	; 47
     b16:	8f b5       	in	r24, 0x2f	; 47
     b18:	80 68       	ori	r24, 0x80	; 128
     b1a:	8f bd       	out	0x2f, r24	; 47
     b1c:	8f b5       	in	r24, 0x2f	; 47
     b1e:	8e 7f       	andi	r24, 0xFE	; 254
     b20:	8f bd       	out	0x2f, r24	; 47
     b22:	8f b5       	in	r24, 0x2f	; 47
     b24:	82 60       	ori	r24, 0x02	; 2
     b26:	8f bd       	out	0x2f, r24	; 47
     b28:	8e b5       	in	r24, 0x2e	; 46
     b2a:	88 60       	ori	r24, 0x08	; 8
     b2c:	8e bd       	out	0x2e, r24	; 46
     b2e:	8e b5       	in	r24, 0x2e	; 46
     b30:	80 61       	ori	r24, 0x10	; 16
     b32:	8e bd       	out	0x2e, r24	; 46
     b34:	08 95       	ret

00000b36 <TIMER_VoidSetOverFlow>:
     b36:	97 bd       	out	0x27, r25	; 39
     b38:	86 bd       	out	0x26, r24	; 38
     b3a:	08 95       	ret

00000b3c <TIMER_VoidTimer1ChannelASetCompareValue>:
     b3c:	9b bd       	out	0x2b, r25	; 43
     b3e:	8a bd       	out	0x2a, r24	; 42
     b40:	08 95       	ret

00000b42 <__vector_11>:



//Normal ISR
void __vector_11(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_11(void){
     b42:	1f 92       	push	r1
     b44:	0f 92       	push	r0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	0f 92       	push	r0
     b4a:	11 24       	eor	r1, r1
     b4c:	2f 93       	push	r18
     b4e:	3f 93       	push	r19
     b50:	4f 93       	push	r20
     b52:	5f 93       	push	r21
     b54:	6f 93       	push	r22
     b56:	7f 93       	push	r23
     b58:	8f 93       	push	r24
     b5a:	9f 93       	push	r25
     b5c:	af 93       	push	r26
     b5e:	bf 93       	push	r27
     b60:	ef 93       	push	r30
     b62:	ff 93       	push	r31
	if(TIMER0_Normal_ISR_PTR!=0x00)
     b64:	e0 91 e7 00 	lds	r30, 0x00E7	; 0x8000e7 <TIMER0_Normal_ISR_PTR>
     b68:	f0 91 e8 00 	lds	r31, 0x00E8	; 0x8000e8 <TIMER0_Normal_ISR_PTR+0x1>
     b6c:	30 97       	sbiw	r30, 0x00	; 0
     b6e:	09 f0       	breq	.+2      	; 0xb72 <__vector_11+0x30>
		TIMER0_Normal_ISR_PTR();
     b70:	09 95       	icall
}
     b72:	ff 91       	pop	r31
     b74:	ef 91       	pop	r30
     b76:	bf 91       	pop	r27
     b78:	af 91       	pop	r26
     b7a:	9f 91       	pop	r25
     b7c:	8f 91       	pop	r24
     b7e:	7f 91       	pop	r23
     b80:	6f 91       	pop	r22
     b82:	5f 91       	pop	r21
     b84:	4f 91       	pop	r20
     b86:	3f 91       	pop	r19
     b88:	2f 91       	pop	r18
     b8a:	0f 90       	pop	r0
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	0f 90       	pop	r0
     b90:	1f 90       	pop	r1
     b92:	18 95       	reti

00000b94 <__vector_10>:

//CTC ISR
void __vector_10(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_10(void){
     b94:	1f 92       	push	r1
     b96:	0f 92       	push	r0
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	0f 92       	push	r0
     b9c:	11 24       	eor	r1, r1
     b9e:	2f 93       	push	r18
     ba0:	3f 93       	push	r19
     ba2:	4f 93       	push	r20
     ba4:	5f 93       	push	r21
     ba6:	6f 93       	push	r22
     ba8:	7f 93       	push	r23
     baa:	8f 93       	push	r24
     bac:	9f 93       	push	r25
     bae:	af 93       	push	r26
     bb0:	bf 93       	push	r27
     bb2:	ef 93       	push	r30
     bb4:	ff 93       	push	r31
	if(TIMER0_CTC_ISR_PTR!=0x00)
     bb6:	e0 91 e5 00 	lds	r30, 0x00E5	; 0x8000e5 <TIMER0_CTC_ISR_PTR>
     bba:	f0 91 e6 00 	lds	r31, 0x00E6	; 0x8000e6 <TIMER0_CTC_ISR_PTR+0x1>
     bbe:	30 97       	sbiw	r30, 0x00	; 0
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <__vector_10+0x30>
		TIMER0_CTC_ISR_PTR();
     bc2:	09 95       	icall

}
     bc4:	ff 91       	pop	r31
     bc6:	ef 91       	pop	r30
     bc8:	bf 91       	pop	r27
     bca:	af 91       	pop	r26
     bcc:	9f 91       	pop	r25
     bce:	8f 91       	pop	r24
     bd0:	7f 91       	pop	r23
     bd2:	6f 91       	pop	r22
     bd4:	5f 91       	pop	r21
     bd6:	4f 91       	pop	r20
     bd8:	3f 91       	pop	r19
     bda:	2f 91       	pop	r18
     bdc:	0f 90       	pop	r0
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	0f 90       	pop	r0
     be2:	1f 90       	pop	r1
     be4:	18 95       	reti

00000be6 <__vector_6>:

//ICU
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void){
     be6:	1f 92       	push	r1
     be8:	0f 92       	push	r0
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	0f 92       	push	r0
     bee:	11 24       	eor	r1, r1
     bf0:	2f 93       	push	r18
     bf2:	3f 93       	push	r19
     bf4:	4f 93       	push	r20
     bf6:	5f 93       	push	r21
     bf8:	6f 93       	push	r22
     bfa:	7f 93       	push	r23
     bfc:	8f 93       	push	r24
     bfe:	9f 93       	push	r25
     c00:	af 93       	push	r26
     c02:	bf 93       	push	r27
     c04:	ef 93       	push	r30
     c06:	ff 93       	push	r31
	if(GLOBAL_ICU_ISR!=0x00)
     c08:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <GLOBAL_ICU_ISR>
     c0c:	f0 91 e4 00 	lds	r31, 0x00E4	; 0x8000e4 <GLOBAL_ICU_ISR+0x1>
     c10:	30 97       	sbiw	r30, 0x00	; 0
     c12:	09 f0       	breq	.+2      	; 0xc16 <__vector_6+0x30>
		GLOBAL_ICU_ISR();
     c14:	09 95       	icall
}
     c16:	ff 91       	pop	r31
     c18:	ef 91       	pop	r30
     c1a:	bf 91       	pop	r27
     c1c:	af 91       	pop	r26
     c1e:	9f 91       	pop	r25
     c20:	8f 91       	pop	r24
     c22:	7f 91       	pop	r23
     c24:	6f 91       	pop	r22
     c26:	5f 91       	pop	r21
     c28:	4f 91       	pop	r20
     c2a:	3f 91       	pop	r19
     c2c:	2f 91       	pop	r18
     c2e:	0f 90       	pop	r0
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	0f 90       	pop	r0
     c34:	1f 90       	pop	r1
     c36:	18 95       	reti

00000c38 <TWI_voidMasterInit>:
void TWI_voidSlaveInit(u8 Copy_SlaveAddress){
	//Set Slave Address
	TWAR = Copy_SlaveAddress <<1;

	//Enable TWI
	SET_BIT(TWCR,TWEN);
     c38:	96 e9       	ldi	r25, 0x96	; 150
     c3a:	90 b9       	out	0x00, r25	; 0
     c3c:	09 98       	cbi	0x01, 1	; 1
     c3e:	08 98       	cbi	0x01, 0	; 1
     c40:	88 23       	and	r24, r24
     c42:	11 f0       	breq	.+4      	; 0xc48 <TWI_voidMasterInit+0x10>
     c44:	88 0f       	add	r24, r24
     c46:	82 b9       	out	0x02, r24	; 2
     c48:	86 b7       	in	r24, 0x36	; 54
     c4a:	84 60       	ori	r24, 0x04	; 4
     c4c:	86 bf       	out	0x36, r24	; 54
     c4e:	08 95       	ret

00000c50 <TWI_SendStartCondition>:
}

TWI_ErrStatus TWI_SendStartCondition(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
     c50:	86 b7       	in	r24, 0x36	; 54
     c52:	80 62       	ori	r24, 0x20	; 32
     c54:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     c56:	86 b7       	in	r24, 0x36	; 54
     c58:	80 68       	ori	r24, 0x80	; 128
     c5a:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     c5c:	06 b6       	in	r0, 0x36	; 54
     c5e:	07 fe       	sbrs	r0, 7
     c60:	fd cf       	rjmp	.-6      	; 0xc5c <TWI_SendStartCondition+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=START_ACK){
     c62:	91 b1       	in	r25, 0x01	; 1
		Local_ErrStatus = StartConditionErr;
		}
	return Local_ErrStatus;
     c64:	98 7f       	andi	r25, 0xF8	; 248
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	98 30       	cpi	r25, 0x08	; 8
     c6a:	09 f4       	brne	.+2      	; 0xc6e <TWI_SendStartCondition+0x1e>
     c6c:	80 e0       	ldi	r24, 0x00	; 0
}
     c6e:	08 95       	ret

00000c70 <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
     c70:	86 b7       	in	r24, 0x36	; 54
     c72:	80 62       	ori	r24, 0x20	; 32
     c74:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     c76:	86 b7       	in	r24, 0x36	; 54
     c78:	80 68       	ori	r24, 0x80	; 128
     c7a:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     c7c:	06 b6       	in	r0, 0x36	; 54
     c7e:	07 fe       	sbrs	r0, 7
     c80:	fd cf       	rjmp	.-6      	; 0xc7c <TWI_SendRepeatedStart+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
     c82:	81 b1       	in	r24, 0x01	; 1
     c84:	88 7f       	andi	r24, 0xF8	; 248
     c86:	80 31       	cpi	r24, 0x10	; 16
     c88:	11 f0       	breq	.+4      	; 0xc8e <TWI_SendRepeatedStart+0x1e>
		Local_ErrStatus = RepeatedStartErr;
     c8a:	82 e0       	ldi	r24, 0x02	; 2
     c8c:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     c8e:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
		Local_ErrStatus = RepeatedStartErr;
		}
	return Local_ErrStatus;
}
     c90:	08 95       	ret

00000c92 <TWI_SendSlaveAddressWithWrite>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
     c92:	88 0f       	add	r24, r24
     c94:	83 b9       	out	0x03, r24	; 3
	//For Write Operation
	CLR_BIT(TWDR,0);
     c96:	18 98       	cbi	0x03, 0	; 3

	//Clear Flag to start previous operation  //Enable TWI
	TWCR=(1<<TWINT)|(1<<TWEN);
     c98:	84 e8       	ldi	r24, 0x84	; 132
     c9a:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     c9c:	06 b6       	in	r0, 0x36	; 54
     c9e:	07 fe       	sbrs	r0, 7
     ca0:	fd cf       	rjmp	.-6      	; 0xc9c <TWI_SendSlaveAddressWithWrite+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
     ca2:	81 b1       	in	r24, 0x01	; 1
     ca4:	88 7f       	andi	r24, 0xF8	; 248
     ca6:	88 31       	cpi	r24, 0x18	; 24
     ca8:	11 f0       	breq	.+4      	; 0xcae <TWI_SendSlaveAddressWithWrite+0x1c>
		Local_ErrStatus = SlaveAddressWithWriteErr;
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     cae:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
		Local_ErrStatus = SlaveAddressWithWriteErr;
		}
	return Local_ErrStatus;
}
     cb0:	08 95       	ret

00000cb2 <TWI_SendSlaveAddressWithRead>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
     cb2:	88 0f       	add	r24, r24
     cb4:	83 b9       	out	0x03, r24	; 3
	//For Read Operation
	SET_BIT(TWDR,0);
     cb6:	18 9a       	sbi	0x03, 0	; 3

	//Clear Flag to start previous operation
	TWCR=(1<<TWINT)|(1<<TWEN);
     cb8:	84 e8       	ldi	r24, 0x84	; 132
     cba:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     cbc:	06 b6       	in	r0, 0x36	; 54
     cbe:	07 fe       	sbrs	r0, 7
     cc0:	fd cf       	rjmp	.-6      	; 0xcbc <TWI_SendSlaveAddressWithRead+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
     cc2:	81 b1       	in	r24, 0x01	; 1
     cc4:	88 7f       	andi	r24, 0xF8	; 248
     cc6:	80 34       	cpi	r24, 0x40	; 64
     cc8:	11 f0       	breq	.+4      	; 0xcce <TWI_SendSlaveAddressWithRead+0x1c>
		Local_ErrStatus = SlaveAddressWithReadErr;
     cca:	84 e0       	ldi	r24, 0x04	; 4
     ccc:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     cce:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
		Local_ErrStatus = SlaveAddressWithReadErr;
		}
	return Local_ErrStatus;
}
     cd0:	08 95       	ret

00000cd2 <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte){
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Write Data to data byte
	TWDR = Copy_u8DataByte;
     cd2:	83 b9       	out	0x03, r24	; 3

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     cd4:	86 b7       	in	r24, 0x36	; 54
     cd6:	80 68       	ori	r24, 0x80	; 128
     cd8:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     cda:	06 b6       	in	r0, 0x36	; 54
     cdc:	07 fe       	sbrs	r0, 7
     cde:	fd cf       	rjmp	.-6      	; 0xcda <TWI_MasterWriteDataByte+0x8>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MasterWriteDataByteErr){
     ce0:	81 b1       	in	r24, 0x01	; 1
		Local_ErrStatus = MasterWriteDataByteErr;
		}
	return Local_ErrStatus;

}
     ce2:	85 e0       	ldi	r24, 0x05	; 5
     ce4:	08 95       	ret

00000ce6 <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
     ce6:	fc 01       	movw	r30, r24
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Enable ACK
	SET_BIT(TWCR,TWEA);
     ce8:	96 b7       	in	r25, 0x36	; 54
     cea:	90 64       	ori	r25, 0x40	; 64
     cec:	96 bf       	out	0x36, r25	; 54
	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     cee:	96 b7       	in	r25, 0x36	; 54
     cf0:	90 68       	ori	r25, 0x80	; 128
     cf2:	96 bf       	out	0x36, r25	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     cf4:	06 b6       	in	r0, 0x36	; 54
     cf6:	07 fe       	sbrs	r0, 7
     cf8:	fd cf       	rjmp	.-6      	; 0xcf4 <TWI_MasterReadDataByte+0xe>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
     cfa:	91 b1       	in	r25, 0x01	; 1
     cfc:	98 7f       	andi	r25, 0xF8	; 248
     cfe:	90 35       	cpi	r25, 0x50	; 80
     d00:	21 f4       	brne	.+8      	; 0xd0a <TWI_MasterReadDataByte+0x24>
		Local_ErrStatus = MasterReadDataByteErr;
		}
	else{
		// Read Data
		*Copy_Pu8DataByte = TWDR;
     d02:	83 b1       	in	r24, 0x03	; 3
     d04:	80 83       	st	Z, r24

}

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	08 95       	ret
	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
		Local_ErrStatus = MasterReadDataByteErr;
     d0a:	86 e0       	ldi	r24, 0x06	; 6
		// Read Data
		*Copy_Pu8DataByte = TWDR;

	}
	return Local_ErrStatus;
}
     d0c:	08 95       	ret

00000d0e <TWI_SendStopCondition>:
void TWI_SendStopCondition(void)
{
    /* generate stop condition on the bus /

    / Clear the interrupt flag to start the previous operation */
    TWCR = (1<<TWINT)|(1<<TWEN)|
     d0e:	84 e9       	ldi	r24, 0x94	; 148
     d10:	86 bf       	out	0x36, r24	; 54
     d12:	08 95       	ret

00000d14 <__subsf3>:
     d14:	50 58       	subi	r21, 0x80	; 128

00000d16 <__addsf3>:
     d16:	bb 27       	eor	r27, r27
     d18:	aa 27       	eor	r26, r26
     d1a:	0e 94 a2 06 	call	0xd44	; 0xd44 <__addsf3x>
     d1e:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__fp_round>
     d22:	0e 94 6c 07 	call	0xed8	; 0xed8 <__fp_pscA>
     d26:	38 f0       	brcs	.+14     	; 0xd36 <__addsf3+0x20>
     d28:	0e 94 73 07 	call	0xee6	; 0xee6 <__fp_pscB>
     d2c:	20 f0       	brcs	.+8      	; 0xd36 <__addsf3+0x20>
     d2e:	39 f4       	brne	.+14     	; 0xd3e <__addsf3+0x28>
     d30:	9f 3f       	cpi	r25, 0xFF	; 255
     d32:	19 f4       	brne	.+6      	; 0xd3a <__addsf3+0x24>
     d34:	26 f4       	brtc	.+8      	; 0xd3e <__addsf3+0x28>
     d36:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__fp_nan>
     d3a:	0e f4       	brtc	.+2      	; 0xd3e <__addsf3+0x28>
     d3c:	e0 95       	com	r30
     d3e:	e7 fb       	bst	r30, 7
     d40:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__fp_inf>

00000d44 <__addsf3x>:
     d44:	e9 2f       	mov	r30, r25
     d46:	0e 94 8b 07 	call	0xf16	; 0xf16 <__fp_split3>
     d4a:	58 f3       	brcs	.-42     	; 0xd22 <__addsf3+0xc>
     d4c:	ba 17       	cp	r27, r26
     d4e:	62 07       	cpc	r22, r18
     d50:	73 07       	cpc	r23, r19
     d52:	84 07       	cpc	r24, r20
     d54:	95 07       	cpc	r25, r21
     d56:	20 f0       	brcs	.+8      	; 0xd60 <__addsf3x+0x1c>
     d58:	79 f4       	brne	.+30     	; 0xd78 <__addsf3x+0x34>
     d5a:	a6 f5       	brtc	.+104    	; 0xdc4 <__addsf3x+0x80>
     d5c:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__fp_zero>
     d60:	0e f4       	brtc	.+2      	; 0xd64 <__addsf3x+0x20>
     d62:	e0 95       	com	r30
     d64:	0b 2e       	mov	r0, r27
     d66:	ba 2f       	mov	r27, r26
     d68:	a0 2d       	mov	r26, r0
     d6a:	0b 01       	movw	r0, r22
     d6c:	b9 01       	movw	r22, r18
     d6e:	90 01       	movw	r18, r0
     d70:	0c 01       	movw	r0, r24
     d72:	ca 01       	movw	r24, r20
     d74:	a0 01       	movw	r20, r0
     d76:	11 24       	eor	r1, r1
     d78:	ff 27       	eor	r31, r31
     d7a:	59 1b       	sub	r21, r25
     d7c:	99 f0       	breq	.+38     	; 0xda4 <__addsf3x+0x60>
     d7e:	59 3f       	cpi	r21, 0xF9	; 249
     d80:	50 f4       	brcc	.+20     	; 0xd96 <__addsf3x+0x52>
     d82:	50 3e       	cpi	r21, 0xE0	; 224
     d84:	68 f1       	brcs	.+90     	; 0xde0 <__addsf3x+0x9c>
     d86:	1a 16       	cp	r1, r26
     d88:	f0 40       	sbci	r31, 0x00	; 0
     d8a:	a2 2f       	mov	r26, r18
     d8c:	23 2f       	mov	r18, r19
     d8e:	34 2f       	mov	r19, r20
     d90:	44 27       	eor	r20, r20
     d92:	58 5f       	subi	r21, 0xF8	; 248
     d94:	f3 cf       	rjmp	.-26     	; 0xd7c <__addsf3x+0x38>
     d96:	46 95       	lsr	r20
     d98:	37 95       	ror	r19
     d9a:	27 95       	ror	r18
     d9c:	a7 95       	ror	r26
     d9e:	f0 40       	sbci	r31, 0x00	; 0
     da0:	53 95       	inc	r21
     da2:	c9 f7       	brne	.-14     	; 0xd96 <__addsf3x+0x52>
     da4:	7e f4       	brtc	.+30     	; 0xdc4 <__addsf3x+0x80>
     da6:	1f 16       	cp	r1, r31
     da8:	ba 0b       	sbc	r27, r26
     daa:	62 0b       	sbc	r22, r18
     dac:	73 0b       	sbc	r23, r19
     dae:	84 0b       	sbc	r24, r20
     db0:	ba f0       	brmi	.+46     	; 0xde0 <__addsf3x+0x9c>
     db2:	91 50       	subi	r25, 0x01	; 1
     db4:	a1 f0       	breq	.+40     	; 0xdde <__addsf3x+0x9a>
     db6:	ff 0f       	add	r31, r31
     db8:	bb 1f       	adc	r27, r27
     dba:	66 1f       	adc	r22, r22
     dbc:	77 1f       	adc	r23, r23
     dbe:	88 1f       	adc	r24, r24
     dc0:	c2 f7       	brpl	.-16     	; 0xdb2 <__addsf3x+0x6e>
     dc2:	0e c0       	rjmp	.+28     	; 0xde0 <__addsf3x+0x9c>
     dc4:	ba 0f       	add	r27, r26
     dc6:	62 1f       	adc	r22, r18
     dc8:	73 1f       	adc	r23, r19
     dca:	84 1f       	adc	r24, r20
     dcc:	48 f4       	brcc	.+18     	; 0xde0 <__addsf3x+0x9c>
     dce:	87 95       	ror	r24
     dd0:	77 95       	ror	r23
     dd2:	67 95       	ror	r22
     dd4:	b7 95       	ror	r27
     dd6:	f7 95       	ror	r31
     dd8:	9e 3f       	cpi	r25, 0xFE	; 254
     dda:	08 f0       	brcs	.+2      	; 0xdde <__addsf3x+0x9a>
     ddc:	b0 cf       	rjmp	.-160    	; 0xd3e <__addsf3+0x28>
     dde:	93 95       	inc	r25
     de0:	88 0f       	add	r24, r24
     de2:	08 f0       	brcs	.+2      	; 0xde6 <__addsf3x+0xa2>
     de4:	99 27       	eor	r25, r25
     de6:	ee 0f       	add	r30, r30
     de8:	97 95       	ror	r25
     dea:	87 95       	ror	r24
     dec:	08 95       	ret

00000dee <__fixunssfsi>:
     dee:	0e 94 93 07 	call	0xf26	; 0xf26 <__fp_splitA>
     df2:	88 f0       	brcs	.+34     	; 0xe16 <__fixunssfsi+0x28>
     df4:	9f 57       	subi	r25, 0x7F	; 127
     df6:	98 f0       	brcs	.+38     	; 0xe1e <__fixunssfsi+0x30>
     df8:	b9 2f       	mov	r27, r25
     dfa:	99 27       	eor	r25, r25
     dfc:	b7 51       	subi	r27, 0x17	; 23
     dfe:	b0 f0       	brcs	.+44     	; 0xe2c <__fixunssfsi+0x3e>
     e00:	e1 f0       	breq	.+56     	; 0xe3a <__fixunssfsi+0x4c>
     e02:	66 0f       	add	r22, r22
     e04:	77 1f       	adc	r23, r23
     e06:	88 1f       	adc	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	1a f0       	brmi	.+6      	; 0xe12 <__fixunssfsi+0x24>
     e0c:	ba 95       	dec	r27
     e0e:	c9 f7       	brne	.-14     	; 0xe02 <__fixunssfsi+0x14>
     e10:	14 c0       	rjmp	.+40     	; 0xe3a <__fixunssfsi+0x4c>
     e12:	b1 30       	cpi	r27, 0x01	; 1
     e14:	91 f0       	breq	.+36     	; 0xe3a <__fixunssfsi+0x4c>
     e16:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__fp_zero>
     e1a:	b1 e0       	ldi	r27, 0x01	; 1
     e1c:	08 95       	ret
     e1e:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__fp_zero>
     e22:	67 2f       	mov	r22, r23
     e24:	78 2f       	mov	r23, r24
     e26:	88 27       	eor	r24, r24
     e28:	b8 5f       	subi	r27, 0xF8	; 248
     e2a:	39 f0       	breq	.+14     	; 0xe3a <__fixunssfsi+0x4c>
     e2c:	b9 3f       	cpi	r27, 0xF9	; 249
     e2e:	cc f3       	brlt	.-14     	; 0xe22 <__fixunssfsi+0x34>
     e30:	86 95       	lsr	r24
     e32:	77 95       	ror	r23
     e34:	67 95       	ror	r22
     e36:	b3 95       	inc	r27
     e38:	d9 f7       	brne	.-10     	; 0xe30 <__fixunssfsi+0x42>
     e3a:	3e f4       	brtc	.+14     	; 0xe4a <__fixunssfsi+0x5c>
     e3c:	90 95       	com	r25
     e3e:	80 95       	com	r24
     e40:	70 95       	com	r23
     e42:	61 95       	neg	r22
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	8f 4f       	sbci	r24, 0xFF	; 255
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	08 95       	ret

00000e4c <__floatunsisf>:
     e4c:	e8 94       	clt
     e4e:	09 c0       	rjmp	.+18     	; 0xe62 <__floatsisf+0x12>

00000e50 <__floatsisf>:
     e50:	97 fb       	bst	r25, 7
     e52:	3e f4       	brtc	.+14     	; 0xe62 <__floatsisf+0x12>
     e54:	90 95       	com	r25
     e56:	80 95       	com	r24
     e58:	70 95       	com	r23
     e5a:	61 95       	neg	r22
     e5c:	7f 4f       	sbci	r23, 0xFF	; 255
     e5e:	8f 4f       	sbci	r24, 0xFF	; 255
     e60:	9f 4f       	sbci	r25, 0xFF	; 255
     e62:	99 23       	and	r25, r25
     e64:	a9 f0       	breq	.+42     	; 0xe90 <__floatsisf+0x40>
     e66:	f9 2f       	mov	r31, r25
     e68:	96 e9       	ldi	r25, 0x96	; 150
     e6a:	bb 27       	eor	r27, r27
     e6c:	93 95       	inc	r25
     e6e:	f6 95       	lsr	r31
     e70:	87 95       	ror	r24
     e72:	77 95       	ror	r23
     e74:	67 95       	ror	r22
     e76:	b7 95       	ror	r27
     e78:	f1 11       	cpse	r31, r1
     e7a:	f8 cf       	rjmp	.-16     	; 0xe6c <__floatsisf+0x1c>
     e7c:	fa f4       	brpl	.+62     	; 0xebc <__floatsisf+0x6c>
     e7e:	bb 0f       	add	r27, r27
     e80:	11 f4       	brne	.+4      	; 0xe86 <__floatsisf+0x36>
     e82:	60 ff       	sbrs	r22, 0
     e84:	1b c0       	rjmp	.+54     	; 0xebc <__floatsisf+0x6c>
     e86:	6f 5f       	subi	r22, 0xFF	; 255
     e88:	7f 4f       	sbci	r23, 0xFF	; 255
     e8a:	8f 4f       	sbci	r24, 0xFF	; 255
     e8c:	9f 4f       	sbci	r25, 0xFF	; 255
     e8e:	16 c0       	rjmp	.+44     	; 0xebc <__floatsisf+0x6c>
     e90:	88 23       	and	r24, r24
     e92:	11 f0       	breq	.+4      	; 0xe98 <__floatsisf+0x48>
     e94:	96 e9       	ldi	r25, 0x96	; 150
     e96:	11 c0       	rjmp	.+34     	; 0xeba <__floatsisf+0x6a>
     e98:	77 23       	and	r23, r23
     e9a:	21 f0       	breq	.+8      	; 0xea4 <__floatsisf+0x54>
     e9c:	9e e8       	ldi	r25, 0x8E	; 142
     e9e:	87 2f       	mov	r24, r23
     ea0:	76 2f       	mov	r23, r22
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <__floatsisf+0x5e>
     ea4:	66 23       	and	r22, r22
     ea6:	71 f0       	breq	.+28     	; 0xec4 <__floatsisf+0x74>
     ea8:	96 e8       	ldi	r25, 0x86	; 134
     eaa:	86 2f       	mov	r24, r22
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	2a f0       	brmi	.+10     	; 0xebc <__floatsisf+0x6c>
     eb2:	9a 95       	dec	r25
     eb4:	66 0f       	add	r22, r22
     eb6:	77 1f       	adc	r23, r23
     eb8:	88 1f       	adc	r24, r24
     eba:	da f7       	brpl	.-10     	; 0xeb2 <__floatsisf+0x62>
     ebc:	88 0f       	add	r24, r24
     ebe:	96 95       	lsr	r25
     ec0:	87 95       	ror	r24
     ec2:	97 f9       	bld	r25, 7
     ec4:	08 95       	ret

00000ec6 <__fp_inf>:
     ec6:	97 f9       	bld	r25, 7
     ec8:	9f 67       	ori	r25, 0x7F	; 127
     eca:	80 e8       	ldi	r24, 0x80	; 128
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	08 95       	ret

00000ed2 <__fp_nan>:
     ed2:	9f ef       	ldi	r25, 0xFF	; 255
     ed4:	80 ec       	ldi	r24, 0xC0	; 192
     ed6:	08 95       	ret

00000ed8 <__fp_pscA>:
     ed8:	00 24       	eor	r0, r0
     eda:	0a 94       	dec	r0
     edc:	16 16       	cp	r1, r22
     ede:	17 06       	cpc	r1, r23
     ee0:	18 06       	cpc	r1, r24
     ee2:	09 06       	cpc	r0, r25
     ee4:	08 95       	ret

00000ee6 <__fp_pscB>:
     ee6:	00 24       	eor	r0, r0
     ee8:	0a 94       	dec	r0
     eea:	12 16       	cp	r1, r18
     eec:	13 06       	cpc	r1, r19
     eee:	14 06       	cpc	r1, r20
     ef0:	05 06       	cpc	r0, r21
     ef2:	08 95       	ret

00000ef4 <__fp_round>:
     ef4:	09 2e       	mov	r0, r25
     ef6:	03 94       	inc	r0
     ef8:	00 0c       	add	r0, r0
     efa:	11 f4       	brne	.+4      	; 0xf00 <__fp_round+0xc>
     efc:	88 23       	and	r24, r24
     efe:	52 f0       	brmi	.+20     	; 0xf14 <__fp_round+0x20>
     f00:	bb 0f       	add	r27, r27
     f02:	40 f4       	brcc	.+16     	; 0xf14 <__fp_round+0x20>
     f04:	bf 2b       	or	r27, r31
     f06:	11 f4       	brne	.+4      	; 0xf0c <__fp_round+0x18>
     f08:	60 ff       	sbrs	r22, 0
     f0a:	04 c0       	rjmp	.+8      	; 0xf14 <__fp_round+0x20>
     f0c:	6f 5f       	subi	r22, 0xFF	; 255
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	8f 4f       	sbci	r24, 0xFF	; 255
     f12:	9f 4f       	sbci	r25, 0xFF	; 255
     f14:	08 95       	ret

00000f16 <__fp_split3>:
     f16:	57 fd       	sbrc	r21, 7
     f18:	90 58       	subi	r25, 0x80	; 128
     f1a:	44 0f       	add	r20, r20
     f1c:	55 1f       	adc	r21, r21
     f1e:	59 f0       	breq	.+22     	; 0xf36 <__fp_splitA+0x10>
     f20:	5f 3f       	cpi	r21, 0xFF	; 255
     f22:	71 f0       	breq	.+28     	; 0xf40 <__fp_splitA+0x1a>
     f24:	47 95       	ror	r20

00000f26 <__fp_splitA>:
     f26:	88 0f       	add	r24, r24
     f28:	97 fb       	bst	r25, 7
     f2a:	99 1f       	adc	r25, r25
     f2c:	61 f0       	breq	.+24     	; 0xf46 <__fp_splitA+0x20>
     f2e:	9f 3f       	cpi	r25, 0xFF	; 255
     f30:	79 f0       	breq	.+30     	; 0xf50 <__fp_splitA+0x2a>
     f32:	87 95       	ror	r24
     f34:	08 95       	ret
     f36:	12 16       	cp	r1, r18
     f38:	13 06       	cpc	r1, r19
     f3a:	14 06       	cpc	r1, r20
     f3c:	55 1f       	adc	r21, r21
     f3e:	f2 cf       	rjmp	.-28     	; 0xf24 <__fp_split3+0xe>
     f40:	46 95       	lsr	r20
     f42:	f1 df       	rcall	.-30     	; 0xf26 <__fp_splitA>
     f44:	08 c0       	rjmp	.+16     	; 0xf56 <__fp_splitA+0x30>
     f46:	16 16       	cp	r1, r22
     f48:	17 06       	cpc	r1, r23
     f4a:	18 06       	cpc	r1, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	f1 cf       	rjmp	.-30     	; 0xf32 <__fp_splitA+0xc>
     f50:	86 95       	lsr	r24
     f52:	71 05       	cpc	r23, r1
     f54:	61 05       	cpc	r22, r1
     f56:	08 94       	sec
     f58:	08 95       	ret

00000f5a <__fp_zero>:
     f5a:	e8 94       	clt

00000f5c <__fp_szero>:
     f5c:	bb 27       	eor	r27, r27
     f5e:	66 27       	eor	r22, r22
     f60:	77 27       	eor	r23, r23
     f62:	cb 01       	movw	r24, r22
     f64:	97 f9       	bld	r25, 7
     f66:	08 95       	ret

00000f68 <__mulsf3>:
     f68:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__mulsf3x>
     f6c:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__fp_round>
     f70:	0e 94 6c 07 	call	0xed8	; 0xed8 <__fp_pscA>
     f74:	38 f0       	brcs	.+14     	; 0xf84 <__mulsf3+0x1c>
     f76:	0e 94 73 07 	call	0xee6	; 0xee6 <__fp_pscB>
     f7a:	20 f0       	brcs	.+8      	; 0xf84 <__mulsf3+0x1c>
     f7c:	95 23       	and	r25, r21
     f7e:	11 f0       	breq	.+4      	; 0xf84 <__mulsf3+0x1c>
     f80:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__fp_inf>
     f84:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__fp_nan>
     f88:	11 24       	eor	r1, r1
     f8a:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__fp_szero>

00000f8e <__mulsf3x>:
     f8e:	0e 94 8b 07 	call	0xf16	; 0xf16 <__fp_split3>
     f92:	70 f3       	brcs	.-36     	; 0xf70 <__mulsf3+0x8>

00000f94 <__mulsf3_pse>:
     f94:	95 9f       	mul	r25, r21
     f96:	c1 f3       	breq	.-16     	; 0xf88 <__mulsf3+0x20>
     f98:	95 0f       	add	r25, r21
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	55 1f       	adc	r21, r21
     f9e:	62 9f       	mul	r22, r18
     fa0:	f0 01       	movw	r30, r0
     fa2:	72 9f       	mul	r23, r18
     fa4:	bb 27       	eor	r27, r27
     fa6:	f0 0d       	add	r31, r0
     fa8:	b1 1d       	adc	r27, r1
     faa:	63 9f       	mul	r22, r19
     fac:	aa 27       	eor	r26, r26
     fae:	f0 0d       	add	r31, r0
     fb0:	b1 1d       	adc	r27, r1
     fb2:	aa 1f       	adc	r26, r26
     fb4:	64 9f       	mul	r22, r20
     fb6:	66 27       	eor	r22, r22
     fb8:	b0 0d       	add	r27, r0
     fba:	a1 1d       	adc	r26, r1
     fbc:	66 1f       	adc	r22, r22
     fbe:	82 9f       	mul	r24, r18
     fc0:	22 27       	eor	r18, r18
     fc2:	b0 0d       	add	r27, r0
     fc4:	a1 1d       	adc	r26, r1
     fc6:	62 1f       	adc	r22, r18
     fc8:	73 9f       	mul	r23, r19
     fca:	b0 0d       	add	r27, r0
     fcc:	a1 1d       	adc	r26, r1
     fce:	62 1f       	adc	r22, r18
     fd0:	83 9f       	mul	r24, r19
     fd2:	a0 0d       	add	r26, r0
     fd4:	61 1d       	adc	r22, r1
     fd6:	22 1f       	adc	r18, r18
     fd8:	74 9f       	mul	r23, r20
     fda:	33 27       	eor	r19, r19
     fdc:	a0 0d       	add	r26, r0
     fde:	61 1d       	adc	r22, r1
     fe0:	23 1f       	adc	r18, r19
     fe2:	84 9f       	mul	r24, r20
     fe4:	60 0d       	add	r22, r0
     fe6:	21 1d       	adc	r18, r1
     fe8:	82 2f       	mov	r24, r18
     fea:	76 2f       	mov	r23, r22
     fec:	6a 2f       	mov	r22, r26
     fee:	11 24       	eor	r1, r1
     ff0:	9f 57       	subi	r25, 0x7F	; 127
     ff2:	50 40       	sbci	r21, 0x00	; 0
     ff4:	9a f0       	brmi	.+38     	; 0x101c <__mulsf3_pse+0x88>
     ff6:	f1 f0       	breq	.+60     	; 0x1034 <__mulsf3_pse+0xa0>
     ff8:	88 23       	and	r24, r24
     ffa:	4a f0       	brmi	.+18     	; 0x100e <__mulsf3_pse+0x7a>
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	bb 1f       	adc	r27, r27
    1002:	66 1f       	adc	r22, r22
    1004:	77 1f       	adc	r23, r23
    1006:	88 1f       	adc	r24, r24
    1008:	91 50       	subi	r25, 0x01	; 1
    100a:	50 40       	sbci	r21, 0x00	; 0
    100c:	a9 f7       	brne	.-22     	; 0xff8 <__mulsf3_pse+0x64>
    100e:	9e 3f       	cpi	r25, 0xFE	; 254
    1010:	51 05       	cpc	r21, r1
    1012:	80 f0       	brcs	.+32     	; 0x1034 <__mulsf3_pse+0xa0>
    1014:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__fp_inf>
    1018:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__fp_szero>
    101c:	5f 3f       	cpi	r21, 0xFF	; 255
    101e:	e4 f3       	brlt	.-8      	; 0x1018 <__mulsf3_pse+0x84>
    1020:	98 3e       	cpi	r25, 0xE8	; 232
    1022:	d4 f3       	brlt	.-12     	; 0x1018 <__mulsf3_pse+0x84>
    1024:	86 95       	lsr	r24
    1026:	77 95       	ror	r23
    1028:	67 95       	ror	r22
    102a:	b7 95       	ror	r27
    102c:	f7 95       	ror	r31
    102e:	e7 95       	ror	r30
    1030:	9f 5f       	subi	r25, 0xFF	; 255
    1032:	c1 f7       	brne	.-16     	; 0x1024 <__mulsf3_pse+0x90>
    1034:	fe 2b       	or	r31, r30
    1036:	88 0f       	add	r24, r24
    1038:	91 1d       	adc	r25, r1
    103a:	96 95       	lsr	r25
    103c:	87 95       	ror	r24
    103e:	97 f9       	bld	r25, 7
    1040:	08 95       	ret

00001042 <__itoa_ncheck>:
    1042:	bb 27       	eor	r27, r27
    1044:	4a 30       	cpi	r20, 0x0A	; 10
    1046:	31 f4       	brne	.+12     	; 0x1054 <__itoa_ncheck+0x12>
    1048:	99 23       	and	r25, r25
    104a:	22 f4       	brpl	.+8      	; 0x1054 <__itoa_ncheck+0x12>
    104c:	bd e2       	ldi	r27, 0x2D	; 45
    104e:	90 95       	com	r25
    1050:	81 95       	neg	r24
    1052:	9f 4f       	sbci	r25, 0xFF	; 255
    1054:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__utoa_common>

00001058 <__utoa_ncheck>:
    1058:	bb 27       	eor	r27, r27

0000105a <__utoa_common>:
    105a:	fb 01       	movw	r30, r22
    105c:	55 27       	eor	r21, r21
    105e:	aa 27       	eor	r26, r26
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	aa 1f       	adc	r26, r26
    1066:	a4 17       	cp	r26, r20
    1068:	10 f0       	brcs	.+4      	; 0x106e <__utoa_common+0x14>
    106a:	a4 1b       	sub	r26, r20
    106c:	83 95       	inc	r24
    106e:	50 51       	subi	r21, 0x10	; 16
    1070:	b9 f7       	brne	.-18     	; 0x1060 <__utoa_common+0x6>
    1072:	a0 5d       	subi	r26, 0xD0	; 208
    1074:	aa 33       	cpi	r26, 0x3A	; 58
    1076:	08 f0       	brcs	.+2      	; 0x107a <__utoa_common+0x20>
    1078:	a9 5d       	subi	r26, 0xD9	; 217
    107a:	a1 93       	st	Z+, r26
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	79 f7       	brne	.-34     	; 0x105e <__utoa_common+0x4>
    1080:	b1 11       	cpse	r27, r1
    1082:	b1 93       	st	Z+, r27
    1084:	11 92       	st	Z+, r1
    1086:	cb 01       	movw	r24, r22
    1088:	0c 94 46 08 	jmp	0x108c	; 0x108c <strrev>

0000108c <strrev>:
    108c:	dc 01       	movw	r26, r24
    108e:	fc 01       	movw	r30, r24
    1090:	67 2f       	mov	r22, r23
    1092:	71 91       	ld	r23, Z+
    1094:	77 23       	and	r23, r23
    1096:	e1 f7       	brne	.-8      	; 0x1090 <strrev+0x4>
    1098:	32 97       	sbiw	r30, 0x02	; 2
    109a:	04 c0       	rjmp	.+8      	; 0x10a4 <strrev+0x18>
    109c:	7c 91       	ld	r23, X
    109e:	6d 93       	st	X+, r22
    10a0:	70 83       	st	Z, r23
    10a2:	62 91       	ld	r22, -Z
    10a4:	ae 17       	cp	r26, r30
    10a6:	bf 07       	cpc	r27, r31
    10a8:	c8 f3       	brcs	.-14     	; 0x109c <strrev+0x10>
    10aa:	08 95       	ret

000010ac <_exit>:
    10ac:	f8 94       	cli

000010ae <__stop_program>:
    10ae:	ff cf       	rjmp	.-2      	; 0x10ae <__stop_program>
