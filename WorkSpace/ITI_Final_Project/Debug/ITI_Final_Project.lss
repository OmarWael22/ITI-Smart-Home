
ITI_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001530  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  00001530  000015c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080018e  0080018e  000016f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001724  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f8e  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010df  00000000  00000000  00004a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f9a  00000000  00000000  00005b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000964  00000000  00000000  00007b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012cd  00000000  00000000  00008474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a37  00000000  00000000  00009741  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000b178  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__vector_1>
       8:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__vector_2>
       c:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__vector_6>
      1c:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__vector_10>
      2c:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
      8a:	0c 94 96 0a 	jmp	0x152c	; 0x152c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TempSensor>:

}

void TempSensor(void){
	//Read Voltage value from ADC conversion
	u8 Temp = ADC_u8StartConversion(0);
      92:	80 e0       	ldi	r24, 0x00	; 0
      94:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <ADC_u8StartConversion>
	 * LM35 Temperature Sensor Vout Calculations with connection applied in proteus:
	 * Vout = 10 mV/C
	 * Vref = 5v
	 * Temp Calculation (Voltage Value*Voltage ref)/(10*(10^-3)*25*2^8)
	 */
	Temp = (u8)((Temp*5)/ (.01*256));
      98:	90 e0       	ldi	r25, 0x00	; 0
      9a:	bc 01       	movw	r22, r24
      9c:	66 0f       	add	r22, r22
      9e:	77 1f       	adc	r23, r23
      a0:	66 0f       	add	r22, r22
      a2:	77 1f       	adc	r23, r23
      a4:	68 0f       	add	r22, r24
      a6:	79 1f       	adc	r23, r25
      a8:	07 2e       	mov	r0, r23
      aa:	00 0c       	add	r0, r0
      ac:	88 0b       	sbc	r24, r24
      ae:	99 0b       	sbc	r25, r25
      b0:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatsisf>
      b4:	2a e0       	ldi	r18, 0x0A	; 10
      b6:	37 ed       	ldi	r19, 0xD7	; 215
      b8:	43 e2       	ldi	r20, 0x23	; 35
      ba:	50 e4       	ldi	r21, 0x40	; 64
      bc:	0e 94 c5 08 	call	0x118a	; 0x118a <__divsf3>
      c0:	0e 94 37 09 	call	0x126e	; 0x126e <__fixunssfsi>
	//Check on Temp if over 35C ===> AC will work and turn off Fan if was on
	if(Temp>=35){
      c4:	63 32       	cpi	r22, 0x23	; 35
      c6:	58 f0       	brcs	.+22     	; 0xde <TempSensor+0x4c>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
      c8:	41 e0       	ldi	r20, 0x01	; 1
      ca:	66 e0       	ldi	r22, 0x06	; 6
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
      d2:	40 e0       	ldi	r20, 0x00	; 0
      d4:	67 e0       	ldi	r22, 0x07	; 7
      d6:	83 e0       	ldi	r24, 0x03	; 3
      d8:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
      dc:	08 95       	ret
	}
	//Check on Temp if over 25C ===> Fan will work and turn off AC if was on
	else if (Temp>=25){
      de:	69 31       	cpi	r22, 0x19	; 25
      e0:	58 f0       	brcs	.+22     	; 0xf8 <TempSensor+0x66>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	66 e0       	ldi	r22, 0x06	; 6
      e6:	83 e0       	ldi	r24, 0x03	; 3
      e8:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH);
      ec:	41 e0       	ldi	r20, 0x01	; 1
      ee:	67 e0       	ldi	r22, 0x07	; 7
      f0:	83 e0       	ldi	r24, 0x03	; 3
      f2:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
      f6:	08 95       	ret
	}//Else State declare that Temp is lower than 25 so turning off both AC and Fan
	else{
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
      f8:	40 e0       	ldi	r20, 0x00	; 0
      fa:	66 e0       	ldi	r22, 0x06	; 6
      fc:	83 e0       	ldi	r24, 0x03	; 3
      fe:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
     102:	40 e0       	ldi	r20, 0x00	; 0
     104:	67 e0       	ldi	r22, 0x07	; 7
     106:	83 e0       	ldi	r24, 0x03	; 3
     108:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
     10c:	08 95       	ret

0000010e <void_SetEPROMLockerPass>:


}
void void_SetEPROMLockerPass(void ){
	// get low byte
	Global_u8SavedDoorPassLowByte=(u8)Global_u16EPROMDoorPass;
     10e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <Global_u16EPROMDoorPass>
     112:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     116:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <Global_u8SavedDoorPassLowByte>
	// get high byte
	Global_u8SavedDoorPassHighByte=(u8)(Global_u16EPROMDoorPass>>8);
     11a:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <Global_u8SavedDoorPassHighByte>
	// save low byte
	EEPROM_voidSendDataByte(Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
     11e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     122:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     126:	0e 94 04 03 	call	0x608	; 0x608 <EEPROM_voidSendDataByte>
	TIMER_delay_ms(300);
     12a:	6c e2       	ldi	r22, 0x2C	; 44
     12c:	71 e0       	ldi	r23, 0x01	; 1
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 2a 06 	call	0xc54	; 0xc54 <TIMER_delay_ms>
	// save high byte
	EEPROM_voidSendDataByte(Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
     136:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     13a:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     13e:	66 5f       	subi	r22, 0xF6	; 246
     140:	7f 4f       	sbci	r23, 0xFF	; 255
     142:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <Global_u8SavedDoorPassHighByte>
     146:	0e 94 04 03 	call	0x608	; 0x608 <EEPROM_voidSendDataByte>
	TIMER_delay_ms(300);
     14a:	6c e2       	ldi	r22, 0x2C	; 44
     14c:	71 e0       	ldi	r23, 0x01	; 1
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 2a 06 	call	0xc54	; 0xc54 <TIMER_delay_ms>
     156:	08 95       	ret

00000158 <void_Locker>:
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
	}
}

void void_Locker(){
     158:	cf 93       	push	r28
	/*To set new pass enter your old pass and press clear*/
	/* max password digits is 4*/

	// pressed key
	u8 Local_u8Keypad_Key=KPD_u8GetPressedKey();
     15a:	0e 94 82 03 	call	0x704	; 0x704 <KPD_u8GetPressedKey>
     15e:	c8 2f       	mov	r28, r24
	/* case user entered clear */
		/* two cases to enter clear
		* First : To set new pass
		* Second : clear screen and clear the entered password
		*/
	if(Local_u8Keypad_Key==KPD_CLEAR){
     160:	8d 30       	cpi	r24, 0x0D	; 13
     162:	09 f0       	breq	.+2      	; 0x166 <void_Locker+0xe>
     164:	74 c0       	rjmp	.+232    	; 0x24e <void_Locker+0xf6>

		// First case : set new pass
		if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
     166:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <Local_u16DoorPassword.1766>
     16a:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <Local_u16DoorPassword.1766+0x1>
     16e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <Global_u16EPROMDoorPass>
     172:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     176:	28 17       	cp	r18, r24
     178:	39 07       	cpc	r19, r25
     17a:	09 f0       	breq	.+2      	; 0x17e <void_Locker+0x26>
     17c:	5f c0       	rjmp	.+190    	; 0x23c <void_Locker+0xe4>

			LCD_voidClearDisplay();
     17e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <LCD_voidClearDisplay>
			// setting new password
				// clear all saved passes and digit counter
				Global_u16EPROMDoorPass=0;
     182:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     186:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <Global_u16EPROMDoorPass>
				Local_u16DoorPassword=0;
     18a:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <Local_u16DoorPassword.1766+0x1>
     18e:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <Local_u16DoorPassword.1766>
				Local_u8DigitsCount=0;
     192:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1767>

				LCD_voidSendString("Set new pass:");
     196:	8e e6       	ldi	r24, 0x6E	; 110
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_voidSendString>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				while(Local_u8Keypad_Key != KPD_ENTER ){

					Local_u8Keypad_Key=KPD_u8GetPressedKey();
     19e:	0e 94 82 03 	call	0x704	; 0x704 <KPD_u8GetPressedKey>
     1a2:	c8 2f       	mov	r28, r24
					// check if the user entered more than 4 digits
					if(Local_u8DigitsCount==Max_Pass_Digits+1){
     1a4:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <Local_u8DigitsCount.1767>
     1a8:	85 30       	cpi	r24, 0x05	; 5
     1aa:	a1 f4       	brne	.+40     	; 0x1d4 <void_Locker+0x7c>
						LCD_voidClearDisplay();
     1ac:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <LCD_voidClearDisplay>
						LCD_voidSendString("ERROR !!!!");
     1b0:	8c e7       	ldi	r24, 0x7C	; 124
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_voidSendString>
						LCD_voidGoTOXY(1,0);
     1b8:	60 e0       	ldi	r22, 0x00	; 0
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_voidGoTOXY>
						LCD_voidSendString("Max Digits is 4");
     1c0:	87 e8       	ldi	r24, 0x87	; 135
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_voidSendString>
						Local_u8DigitsCount=0;
     1c8:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1767>
						Global_u16EPROMDoorPass=0;
     1cc:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     1d0:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <Global_u16EPROMDoorPass>
					}

					if(Local_u8Keypad_Key==KPD_CLEAR){
     1d4:	cd 30       	cpi	r28, 0x0D	; 13
     1d6:	49 f4       	brne	.+18     	; 0x1ea <void_Locker+0x92>
						Local_u8DigitsCount=0;
     1d8:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1767>
						LCD_voidClearDisplay();
     1dc:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <LCD_voidClearDisplay>
						Global_u16EPROMDoorPass=0;
     1e0:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     1e4:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <Global_u16EPROMDoorPass>
     1e8:	da cf       	rjmp	.-76     	; 0x19e <void_Locker+0x46>

					}
					else if(Local_u8Keypad_Key !=KPD_NO_PRESS && Local_u8Keypad_Key!=KPD_ENTER){
     1ea:	ca 3a       	cpi	r28, 0xAA	; 170
     1ec:	c1 f2       	breq	.-80     	; 0x19e <void_Locker+0x46>
     1ee:	cc 30       	cpi	r28, 0x0C	; 12
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <void_Locker+0x9c>
     1f2:	86 c0       	rjmp	.+268    	; 0x300 <void_Locker+0x1a8>
						// if it is the first digit that user enter --> clear any previous message on the screen
						if(Local_u8DigitsCount==0)
     1f4:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <Local_u8DigitsCount.1767>
     1f8:	81 11       	cpse	r24, r1
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <void_Locker+0xa8>
							LCD_voidClearDisplay();
     1fc:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <LCD_voidClearDisplay>
						LCD_voidSendData('*');
     200:	8a e2       	ldi	r24, 0x2A	; 42
     202:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_voidSendData>
						Local_u8DigitsCount++;
     206:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <Local_u8DigitsCount.1767>
     20a:	8f 5f       	subi	r24, 0xFF	; 255
     20c:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <Local_u8DigitsCount.1767>
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
     210:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <Global_u16EPROMDoorPass>
     214:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     218:	9c 01       	movw	r18, r24
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	88 0f       	add	r24, r24
     224:	99 1f       	adc	r25, r25
     226:	88 0f       	add	r24, r24
     228:	99 1f       	adc	r25, r25
     22a:	82 0f       	add	r24, r18
     22c:	93 1f       	adc	r25, r19
     22e:	8c 0f       	add	r24, r28
     230:	91 1d       	adc	r25, r1
     232:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     236:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Global_u16EPROMDoorPass>
     23a:	b1 cf       	rjmp	.-158    	; 0x19e <void_Locker+0x46>

		}

		// Second case : to clear Screen or typed password
		else{
		LCD_voidClearDisplay();
     23c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <LCD_voidClearDisplay>
		Local_u16DoorPassword=0;
     240:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <Local_u16DoorPassword.1766+0x1>
     244:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <Local_u16DoorPassword.1766>
		Local_u8DigitsCount=0;
     248:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1767>
     24c:	63 c0       	rjmp	.+198    	; 0x314 <void_Locker+0x1bc>

		}
	}
	/******************************************************************************************************************************************************************/
	/* case user pressed enter or equal */
	else if(Local_u8Keypad_Key==KPD_ENTER){
     24e:	8c 30       	cpi	r24, 0x0C	; 12
     250:	89 f5       	brne	.+98     	; 0x2b4 <void_Locker+0x15c>

		LCD_voidClearDisplay();
     252:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <LCD_voidClearDisplay>
		// check if entered pass is correct
		 if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
     256:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <Local_u16DoorPassword.1766>
     25a:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <Local_u16DoorPassword.1766+0x1>
     25e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <Global_u16EPROMDoorPass>
     262:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     266:	28 17       	cp	r18, r24
     268:	39 07       	cpc	r19, r25
     26a:	c9 f4       	brne	.+50     	; 0x29e <void_Locker+0x146>
			// check door status
			if(Local_u8DoorStatus==0){
     26c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__data_end>
     270:	81 11       	cpse	r24, r1
     272:	0b c0       	rjmp	.+22     	; 0x28a <void_Locker+0x132>
				LCD_voidSendString("Door is opened");
     274:	87 e9       	ldi	r24, 0x97	; 151
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_voidSendString>
				// run servo
				Servo_voidDegree(180);
     27c:	84 eb       	ldi	r24, 0xB4	; 180
     27e:	0e 94 c5 04 	call	0x98a	; 0x98a <Servo_voidDegree>
				Local_u8DoorStatus=1;
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__data_end>
     288:	0e c0       	rjmp	.+28     	; 0x2a6 <void_Locker+0x14e>

			}
			else{
				LCD_voidSendString("Door is Closed");
     28a:	86 ea       	ldi	r24, 0xA6	; 166
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_voidSendString>
				// stop servo
				Servo_voidDegree(0);
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	0e 94 c5 04 	call	0x98a	; 0x98a <Servo_voidDegree>
				Local_u8DoorStatus=0;
     298:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <__data_end>
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <void_Locker+0x14e>

			}

		}
		else
			LCD_voidSendString("Wrong password !");
     29e:	85 eb       	ldi	r24, 0xB5	; 181
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_voidSendString>

			// reset the entered password after typing enter
			Local_u16DoorPassword=0;
     2a6:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <Local_u16DoorPassword.1766+0x1>
     2aa:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <Local_u16DoorPassword.1766>
			Local_u8DigitsCount=0;
     2ae:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1767>
     2b2:	30 c0       	rjmp	.+96     	; 0x314 <void_Locker+0x1bc>
	}

	/****************************************************************************************************************************************************************/
	/* Case user pressed a digit key*/
	else if(Local_u8Keypad_Key != KPD_NO_PRESS){
     2b4:	8a 3a       	cpi	r24, 0xAA	; 170
     2b6:	71 f1       	breq	.+92     	; 0x314 <void_Locker+0x1bc>
		// if it is the first digit that user enter --> clear any previous message on the screen
		if(Local_u8DigitsCount==0)
     2b8:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <Local_u8DigitsCount.1767>
     2bc:	81 11       	cpse	r24, r1
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <void_Locker+0x16c>
			LCD_voidClearDisplay();
     2c0:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <LCD_voidClearDisplay>

		LCD_voidSendData('*');
     2c4:	8a e2       	ldi	r24, 0x2A	; 42
     2c6:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_voidSendData>

		Local_u8DigitsCount++;
     2ca:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <Local_u8DigitsCount.1767>
     2ce:	8f 5f       	subi	r24, 0xFF	; 255
     2d0:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <Local_u8DigitsCount.1767>
		Local_u16DoorPassword=Local_u16DoorPassword*10 + Local_u8Keypad_Key;
     2d4:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <Local_u16DoorPassword.1766>
     2d8:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <Local_u16DoorPassword.1766+0x1>
     2dc:	9c 01       	movw	r18, r24
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	88 0f       	add	r24, r24
     2e4:	99 1f       	adc	r25, r25
     2e6:	88 0f       	add	r24, r24
     2e8:	99 1f       	adc	r25, r25
     2ea:	88 0f       	add	r24, r24
     2ec:	99 1f       	adc	r25, r25
     2ee:	82 0f       	add	r24, r18
     2f0:	93 1f       	adc	r25, r19
     2f2:	8c 0f       	add	r24, r28
     2f4:	91 1d       	adc	r25, r1
     2f6:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <Local_u16DoorPassword.1766+0x1>
     2fa:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <Local_u16DoorPassword.1766>


	}


}
     2fe:	0a c0       	rjmp	.+20     	; 0x314 <void_Locker+0x1bc>
						Local_u8DigitsCount++;
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
					}

				}
				LCD_voidClearDisplay();
     300:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <LCD_voidClearDisplay>
				LCD_voidSendString("pass is updated");
     304:	86 ec       	ldi	r24, 0xC6	; 198
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_voidSendString>
				// reset counter
				Local_u8DigitsCount=0;
     30c:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1767>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				// save the new pass to eeprom
				void_SetEPROMLockerPass();
     310:	0e 94 87 00 	call	0x10e	; 0x10e <void_SetEPROMLockerPass>


	}


}
     314:	cf 91       	pop	r28
     316:	08 95       	ret

00000318 <void_GetEPROMLockerPass>:
}

void void_GetEPROMLockerPass(void){

	// read pass low byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
     318:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     31c:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     320:	87 ea       	ldi	r24, 0xA7	; 167
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 1c 03 	call	0x638	; 0x638 <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
     328:	6c e2       	ldi	r22, 0x2C	; 44
     32a:	71 e0       	ldi	r23, 0x01	; 1
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 2a 06 	call	0xc54	; 0xc54 <TIMER_delay_ms>
	// read pass high byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
     334:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     338:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     33c:	66 5f       	subi	r22, 0xF6	; 246
     33e:	7f 4f       	sbci	r23, 0xFF	; 255
     340:	84 ea       	ldi	r24, 0xA4	; 164
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	0e 94 1c 03 	call	0x638	; 0x638 <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
     348:	6c e2       	ldi	r22, 0x2C	; 44
     34a:	71 e0       	ldi	r23, 0x01	; 1
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 2a 06 	call	0xc54	; 0xc54 <TIMER_delay_ms>
	// combine the high and low byte
	Global_u16EPROMDoorPass= ( (u16)(Global_u8SavedDoorPassHighByte<<8) )| Global_u8SavedDoorPassLowByte;
     354:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <Global_u8SavedDoorPassHighByte>
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	98 2f       	mov	r25, r24
     35c:	88 27       	eor	r24, r24
     35e:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <Global_u8SavedDoorPassLowByte>
     362:	82 2b       	or	r24, r18
     364:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     368:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Global_u16EPROMDoorPass>
     36c:	08 95       	ret

0000036e <main>:
void void_Locker(void);
void void_SetEPROMLockerPass(void);
void void_GetEPROMLockerPass(void);

void main(void)
{	
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	1f 92       	push	r1
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16EPROMSystemStateAddress=5;
	u8 Local_u8EPROMSystemState=0;
     378:	19 82       	std	Y+1, r1	; 0x01
	
	ADC_voidInit();
     37a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_OUTPUT);
     37e:	41 e0       	ldi	r20, 0x01	; 1
     380:	66 e0       	ldi	r22, 0x06	; 6
     382:	83 e0       	ldi	r24, 0x03	; 3
     384:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_OUTPUT);
     388:	41 e0       	ldi	r20, 0x01	; 1
     38a:	67 e0       	ldi	r22, 0x07	; 7
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DIO_voidSetPinDirection>

	LCD_voidInit();
     392:	0e 94 51 04 	call	0x8a2	; 0x8a2 <LCD_voidInit>
	KPD_voidInit();
     396:	0e 94 3b 03 	call	0x676	; 0x676 <KPD_voidInit>
	//servo pin
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
     39a:	41 e0       	ldi	r20, 0x01	; 1
     39c:	65 e0       	ldi	r22, 0x05	; 5
     39e:	83 e0       	ldi	r24, 0x03	; 3
     3a0:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DIO_voidSetPinDirection>
	Servo_voidInit();
     3a4:	0e 94 bc 04 	call	0x978	; 0x978 <Servo_voidInit>

	TWI_voidMasterInit(0);
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	0e 94 63 07 	call	0xec6	; 0xec6 <TWI_voidMasterInit>
	
	/*Read system state form EPROM to check if this is the first time to run the project*/
	EEPROM_voidReadDataByte(&Local_u8EPROMSystemState,Local_u16EPROMSystemStateAddress);
     3ae:	65 e0       	ldi	r22, 0x05	; 5
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	0e 94 1c 03 	call	0x638	; 0x638 <EEPROM_voidReadDataByte>
	if(Local_u8EPROMSystemState != SystemHasRunBefore){
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	8c 31       	cpi	r24, 0x1C	; 28
     3be:	d1 f0       	breq	.+52     	; 0x3f4 <main+0x86>
		LCD_voidSendString("First Run");
     3c0:	86 ed       	ldi	r24, 0xD6	; 214
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_voidSendString>
		// save the system state as has run before
		Local_u8EPROMSystemState=SystemHasRunBefore;
     3c8:	8c e1       	ldi	r24, 0x1C	; 28
     3ca:	89 83       	std	Y+1, r24	; 0x01
		// save initial password = 100
		Global_u16EPROMDoorPass=1234;
     3cc:	82 ed       	ldi	r24, 0xD2	; 210
     3ce:	94 e0       	ldi	r25, 0x04	; 4
     3d0:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     3d4:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Global_u16EPROMDoorPass>
		void_SetEPROMLockerPass();
     3d8:	0e 94 87 00 	call	0x10e	; 0x10e <void_SetEPROMLockerPass>
		// save the system state to eprom
		EEPROM_voidSendDataByte(Local_u8EPROMSystemState,Local_u16EPROMSystemStateAddress);
     3dc:	65 e0       	ldi	r22, 0x05	; 5
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	0e 94 04 03 	call	0x608	; 0x608 <EEPROM_voidSendDataByte>
		TIMER_delay_ms(300);
     3e6:	6c e2       	ldi	r22, 0x2C	; 44
     3e8:	71 e0       	ldi	r23, 0x01	; 1
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 2a 06 	call	0xc54	; 0xc54 <TIMER_delay_ms>
     3f2:	04 c0       	rjmp	.+8      	; 0x3fc <main+0x8e>
	}
	else
		LCD_voidSendString("System is On");
     3f4:	80 ee       	ldi	r24, 0xE0	; 224
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_voidSendString>

	// get the saved password and store it the global EPROM_variable
	void_GetEPROMLockerPass();
     3fc:	0e 94 8c 01 	call	0x318	; 0x318 <void_GetEPROMLockerPass>
	
	//LCD_voidSendNumber(Global_u16EPROMDoorPass);
	
	// Initialize USART
	USART_voidInit();
     400:	0e 94 d5 07 	call	0xfaa	; 0xfaa <USART_voidInit>
	//Initialize Call Back Function
	USART_voidCallBackFunction(&USART_Start);
     404:	82 e6       	ldi	r24, 0x62	; 98
     406:	92 e0       	ldi	r25, 0x02	; 2
     408:	0e 94 28 08 	call	0x1050	; 0x1050 <USART_voidCallBackFunction>
	//Enable USART PIE
	USART_voidEnableRxINT();
     40c:	0e 94 2d 08 	call	0x105a	; 0x105a <USART_voidEnableRxINT>
	//Enable GIE
	GIE_voidEnableGlobalInt();
     410:	0e 94 26 06 	call	0xc4c	; 0xc4c <GIE_voidEnableGlobalInt>
	// LED Pins
	DIO_voidSetPinDirection(DIO_PORTC,LIGHT1,DIO_OUTPUT);
     414:	41 e0       	ldi	r20, 0x01	; 1
     416:	65 e0       	ldi	r22, 0x05	; 5
     418:	82 e0       	ldi	r24, 0x02	; 2
     41a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,LIGHT2,DIO_OUTPUT);
     41e:	41 e0       	ldi	r20, 0x01	; 1
     420:	66 e0       	ldi	r22, 0x06	; 6
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,LIGHT3,DIO_OUTPUT);
     428:	41 e0       	ldi	r20, 0x01	; 1
     42a:	67 e0       	ldi	r22, 0x07	; 7
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DIO_voidSetPinDirection>

	while(1){
		/*USART is Controlled by ISR TIMER1_COMPB*/
		GIE_voidEnableGlobalInt();
     432:	0e 94 26 06 	call	0xc4c	; 0xc4c <GIE_voidEnableGlobalInt>
		USART_voidEnableRxINT();
     436:	0e 94 2d 08 	call	0x105a	; 0x105a <USART_voidEnableRxINT>
		//Call locker Control Function
		void_Locker();
     43a:	0e 94 ac 00 	call	0x158	; 0x158 <void_Locker>
		//Call Temperature Sensor Control Function
		TempSensor();
     43e:	0e 94 49 00 	call	0x92	; 0x92 <TempSensor>
     442:	f7 cf       	rjmp	.-18     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>

00000444 <USART_voidProcessCommand>:
	}
	//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
	Servo_voidInit();
}

ConditionsState USART_voidProcessCommand(u8 command,u8 Local_LightNum) {
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	c8 2f       	mov	r28, r24
     44a:	d6 2f       	mov	r29, r22
	ConditionsState Con_St = NoErrors; // Check Variable
	LCD_voidClearDisplay();
     44c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <LCD_voidClearDisplay>
	//Check Command to turn Light on or off
	if (command=='1') {
     450:	c1 33       	cpi	r28, 0x31	; 49
     452:	c9 f4       	brne	.+50     	; 0x486 <USART_voidProcessCommand+0x42>
		// Turning ON ROOM 1 LIGHT
		DIO_voidSetPinValue(DIO_PORTC,Local_LightNum,DIO_HIGH);
     454:	41 e0       	ldi	r20, 0x01	; 1
     456:	6d 2f       	mov	r22, r29
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
		LCD_voidSendString("ROOM ");
     45e:	8d ee       	ldi	r24, 0xED	; 237
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_voidSendString>
		// display the room number
		LCD_voidSendNumber(Local_LightNum-4);
     466:	6d 2f       	mov	r22, r29
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	64 50       	subi	r22, 0x04	; 4
     46c:	71 09       	sbc	r23, r1
     46e:	07 2e       	mov	r0, r23
     470:	00 0c       	add	r0, r0
     472:	88 0b       	sbc	r24, r24
     474:	99 0b       	sbc	r25, r25
     476:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_voidSendNumber>
		LCD_voidSendString(" is ON");
     47a:	83 ef       	ldi	r24, 0xF3	; 243
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_voidSendString>
		Con_St = ROOM_LIGHT_ON;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	1c c0       	rjmp	.+56     	; 0x4be <USART_voidProcessCommand+0x7a>
	}
	else if ( command=='0') {
     486:	c0 33       	cpi	r28, 0x30	; 48
     488:	c9 f4       	brne	.+50     	; 0x4bc <USART_voidProcessCommand+0x78>
		// Turning OFF ROOM 1 LIGHT
		DIO_voidSetPinValue(DIO_PORTC,Local_LightNum,DIO_LOW);
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	6d 2f       	mov	r22, r29
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
		LCD_voidSendString("ROOM ");
     494:	8d ee       	ldi	r24, 0xED	; 237
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_voidSendString>
		// display the room number
		LCD_voidSendNumber(Local_LightNum-4);
     49c:	6d 2f       	mov	r22, r29
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	64 50       	subi	r22, 0x04	; 4
     4a2:	71 09       	sbc	r23, r1
     4a4:	07 2e       	mov	r0, r23
     4a6:	00 0c       	add	r0, r0
     4a8:	88 0b       	sbc	r24, r24
     4aa:	99 0b       	sbc	r25, r25
     4ac:	0e 94 9d 04 	call	0x93a	; 0x93a <LCD_voidSendNumber>
		LCD_voidSendString(" is OFF");
     4b0:	8a ef       	ldi	r24, 0xFA	; 250
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_voidSendString>
		Con_St = ROOM_LIGHT_OFF;
     4b8:	82 e0       	ldi	r24, 0x02	; 2
     4ba:	01 c0       	rjmp	.+2      	; 0x4be <USART_voidProcessCommand+0x7a>
	}
	else{ // IF input is not 0 nor 1 ==> INCORRECT INP
		Con_St = Input_Format_Is_Incorrect;
     4bc:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Con_St;
}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <USART_Start>:
	TIMER_delay_ms(300);
	// combine the high and low byte
	Global_u16EPROMDoorPass= ( (u16)(Global_u8SavedDoorPassHighByte<<8) )| Global_u8SavedDoorPassLowByte;
}

void USART_Start(void){
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <USART_Start+0x12>
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <USART_Start+0x14>
     4d8:	00 d0       	rcall	.+0      	; 0x4da <USART_Start+0x16>
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
	//Save First Receieved Input AS It MUST be '*' If not return from function
	u8 FirstReceived = USART_u8ReceiverData();
     4de:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <USART_u8ReceiverData>
	if(FirstReceived!='*')
     4e2:	8a 32       	cpi	r24, 0x2A	; 42
     4e4:	09 f0       	breq	.+2      	; 0x4e8 <USART_Start+0x24>
     4e6:	81 c0       	rjmp	.+258    	; 0x5ea <USART_Start+0x126>
		return;
	//Start Display Message
	USART_voidTransmitString("Expected INP Format \" *i*x*x# \" :\r");
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	0e 94 12 08 	call	0x1024	; 0x1024 <USART_voidTransmitString>

	//Display first '*'
	USART_voidTransmitData(FirstReceived);
     4f0:	8a e2       	ldi	r24, 0x2A	; 42
     4f2:	0e 94 dd 07 	call	0xfba	; 0xfba <USART_voidTransmitData>

	//Clear LCD to Start Displaying on it
	LCD_voidClearDisplay();
     4f6:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <LCD_voidClearDisplay>
	LCD_voidSendData('*');
     4fa:	8a e2       	ldi	r24, 0x2A	; 42
     4fc:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_voidSendData>
     500:	8e 01       	movw	r16, r28
     502:	0f 5f       	subi	r16, 0xFF	; 255
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	6e 01       	movw	r12, r28
     508:	87 e0       	ldi	r24, 0x07	; 7
     50a:	c8 0e       	add	r12, r24
     50c:	d1 1c       	adc	r13, r1

	// Loop until reaching Max val of Input, if stucked Timer will INT and Time out
	while (Max_Num) {
		 //Receive data element by element
		 TimeOut TimeOut_Err=100;
		 TimeOut_Err = USART_u8TimeOUTReceiverData(&DataReceived[DataIdx]);
     50e:	78 01       	movw	r14, r16
     510:	c8 01       	movw	r24, r16
     512:	0e 94 e6 07 	call	0xfcc	; 0xfcc <USART_u8TimeOUTReceiverData>
		//DataReceived[DataIdx] = USART_u8ReceiverData();
		if(TimeOut_Err == TimeOUT_Occured){
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	79 f4       	brne	.+30     	; 0x538 <USART_Start+0x74>
			 * 1- SET TCNT1 with 0 before initializing timer
			 * 2- SET Comparing Value by TIMEOUTVALUE Macro  e.g. 40000====> 5.12 sec "time waiting before time out"
			 * 3- Initialize Timer with 1024 Prescaler
			 */
			//Sending Warning Message if TIMEOUT and return from function
			USART_voidTransmitData('\r');
     51a:	8d e0       	ldi	r24, 0x0D	; 13
     51c:	0e 94 dd 07 	call	0xfba	; 0xfba <USART_voidTransmitData>
			USART_voidTransmitString("##ERROR: Time Out");
     520:	85 e2       	ldi	r24, 0x25	; 37
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 12 08 	call	0x1024	; 0x1024 <USART_voidTransmitString>
			USART_voidTransmitData('\r');
     528:	8d e0       	ldi	r24, 0x0D	; 13
     52a:	0e 94 dd 07 	call	0xfba	; 0xfba <USART_voidTransmitData>
			//Clear LCD
			LCD_voidClearDisplay();
     52e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <LCD_voidClearDisplay>
			//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
			Servo_voidInit();
     532:	0e 94 bc 04 	call	0x978	; 0x978 <Servo_voidInit>
			return;
     536:	59 c0       	rjmp	.+178    	; 0x5ea <USART_Start+0x126>
		}
		//Send Received Data to Display it on Virtual Terminal
		USART_voidTransmitData(DataReceived[DataIdx] );
     538:	f8 01       	movw	r30, r16
     53a:	81 91       	ld	r24, Z+
     53c:	8f 01       	movw	r16, r30
     53e:	0e 94 dd 07 	call	0xfba	; 0xfba <USART_voidTransmitData>
		//Display Data on LCD
		LCD_voidSendData(DataReceived[DataIdx]);
     542:	f7 01       	movw	r30, r14
     544:	80 81       	ld	r24, Z
     546:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_voidSendData>
		//Increment Idx
		DataIdx++;
		//Decrement Max_Num only to loop Max_Num Inside While LOOP
		Max_Num --;
		//Set Timer Counter to 0 with Each Entered Input
		TIMER_voidTimer1SetPreloadValue(0);
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 bc 06 	call	0xd78	; 0xd78 <TIMER_voidTimer1SetPreloadValue>

	//Containing max enter value
	u8 Max_Num = INPUT_DECIDED_LENGTH-1;

	// Loop until reaching Max val of Input, if stucked Timer will INT and Time out
	while (Max_Num) {
     552:	0c 15       	cp	r16, r12
     554:	1d 05       	cpc	r17, r13
     556:	d9 f6       	brne	.-74     	; 0x50e <USART_Start+0x4a>
		//Set Timer Counter to 0 with Each Entered Input
		TIMER_voidTimer1SetPreloadValue(0);
			}

	//Display Enter in the terminal
	USART_voidTransmitData('\r');
     558:	8d e0       	ldi	r24, 0x0D	; 13
     55a:	0e 94 dd 07 	call	0xfba	; 0xfba <USART_voidTransmitData>

	//Checking Input Format
	ConditionsState Con_St=NoErrors;
	//Check all input Defined values * and i and * and * and #
	if(DataReceived[0]!='i' || DataReceived[1]!='*' || DataReceived[3]!='*' || DataReceived[5]!='#'){
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	89 36       	cpi	r24, 0x69	; 105
     562:	49 f4       	brne	.+18     	; 0x576 <USART_Start+0xb2>
     564:	8a 81       	ldd	r24, Y+2	; 0x02
     566:	8a 32       	cpi	r24, 0x2A	; 42
     568:	31 f4       	brne	.+12     	; 0x576 <USART_Start+0xb2>
     56a:	8c 81       	ldd	r24, Y+4	; 0x04
     56c:	8a 32       	cpi	r24, 0x2A	; 42
     56e:	19 f4       	brne	.+6      	; 0x576 <USART_Start+0xb2>
     570:	8e 81       	ldd	r24, Y+6	; 0x06
     572:	83 32       	cpi	r24, 0x23	; 35
     574:	39 f0       	breq	.+14     	; 0x584 <USART_Start+0xc0>
		Con_St = Input_Format_Is_Incorrect;
		USART_voidTransmitString("##INCORRECT INPUT FORMAT\r");
     576:	87 e3       	ldi	r24, 0x37	; 55
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	0e 94 12 08 	call	0x1024	; 0x1024 <USART_voidTransmitString>
		//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
		Servo_voidInit();
     57e:	0e 94 bc 04 	call	0x978	; 0x978 <Servo_voidInit>
		return;
     582:	33 c0       	rjmp	.+102    	; 0x5ea <USART_Start+0x126>
	}
	// Check First Undefined Val to be 1 or 2 or 3
	// also, sending it to USART_voidProcessCommand to light correct led
	// Receiving return value as indicator to incorrect second undefined Val
	if(DataReceived[2]=='1')
     584:	8b 81       	ldd	r24, Y+3	; 0x03
     586:	81 33       	cpi	r24, 0x31	; 49
     588:	31 f4       	brne	.+12     	; 0x596 <USART_Start+0xd2>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT1);
     58a:	65 e0       	ldi	r22, 0x05	; 5
     58c:	8d 81       	ldd	r24, Y+5	; 0x05
     58e:	0e 94 22 02 	call	0x444	; 0x444 <USART_voidProcessCommand>
     592:	18 2f       	mov	r17, r24
     594:	0f c0       	rjmp	.+30     	; 0x5b4 <USART_Start+0xf0>
	else if(DataReceived[2]=='2')
     596:	82 33       	cpi	r24, 0x32	; 50
     598:	31 f4       	brne	.+12     	; 0x5a6 <USART_Start+0xe2>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT2);
     59a:	66 e0       	ldi	r22, 0x06	; 6
     59c:	8d 81       	ldd	r24, Y+5	; 0x05
     59e:	0e 94 22 02 	call	0x444	; 0x444 <USART_voidProcessCommand>
     5a2:	18 2f       	mov	r17, r24
     5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <USART_Start+0xf0>
	else if (DataReceived[2]=='3')
     5a6:	83 33       	cpi	r24, 0x33	; 51
     5a8:	39 f4       	brne	.+14     	; 0x5b8 <USART_Start+0xf4>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT3);
     5aa:	67 e0       	ldi	r22, 0x07	; 7
     5ac:	8d 81       	ldd	r24, Y+5	; 0x05
     5ae:	0e 94 22 02 	call	0x444	; 0x444 <USART_voidProcessCommand>
     5b2:	18 2f       	mov	r17, r24
	else// If First Undefined Val is not correct
		Con_St = Input_Format_Is_Incorrect;
	//Check on Con_St Condition
	if(Con_St == Input_Format_Is_Incorrect)//There's an Error in the Format Entered
     5b4:	13 30       	cpi	r17, 0x03	; 3
     5b6:	29 f4       	brne	.+10     	; 0x5c2 <USART_Start+0xfe>
		USART_voidTransmitString("##INCORRECT ROOM Num or State\r");
     5b8:	81 e5       	ldi	r24, 0x51	; 81
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 12 08 	call	0x1024	; 0x1024 <USART_voidTransmitString>
     5c0:	12 c0       	rjmp	.+36     	; 0x5e6 <USART_Start+0x122>
	else{//Check is Completed and there's no Error
		USART_voidTransmitString("ROOM ");
     5c2:	8d ee       	ldi	r24, 0xED	; 237
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	0e 94 12 08 	call	0x1024	; 0x1024 <USART_voidTransmitString>
		USART_voidTransmitData(DataReceived[2]);
     5ca:	8b 81       	ldd	r24, Y+3	; 0x03
     5cc:	0e 94 dd 07 	call	0xfba	; 0xfba <USART_voidTransmitData>
		if(Con_St==ROOM_LIGHT_ON)
     5d0:	11 30       	cpi	r17, 0x01	; 1
     5d2:	29 f4       	brne	.+10     	; 0x5de <USART_Start+0x11a>
			USART_voidTransmitString(" Light Is ON\r");
     5d4:	80 e7       	ldi	r24, 0x70	; 112
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	0e 94 12 08 	call	0x1024	; 0x1024 <USART_voidTransmitString>
     5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <USART_Start+0x122>
		else
			USART_voidTransmitString(" Light Is OFF\r");
     5de:	8e e7       	ldi	r24, 0x7E	; 126
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 12 08 	call	0x1024	; 0x1024 <USART_voidTransmitString>
	}
	//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
	Servo_voidInit();
     5e6:	0e 94 bc 04 	call	0x978	; 0x978 <Servo_voidInit>
}
     5ea:	26 96       	adiw	r28, 0x06	; 6
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	08 95       	ret

00000608 <EEPROM_voidSendDataByte>:

#include "../../MCAL/TWI_Driver/TWI_interface.h"
#include "EPROM_interface.h"

void EEPROM_voidSendDataByte(u8 Copy_u8DataByte,u16 Copy_u16LocationAddress)
{	u8 Address = ((0b1010<<3) | (A2<<2) | (Copy_u16LocationAddress>>8));
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	c8 2f       	mov	r28, r24
     610:	d6 2f       	mov	r29, r22
     612:	17 2f       	mov	r17, r23

	TWI_SendStartCondition();
     614:	0e 94 6f 07 	call	0xede	; 0xede <TWI_SendStartCondition>
	TWI_SendSlaveAddressWithWrite(Address);
     618:	81 2f       	mov	r24, r17
     61a:	80 65       	ori	r24, 0x50	; 80
     61c:	0e 94 90 07 	call	0xf20	; 0xf20 <TWI_SendSlaveAddressWithWrite>
	//TWI_SendSlaveAddressWithWrite(0b1010000);/**/

	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
     620:	8d 2f       	mov	r24, r29
     622:	0e 94 b0 07 	call	0xf60	; 0xf60 <TWI_MasterWriteDataByte>
	TWI_MasterWriteDataByte(Copy_u8DataByte);
     626:	8c 2f       	mov	r24, r28
     628:	0e 94 b0 07 	call	0xf60	; 0xf60 <TWI_MasterWriteDataByte>
	TWI_SendStopCondition();
     62c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <TWI_SendStopCondition>
}
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	08 95       	ret

00000638 <EEPROM_voidReadDataByte>:

void EEPROM_voidReadDataByte(u8 *Copy_u8DataByte,u16 Copy_u16LocationAddress)
{	u8 Address = ((0b1010<<3) | (A2<<2) | (Copy_u16LocationAddress>>8));
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	8c 01       	movw	r16, r24
     642:	d6 2f       	mov	r29, r22
     644:	c7 2f       	mov	r28, r23
     646:	c0 65       	ori	r28, 0x50	; 80
	TWI_SendStartCondition();
     648:	0e 94 6f 07 	call	0xede	; 0xede <TWI_SendStartCondition>
	TWI_SendSlaveAddressWithWrite(Address);
     64c:	8c 2f       	mov	r24, r28
     64e:	0e 94 90 07 	call	0xf20	; 0xf20 <TWI_SendSlaveAddressWithWrite>
	//TWI_SendSlaveAddressWithWrite(0b1010000);

	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
     652:	8d 2f       	mov	r24, r29
     654:	0e 94 b0 07 	call	0xf60	; 0xf60 <TWI_MasterWriteDataByte>

	TWI_SendRepeatedStart();
     658:	0e 94 7f 07 	call	0xefe	; 0xefe <TWI_SendRepeatedStart>

	//TWI_MasterWriteDataByte(0b10100001);/**/
	TWI_SendSlaveAddressWithRead(Address);
     65c:	8c 2f       	mov	r24, r28
     65e:	0e 94 a0 07 	call	0xf40	; 0xf40 <TWI_SendSlaveAddressWithRead>
	TWI_MasterReadDataByte(Copy_u8DataByte);
     662:	c8 01       	movw	r24, r16
     664:	0e 94 ba 07 	call	0xf74	; 0xf74 <TWI_MasterReadDataByte>
	TWI_SendStopCondition();
     668:	0e 94 ce 07 	call	0xf9c	; 0xf9c <TWI_SendStopCondition>
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	1f 91       	pop	r17
     672:	0f 91       	pop	r16
     674:	08 95       	ret

00000676 <KPD_voidInit>:
			
void KPD_voidInit(){
	
	
	// set col s output high
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL0_PIN,DIO_OUTPUT);
     676:	41 e0       	ldi	r20, 0x01	; 1
     678:	62 e0       	ldi	r22, 0x02	; 2
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL1_PIN,DIO_OUTPUT);
     680:	41 e0       	ldi	r20, 0x01	; 1
     682:	63 e0       	ldi	r22, 0x03	; 3
     684:	82 e0       	ldi	r24, 0x02	; 2
     686:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL2_PIN,DIO_OUTPUT);
     68a:	41 e0       	ldi	r20, 0x01	; 1
     68c:	64 e0       	ldi	r22, 0x04	; 4
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DIO_voidSetPinDirection>
	//DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL3_PIN,DIO_OUTPUT);

	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL0_PIN,DIO_HIGH);
     694:	41 e0       	ldi	r20, 0x01	; 1
     696:	62 e0       	ldi	r22, 0x02	; 2
     698:	82 e0       	ldi	r24, 0x02	; 2
     69a:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL1_PIN,DIO_HIGH);
     69e:	41 e0       	ldi	r20, 0x01	; 1
     6a0:	63 e0       	ldi	r22, 0x03	; 3
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL2_PIN,DIO_HIGH);
     6a8:	41 e0       	ldi	r20, 0x01	; 1
     6aa:	64 e0       	ldi	r22, 0x04	; 4
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL3_PIN,DIO_HIGH);

	// set rows input pull up
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_INPUT);
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	61 e0       	ldi	r22, 0x01	; 1
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_INPUT);
     6bc:	40 e0       	ldi	r20, 0x00	; 0
     6be:	62 e0       	ldi	r22, 0x02	; 2
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_INPUT);
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	63 e0       	ldi	r22, 0x03	; 3
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_INPUT);
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	64 e0       	ldi	r22, 0x04	; 4
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_HIGH);
     6da:	41 e0       	ldi	r20, 0x01	; 1
     6dc:	61 e0       	ldi	r22, 0x01	; 1
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_HIGH);
     6e4:	41 e0       	ldi	r20, 0x01	; 1
     6e6:	62 e0       	ldi	r22, 0x02	; 2
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_HIGH);
     6ee:	41 e0       	ldi	r20, 0x01	; 1
     6f0:	63 e0       	ldi	r22, 0x03	; 3
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_HIGH);
     6f8:	41 e0       	ldi	r20, 0x01	; 1
     6fa:	64 e0       	ldi	r22, 0x04	; 4
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
     702:	08 95       	ret

00000704 <KPD_u8GetPressedKey>:

}

u8 KPD_u8GetPressedKey(void){
     704:	4f 92       	push	r4
     706:	5f 92       	push	r5
     708:	6f 92       	push	r6
     70a:	7f 92       	push	r7
     70c:	8f 92       	push	r8
     70e:	9f 92       	push	r9
     710:	af 92       	push	r10
     712:	bf 92       	push	r11
     714:	cf 92       	push	r12
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	63 97       	sbiw	r28, 0x13	; 19
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8Pressedkey= KPD_NO_PRESS;
	u8 Local_u8RowxValue ;


	u8 Local_u8ColumnsArray[]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN};
     734:	22 e0       	ldi	r18, 0x02	; 2
     736:	29 83       	std	Y+1, r18	; 0x01
     738:	93 e0       	ldi	r25, 0x03	; 3
     73a:	9a 83       	std	Y+2, r25	; 0x02
     73c:	84 e0       	ldi	r24, 0x04	; 4
     73e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
     740:	31 e0       	ldi	r19, 0x01	; 1
     742:	3c 83       	std	Y+4, r19	; 0x04
     744:	2d 83       	std	Y+5, r18	; 0x05
     746:	9e 83       	std	Y+6, r25	; 0x06
     748:	8f 83       	std	Y+7, r24	; 0x07

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;
     74a:	8c e0       	ldi	r24, 0x0C	; 12
     74c:	e2 e6       	ldi	r30, 0x62	; 98
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	de 01       	movw	r26, r28
     752:	18 96       	adiw	r26, 0x08	; 8
     754:	01 90       	ld	r0, Z+
     756:	0d 92       	st	X+, r0
     758:	8a 95       	dec	r24
     75a:	e1 f7       	brne	.-8      	; 0x754 <KPD_u8GetPressedKey+0x50>
     75c:	ce 01       	movw	r24, r28
     75e:	01 96       	adiw	r24, 0x01	; 1
     760:	4c 01       	movw	r8, r24
     762:	a1 2c       	mov	r10, r1
     764:	b1 2c       	mov	r11, r1


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);
     766:	35 01       	movw	r6, r10
     768:	f4 01       	movw	r30, r8
     76a:	41 90       	ld	r4, Z+
     76c:	4f 01       	movw	r8, r30
     76e:	40 e0       	ldi	r20, 0x00	; 0
     770:	64 2d       	mov	r22, r4
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
     778:	7e 01       	movw	r14, r28
     77a:	f4 e0       	ldi	r31, 0x04	; 4
     77c:	ef 0e       	add	r14, r31
     77e:	f1 1c       	adc	r15, r1
     780:	00 e0       	ldi	r16, 0x00	; 0
     782:	10 e0       	ldi	r17, 0x00	; 0

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){

			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
     784:	68 01       	movw	r12, r16
     786:	f7 01       	movw	r30, r14
     788:	51 90       	ld	r5, Z+
     78a:	7f 01       	movw	r14, r30
     78c:	65 2d       	mov	r22, r5
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <DIO_u8GetPinValue>

			if(Local_u8RowxValue==0){
     794:	81 11       	cpse	r24, r1
     796:	17 c0       	rjmp	.+46     	; 0x7c6 <KPD_u8GetPressedKey+0xc2>

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
     798:	c8 01       	movw	r24, r16
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	c8 0e       	add	r12, r24
     7a0:	d9 1e       	adc	r13, r25
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	8c 0f       	add	r24, r28
     7a8:	9d 1f       	adc	r25, r29
     7aa:	c8 0e       	add	r12, r24
     7ac:	d9 1e       	adc	r13, r25
     7ae:	f6 01       	movw	r30, r12
     7b0:	e6 0d       	add	r30, r6
     7b2:	f7 1d       	adc	r31, r7
     7b4:	17 81       	ldd	r17, Z+7	; 0x07
				while(Local_u8RowxValue==0){
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
     7b6:	65 2d       	mov	r22, r5
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <DIO_u8GetPinValue>
			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

			if(Local_u8RowxValue==0){

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
				while(Local_u8RowxValue==0){
     7be:	88 23       	and	r24, r24
     7c0:	d1 f3       	breq	.-12     	; 0x7b6 <KPD_u8GetPressedKey+0xb2>
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

				}

				return Local_u8Pressedkey ;
     7c2:	81 2f       	mov	r24, r17
     7c4:	13 c0       	rjmp	.+38     	; 0x7ec <KPD_u8GetPressedKey+0xe8>
     7c6:	0f 5f       	subi	r16, 0xFF	; 255
     7c8:	1f 4f       	sbci	r17, 0xFF	; 255

	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){
     7ca:	04 30       	cpi	r16, 0x04	; 4
     7cc:	11 05       	cpc	r17, r1
     7ce:	d1 f6       	brne	.-76     	; 0x784 <KPD_u8GetPressedKey+0x80>
			}


		}

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_HIGH);
     7d0:	41 e0       	ldi	r20, 0x01	; 1
     7d2:	64 2d       	mov	r22, r4
     7d4:	82 e0       	ldi	r24, 0x02	; 2
     7d6:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
     7da:	9f ef       	ldi	r25, 0xFF	; 255
     7dc:	a9 1a       	sub	r10, r25
     7de:	b9 0a       	sbc	r11, r25
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){
     7e0:	e3 e0       	ldi	r30, 0x03	; 3
     7e2:	ae 16       	cp	r10, r30
     7e4:	b1 04       	cpc	r11, r1
     7e6:	09 f0       	breq	.+2      	; 0x7ea <KPD_u8GetPressedKey+0xe6>
     7e8:	be cf       	rjmp	.-132    	; 0x766 <KPD_u8GetPressedKey+0x62>


	}


	return Local_u8Pressedkey ;
     7ea:	8a ea       	ldi	r24, 0xAA	; 170
     7ec:	63 96       	adiw	r28, 0x13	; 19
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	ff 90       	pop	r15
     802:	ef 90       	pop	r14
     804:	df 90       	pop	r13
     806:	cf 90       	pop	r12
     808:	bf 90       	pop	r11
     80a:	af 90       	pop	r10
     80c:	9f 90       	pop	r9
     80e:	8f 90       	pop	r8
     810:	7f 90       	pop	r7
     812:	6f 90       	pop	r6
     814:	5f 90       	pop	r5
     816:	4f 90       	pop	r4
     818:	08 95       	ret

0000081a <LCD_voidSendData>:
		LCD_voidSendCommand(0b00000010);
		Local_u8AddressCounter=0;
		
	}
	else
		Local_u8AddressCounter++;
     81a:	cf 93       	push	r28
     81c:	c8 2f       	mov	r28, r24
     81e:	41 e0       	ldi	r20, 0x01	; 1
     820:	65 e0       	ldi	r22, 0x05	; 5
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	66 e0       	ldi	r22, 0x06	; 6
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
     832:	6c 2f       	mov	r22, r28
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	0e 94 6a 05 	call	0xad4	; 0xad4 <DIO_voidSetPortValue>
     83a:	41 e0       	ldi	r20, 0x01	; 1
     83c:	67 e0       	ldi	r22, 0x07	; 7
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
     844:	8f e9       	ldi	r24, 0x9F	; 159
     846:	9f e0       	ldi	r25, 0x0F	; 15
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <LCD_voidSendData+0x2e>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <LCD_voidSendData+0x34>
     84e:	00 00       	nop
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	67 e0       	ldi	r22, 0x07	; 7
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <LCD_voidSendCommand>:
     85e:	cf 93       	push	r28
     860:	c8 2f       	mov	r28, r24
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	65 e0       	ldi	r22, 0x05	; 5
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	66 e0       	ldi	r22, 0x06	; 6
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
     876:	6c 2f       	mov	r22, r28
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	0e 94 6a 05 	call	0xad4	; 0xad4 <DIO_voidSetPortValue>
     87e:	41 e0       	ldi	r20, 0x01	; 1
     880:	67 e0       	ldi	r22, 0x07	; 7
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
     888:	8f e9       	ldi	r24, 0x9F	; 159
     88a:	9f e0       	ldi	r25, 0x0F	; 15
     88c:	01 97       	sbiw	r24, 0x01	; 1
     88e:	f1 f7       	brne	.-4      	; 0x88c <__stack+0x2d>
     890:	00 c0       	rjmp	.+0      	; 0x892 <__stack+0x33>
     892:	00 00       	nop
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	67 e0       	ldi	r22, 0x07	; 7
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	0e 94 2c 05 	call	0xa58	; 0xa58 <DIO_voidSetPinValue>
     89e:	cf 91       	pop	r28
     8a0:	08 95       	ret

000008a2 <LCD_voidInit>:
     8a2:	6f ef       	ldi	r22, 0xFF	; 255
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	0e 94 5a 05 	call	0xab4	; 0xab4 <DIO_voidSetPortDirection>
     8aa:	41 e0       	ldi	r20, 0x01	; 1
     8ac:	65 e0       	ldi	r22, 0x05	; 5
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DIO_voidSetPinDirection>
     8b4:	41 e0       	ldi	r20, 0x01	; 1
     8b6:	66 e0       	ldi	r22, 0x06	; 6
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DIO_voidSetPinDirection>
     8be:	41 e0       	ldi	r20, 0x01	; 1
     8c0:	67 e0       	ldi	r22, 0x07	; 7
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	0e 94 fe 04 	call	0x9fc	; 0x9fc <DIO_voidSetPinDirection>
     8c8:	2f ef       	ldi	r18, 0xFF	; 255
     8ca:	89 ef       	ldi	r24, 0xF9	; 249
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	21 50       	subi	r18, 0x01	; 1
     8d0:	80 40       	sbci	r24, 0x00	; 0
     8d2:	90 40       	sbci	r25, 0x00	; 0
     8d4:	e1 f7       	brne	.-8      	; 0x8ce <LCD_voidInit+0x2c>
     8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <LCD_voidInit+0x36>
     8d8:	00 00       	nop
     8da:	88 e3       	ldi	r24, 0x38	; 56
     8dc:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_voidSendCommand>
     8e0:	8c e0       	ldi	r24, 0x0C	; 12
     8e2:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_voidSendCommand>
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_voidSendCommand>
     8ec:	86 e0       	ldi	r24, 0x06	; 6
     8ee:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_voidSendCommand>
     8f2:	08 95       	ret

000008f4 <LCD_voidClearDisplay>:
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_voidSendCommand>
     8fa:	08 95       	ret

000008fc <LCD_voidGoTOXY>:
     8fc:	90 e4       	ldi	r25, 0x40	; 64
     8fe:	89 9f       	mul	r24, r25
     900:	60 0d       	add	r22, r0
     902:	11 24       	eor	r1, r1
     904:	86 2f       	mov	r24, r22
     906:	80 68       	ori	r24, 0x80	; 128
     908:	0e 94 2f 04 	call	0x85e	; 0x85e <LCD_voidSendCommand>
     90c:	08 95       	ret

0000090e <LCD_voidSendString>:
		
		
}

void LCD_voidSendString(u8* Copy_pcString)
{
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	fc 01       	movw	r30, r24
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
     916:	80 81       	ld	r24, Z
     918:	88 23       	and	r24, r24
     91a:	59 f0       	breq	.+22     	; 0x932 <LCD_voidSendString+0x24>
     91c:	8f 01       	movw	r16, r30
     91e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
     920:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_voidSendData>
		Local_u8Index++;
     924:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_voidSendString(u8* Copy_pcString)
{
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
     926:	f8 01       	movw	r30, r16
     928:	ec 0f       	add	r30, r28
     92a:	f1 1d       	adc	r31, r1
     92c:	80 81       	ld	r24, Z
     92e:	81 11       	cpse	r24, r1
     930:	f7 cf       	rjmp	.-18     	; 0x920 <LCD_voidSendString+0x12>
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
		Local_u8Index++;
	}
}
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	08 95       	ret

0000093a <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	2a 97       	sbiw	r28, 0x0a	; 10
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	de bf       	out	0x3e, r29	; 62
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	cd bf       	out	0x3d, r28	; 61
     94e:	dc 01       	movw	r26, r24
     950:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     952:	4a e0       	ldi	r20, 0x0A	; 10
     954:	be 01       	movw	r22, r28
     956:	6f 5f       	subi	r22, 0xFF	; 255
     958:	7f 4f       	sbci	r23, 0xFF	; 255
     95a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__itoa_ncheck>
	u8 Local_u8Str[10];
	itoa(Copy_u32Number, Local_u8Str,10);
	LCD_voidSendString(Local_u8Str);
     95e:	ce 01       	movw	r24, r28
     960:	01 96       	adiw	r24, 0x01	; 1
     962:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_voidSendString>

}
     966:	2a 96       	adiw	r28, 0x0a	; 10
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	cd bf       	out	0x3d, r28	; 61
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <Servo_voidInit>:

#include"../../MCAL/TIMER_Driver/TIMER_Interface.h"
 u16 Ticks=0;
 void Servo_voidInit(void){
	 //Using Timer 1 PWM Mode,  prescaller 8 ==>010
		TIMER_voidTimer1Init(PWM,10);
     978:	6a e0       	ldi	r22, 0x0A	; 10
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	0e 94 48 06 	call	0xc90	; 0xc90 <TIMER_voidTimer1Init>
	 // Servo Total time = 20ms
		TIMER_voidSetOverFlow(20000);
     980:	80 e2       	ldi	r24, 0x20	; 32
     982:	9e e4       	ldi	r25, 0x4E	; 78
     984:	0e 94 b6 06 	call	0xd6c	; 0xd6c <TIMER_voidSetOverFlow>
     988:	08 95       	ret

0000098a <Servo_voidDegree>:

void Servo_voidDegree(u8 Copy_u8Degree){
	if(Copy_u8Degree>180)
		Copy_u8Degree = 180;
	f32 Ton = (1/180.0) * Copy_u8Degree + 1;
	Ticks = Ton * 1000;
     98a:	85 3b       	cpi	r24, 0xB5	; 181
     98c:	08 f0       	brcs	.+2      	; 0x990 <Servo_voidDegree+0x6>
     98e:	84 eb       	ldi	r24, 0xB4	; 180
     990:	68 2f       	mov	r22, r24
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__floatsisf>
     99c:	21 e6       	ldi	r18, 0x61	; 97
     99e:	3b e0       	ldi	r19, 0x0B	; 11
     9a0:	46 eb       	ldi	r20, 0xB6	; 182
     9a2:	5b e3       	ldi	r21, 0x3B	; 59
     9a4:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__mulsf3>
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 e8       	ldi	r20, 0x80	; 128
     9ae:	5f e3       	ldi	r21, 0x3F	; 63
     9b0:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__addsf3>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	4a e7       	ldi	r20, 0x7A	; 122
     9ba:	54 e4       	ldi	r21, 0x44	; 68
     9bc:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__mulsf3>
     9c0:	0e 94 37 09 	call	0x126e	; 0x126e <__fixunssfsi>
     9c4:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <Ticks+0x1>
     9c8:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <Ticks>
	TIMER_voidTimer1ChannelASetCompareValue(Ticks);
     9cc:	cb 01       	movw	r24, r22
     9ce:	0e 94 b9 06 	call	0xd72	; 0xd72 <TIMER_voidTimer1ChannelASetCompareValue>
     9d2:	08 95       	ret

000009d4 <ADC_voidInit>:
	2- 8bit res --> left adjustment
	3- prescaler
	4- enable ADC
	*/
	// use AVCC
	SET_BIT(ADMUX,6);
     9d4:	3e 9a       	sbi	0x07, 6	; 7
	CLR_BIT(ADMUX,7);
     9d6:	3f 98       	cbi	0x07, 7	; 7
	// left adjust
	SET_BIT(ADMUX,5);
     9d8:	3d 9a       	sbi	0x07, 5	; 7
	// prescaler  --> /64
	CLR_BIT(ADCSRA,0);
     9da:	30 98       	cbi	0x06, 0	; 6
	SET_BIT(ADCSRA,1);
     9dc:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,2);
     9de:	32 9a       	sbi	0x06, 2	; 6
	// enable 
	SET_BIT(ADCSRA,7);
     9e0:	37 9a       	sbi	0x06, 7	; 6
     9e2:	08 95       	ret

000009e4 <ADC_u8StartConversion>:
	
}

u8 ADC_u8StartConversion(u8 Copy_u8ChannelNumber){
	// channel select
	ADMUX &= 0b11100000;
     9e4:	97 b1       	in	r25, 0x07	; 7
     9e6:	90 7e       	andi	r25, 0xE0	; 224
     9e8:	97 b9       	out	0x07, r25	; 7
	ADMUX |=Copy_u8ChannelNumber;
     9ea:	97 b1       	in	r25, 0x07	; 7
     9ec:	89 2b       	or	r24, r25
     9ee:	87 b9       	out	0x07, r24	; 7
	
	// start conversion
	SET_BIT(ADCSRA,6);
     9f0:	36 9a       	sbi	0x06, 6	; 6
	
	// wait until conversion complete
	// by checking the flag
	while(GET_BIT(ADCSRA,4)==0);
     9f2:	34 9b       	sbis	0x06, 4	; 6
     9f4:	fe cf       	rjmp	.-4      	; 0x9f2 <ADC_u8StartConversion+0xe>
	
	//clear flag 
	SET_BIT(ADCSRA,4);
     9f6:	34 9a       	sbi	0x06, 4	; 6
	
	return ADCH;
     9f8:	85 b1       	in	r24, 0x05	; 5
}
     9fa:	08 95       	ret

000009fc <DIO_voidSetPinDirection>:


void DIO_voidSetPinDirection(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinState ){

	volatile u8* Local_u8PTR_DDRx;
	switch(Copy_u8PortName){
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	49 f0       	breq	.+18     	; 0xa12 <DIO_voidSetPinDirection+0x16>
     a00:	28 f0       	brcs	.+10     	; 0xa0c <DIO_voidSetPinDirection+0x10>
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	49 f0       	breq	.+18     	; 0xa18 <DIO_voidSetPinDirection+0x1c>
     a06:	83 30       	cpi	r24, 0x03	; 3
     a08:	51 f0       	breq	.+20     	; 0xa1e <DIO_voidSetPinDirection+0x22>
     a0a:	0b c0       	rjmp	.+22     	; 0xa22 <DIO_voidSetPinDirection+0x26>

		case DIO_PORTA:
		Local_u8PTR_DDRx=&DDRA;
     a0c:	ea e3       	ldi	r30, 0x3A	; 58
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	08 c0       	rjmp	.+16     	; 0xa22 <DIO_voidSetPinDirection+0x26>
		break;
		case DIO_PORTB:
		Local_u8PTR_DDRx=&DDRB;
     a12:	e7 e3       	ldi	r30, 0x37	; 55
     a14:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     a16:	05 c0       	rjmp	.+10     	; 0xa22 <DIO_voidSetPinDirection+0x26>
		case DIO_PORTC:
		Local_u8PTR_DDRx=&DDRC;
     a18:	e4 e3       	ldi	r30, 0x34	; 52
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <DIO_voidSetPinDirection+0x26>
		case DIO_PORTD:
		Local_u8PTR_DDRx=&DDRD;
     a1e:	e1 e3       	ldi	r30, 0x31	; 49
     a20:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinState){
     a22:	44 23       	and	r20, r20
     a24:	69 f0       	breq	.+26     	; 0xa40 <DIO_voidSetPinDirection+0x44>
     a26:	41 30       	cpi	r20, 0x01	; 1
     a28:	b1 f4       	brne	.+44     	; 0xa56 <DIO_voidSetPinDirection+0x5a>

		case DIO_OUTPUT:
		SET_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
     a2a:	20 81       	ld	r18, Z
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <DIO_voidSetPinDirection+0x3a>
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	6a 95       	dec	r22
     a38:	e2 f7       	brpl	.-8      	; 0xa32 <DIO_voidSetPinDirection+0x36>
     a3a:	82 2b       	or	r24, r18
     a3c:	80 83       	st	Z, r24
		break;
     a3e:	08 95       	ret
		case DIO_INPUT:
		CLR_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
     a40:	20 81       	ld	r18, Z
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <DIO_voidSetPinDirection+0x50>
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	6a 95       	dec	r22
     a4e:	e2 f7       	brpl	.-8      	; 0xa48 <DIO_voidSetPinDirection+0x4c>
     a50:	80 95       	com	r24
     a52:	82 23       	and	r24, r18
     a54:	80 83       	st	Z, r24
     a56:	08 95       	ret

00000a58 <DIO_voidSetPinValue>:

}
void DIO_voidSetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinValue ){

	volatile u8* Local_u8PTR_PORTx;
	switch(Copy_u8PortName){
     a58:	81 30       	cpi	r24, 0x01	; 1
     a5a:	49 f0       	breq	.+18     	; 0xa6e <DIO_voidSetPinValue+0x16>
     a5c:	28 f0       	brcs	.+10     	; 0xa68 <DIO_voidSetPinValue+0x10>
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	49 f0       	breq	.+18     	; 0xa74 <DIO_voidSetPinValue+0x1c>
     a62:	83 30       	cpi	r24, 0x03	; 3
     a64:	51 f0       	breq	.+20     	; 0xa7a <DIO_voidSetPinValue+0x22>
     a66:	0b c0       	rjmp	.+22     	; 0xa7e <DIO_voidSetPinValue+0x26>

		case DIO_PORTA:
		Local_u8PTR_PORTx=&PORTA;
     a68:	eb e3       	ldi	r30, 0x3B	; 59
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	08 c0       	rjmp	.+16     	; 0xa7e <DIO_voidSetPinValue+0x26>
		break;
		case DIO_PORTB:
		Local_u8PTR_PORTx=&PORTB;
     a6e:	e8 e3       	ldi	r30, 0x38	; 56
     a70:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     a72:	05 c0       	rjmp	.+10     	; 0xa7e <DIO_voidSetPinValue+0x26>
		case DIO_PORTC:
		Local_u8PTR_PORTx=&PORTC;
     a74:	e5 e3       	ldi	r30, 0x35	; 53
     a76:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <DIO_voidSetPinValue+0x26>
		case DIO_PORTD:
		Local_u8PTR_PORTx=&PORTD;
     a7a:	e2 e3       	ldi	r30, 0x32	; 50
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinValue){
     a7e:	44 23       	and	r20, r20
     a80:	69 f0       	breq	.+26     	; 0xa9c <DIO_voidSetPinValue+0x44>
     a82:	41 30       	cpi	r20, 0x01	; 1
     a84:	b1 f4       	brne	.+44     	; 0xab2 <DIO_voidSetPinValue+0x5a>

		case DIO_HIGH:
		SET_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
     a86:	20 81       	ld	r18, Z
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <DIO_voidSetPinValue+0x3a>
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	6a 95       	dec	r22
     a94:	e2 f7       	brpl	.-8      	; 0xa8e <DIO_voidSetPinValue+0x36>
     a96:	82 2b       	or	r24, r18
     a98:	80 83       	st	Z, r24
		break;
     a9a:	08 95       	ret
		case DIO_LOW:
		CLR_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
     a9c:	20 81       	ld	r18, Z
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <DIO_voidSetPinValue+0x50>
     aa4:	88 0f       	add	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	6a 95       	dec	r22
     aaa:	e2 f7       	brpl	.-8      	; 0xaa4 <DIO_voidSetPinValue+0x4c>
     aac:	80 95       	com	r24
     aae:	82 23       	and	r24, r18
     ab0:	80 83       	st	Z, r24
     ab2:	08 95       	ret

00000ab4 <DIO_voidSetPortDirection>:

}

void DIO_voidSetPortDirection(u8 Copy_u8PortName ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	41 f0       	breq	.+16     	; 0xac8 <DIO_voidSetPortDirection+0x14>
     ab8:	28 f0       	brcs	.+10     	; 0xac4 <DIO_voidSetPortDirection+0x10>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	39 f0       	breq	.+14     	; 0xacc <DIO_voidSetPortDirection+0x18>
     abe:	83 30       	cpi	r24, 0x03	; 3
     ac0:	39 f0       	breq	.+14     	; 0xad0 <DIO_voidSetPortDirection+0x1c>
     ac2:	08 95       	ret

		case DIO_PORTA:
		DDRA=Copy_u8PortValue;
     ac4:	6a bb       	out	0x1a, r22	; 26
		break;
     ac6:	08 95       	ret
		case DIO_PORTB:
		DDRB=Copy_u8PortValue;
     ac8:	67 bb       	out	0x17, r22	; 23
		break;
     aca:	08 95       	ret
		case DIO_PORTC:
		DDRC=Copy_u8PortValue;
     acc:	64 bb       	out	0x14, r22	; 20
		break;
     ace:	08 95       	ret
		case DIO_PORTD:
		DDRD=Copy_u8PortValue;
     ad0:	61 bb       	out	0x11, r22	; 17
     ad2:	08 95       	ret

00000ad4 <DIO_voidSetPortValue>:
	}

}
void DIO_voidSetPortValue(u8 Copy_u8PortName  ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
     ad4:	81 30       	cpi	r24, 0x01	; 1
     ad6:	41 f0       	breq	.+16     	; 0xae8 <DIO_voidSetPortValue+0x14>
     ad8:	28 f0       	brcs	.+10     	; 0xae4 <DIO_voidSetPortValue+0x10>
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	39 f0       	breq	.+14     	; 0xaec <DIO_voidSetPortValue+0x18>
     ade:	83 30       	cpi	r24, 0x03	; 3
     ae0:	39 f0       	breq	.+14     	; 0xaf0 <DIO_voidSetPortValue+0x1c>
     ae2:	08 95       	ret

		case DIO_PORTA:
		PORTA=Copy_u8PortValue;
     ae4:	6b bb       	out	0x1b, r22	; 27
		break;
     ae6:	08 95       	ret
		case DIO_PORTB:
		PORTB=Copy_u8PortValue;
     ae8:	68 bb       	out	0x18, r22	; 24
		break;
     aea:	08 95       	ret
		case DIO_PORTC:
		PORTC=Copy_u8PortValue;
     aec:	65 bb       	out	0x15, r22	; 21
		break;
     aee:	08 95       	ret
		case DIO_PORTD:
		PORTD=Copy_u8PortValue;
     af0:	62 bb       	out	0x12, r22	; 18
     af2:	08 95       	ret

00000af4 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber){

	
	u8 Local_u8PinValue;
	switch(Copy_u8PortName){
     af4:	81 30       	cpi	r24, 0x01	; 1
     af6:	81 f0       	breq	.+32     	; 0xb18 <DIO_u8GetPinValue+0x24>
     af8:	28 f0       	brcs	.+10     	; 0xb04 <DIO_u8GetPinValue+0x10>
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	b9 f0       	breq	.+46     	; 0xb2c <DIO_u8GetPinValue+0x38>
     afe:	83 30       	cpi	r24, 0x03	; 3
     b00:	f9 f0       	breq	.+62     	; 0xb40 <DIO_u8GetPinValue+0x4c>
     b02:	27 c0       	rjmp	.+78     	; 0xb52 <DIO_u8GetPinValue+0x5e>

		case DIO_PORTA:
		Local_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
     b04:	89 b3       	in	r24, 0x19	; 25
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <DIO_u8GetPinValue+0x1a>
     b0a:	95 95       	asr	r25
     b0c:	87 95       	ror	r24
     b0e:	6a 95       	dec	r22
     b10:	e2 f7       	brpl	.-8      	; 0xb0a <DIO_u8GetPinValue+0x16>
     b12:	98 2f       	mov	r25, r24
     b14:	91 70       	andi	r25, 0x01	; 1
		break;
     b16:	1d c0       	rjmp	.+58     	; 0xb52 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTB:
		Local_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
     b18:	86 b3       	in	r24, 0x16	; 22
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <DIO_u8GetPinValue+0x2e>
     b1e:	95 95       	asr	r25
     b20:	87 95       	ror	r24
     b22:	6a 95       	dec	r22
     b24:	e2 f7       	brpl	.-8      	; 0xb1e <DIO_u8GetPinValue+0x2a>
     b26:	98 2f       	mov	r25, r24
     b28:	91 70       	andi	r25, 0x01	; 1
		break;
     b2a:	13 c0       	rjmp	.+38     	; 0xb52 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTC:
		Local_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
     b2c:	83 b3       	in	r24, 0x13	; 19
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <DIO_u8GetPinValue+0x42>
     b32:	95 95       	asr	r25
     b34:	87 95       	ror	r24
     b36:	6a 95       	dec	r22
     b38:	e2 f7       	brpl	.-8      	; 0xb32 <DIO_u8GetPinValue+0x3e>
     b3a:	98 2f       	mov	r25, r24
     b3c:	91 70       	andi	r25, 0x01	; 1
		break;
     b3e:	09 c0       	rjmp	.+18     	; 0xb52 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTD:
		Local_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
     b40:	80 b3       	in	r24, 0x10	; 16
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <DIO_u8GetPinValue+0x56>
     b46:	95 95       	asr	r25
     b48:	87 95       	ror	r24
     b4a:	6a 95       	dec	r22
     b4c:	e2 f7       	brpl	.-8      	; 0xb46 <DIO_u8GetPinValue+0x52>
     b4e:	98 2f       	mov	r25, r24
     b50:	91 70       	andi	r25, 0x01	; 1

	

	return Local_u8PinValue;

}
     b52:	89 2f       	mov	r24, r25
     b54:	08 95       	ret

00000b56 <__vector_1>:
void EXTI_voidSetCallBackINT2(void(*NotifyFunc2)(void)){
	
	Global_pvINT2NotifyFunc=NotifyFunc2;
}

ISR(INT0_vect){
     b56:	1f 92       	push	r1
     b58:	0f 92       	push	r0
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	0f 92       	push	r0
     b5e:	11 24       	eor	r1, r1
     b60:	2f 93       	push	r18
     b62:	3f 93       	push	r19
     b64:	4f 93       	push	r20
     b66:	5f 93       	push	r21
     b68:	6f 93       	push	r22
     b6a:	7f 93       	push	r23
     b6c:	8f 93       	push	r24
     b6e:	9f 93       	push	r25
     b70:	af 93       	push	r26
     b72:	bf 93       	push	r27
     b74:	ef 93       	push	r30
     b76:	ff 93       	push	r31
	
	if(Global_pvINT0NotifyFunc!=NULL_PTR)
     b78:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <Global_pvINT0NotifyFunc>
     b7c:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <Global_pvINT0NotifyFunc+0x1>
     b80:	30 97       	sbiw	r30, 0x00	; 0
     b82:	09 f0       	breq	.+2      	; 0xb86 <__vector_1+0x30>
			Global_pvINT0NotifyFunc();
     b84:	09 95       	icall
	
}
     b86:	ff 91       	pop	r31
     b88:	ef 91       	pop	r30
     b8a:	bf 91       	pop	r27
     b8c:	af 91       	pop	r26
     b8e:	9f 91       	pop	r25
     b90:	8f 91       	pop	r24
     b92:	7f 91       	pop	r23
     b94:	6f 91       	pop	r22
     b96:	5f 91       	pop	r21
     b98:	4f 91       	pop	r20
     b9a:	3f 91       	pop	r19
     b9c:	2f 91       	pop	r18
     b9e:	0f 90       	pop	r0
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	0f 90       	pop	r0
     ba4:	1f 90       	pop	r1
     ba6:	18 95       	reti

00000ba8 <__vector_2>:

ISR(INT1_vect){
     ba8:	1f 92       	push	r1
     baa:	0f 92       	push	r0
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	0f 92       	push	r0
     bb0:	11 24       	eor	r1, r1
     bb2:	2f 93       	push	r18
     bb4:	3f 93       	push	r19
     bb6:	4f 93       	push	r20
     bb8:	5f 93       	push	r21
     bba:	6f 93       	push	r22
     bbc:	7f 93       	push	r23
     bbe:	8f 93       	push	r24
     bc0:	9f 93       	push	r25
     bc2:	af 93       	push	r26
     bc4:	bf 93       	push	r27
     bc6:	ef 93       	push	r30
     bc8:	ff 93       	push	r31
	
	if(Global_pvINT1NotifyFunc!=NULL_PTR)
     bca:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <Global_pvINT1NotifyFunc>
     bce:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <Global_pvINT1NotifyFunc+0x1>
     bd2:	30 97       	sbiw	r30, 0x00	; 0
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <__vector_2+0x30>
			Global_pvINT1NotifyFunc();
     bd6:	09 95       	icall
	
}
     bd8:	ff 91       	pop	r31
     bda:	ef 91       	pop	r30
     bdc:	bf 91       	pop	r27
     bde:	af 91       	pop	r26
     be0:	9f 91       	pop	r25
     be2:	8f 91       	pop	r24
     be4:	7f 91       	pop	r23
     be6:	6f 91       	pop	r22
     be8:	5f 91       	pop	r21
     bea:	4f 91       	pop	r20
     bec:	3f 91       	pop	r19
     bee:	2f 91       	pop	r18
     bf0:	0f 90       	pop	r0
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	0f 90       	pop	r0
     bf6:	1f 90       	pop	r1
     bf8:	18 95       	reti

00000bfa <__vector_3>:
ISR(INT2_vect){
     bfa:	1f 92       	push	r1
     bfc:	0f 92       	push	r0
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	0f 92       	push	r0
     c02:	11 24       	eor	r1, r1
     c04:	2f 93       	push	r18
     c06:	3f 93       	push	r19
     c08:	4f 93       	push	r20
     c0a:	5f 93       	push	r21
     c0c:	6f 93       	push	r22
     c0e:	7f 93       	push	r23
     c10:	8f 93       	push	r24
     c12:	9f 93       	push	r25
     c14:	af 93       	push	r26
     c16:	bf 93       	push	r27
     c18:	ef 93       	push	r30
     c1a:	ff 93       	push	r31
	
	if(Global_pvINT2NotifyFunc!=NULL_PTR)
     c1c:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <Global_pvINT2NotifyFunc>
     c20:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <Global_pvINT2NotifyFunc+0x1>
     c24:	30 97       	sbiw	r30, 0x00	; 0
     c26:	09 f0       	breq	.+2      	; 0xc2a <__vector_3+0x30>
			Global_pvINT2NotifyFunc();
     c28:	09 95       	icall
	
     c2a:	ff 91       	pop	r31
     c2c:	ef 91       	pop	r30
     c2e:	bf 91       	pop	r27
     c30:	af 91       	pop	r26
     c32:	9f 91       	pop	r25
     c34:	8f 91       	pop	r24
     c36:	7f 91       	pop	r23
     c38:	6f 91       	pop	r22
     c3a:	5f 91       	pop	r21
     c3c:	4f 91       	pop	r20
     c3e:	3f 91       	pop	r19
     c40:	2f 91       	pop	r18
     c42:	0f 90       	pop	r0
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	0f 90       	pop	r0
     c48:	1f 90       	pop	r1
     c4a:	18 95       	reti

00000c4c <GIE_voidEnableGlobalInt>:
#include<avr/io.h>
#include"../../LIB/BIT_MATH.h"

void GIE_voidEnableGlobalInt(void){
	
	SET_BIT(SREG,7);
     c4c:	8f b7       	in	r24, 0x3f	; 63
     c4e:	80 68       	ori	r24, 0x80	; 128
     c50:	8f bf       	out	0x3f, r24	; 63
     c52:	08 95       	ret

00000c54 <TIMER_delay_ms>:
	GLOBAL_ICU_ISR = Copy_PTR_ICUFunction;
}

u16 ICU_u16ReadInputCapture(void){
	return ICR1;
}
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	8b 01       	movw	r16, r22
     c5a:	9c 01       	movw	r18, r24
     c5c:	67 2b       	or	r22, r23
     c5e:	68 2b       	or	r22, r24
     c60:	69 2b       	or	r22, r25
     c62:	69 f4       	brne	.+26     	; 0xc7e <TIMER_delay_ms+0x2a>
     c64:	12 c0       	rjmp	.+36     	; 0xc8a <TIMER_delay_ms+0x36>
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	f1 f7       	brne	.-4      	; 0xc66 <TIMER_delay_ms+0x12>
     c6a:	4f 5f       	subi	r20, 0xFF	; 255
     c6c:	5f 4f       	sbci	r21, 0xFF	; 255
     c6e:	6f 4f       	sbci	r22, 0xFF	; 255
     c70:	7f 4f       	sbci	r23, 0xFF	; 255
     c72:	04 17       	cp	r16, r20
     c74:	15 07       	cpc	r17, r21
     c76:	26 07       	cpc	r18, r22
     c78:	37 07       	cpc	r19, r23
     c7a:	21 f4       	brne	.+8      	; 0xc84 <TIMER_delay_ms+0x30>
     c7c:	06 c0       	rjmp	.+12     	; 0xc8a <TIMER_delay_ms+0x36>
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	ba 01       	movw	r22, r20
     c84:	8e e5       	ldi	r24, 0x5E	; 94
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	ee cf       	rjmp	.-36     	; 0xc66 <TIMER_delay_ms+0x12>
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	08 95       	ret

00000c90 <TIMER_voidTimer1Init>:
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	a1 f0       	breq	.+40     	; 0xcbc <TIMER_voidTimer1Init+0x2c>
     c94:	18 f0       	brcs	.+6      	; 0xc9c <TIMER_voidTimer1Init+0xc>
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	09 f1       	breq	.+66     	; 0xcdc <TIMER_voidTimer1Init+0x4c>
     c9a:	32 c0       	rjmp	.+100    	; 0xd00 <TIMER_voidTimer1Init+0x70>
     c9c:	8f b5       	in	r24, 0x2f	; 47
     c9e:	8e 7f       	andi	r24, 0xFE	; 254
     ca0:	8f bd       	out	0x2f, r24	; 47
     ca2:	8f b5       	in	r24, 0x2f	; 47
     ca4:	8d 7f       	andi	r24, 0xFD	; 253
     ca6:	8f bd       	out	0x2f, r24	; 47
     ca8:	8e b5       	in	r24, 0x2e	; 46
     caa:	87 7f       	andi	r24, 0xF7	; 247
     cac:	8e bd       	out	0x2e, r24	; 46
     cae:	8e b5       	in	r24, 0x2e	; 46
     cb0:	8f 7e       	andi	r24, 0xEF	; 239
     cb2:	8e bd       	out	0x2e, r24	; 46
     cb4:	89 b7       	in	r24, 0x39	; 57
     cb6:	84 60       	ori	r24, 0x04	; 4
     cb8:	89 bf       	out	0x39, r24	; 57
     cba:	22 c0       	rjmp	.+68     	; 0xd00 <TIMER_voidTimer1Init+0x70>
     cbc:	8f b5       	in	r24, 0x2f	; 47
     cbe:	8e 7f       	andi	r24, 0xFE	; 254
     cc0:	8f bd       	out	0x2f, r24	; 47
     cc2:	8f b5       	in	r24, 0x2f	; 47
     cc4:	8d 7f       	andi	r24, 0xFD	; 253
     cc6:	8f bd       	out	0x2f, r24	; 47
     cc8:	8e b5       	in	r24, 0x2e	; 46
     cca:	88 60       	ori	r24, 0x08	; 8
     ccc:	8e bd       	out	0x2e, r24	; 46
     cce:	8e b5       	in	r24, 0x2e	; 46
     cd0:	8f 7e       	andi	r24, 0xEF	; 239
     cd2:	8e bd       	out	0x2e, r24	; 46
     cd4:	89 b7       	in	r24, 0x39	; 57
     cd6:	80 61       	ori	r24, 0x10	; 16
     cd8:	89 bf       	out	0x39, r24	; 57
     cda:	12 c0       	rjmp	.+36     	; 0xd00 <TIMER_voidTimer1Init+0x70>
     cdc:	8f b5       	in	r24, 0x2f	; 47
     cde:	8f 7b       	andi	r24, 0xBF	; 191
     ce0:	8f bd       	out	0x2f, r24	; 47
     ce2:	8f b5       	in	r24, 0x2f	; 47
     ce4:	80 68       	ori	r24, 0x80	; 128
     ce6:	8f bd       	out	0x2f, r24	; 47
     ce8:	8f b5       	in	r24, 0x2f	; 47
     cea:	8e 7f       	andi	r24, 0xFE	; 254
     cec:	8f bd       	out	0x2f, r24	; 47
     cee:	8f b5       	in	r24, 0x2f	; 47
     cf0:	82 60       	ori	r24, 0x02	; 2
     cf2:	8f bd       	out	0x2f, r24	; 47
     cf4:	8e b5       	in	r24, 0x2e	; 46
     cf6:	88 60       	ori	r24, 0x08	; 8
     cf8:	8e bd       	out	0x2e, r24	; 46
     cfa:	8e b5       	in	r24, 0x2e	; 46
     cfc:	80 61       	ori	r24, 0x10	; 16
     cfe:	8e bd       	out	0x2e, r24	; 46
     d00:	e0 e0       	ldi	r30, 0x00	; 0
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	4d ec       	ldi	r20, 0xCD	; 205
     d06:	a1 e0       	ldi	r26, 0x01	; 1
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	64 9f       	mul	r22, r20
     d0c:	81 2d       	mov	r24, r1
     d0e:	11 24       	eor	r1, r1
     d10:	86 95       	lsr	r24
     d12:	86 95       	lsr	r24
     d14:	86 95       	lsr	r24
     d16:	88 0f       	add	r24, r24
     d18:	98 2f       	mov	r25, r24
     d1a:	99 0f       	add	r25, r25
     d1c:	99 0f       	add	r25, r25
     d1e:	89 0f       	add	r24, r25
     d20:	96 2f       	mov	r25, r22
     d22:	98 1b       	sub	r25, r24
     d24:	91 30       	cpi	r25, 0x01	; 1
     d26:	59 f4       	brne	.+22     	; 0xd3e <TIMER_voidTimer1Init+0xae>
     d28:	2e b5       	in	r18, 0x2e	; 46
     d2a:	cd 01       	movw	r24, r26
     d2c:	0e 2e       	mov	r0, r30
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <TIMER_voidTimer1Init+0xa4>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0a 94       	dec	r0
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <TIMER_voidTimer1Init+0xa0>
     d38:	82 2b       	or	r24, r18
     d3a:	8e bd       	out	0x2e, r24	; 46
     d3c:	0c c0       	rjmp	.+24     	; 0xd56 <TIMER_voidTimer1Init+0xc6>
     d3e:	9e b5       	in	r25, 0x2e	; 46
     d40:	9d 01       	movw	r18, r26
     d42:	0e 2e       	mov	r0, r30
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <TIMER_voidTimer1Init+0xba>
     d46:	22 0f       	add	r18, r18
     d48:	33 1f       	adc	r19, r19
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <TIMER_voidTimer1Init+0xb6>
     d4e:	82 2f       	mov	r24, r18
     d50:	80 95       	com	r24
     d52:	89 23       	and	r24, r25
     d54:	8e bd       	out	0x2e, r24	; 46
     d56:	64 9f       	mul	r22, r20
     d58:	61 2d       	mov	r22, r1
     d5a:	11 24       	eor	r1, r1
     d5c:	66 95       	lsr	r22
     d5e:	66 95       	lsr	r22
     d60:	66 95       	lsr	r22
     d62:	31 96       	adiw	r30, 0x01	; 1
     d64:	e3 30       	cpi	r30, 0x03	; 3
     d66:	f1 05       	cpc	r31, r1
     d68:	81 f6       	brne	.-96     	; 0xd0a <TIMER_voidTimer1Init+0x7a>
     d6a:	08 95       	ret

00000d6c <TIMER_voidSetOverFlow>:
     d6c:	97 bd       	out	0x27, r25	; 39
     d6e:	86 bd       	out	0x26, r24	; 38
     d70:	08 95       	ret

00000d72 <TIMER_voidTimer1ChannelASetCompareValue>:
     d72:	9b bd       	out	0x2b, r25	; 43
     d74:	8a bd       	out	0x2a, r24	; 42
     d76:	08 95       	ret

00000d78 <TIMER_voidTimer1SetPreloadValue>:
     d78:	9d bd       	out	0x2d, r25	; 45
     d7a:	8c bd       	out	0x2c, r24	; 44
     d7c:	08 95       	ret

00000d7e <__vector_11>:



//Timer 0 Normal ISR
void __vector_11(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_11(void){
     d7e:	1f 92       	push	r1
     d80:	0f 92       	push	r0
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	0f 92       	push	r0
     d86:	11 24       	eor	r1, r1
     d88:	2f 93       	push	r18
     d8a:	3f 93       	push	r19
     d8c:	4f 93       	push	r20
     d8e:	5f 93       	push	r21
     d90:	6f 93       	push	r22
     d92:	7f 93       	push	r23
     d94:	8f 93       	push	r24
     d96:	9f 93       	push	r25
     d98:	af 93       	push	r26
     d9a:	bf 93       	push	r27
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
	if(TIMER0_Normal_ISR_PTR!=0x00)
     da0:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <TIMER0_Normal_ISR_PTR>
     da4:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <TIMER0_Normal_ISR_PTR+0x1>
     da8:	30 97       	sbiw	r30, 0x00	; 0
     daa:	09 f0       	breq	.+2      	; 0xdae <__vector_11+0x30>
		TIMER0_Normal_ISR_PTR();
     dac:	09 95       	icall
}
     dae:	ff 91       	pop	r31
     db0:	ef 91       	pop	r30
     db2:	bf 91       	pop	r27
     db4:	af 91       	pop	r26
     db6:	9f 91       	pop	r25
     db8:	8f 91       	pop	r24
     dba:	7f 91       	pop	r23
     dbc:	6f 91       	pop	r22
     dbe:	5f 91       	pop	r21
     dc0:	4f 91       	pop	r20
     dc2:	3f 91       	pop	r19
     dc4:	2f 91       	pop	r18
     dc6:	0f 90       	pop	r0
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	0f 90       	pop	r0
     dcc:	1f 90       	pop	r1
     dce:	18 95       	reti

00000dd0 <__vector_10>:

//Timer 0 CTC ISR
void __vector_10(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_10(void){
     dd0:	1f 92       	push	r1
     dd2:	0f 92       	push	r0
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	0f 92       	push	r0
     dd8:	11 24       	eor	r1, r1
     dda:	2f 93       	push	r18
     ddc:	3f 93       	push	r19
     dde:	4f 93       	push	r20
     de0:	5f 93       	push	r21
     de2:	6f 93       	push	r22
     de4:	7f 93       	push	r23
     de6:	8f 93       	push	r24
     de8:	9f 93       	push	r25
     dea:	af 93       	push	r26
     dec:	bf 93       	push	r27
     dee:	ef 93       	push	r30
     df0:	ff 93       	push	r31
	if(TIMER0_CTC_ISR_PTR!=0x00)
     df2:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <TIMER0_CTC_ISR_PTR>
     df6:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <TIMER0_CTC_ISR_PTR+0x1>
     dfa:	30 97       	sbiw	r30, 0x00	; 0
     dfc:	09 f0       	breq	.+2      	; 0xe00 <__vector_10+0x30>
		TIMER0_CTC_ISR_PTR();
     dfe:	09 95       	icall

}
     e00:	ff 91       	pop	r31
     e02:	ef 91       	pop	r30
     e04:	bf 91       	pop	r27
     e06:	af 91       	pop	r26
     e08:	9f 91       	pop	r25
     e0a:	8f 91       	pop	r24
     e0c:	7f 91       	pop	r23
     e0e:	6f 91       	pop	r22
     e10:	5f 91       	pop	r21
     e12:	4f 91       	pop	r20
     e14:	3f 91       	pop	r19
     e16:	2f 91       	pop	r18
     e18:	0f 90       	pop	r0
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	0f 90       	pop	r0
     e1e:	1f 90       	pop	r1
     e20:	18 95       	reti

00000e22 <__vector_6>:

//ICU
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void){
     e22:	1f 92       	push	r1
     e24:	0f 92       	push	r0
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	0f 92       	push	r0
     e2a:	11 24       	eor	r1, r1
     e2c:	2f 93       	push	r18
     e2e:	3f 93       	push	r19
     e30:	4f 93       	push	r20
     e32:	5f 93       	push	r21
     e34:	6f 93       	push	r22
     e36:	7f 93       	push	r23
     e38:	8f 93       	push	r24
     e3a:	9f 93       	push	r25
     e3c:	af 93       	push	r26
     e3e:	bf 93       	push	r27
     e40:	ef 93       	push	r30
     e42:	ff 93       	push	r31
	if(GLOBAL_ICU_ISR!=0x00)
     e44:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <GLOBAL_ICU_ISR>
     e48:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <GLOBAL_ICU_ISR+0x1>
     e4c:	30 97       	sbiw	r30, 0x00	; 0
     e4e:	09 f0       	breq	.+2      	; 0xe52 <__vector_6+0x30>
		GLOBAL_ICU_ISR();
     e50:	09 95       	icall
}
     e52:	ff 91       	pop	r31
     e54:	ef 91       	pop	r30
     e56:	bf 91       	pop	r27
     e58:	af 91       	pop	r26
     e5a:	9f 91       	pop	r25
     e5c:	8f 91       	pop	r24
     e5e:	7f 91       	pop	r23
     e60:	6f 91       	pop	r22
     e62:	5f 91       	pop	r21
     e64:	4f 91       	pop	r20
     e66:	3f 91       	pop	r19
     e68:	2f 91       	pop	r18
     e6a:	0f 90       	pop	r0
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	0f 90       	pop	r0
     e70:	1f 90       	pop	r1
     e72:	18 95       	reti

00000e74 <__vector_7>:

//Timer 1 CTC ISR
void __vector_7(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_7(void){
     e74:	1f 92       	push	r1
     e76:	0f 92       	push	r0
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	0f 92       	push	r0
     e7c:	11 24       	eor	r1, r1
     e7e:	2f 93       	push	r18
     e80:	3f 93       	push	r19
     e82:	4f 93       	push	r20
     e84:	5f 93       	push	r21
     e86:	6f 93       	push	r22
     e88:	7f 93       	push	r23
     e8a:	8f 93       	push	r24
     e8c:	9f 93       	push	r25
     e8e:	af 93       	push	r26
     e90:	bf 93       	push	r27
     e92:	ef 93       	push	r30
     e94:	ff 93       	push	r31
	if(GLOBAL_TIMER1_COMPARE_MATCH_PTR!=0x00)
     e96:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <GLOBAL_TIMER1_COMPARE_MATCH_PTR>
     e9a:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <GLOBAL_TIMER1_COMPARE_MATCH_PTR+0x1>
     e9e:	30 97       	sbiw	r30, 0x00	; 0
     ea0:	09 f0       	breq	.+2      	; 0xea4 <__vector_7+0x30>
		GLOBAL_TIMER1_COMPARE_MATCH_PTR();
     ea2:	09 95       	icall
}
     ea4:	ff 91       	pop	r31
     ea6:	ef 91       	pop	r30
     ea8:	bf 91       	pop	r27
     eaa:	af 91       	pop	r26
     eac:	9f 91       	pop	r25
     eae:	8f 91       	pop	r24
     eb0:	7f 91       	pop	r23
     eb2:	6f 91       	pop	r22
     eb4:	5f 91       	pop	r21
     eb6:	4f 91       	pop	r20
     eb8:	3f 91       	pop	r19
     eba:	2f 91       	pop	r18
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	0f 90       	pop	r0
     ec2:	1f 90       	pop	r1
     ec4:	18 95       	reti

00000ec6 <TWI_voidMasterInit>:
void TWI_voidSlaveInit(u8 Copy_SlaveAddress){
	//Set Slave Address
	TWAR = Copy_SlaveAddress <<1;

	//Enable TWI
	SET_BIT(TWCR,TWEN);
     ec6:	96 e9       	ldi	r25, 0x96	; 150
     ec8:	90 b9       	out	0x00, r25	; 0
     eca:	09 98       	cbi	0x01, 1	; 1
     ecc:	08 98       	cbi	0x01, 0	; 1
     ece:	88 23       	and	r24, r24
     ed0:	11 f0       	breq	.+4      	; 0xed6 <TWI_voidMasterInit+0x10>
     ed2:	88 0f       	add	r24, r24
     ed4:	82 b9       	out	0x02, r24	; 2
     ed6:	86 b7       	in	r24, 0x36	; 54
     ed8:	84 60       	ori	r24, 0x04	; 4
     eda:	86 bf       	out	0x36, r24	; 54
     edc:	08 95       	ret

00000ede <TWI_SendStartCondition>:
}

TWI_ErrStatus TWI_SendStartCondition(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
     ede:	86 b7       	in	r24, 0x36	; 54
     ee0:	80 62       	ori	r24, 0x20	; 32
     ee2:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     ee4:	86 b7       	in	r24, 0x36	; 54
     ee6:	80 68       	ori	r24, 0x80	; 128
     ee8:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     eea:	06 b6       	in	r0, 0x36	; 54
     eec:	07 fe       	sbrs	r0, 7
     eee:	fd cf       	rjmp	.-6      	; 0xeea <TWI_SendStartCondition+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=START_ACK){
     ef0:	91 b1       	in	r25, 0x01	; 1
		Local_ErrStatus = StartConditionErr;
		}
	return Local_ErrStatus;
     ef2:	98 7f       	andi	r25, 0xF8	; 248
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	98 30       	cpi	r25, 0x08	; 8
     ef8:	09 f4       	brne	.+2      	; 0xefc <TWI_SendStartCondition+0x1e>
     efa:	80 e0       	ldi	r24, 0x00	; 0
}
     efc:	08 95       	ret

00000efe <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
     efe:	86 b7       	in	r24, 0x36	; 54
     f00:	80 62       	ori	r24, 0x20	; 32
     f02:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     f04:	86 b7       	in	r24, 0x36	; 54
     f06:	80 68       	ori	r24, 0x80	; 128
     f08:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f0a:	06 b6       	in	r0, 0x36	; 54
     f0c:	07 fe       	sbrs	r0, 7
     f0e:	fd cf       	rjmp	.-6      	; 0xf0a <TWI_SendRepeatedStart+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
     f10:	81 b1       	in	r24, 0x01	; 1
     f12:	88 7f       	andi	r24, 0xF8	; 248
     f14:	80 31       	cpi	r24, 0x10	; 16
     f16:	11 f0       	breq	.+4      	; 0xf1c <TWI_SendRepeatedStart+0x1e>
		Local_ErrStatus = RepeatedStartErr;
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     f1c:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
		Local_ErrStatus = RepeatedStartErr;
		}
	return Local_ErrStatus;
}
     f1e:	08 95       	ret

00000f20 <TWI_SendSlaveAddressWithWrite>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
     f20:	88 0f       	add	r24, r24
     f22:	83 b9       	out	0x03, r24	; 3
	//For Write Operation
	CLR_BIT(TWDR,0);
     f24:	18 98       	cbi	0x03, 0	; 3

	//Clear Flag to start previous operation  //Enable TWI
	TWCR=(1<<TWINT)|(1<<TWEN);
     f26:	84 e8       	ldi	r24, 0x84	; 132
     f28:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f2a:	06 b6       	in	r0, 0x36	; 54
     f2c:	07 fe       	sbrs	r0, 7
     f2e:	fd cf       	rjmp	.-6      	; 0xf2a <TWI_SendSlaveAddressWithWrite+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
     f30:	81 b1       	in	r24, 0x01	; 1
     f32:	88 7f       	andi	r24, 0xF8	; 248
     f34:	88 31       	cpi	r24, 0x18	; 24
     f36:	11 f0       	breq	.+4      	; 0xf3c <TWI_SendSlaveAddressWithWrite+0x1c>
		Local_ErrStatus = SlaveAddressWithWriteErr;
     f38:	83 e0       	ldi	r24, 0x03	; 3
     f3a:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     f3c:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
		Local_ErrStatus = SlaveAddressWithWriteErr;
		}
	return Local_ErrStatus;
}
     f3e:	08 95       	ret

00000f40 <TWI_SendSlaveAddressWithRead>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
     f40:	88 0f       	add	r24, r24
     f42:	83 b9       	out	0x03, r24	; 3
	//For Read Operation
	SET_BIT(TWDR,0);
     f44:	18 9a       	sbi	0x03, 0	; 3

	//Clear Flag to start previous operation
	TWCR=(1<<TWINT)|(1<<TWEN);
     f46:	84 e8       	ldi	r24, 0x84	; 132
     f48:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f4a:	06 b6       	in	r0, 0x36	; 54
     f4c:	07 fe       	sbrs	r0, 7
     f4e:	fd cf       	rjmp	.-6      	; 0xf4a <TWI_SendSlaveAddressWithRead+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
     f50:	81 b1       	in	r24, 0x01	; 1
     f52:	88 7f       	andi	r24, 0xF8	; 248
     f54:	80 34       	cpi	r24, 0x40	; 64
     f56:	11 f0       	breq	.+4      	; 0xf5c <TWI_SendSlaveAddressWithRead+0x1c>
		Local_ErrStatus = SlaveAddressWithReadErr;
     f58:	84 e0       	ldi	r24, 0x04	; 4
     f5a:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     f5c:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
		Local_ErrStatus = SlaveAddressWithReadErr;
		}
	return Local_ErrStatus;
}
     f5e:	08 95       	ret

00000f60 <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte){
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Write Data to data byte
	TWDR = Copy_u8DataByte;
     f60:	83 b9       	out	0x03, r24	; 3

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     f62:	86 b7       	in	r24, 0x36	; 54
     f64:	80 68       	ori	r24, 0x80	; 128
     f66:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f68:	06 b6       	in	r0, 0x36	; 54
     f6a:	07 fe       	sbrs	r0, 7
     f6c:	fd cf       	rjmp	.-6      	; 0xf68 <TWI_MasterWriteDataByte+0x8>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MasterWriteDataByteErr){
     f6e:	81 b1       	in	r24, 0x01	; 1
		Local_ErrStatus = MasterWriteDataByteErr;
		}
	return Local_ErrStatus;

}
     f70:	85 e0       	ldi	r24, 0x05	; 5
     f72:	08 95       	ret

00000f74 <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
     f74:	fc 01       	movw	r30, r24
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Enable ACK
	SET_BIT(TWCR,TWEA);
     f76:	96 b7       	in	r25, 0x36	; 54
     f78:	90 64       	ori	r25, 0x40	; 64
     f7a:	96 bf       	out	0x36, r25	; 54
	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     f7c:	96 b7       	in	r25, 0x36	; 54
     f7e:	90 68       	ori	r25, 0x80	; 128
     f80:	96 bf       	out	0x36, r25	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f82:	06 b6       	in	r0, 0x36	; 54
     f84:	07 fe       	sbrs	r0, 7
     f86:	fd cf       	rjmp	.-6      	; 0xf82 <TWI_MasterReadDataByte+0xe>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
     f88:	91 b1       	in	r25, 0x01	; 1
     f8a:	98 7f       	andi	r25, 0xF8	; 248
     f8c:	90 35       	cpi	r25, 0x50	; 80
     f8e:	21 f4       	brne	.+8      	; 0xf98 <TWI_MasterReadDataByte+0x24>
		Local_ErrStatus = MasterReadDataByteErr;
		}
	else{
		// Read Data
		*Copy_Pu8DataByte = TWDR;
     f90:	83 b1       	in	r24, 0x03	; 3
     f92:	80 83       	st	Z, r24

}

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	08 95       	ret
	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
		Local_ErrStatus = MasterReadDataByteErr;
     f98:	86 e0       	ldi	r24, 0x06	; 6
		// Read Data
		*Copy_Pu8DataByte = TWDR;

	}
	return Local_ErrStatus;
}
     f9a:	08 95       	ret

00000f9c <TWI_SendStopCondition>:

void TWI_SendStopCondition(void)
{
	/* generate stop condition on the bus */
	SET_BIT(TWCR,TWSTO);
     f9c:	86 b7       	in	r24, 0x36	; 54
     f9e:	80 61       	ori	r24, 0x10	; 16
     fa0:	86 bf       	out	0x36, r24	; 54

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWINT);
     fa2:	86 b7       	in	r24, 0x36	; 54
     fa4:	80 68       	ori	r24, 0x80	; 128
     fa6:	86 bf       	out	0x36, r24	; 54
     fa8:	08 95       	ret

00000faa <USART_voidInit>:
void USART_voidEnableRxINT(void){
	SET_BIT(UCSRB,7);
}

void USART_voidDisableRxINT(void){
	CLR_BIT(UCSRB,7);
     faa:	52 98       	cbi	0x0a, 2	; 10
     fac:	86 e8       	ldi	r24, 0x86	; 134
     fae:	80 bd       	out	0x20, r24	; 32
     fb0:	83 e3       	ldi	r24, 0x33	; 51
     fb2:	89 b9       	out	0x09, r24	; 9
     fb4:	53 9a       	sbi	0x0a, 3	; 10
     fb6:	54 9a       	sbi	0x0a, 4	; 10
     fb8:	08 95       	ret

00000fba <USART_voidTransmitData>:
     fba:	5d 9b       	sbis	0x0b, 5	; 11
     fbc:	fe cf       	rjmp	.-4      	; 0xfba <USART_voidTransmitData>
     fbe:	5d 9a       	sbi	0x0b, 5	; 11
     fc0:	8c b9       	out	0x0c, r24	; 12
     fc2:	08 95       	ret

00000fc4 <USART_u8ReceiverData>:
     fc4:	5f 9b       	sbis	0x0b, 7	; 11
     fc6:	fe cf       	rjmp	.-4      	; 0xfc4 <USART_u8ReceiverData>
     fc8:	8c b1       	in	r24, 0x0c	; 12
     fca:	08 95       	ret

00000fcc <USART_u8TimeOUTReceiverData>:
     fcc:	fc 01       	movw	r30, r24
     fce:	1d bc       	out	0x2d, r1	; 45
     fd0:	1c bc       	out	0x2c, r1	; 44
     fd2:	8f b5       	in	r24, 0x2f	; 47
     fd4:	8e 7f       	andi	r24, 0xFE	; 254
     fd6:	8f bd       	out	0x2f, r24	; 47
     fd8:	9f b5       	in	r25, 0x2f	; 47
     fda:	9d 7f       	andi	r25, 0xFD	; 253
     fdc:	9f bd       	out	0x2f, r25	; 47
     fde:	9e b5       	in	r25, 0x2e	; 46
     fe0:	97 7f       	andi	r25, 0xF7	; 247
     fe2:	9e bd       	out	0x2e, r25	; 46
     fe4:	9e b5       	in	r25, 0x2e	; 46
     fe6:	9f 7e       	andi	r25, 0xEF	; 239
     fe8:	9e bd       	out	0x2e, r25	; 46
     fea:	9e b5       	in	r25, 0x2e	; 46
     fec:	91 60       	ori	r25, 0x01	; 1
     fee:	9e bd       	out	0x2e, r25	; 46
     ff0:	9e b5       	in	r25, 0x2e	; 46
     ff2:	9d 7f       	andi	r25, 0xFD	; 253
     ff4:	9e bd       	out	0x2e, r25	; 46
     ff6:	9e b5       	in	r25, 0x2e	; 46
     ff8:	94 60       	ori	r25, 0x04	; 4
     ffa:	9e bd       	out	0x2e, r25	; 46
     ffc:	0b c0       	rjmp	.+22     	; 0x1014 <USART_u8TimeOUTReceiverData+0x48>
     ffe:	2c b5       	in	r18, 0x2c	; 44
    1000:	3d b5       	in	r19, 0x2d	; 45
    1002:	20 34       	cpi	r18, 0x40	; 64
    1004:	3c 49       	sbci	r19, 0x9C	; 156
    1006:	30 f0       	brcs	.+12     	; 0x1014 <USART_u8TimeOUTReceiverData+0x48>
    1008:	5f 9a       	sbi	0x0b, 7	; 11
    100a:	8e b5       	in	r24, 0x2e	; 46
    100c:	88 7f       	andi	r24, 0xF8	; 248
    100e:	8e bd       	out	0x2e, r24	; 46
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	08 95       	ret
    1014:	5f 9b       	sbis	0x0b, 7	; 11
    1016:	f3 cf       	rjmp	.-26     	; 0xffe <USART_u8TimeOUTReceiverData+0x32>
    1018:	8c b1       	in	r24, 0x0c	; 12
    101a:	80 83       	st	Z, r24
    101c:	1d bc       	out	0x2d, r1	; 45
    101e:	1c bc       	out	0x2c, r1	; 44
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	08 95       	ret

00001024 <USART_voidTransmitString>:
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	fc 01       	movw	r30, r24
    102c:	80 81       	ld	r24, Z
    102e:	88 23       	and	r24, r24
    1030:	59 f0       	breq	.+22     	; 0x1048 <USART_voidTransmitString+0x24>
    1032:	8f 01       	movw	r16, r30
    1034:	c0 e0       	ldi	r28, 0x00	; 0
    1036:	0e 94 dd 07 	call	0xfba	; 0xfba <USART_voidTransmitData>
    103a:	cf 5f       	subi	r28, 0xFF	; 255
    103c:	f8 01       	movw	r30, r16
    103e:	ec 0f       	add	r30, r28
    1040:	f1 1d       	adc	r31, r1
    1042:	80 81       	ld	r24, Z
    1044:	81 11       	cpse	r24, r1
    1046:	f7 cf       	rjmp	.-18     	; 0x1036 <USART_voidTransmitString+0x12>
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	08 95       	ret

00001050 <USART_voidCallBackFunction>:
    1050:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <GLOBAL_PTR_CallBack+0x1>
    1054:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <GLOBAL_PTR_CallBack>
    1058:	08 95       	ret

0000105a <USART_voidEnableRxINT>:
    105a:	57 9a       	sbi	0x0a, 7	; 10
    105c:	08 95       	ret

0000105e <__vector_13>:
}

void __vector_13 (void) __attribute__((signal));
void __vector_13 (void){
    105e:	1f 92       	push	r1
    1060:	0f 92       	push	r0
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	0f 92       	push	r0
    1066:	11 24       	eor	r1, r1
    1068:	2f 93       	push	r18
    106a:	3f 93       	push	r19
    106c:	4f 93       	push	r20
    106e:	5f 93       	push	r21
    1070:	6f 93       	push	r22
    1072:	7f 93       	push	r23
    1074:	8f 93       	push	r24
    1076:	9f 93       	push	r25
    1078:	af 93       	push	r26
    107a:	bf 93       	push	r27
    107c:	ef 93       	push	r30
    107e:	ff 93       	push	r31
	if(GLOBAL_PTR_CallBack!=0x00)
    1080:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <GLOBAL_PTR_CallBack>
    1084:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <GLOBAL_PTR_CallBack+0x1>
    1088:	30 97       	sbiw	r30, 0x00	; 0
    108a:	09 f0       	breq	.+2      	; 0x108e <__vector_13+0x30>
		GLOBAL_PTR_CallBack();
    108c:	09 95       	icall
}
    108e:	ff 91       	pop	r31
    1090:	ef 91       	pop	r30
    1092:	bf 91       	pop	r27
    1094:	af 91       	pop	r26
    1096:	9f 91       	pop	r25
    1098:	8f 91       	pop	r24
    109a:	7f 91       	pop	r23
    109c:	6f 91       	pop	r22
    109e:	5f 91       	pop	r21
    10a0:	4f 91       	pop	r20
    10a2:	3f 91       	pop	r19
    10a4:	2f 91       	pop	r18
    10a6:	0f 90       	pop	r0
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	0f 90       	pop	r0
    10ac:	1f 90       	pop	r1
    10ae:	18 95       	reti

000010b0 <__subsf3>:
    10b0:	50 58       	subi	r21, 0x80	; 128

000010b2 <__addsf3>:
    10b2:	bb 27       	eor	r27, r27
    10b4:	aa 27       	eor	r26, r26
    10b6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__addsf3x>
    10ba:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__fp_round>
    10be:	0e 94 ac 09 	call	0x1358	; 0x1358 <__fp_pscA>
    10c2:	38 f0       	brcs	.+14     	; 0x10d2 <__addsf3+0x20>
    10c4:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fp_pscB>
    10c8:	20 f0       	brcs	.+8      	; 0x10d2 <__addsf3+0x20>
    10ca:	39 f4       	brne	.+14     	; 0x10da <__addsf3+0x28>
    10cc:	9f 3f       	cpi	r25, 0xFF	; 255
    10ce:	19 f4       	brne	.+6      	; 0x10d6 <__addsf3+0x24>
    10d0:	26 f4       	brtc	.+8      	; 0x10da <__addsf3+0x28>
    10d2:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__fp_nan>
    10d6:	0e f4       	brtc	.+2      	; 0x10da <__addsf3+0x28>
    10d8:	e0 95       	com	r30
    10da:	e7 fb       	bst	r30, 7
    10dc:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_inf>

000010e0 <__addsf3x>:
    10e0:	e9 2f       	mov	r30, r25
    10e2:	0e 94 cb 09 	call	0x1396	; 0x1396 <__fp_split3>
    10e6:	58 f3       	brcs	.-42     	; 0x10be <__addsf3+0xc>
    10e8:	ba 17       	cp	r27, r26
    10ea:	62 07       	cpc	r22, r18
    10ec:	73 07       	cpc	r23, r19
    10ee:	84 07       	cpc	r24, r20
    10f0:	95 07       	cpc	r25, r21
    10f2:	20 f0       	brcs	.+8      	; 0x10fc <__addsf3x+0x1c>
    10f4:	79 f4       	brne	.+30     	; 0x1114 <__addsf3x+0x34>
    10f6:	a6 f5       	brtc	.+104    	; 0x1160 <__addsf3x+0x80>
    10f8:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_zero>
    10fc:	0e f4       	brtc	.+2      	; 0x1100 <__addsf3x+0x20>
    10fe:	e0 95       	com	r30
    1100:	0b 2e       	mov	r0, r27
    1102:	ba 2f       	mov	r27, r26
    1104:	a0 2d       	mov	r26, r0
    1106:	0b 01       	movw	r0, r22
    1108:	b9 01       	movw	r22, r18
    110a:	90 01       	movw	r18, r0
    110c:	0c 01       	movw	r0, r24
    110e:	ca 01       	movw	r24, r20
    1110:	a0 01       	movw	r20, r0
    1112:	11 24       	eor	r1, r1
    1114:	ff 27       	eor	r31, r31
    1116:	59 1b       	sub	r21, r25
    1118:	99 f0       	breq	.+38     	; 0x1140 <__addsf3x+0x60>
    111a:	59 3f       	cpi	r21, 0xF9	; 249
    111c:	50 f4       	brcc	.+20     	; 0x1132 <__addsf3x+0x52>
    111e:	50 3e       	cpi	r21, 0xE0	; 224
    1120:	68 f1       	brcs	.+90     	; 0x117c <__addsf3x+0x9c>
    1122:	1a 16       	cp	r1, r26
    1124:	f0 40       	sbci	r31, 0x00	; 0
    1126:	a2 2f       	mov	r26, r18
    1128:	23 2f       	mov	r18, r19
    112a:	34 2f       	mov	r19, r20
    112c:	44 27       	eor	r20, r20
    112e:	58 5f       	subi	r21, 0xF8	; 248
    1130:	f3 cf       	rjmp	.-26     	; 0x1118 <__addsf3x+0x38>
    1132:	46 95       	lsr	r20
    1134:	37 95       	ror	r19
    1136:	27 95       	ror	r18
    1138:	a7 95       	ror	r26
    113a:	f0 40       	sbci	r31, 0x00	; 0
    113c:	53 95       	inc	r21
    113e:	c9 f7       	brne	.-14     	; 0x1132 <__addsf3x+0x52>
    1140:	7e f4       	brtc	.+30     	; 0x1160 <__addsf3x+0x80>
    1142:	1f 16       	cp	r1, r31
    1144:	ba 0b       	sbc	r27, r26
    1146:	62 0b       	sbc	r22, r18
    1148:	73 0b       	sbc	r23, r19
    114a:	84 0b       	sbc	r24, r20
    114c:	ba f0       	brmi	.+46     	; 0x117c <__addsf3x+0x9c>
    114e:	91 50       	subi	r25, 0x01	; 1
    1150:	a1 f0       	breq	.+40     	; 0x117a <__addsf3x+0x9a>
    1152:	ff 0f       	add	r31, r31
    1154:	bb 1f       	adc	r27, r27
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	88 1f       	adc	r24, r24
    115c:	c2 f7       	brpl	.-16     	; 0x114e <__addsf3x+0x6e>
    115e:	0e c0       	rjmp	.+28     	; 0x117c <__addsf3x+0x9c>
    1160:	ba 0f       	add	r27, r26
    1162:	62 1f       	adc	r22, r18
    1164:	73 1f       	adc	r23, r19
    1166:	84 1f       	adc	r24, r20
    1168:	48 f4       	brcc	.+18     	; 0x117c <__addsf3x+0x9c>
    116a:	87 95       	ror	r24
    116c:	77 95       	ror	r23
    116e:	67 95       	ror	r22
    1170:	b7 95       	ror	r27
    1172:	f7 95       	ror	r31
    1174:	9e 3f       	cpi	r25, 0xFE	; 254
    1176:	08 f0       	brcs	.+2      	; 0x117a <__addsf3x+0x9a>
    1178:	b0 cf       	rjmp	.-160    	; 0x10da <__addsf3+0x28>
    117a:	93 95       	inc	r25
    117c:	88 0f       	add	r24, r24
    117e:	08 f0       	brcs	.+2      	; 0x1182 <__addsf3x+0xa2>
    1180:	99 27       	eor	r25, r25
    1182:	ee 0f       	add	r30, r30
    1184:	97 95       	ror	r25
    1186:	87 95       	ror	r24
    1188:	08 95       	ret

0000118a <__divsf3>:
    118a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__divsf3x>
    118e:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__fp_round>
    1192:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fp_pscB>
    1196:	58 f0       	brcs	.+22     	; 0x11ae <__divsf3+0x24>
    1198:	0e 94 ac 09 	call	0x1358	; 0x1358 <__fp_pscA>
    119c:	40 f0       	brcs	.+16     	; 0x11ae <__divsf3+0x24>
    119e:	29 f4       	brne	.+10     	; 0x11aa <__divsf3+0x20>
    11a0:	5f 3f       	cpi	r21, 0xFF	; 255
    11a2:	29 f0       	breq	.+10     	; 0x11ae <__divsf3+0x24>
    11a4:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_inf>
    11a8:	51 11       	cpse	r21, r1
    11aa:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_szero>
    11ae:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__fp_nan>

000011b2 <__divsf3x>:
    11b2:	0e 94 cb 09 	call	0x1396	; 0x1396 <__fp_split3>
    11b6:	68 f3       	brcs	.-38     	; 0x1192 <__divsf3+0x8>

000011b8 <__divsf3_pse>:
    11b8:	99 23       	and	r25, r25
    11ba:	b1 f3       	breq	.-20     	; 0x11a8 <__divsf3+0x1e>
    11bc:	55 23       	and	r21, r21
    11be:	91 f3       	breq	.-28     	; 0x11a4 <__divsf3+0x1a>
    11c0:	95 1b       	sub	r25, r21
    11c2:	55 0b       	sbc	r21, r21
    11c4:	bb 27       	eor	r27, r27
    11c6:	aa 27       	eor	r26, r26
    11c8:	62 17       	cp	r22, r18
    11ca:	73 07       	cpc	r23, r19
    11cc:	84 07       	cpc	r24, r20
    11ce:	38 f0       	brcs	.+14     	; 0x11de <__divsf3_pse+0x26>
    11d0:	9f 5f       	subi	r25, 0xFF	; 255
    11d2:	5f 4f       	sbci	r21, 0xFF	; 255
    11d4:	22 0f       	add	r18, r18
    11d6:	33 1f       	adc	r19, r19
    11d8:	44 1f       	adc	r20, r20
    11da:	aa 1f       	adc	r26, r26
    11dc:	a9 f3       	breq	.-22     	; 0x11c8 <__divsf3_pse+0x10>
    11de:	35 d0       	rcall	.+106    	; 0x124a <__divsf3_pse+0x92>
    11e0:	0e 2e       	mov	r0, r30
    11e2:	3a f0       	brmi	.+14     	; 0x11f2 <__divsf3_pse+0x3a>
    11e4:	e0 e8       	ldi	r30, 0x80	; 128
    11e6:	32 d0       	rcall	.+100    	; 0x124c <__divsf3_pse+0x94>
    11e8:	91 50       	subi	r25, 0x01	; 1
    11ea:	50 40       	sbci	r21, 0x00	; 0
    11ec:	e6 95       	lsr	r30
    11ee:	00 1c       	adc	r0, r0
    11f0:	ca f7       	brpl	.-14     	; 0x11e4 <__divsf3_pse+0x2c>
    11f2:	2b d0       	rcall	.+86     	; 0x124a <__divsf3_pse+0x92>
    11f4:	fe 2f       	mov	r31, r30
    11f6:	29 d0       	rcall	.+82     	; 0x124a <__divsf3_pse+0x92>
    11f8:	66 0f       	add	r22, r22
    11fa:	77 1f       	adc	r23, r23
    11fc:	88 1f       	adc	r24, r24
    11fe:	bb 1f       	adc	r27, r27
    1200:	26 17       	cp	r18, r22
    1202:	37 07       	cpc	r19, r23
    1204:	48 07       	cpc	r20, r24
    1206:	ab 07       	cpc	r26, r27
    1208:	b0 e8       	ldi	r27, 0x80	; 128
    120a:	09 f0       	breq	.+2      	; 0x120e <__divsf3_pse+0x56>
    120c:	bb 0b       	sbc	r27, r27
    120e:	80 2d       	mov	r24, r0
    1210:	bf 01       	movw	r22, r30
    1212:	ff 27       	eor	r31, r31
    1214:	93 58       	subi	r25, 0x83	; 131
    1216:	5f 4f       	sbci	r21, 0xFF	; 255
    1218:	3a f0       	brmi	.+14     	; 0x1228 <__divsf3_pse+0x70>
    121a:	9e 3f       	cpi	r25, 0xFE	; 254
    121c:	51 05       	cpc	r21, r1
    121e:	78 f0       	brcs	.+30     	; 0x123e <__divsf3_pse+0x86>
    1220:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_inf>
    1224:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_szero>
    1228:	5f 3f       	cpi	r21, 0xFF	; 255
    122a:	e4 f3       	brlt	.-8      	; 0x1224 <__divsf3_pse+0x6c>
    122c:	98 3e       	cpi	r25, 0xE8	; 232
    122e:	d4 f3       	brlt	.-12     	; 0x1224 <__divsf3_pse+0x6c>
    1230:	86 95       	lsr	r24
    1232:	77 95       	ror	r23
    1234:	67 95       	ror	r22
    1236:	b7 95       	ror	r27
    1238:	f7 95       	ror	r31
    123a:	9f 5f       	subi	r25, 0xFF	; 255
    123c:	c9 f7       	brne	.-14     	; 0x1230 <__divsf3_pse+0x78>
    123e:	88 0f       	add	r24, r24
    1240:	91 1d       	adc	r25, r1
    1242:	96 95       	lsr	r25
    1244:	87 95       	ror	r24
    1246:	97 f9       	bld	r25, 7
    1248:	08 95       	ret
    124a:	e1 e0       	ldi	r30, 0x01	; 1
    124c:	66 0f       	add	r22, r22
    124e:	77 1f       	adc	r23, r23
    1250:	88 1f       	adc	r24, r24
    1252:	bb 1f       	adc	r27, r27
    1254:	62 17       	cp	r22, r18
    1256:	73 07       	cpc	r23, r19
    1258:	84 07       	cpc	r24, r20
    125a:	ba 07       	cpc	r27, r26
    125c:	20 f0       	brcs	.+8      	; 0x1266 <__divsf3_pse+0xae>
    125e:	62 1b       	sub	r22, r18
    1260:	73 0b       	sbc	r23, r19
    1262:	84 0b       	sbc	r24, r20
    1264:	ba 0b       	sbc	r27, r26
    1266:	ee 1f       	adc	r30, r30
    1268:	88 f7       	brcc	.-30     	; 0x124c <__divsf3_pse+0x94>
    126a:	e0 95       	com	r30
    126c:	08 95       	ret

0000126e <__fixunssfsi>:
    126e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__fp_splitA>
    1272:	88 f0       	brcs	.+34     	; 0x1296 <__fixunssfsi+0x28>
    1274:	9f 57       	subi	r25, 0x7F	; 127
    1276:	98 f0       	brcs	.+38     	; 0x129e <__fixunssfsi+0x30>
    1278:	b9 2f       	mov	r27, r25
    127a:	99 27       	eor	r25, r25
    127c:	b7 51       	subi	r27, 0x17	; 23
    127e:	b0 f0       	brcs	.+44     	; 0x12ac <__fixunssfsi+0x3e>
    1280:	e1 f0       	breq	.+56     	; 0x12ba <__fixunssfsi+0x4c>
    1282:	66 0f       	add	r22, r22
    1284:	77 1f       	adc	r23, r23
    1286:	88 1f       	adc	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	1a f0       	brmi	.+6      	; 0x1292 <__fixunssfsi+0x24>
    128c:	ba 95       	dec	r27
    128e:	c9 f7       	brne	.-14     	; 0x1282 <__fixunssfsi+0x14>
    1290:	14 c0       	rjmp	.+40     	; 0x12ba <__fixunssfsi+0x4c>
    1292:	b1 30       	cpi	r27, 0x01	; 1
    1294:	91 f0       	breq	.+36     	; 0x12ba <__fixunssfsi+0x4c>
    1296:	0e 94 ed 09 	call	0x13da	; 0x13da <__fp_zero>
    129a:	b1 e0       	ldi	r27, 0x01	; 1
    129c:	08 95       	ret
    129e:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_zero>
    12a2:	67 2f       	mov	r22, r23
    12a4:	78 2f       	mov	r23, r24
    12a6:	88 27       	eor	r24, r24
    12a8:	b8 5f       	subi	r27, 0xF8	; 248
    12aa:	39 f0       	breq	.+14     	; 0x12ba <__fixunssfsi+0x4c>
    12ac:	b9 3f       	cpi	r27, 0xF9	; 249
    12ae:	cc f3       	brlt	.-14     	; 0x12a2 <__fixunssfsi+0x34>
    12b0:	86 95       	lsr	r24
    12b2:	77 95       	ror	r23
    12b4:	67 95       	ror	r22
    12b6:	b3 95       	inc	r27
    12b8:	d9 f7       	brne	.-10     	; 0x12b0 <__fixunssfsi+0x42>
    12ba:	3e f4       	brtc	.+14     	; 0x12ca <__fixunssfsi+0x5c>
    12bc:	90 95       	com	r25
    12be:	80 95       	com	r24
    12c0:	70 95       	com	r23
    12c2:	61 95       	neg	r22
    12c4:	7f 4f       	sbci	r23, 0xFF	; 255
    12c6:	8f 4f       	sbci	r24, 0xFF	; 255
    12c8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ca:	08 95       	ret

000012cc <__floatunsisf>:
    12cc:	e8 94       	clt
    12ce:	09 c0       	rjmp	.+18     	; 0x12e2 <__floatsisf+0x12>

000012d0 <__floatsisf>:
    12d0:	97 fb       	bst	r25, 7
    12d2:	3e f4       	brtc	.+14     	; 0x12e2 <__floatsisf+0x12>
    12d4:	90 95       	com	r25
    12d6:	80 95       	com	r24
    12d8:	70 95       	com	r23
    12da:	61 95       	neg	r22
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	8f 4f       	sbci	r24, 0xFF	; 255
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	99 23       	and	r25, r25
    12e4:	a9 f0       	breq	.+42     	; 0x1310 <__floatsisf+0x40>
    12e6:	f9 2f       	mov	r31, r25
    12e8:	96 e9       	ldi	r25, 0x96	; 150
    12ea:	bb 27       	eor	r27, r27
    12ec:	93 95       	inc	r25
    12ee:	f6 95       	lsr	r31
    12f0:	87 95       	ror	r24
    12f2:	77 95       	ror	r23
    12f4:	67 95       	ror	r22
    12f6:	b7 95       	ror	r27
    12f8:	f1 11       	cpse	r31, r1
    12fa:	f8 cf       	rjmp	.-16     	; 0x12ec <__floatsisf+0x1c>
    12fc:	fa f4       	brpl	.+62     	; 0x133c <__floatsisf+0x6c>
    12fe:	bb 0f       	add	r27, r27
    1300:	11 f4       	brne	.+4      	; 0x1306 <__floatsisf+0x36>
    1302:	60 ff       	sbrs	r22, 0
    1304:	1b c0       	rjmp	.+54     	; 0x133c <__floatsisf+0x6c>
    1306:	6f 5f       	subi	r22, 0xFF	; 255
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	8f 4f       	sbci	r24, 0xFF	; 255
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	16 c0       	rjmp	.+44     	; 0x133c <__floatsisf+0x6c>
    1310:	88 23       	and	r24, r24
    1312:	11 f0       	breq	.+4      	; 0x1318 <__floatsisf+0x48>
    1314:	96 e9       	ldi	r25, 0x96	; 150
    1316:	11 c0       	rjmp	.+34     	; 0x133a <__floatsisf+0x6a>
    1318:	77 23       	and	r23, r23
    131a:	21 f0       	breq	.+8      	; 0x1324 <__floatsisf+0x54>
    131c:	9e e8       	ldi	r25, 0x8E	; 142
    131e:	87 2f       	mov	r24, r23
    1320:	76 2f       	mov	r23, r22
    1322:	05 c0       	rjmp	.+10     	; 0x132e <__floatsisf+0x5e>
    1324:	66 23       	and	r22, r22
    1326:	71 f0       	breq	.+28     	; 0x1344 <__floatsisf+0x74>
    1328:	96 e8       	ldi	r25, 0x86	; 134
    132a:	86 2f       	mov	r24, r22
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	2a f0       	brmi	.+10     	; 0x133c <__floatsisf+0x6c>
    1332:	9a 95       	dec	r25
    1334:	66 0f       	add	r22, r22
    1336:	77 1f       	adc	r23, r23
    1338:	88 1f       	adc	r24, r24
    133a:	da f7       	brpl	.-10     	; 0x1332 <__floatsisf+0x62>
    133c:	88 0f       	add	r24, r24
    133e:	96 95       	lsr	r25
    1340:	87 95       	ror	r24
    1342:	97 f9       	bld	r25, 7
    1344:	08 95       	ret

00001346 <__fp_inf>:
    1346:	97 f9       	bld	r25, 7
    1348:	9f 67       	ori	r25, 0x7F	; 127
    134a:	80 e8       	ldi	r24, 0x80	; 128
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	08 95       	ret

00001352 <__fp_nan>:
    1352:	9f ef       	ldi	r25, 0xFF	; 255
    1354:	80 ec       	ldi	r24, 0xC0	; 192
    1356:	08 95       	ret

00001358 <__fp_pscA>:
    1358:	00 24       	eor	r0, r0
    135a:	0a 94       	dec	r0
    135c:	16 16       	cp	r1, r22
    135e:	17 06       	cpc	r1, r23
    1360:	18 06       	cpc	r1, r24
    1362:	09 06       	cpc	r0, r25
    1364:	08 95       	ret

00001366 <__fp_pscB>:
    1366:	00 24       	eor	r0, r0
    1368:	0a 94       	dec	r0
    136a:	12 16       	cp	r1, r18
    136c:	13 06       	cpc	r1, r19
    136e:	14 06       	cpc	r1, r20
    1370:	05 06       	cpc	r0, r21
    1372:	08 95       	ret

00001374 <__fp_round>:
    1374:	09 2e       	mov	r0, r25
    1376:	03 94       	inc	r0
    1378:	00 0c       	add	r0, r0
    137a:	11 f4       	brne	.+4      	; 0x1380 <__fp_round+0xc>
    137c:	88 23       	and	r24, r24
    137e:	52 f0       	brmi	.+20     	; 0x1394 <__fp_round+0x20>
    1380:	bb 0f       	add	r27, r27
    1382:	40 f4       	brcc	.+16     	; 0x1394 <__fp_round+0x20>
    1384:	bf 2b       	or	r27, r31
    1386:	11 f4       	brne	.+4      	; 0x138c <__fp_round+0x18>
    1388:	60 ff       	sbrs	r22, 0
    138a:	04 c0       	rjmp	.+8      	; 0x1394 <__fp_round+0x20>
    138c:	6f 5f       	subi	r22, 0xFF	; 255
    138e:	7f 4f       	sbci	r23, 0xFF	; 255
    1390:	8f 4f       	sbci	r24, 0xFF	; 255
    1392:	9f 4f       	sbci	r25, 0xFF	; 255
    1394:	08 95       	ret

00001396 <__fp_split3>:
    1396:	57 fd       	sbrc	r21, 7
    1398:	90 58       	subi	r25, 0x80	; 128
    139a:	44 0f       	add	r20, r20
    139c:	55 1f       	adc	r21, r21
    139e:	59 f0       	breq	.+22     	; 0x13b6 <__fp_splitA+0x10>
    13a0:	5f 3f       	cpi	r21, 0xFF	; 255
    13a2:	71 f0       	breq	.+28     	; 0x13c0 <__fp_splitA+0x1a>
    13a4:	47 95       	ror	r20

000013a6 <__fp_splitA>:
    13a6:	88 0f       	add	r24, r24
    13a8:	97 fb       	bst	r25, 7
    13aa:	99 1f       	adc	r25, r25
    13ac:	61 f0       	breq	.+24     	; 0x13c6 <__fp_splitA+0x20>
    13ae:	9f 3f       	cpi	r25, 0xFF	; 255
    13b0:	79 f0       	breq	.+30     	; 0x13d0 <__fp_splitA+0x2a>
    13b2:	87 95       	ror	r24
    13b4:	08 95       	ret
    13b6:	12 16       	cp	r1, r18
    13b8:	13 06       	cpc	r1, r19
    13ba:	14 06       	cpc	r1, r20
    13bc:	55 1f       	adc	r21, r21
    13be:	f2 cf       	rjmp	.-28     	; 0x13a4 <__fp_split3+0xe>
    13c0:	46 95       	lsr	r20
    13c2:	f1 df       	rcall	.-30     	; 0x13a6 <__fp_splitA>
    13c4:	08 c0       	rjmp	.+16     	; 0x13d6 <__fp_splitA+0x30>
    13c6:	16 16       	cp	r1, r22
    13c8:	17 06       	cpc	r1, r23
    13ca:	18 06       	cpc	r1, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	f1 cf       	rjmp	.-30     	; 0x13b2 <__fp_splitA+0xc>
    13d0:	86 95       	lsr	r24
    13d2:	71 05       	cpc	r23, r1
    13d4:	61 05       	cpc	r22, r1
    13d6:	08 94       	sec
    13d8:	08 95       	ret

000013da <__fp_zero>:
    13da:	e8 94       	clt

000013dc <__fp_szero>:
    13dc:	bb 27       	eor	r27, r27
    13de:	66 27       	eor	r22, r22
    13e0:	77 27       	eor	r23, r23
    13e2:	cb 01       	movw	r24, r22
    13e4:	97 f9       	bld	r25, 7
    13e6:	08 95       	ret

000013e8 <__mulsf3>:
    13e8:	0e 94 07 0a 	call	0x140e	; 0x140e <__mulsf3x>
    13ec:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__fp_round>
    13f0:	0e 94 ac 09 	call	0x1358	; 0x1358 <__fp_pscA>
    13f4:	38 f0       	brcs	.+14     	; 0x1404 <__mulsf3+0x1c>
    13f6:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fp_pscB>
    13fa:	20 f0       	brcs	.+8      	; 0x1404 <__mulsf3+0x1c>
    13fc:	95 23       	and	r25, r21
    13fe:	11 f0       	breq	.+4      	; 0x1404 <__mulsf3+0x1c>
    1400:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_inf>
    1404:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__fp_nan>
    1408:	11 24       	eor	r1, r1
    140a:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_szero>

0000140e <__mulsf3x>:
    140e:	0e 94 cb 09 	call	0x1396	; 0x1396 <__fp_split3>
    1412:	70 f3       	brcs	.-36     	; 0x13f0 <__mulsf3+0x8>

00001414 <__mulsf3_pse>:
    1414:	95 9f       	mul	r25, r21
    1416:	c1 f3       	breq	.-16     	; 0x1408 <__mulsf3+0x20>
    1418:	95 0f       	add	r25, r21
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	55 1f       	adc	r21, r21
    141e:	62 9f       	mul	r22, r18
    1420:	f0 01       	movw	r30, r0
    1422:	72 9f       	mul	r23, r18
    1424:	bb 27       	eor	r27, r27
    1426:	f0 0d       	add	r31, r0
    1428:	b1 1d       	adc	r27, r1
    142a:	63 9f       	mul	r22, r19
    142c:	aa 27       	eor	r26, r26
    142e:	f0 0d       	add	r31, r0
    1430:	b1 1d       	adc	r27, r1
    1432:	aa 1f       	adc	r26, r26
    1434:	64 9f       	mul	r22, r20
    1436:	66 27       	eor	r22, r22
    1438:	b0 0d       	add	r27, r0
    143a:	a1 1d       	adc	r26, r1
    143c:	66 1f       	adc	r22, r22
    143e:	82 9f       	mul	r24, r18
    1440:	22 27       	eor	r18, r18
    1442:	b0 0d       	add	r27, r0
    1444:	a1 1d       	adc	r26, r1
    1446:	62 1f       	adc	r22, r18
    1448:	73 9f       	mul	r23, r19
    144a:	b0 0d       	add	r27, r0
    144c:	a1 1d       	adc	r26, r1
    144e:	62 1f       	adc	r22, r18
    1450:	83 9f       	mul	r24, r19
    1452:	a0 0d       	add	r26, r0
    1454:	61 1d       	adc	r22, r1
    1456:	22 1f       	adc	r18, r18
    1458:	74 9f       	mul	r23, r20
    145a:	33 27       	eor	r19, r19
    145c:	a0 0d       	add	r26, r0
    145e:	61 1d       	adc	r22, r1
    1460:	23 1f       	adc	r18, r19
    1462:	84 9f       	mul	r24, r20
    1464:	60 0d       	add	r22, r0
    1466:	21 1d       	adc	r18, r1
    1468:	82 2f       	mov	r24, r18
    146a:	76 2f       	mov	r23, r22
    146c:	6a 2f       	mov	r22, r26
    146e:	11 24       	eor	r1, r1
    1470:	9f 57       	subi	r25, 0x7F	; 127
    1472:	50 40       	sbci	r21, 0x00	; 0
    1474:	9a f0       	brmi	.+38     	; 0x149c <__mulsf3_pse+0x88>
    1476:	f1 f0       	breq	.+60     	; 0x14b4 <__mulsf3_pse+0xa0>
    1478:	88 23       	and	r24, r24
    147a:	4a f0       	brmi	.+18     	; 0x148e <__mulsf3_pse+0x7a>
    147c:	ee 0f       	add	r30, r30
    147e:	ff 1f       	adc	r31, r31
    1480:	bb 1f       	adc	r27, r27
    1482:	66 1f       	adc	r22, r22
    1484:	77 1f       	adc	r23, r23
    1486:	88 1f       	adc	r24, r24
    1488:	91 50       	subi	r25, 0x01	; 1
    148a:	50 40       	sbci	r21, 0x00	; 0
    148c:	a9 f7       	brne	.-22     	; 0x1478 <__mulsf3_pse+0x64>
    148e:	9e 3f       	cpi	r25, 0xFE	; 254
    1490:	51 05       	cpc	r21, r1
    1492:	80 f0       	brcs	.+32     	; 0x14b4 <__mulsf3_pse+0xa0>
    1494:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__fp_inf>
    1498:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_szero>
    149c:	5f 3f       	cpi	r21, 0xFF	; 255
    149e:	e4 f3       	brlt	.-8      	; 0x1498 <__mulsf3_pse+0x84>
    14a0:	98 3e       	cpi	r25, 0xE8	; 232
    14a2:	d4 f3       	brlt	.-12     	; 0x1498 <__mulsf3_pse+0x84>
    14a4:	86 95       	lsr	r24
    14a6:	77 95       	ror	r23
    14a8:	67 95       	ror	r22
    14aa:	b7 95       	ror	r27
    14ac:	f7 95       	ror	r31
    14ae:	e7 95       	ror	r30
    14b0:	9f 5f       	subi	r25, 0xFF	; 255
    14b2:	c1 f7       	brne	.-16     	; 0x14a4 <__mulsf3_pse+0x90>
    14b4:	fe 2b       	or	r31, r30
    14b6:	88 0f       	add	r24, r24
    14b8:	91 1d       	adc	r25, r1
    14ba:	96 95       	lsr	r25
    14bc:	87 95       	ror	r24
    14be:	97 f9       	bld	r25, 7
    14c0:	08 95       	ret

000014c2 <__itoa_ncheck>:
    14c2:	bb 27       	eor	r27, r27
    14c4:	4a 30       	cpi	r20, 0x0A	; 10
    14c6:	31 f4       	brne	.+12     	; 0x14d4 <__itoa_ncheck+0x12>
    14c8:	99 23       	and	r25, r25
    14ca:	22 f4       	brpl	.+8      	; 0x14d4 <__itoa_ncheck+0x12>
    14cc:	bd e2       	ldi	r27, 0x2D	; 45
    14ce:	90 95       	com	r25
    14d0:	81 95       	neg	r24
    14d2:	9f 4f       	sbci	r25, 0xFF	; 255
    14d4:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__utoa_common>

000014d8 <__utoa_ncheck>:
    14d8:	bb 27       	eor	r27, r27

000014da <__utoa_common>:
    14da:	fb 01       	movw	r30, r22
    14dc:	55 27       	eor	r21, r21
    14de:	aa 27       	eor	r26, r26
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	aa 1f       	adc	r26, r26
    14e6:	a4 17       	cp	r26, r20
    14e8:	10 f0       	brcs	.+4      	; 0x14ee <__utoa_common+0x14>
    14ea:	a4 1b       	sub	r26, r20
    14ec:	83 95       	inc	r24
    14ee:	50 51       	subi	r21, 0x10	; 16
    14f0:	b9 f7       	brne	.-18     	; 0x14e0 <__utoa_common+0x6>
    14f2:	a0 5d       	subi	r26, 0xD0	; 208
    14f4:	aa 33       	cpi	r26, 0x3A	; 58
    14f6:	08 f0       	brcs	.+2      	; 0x14fa <__utoa_common+0x20>
    14f8:	a9 5d       	subi	r26, 0xD9	; 217
    14fa:	a1 93       	st	Z+, r26
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	79 f7       	brne	.-34     	; 0x14de <__utoa_common+0x4>
    1500:	b1 11       	cpse	r27, r1
    1502:	b1 93       	st	Z+, r27
    1504:	11 92       	st	Z+, r1
    1506:	cb 01       	movw	r24, r22
    1508:	0c 94 86 0a 	jmp	0x150c	; 0x150c <strrev>

0000150c <strrev>:
    150c:	dc 01       	movw	r26, r24
    150e:	fc 01       	movw	r30, r24
    1510:	67 2f       	mov	r22, r23
    1512:	71 91       	ld	r23, Z+
    1514:	77 23       	and	r23, r23
    1516:	e1 f7       	brne	.-8      	; 0x1510 <strrev+0x4>
    1518:	32 97       	sbiw	r30, 0x02	; 2
    151a:	04 c0       	rjmp	.+8      	; 0x1524 <strrev+0x18>
    151c:	7c 91       	ld	r23, X
    151e:	6d 93       	st	X+, r22
    1520:	70 83       	st	Z, r23
    1522:	62 91       	ld	r22, -Z
    1524:	ae 17       	cp	r26, r30
    1526:	bf 07       	cpc	r27, r31
    1528:	c8 f3       	brcs	.-14     	; 0x151c <strrev+0x10>
    152a:	08 95       	ret

0000152c <_exit>:
    152c:	f8 94       	cli

0000152e <__stop_program>:
    152e:	ff cf       	rjmp	.-2      	; 0x152e <__stop_program>
