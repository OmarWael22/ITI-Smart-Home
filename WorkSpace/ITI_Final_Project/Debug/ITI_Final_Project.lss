
ITI_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001584  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  00001584  00001618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080018e  0080018e  00001746  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001746  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001778  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000318c  00000000  00000000  00001b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f6  00000000  00000000  00004d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021dc  00000000  00000000  00005f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009b4  00000000  00000000  000080ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001316  00000000  00000000  00008aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001aaf  00000000  00000000  00009db6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000b865  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__vector_1>
       8:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__vector_2>
       c:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__vector_6>
      1c:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <__vector_10>
      2c:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dd 01 	call	0x3ba	; 0x3ba <main>
      8a:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TempSensor>:

}

void TempSensor(void){
	//Read Voltage value from ADC conversion
	u8 Temp = ADC_u8StartConversion(0);
      92:	80 e0       	ldi	r24, 0x00	; 0
      94:	0e 94 0a 05 	call	0xa14	; 0xa14 <ADC_u8StartConversion>
	 * LM35 Temperature Sensor Vout Calculations with connection applied in proteus:
	 * Vout = 10 mV/C
	 * Vref = 5v
	 * Temp Calculation (Voltage Value*Voltage ref)/(10*(10^-3)*25*2^8)
	 */
	Temp = (u8)((Temp*5)/ (.01*256));
      98:	90 e0       	ldi	r25, 0x00	; 0
      9a:	bc 01       	movw	r22, r24
      9c:	66 0f       	add	r22, r22
      9e:	77 1f       	adc	r23, r23
      a0:	66 0f       	add	r22, r22
      a2:	77 1f       	adc	r23, r23
      a4:	68 0f       	add	r22, r24
      a6:	79 1f       	adc	r23, r25
      a8:	07 2e       	mov	r0, r23
      aa:	00 0c       	add	r0, r0
      ac:	88 0b       	sbc	r24, r24
      ae:	99 0b       	sbc	r25, r25
      b0:	0e 94 92 09 	call	0x1324	; 0x1324 <__floatsisf>
      b4:	2a e0       	ldi	r18, 0x0A	; 10
      b6:	37 ed       	ldi	r19, 0xD7	; 215
      b8:	43 e2       	ldi	r20, 0x23	; 35
      ba:	50 e4       	ldi	r21, 0x40	; 64
      bc:	0e 94 ef 08 	call	0x11de	; 0x11de <__divsf3>
      c0:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__fixunssfsi>
	//Check on Temp if over 35C ===> AC will work and turn off Fan if was on
	if(Temp>=35){
      c4:	63 32       	cpi	r22, 0x23	; 35
      c6:	58 f0       	brcs	.+22     	; 0xde <TempSensor+0x4c>
		//ac
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
      c8:	41 e0       	ldi	r20, 0x01	; 1
      ca:	66 e0       	ldi	r22, 0x06	; 6
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
		//fan
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
      d2:	40 e0       	ldi	r20, 0x00	; 0
      d4:	67 e0       	ldi	r22, 0x07	; 7
      d6:	83 e0       	ldi	r24, 0x03	; 3
      d8:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
      dc:	08 95       	ret
	}
	//Check on Temp if over 25C ===> Fan will work and turn off AC if was on
	else if (Temp>=25){
      de:	69 31       	cpi	r22, 0x19	; 25
      e0:	58 f0       	brcs	.+22     	; 0xf8 <TempSensor+0x66>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	66 e0       	ldi	r22, 0x06	; 6
      e6:	83 e0       	ldi	r24, 0x03	; 3
      e8:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH);
      ec:	41 e0       	ldi	r20, 0x01	; 1
      ee:	67 e0       	ldi	r22, 0x07	; 7
      f0:	83 e0       	ldi	r24, 0x03	; 3
      f2:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
      f6:	08 95       	ret
	}//Else State declare that Temp is lower than 25 so turning off both AC and Fan
	else{
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
      f8:	40 e0       	ldi	r20, 0x00	; 0
      fa:	66 e0       	ldi	r22, 0x06	; 6
      fc:	83 e0       	ldi	r24, 0x03	; 3
      fe:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
     102:	40 e0       	ldi	r20, 0x00	; 0
     104:	67 e0       	ldi	r22, 0x07	; 7
     106:	83 e0       	ldi	r24, 0x03	; 3
     108:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
     10c:	08 95       	ret

0000010e <void_SetEPROMLockerPass>:


}
void void_SetEPROMLockerPass(void ){
	// get low byte
	Global_u8SavedDoorPassLowByte=(u8)Global_u16EPROMDoorPass;
     10e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <Global_u16EPROMDoorPass>
     112:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     116:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <Global_u8SavedDoorPassLowByte>
	// get high byte
	Global_u8SavedDoorPassHighByte=(u8)(Global_u16EPROMDoorPass>>8);
     11a:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <Global_u8SavedDoorPassHighByte>
	// save low byte
	EEPROM_voidSendDataByte(Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
     11e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     122:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     126:	0e 94 1c 03 	call	0x638	; 0x638 <EEPROM_voidSendDataByte>
	TIMER_delay_ms(300);
     12a:	6c e2       	ldi	r22, 0x2C	; 44
     12c:	71 e0       	ldi	r23, 0x01	; 1
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 42 06 	call	0xc84	; 0xc84 <TIMER_delay_ms>
	// save high byte
	EEPROM_voidSendDataByte(Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
     136:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     13a:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     13e:	66 5f       	subi	r22, 0xF6	; 246
     140:	7f 4f       	sbci	r23, 0xFF	; 255
     142:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <Global_u8SavedDoorPassHighByte>
     146:	0e 94 1c 03 	call	0x638	; 0x638 <EEPROM_voidSendDataByte>
	TIMER_delay_ms(300);
     14a:	6c e2       	ldi	r22, 0x2C	; 44
     14c:	71 e0       	ldi	r23, 0x01	; 1
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 42 06 	call	0xc84	; 0xc84 <TIMER_delay_ms>
     156:	08 95       	ret

00000158 <void_Locker>:
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
	}
}

void void_Locker(){
     158:	cf 93       	push	r28
	/*To set new pass enter your old pass and press clear*/
	/* max password digits is 4*/

	// pressed key
	u8 Local_u8Keypad_Key=KPD_u8GetPressedKey();
     15a:	0e 94 9a 03 	call	0x734	; 0x734 <KPD_u8GetPressedKey>
     15e:	c8 2f       	mov	r28, r24
	/* case user entered clear */
		/* two cases to enter clear
		* First : To set new pass
		* Second : clear screen and clear the entered password
		*/
	if(Local_u8Keypad_Key==KPD_CLEAR){
     160:	8d 30       	cpi	r24, 0x0D	; 13
     162:	09 f0       	breq	.+2      	; 0x166 <void_Locker+0xe>
     164:	85 c0       	rjmp	.+266    	; 0x270 <void_Locker+0x118>

		// First case : set new pass
		if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
     166:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <Local_u16DoorPassword.1927>
     16a:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <Local_u16DoorPassword.1927+0x1>
     16e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <Global_u16EPROMDoorPass>
     172:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     176:	28 17       	cp	r18, r24
     178:	39 07       	cpc	r19, r25
     17a:	09 f0       	breq	.+2      	; 0x17e <void_Locker+0x26>
     17c:	70 c0       	rjmp	.+224    	; 0x25e <void_Locker+0x106>

			LCD_voidClearDisplay();
     17e:	0e 94 92 04 	call	0x924	; 0x924 <LCD_voidClearDisplay>
			// setting new password
				// clear all saved passes and digit counter
				Global_u16EPROMDoorPass=0;
     182:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     186:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <Global_u16EPROMDoorPass>
				Local_u16DoorPassword=0;
     18a:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <Local_u16DoorPassword.1927+0x1>
     18e:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <Local_u16DoorPassword.1927>
				Local_u8DigitsCount=0;
     192:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1928>

				LCD_voidSendString("Set new pass:");
     196:	8e e6       	ldi	r24, 0x6E	; 110
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_voidSendString>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				while(Local_u8Keypad_Key != KPD_ENTER ){

					Local_u8Keypad_Key=KPD_u8GetPressedKey();
     19e:	0e 94 9a 03 	call	0x734	; 0x734 <KPD_u8GetPressedKey>
     1a2:	c8 2f       	mov	r28, r24
					// check if the user entered more than 4 digits
					if(Local_u8DigitsCount==Max_Pass_Digits+1){
     1a4:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <Local_u8DigitsCount.1928>
     1a8:	85 30       	cpi	r24, 0x05	; 5
     1aa:	a1 f4       	brne	.+40     	; 0x1d4 <void_Locker+0x7c>
						LCD_voidClearDisplay();
     1ac:	0e 94 92 04 	call	0x924	; 0x924 <LCD_voidClearDisplay>
						LCD_voidSendString("ERROR !!!!");
     1b0:	8c e7       	ldi	r24, 0x7C	; 124
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_voidSendString>
						LCD_voidGoTOXY(1,0);
     1b8:	60 e0       	ldi	r22, 0x00	; 0
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_voidGoTOXY>
						LCD_voidSendString("Max Digits is 4");
     1c0:	87 e8       	ldi	r24, 0x87	; 135
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_voidSendString>
						Local_u8DigitsCount=0;
     1c8:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1928>
						Global_u16EPROMDoorPass=0;
     1cc:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     1d0:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <Global_u16EPROMDoorPass>
					}

					if(Local_u8Keypad_Key==KPD_CLEAR){
     1d4:	cd 30       	cpi	r28, 0x0D	; 13
     1d6:	49 f4       	brne	.+18     	; 0x1ea <void_Locker+0x92>
						Local_u8DigitsCount=0;
     1d8:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1928>
						LCD_voidClearDisplay();
     1dc:	0e 94 92 04 	call	0x924	; 0x924 <LCD_voidClearDisplay>
						Global_u16EPROMDoorPass=0;
     1e0:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     1e4:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <Global_u16EPROMDoorPass>
     1e8:	da cf       	rjmp	.-76     	; 0x19e <void_Locker+0x46>

					}
					else if(Local_u8Keypad_Key !=KPD_NO_PRESS && Local_u8Keypad_Key!=KPD_ENTER){
     1ea:	ca 3a       	cpi	r28, 0xAA	; 170
     1ec:	c1 f2       	breq	.-80     	; 0x19e <void_Locker+0x46>
     1ee:	cc 30       	cpi	r28, 0x0C	; 12
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <void_Locker+0x9c>
     1f2:	ac c0       	rjmp	.+344    	; 0x34c <void_Locker+0x1f4>
						// if it is the first digit that user enter --> clear any previous message on the screen
						if(Local_u8DigitsCount==0)
     1f4:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <Local_u8DigitsCount.1928>
     1f8:	81 11       	cpse	r24, r1
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <void_Locker+0xa8>
							LCD_voidClearDisplay();
     1fc:	0e 94 92 04 	call	0x924	; 0x924 <LCD_voidClearDisplay>
						/* dispaly the pressed key for 1.2 Sec then hide it and dispaly *  */
						LCD_voidSendNumber(Local_u8Keypad_Key);
     200:	6c 2f       	mov	r22, r28
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_voidSendNumber>
						TIMER_delay_ms(1200);
     20c:	60 eb       	ldi	r22, 0xB0	; 176
     20e:	74 e0       	ldi	r23, 0x04	; 4
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 42 06 	call	0xc84	; 0xc84 <TIMER_delay_ms>
						LCD_voidGoTOXY(0,Local_u8DigitsCount);
     218:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <Local_u8DigitsCount.1928>
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_voidGoTOXY>
						LCD_voidSendData('*');
     222:	8a e2       	ldi	r24, 0x2A	; 42
     224:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_voidSendData>
						Local_u8DigitsCount++;
     228:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <Local_u8DigitsCount.1928>
     22c:	8f 5f       	subi	r24, 0xFF	; 255
     22e:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <Local_u8DigitsCount.1928>
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
     232:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <Global_u16EPROMDoorPass>
     236:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     23a:	9c 01       	movw	r18, r24
     23c:	22 0f       	add	r18, r18
     23e:	33 1f       	adc	r19, r19
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	82 0f       	add	r24, r18
     24e:	93 1f       	adc	r25, r19
     250:	8c 0f       	add	r24, r28
     252:	91 1d       	adc	r25, r1
     254:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     258:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Global_u16EPROMDoorPass>
     25c:	a0 cf       	rjmp	.-192    	; 0x19e <void_Locker+0x46>

		}

		// Second case : to clear Screen or typed password
		else{
		LCD_voidClearDisplay();
     25e:	0e 94 92 04 	call	0x924	; 0x924 <LCD_voidClearDisplay>
		Local_u16DoorPassword=0;
     262:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <Local_u16DoorPassword.1927+0x1>
     266:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <Local_u16DoorPassword.1927>
		Local_u8DigitsCount=0;
     26a:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1928>
     26e:	78 c0       	rjmp	.+240    	; 0x360 <void_Locker+0x208>

		}
	}
	/******************************************************************************************************************************************************************/
	/* case user pressed enter or equal */
	else if(Local_u8Keypad_Key==KPD_ENTER){
     270:	8c 30       	cpi	r24, 0x0C	; 12
     272:	89 f5       	brne	.+98     	; 0x2d6 <void_Locker+0x17e>

		LCD_voidClearDisplay();
     274:	0e 94 92 04 	call	0x924	; 0x924 <LCD_voidClearDisplay>
		// check if entered pass is correct
		 if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
     278:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <Local_u16DoorPassword.1927>
     27c:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <Local_u16DoorPassword.1927+0x1>
     280:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <Global_u16EPROMDoorPass>
     284:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     288:	28 17       	cp	r18, r24
     28a:	39 07       	cpc	r19, r25
     28c:	c9 f4       	brne	.+50     	; 0x2c0 <void_Locker+0x168>
			// check door status
			if(Local_u8DoorStatus==0){
     28e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__data_end>
     292:	81 11       	cpse	r24, r1
     294:	0b c0       	rjmp	.+22     	; 0x2ac <void_Locker+0x154>
				LCD_voidSendString("Locker is opened");
     296:	87 e9       	ldi	r24, 0x97	; 151
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_voidSendString>
				// run servo
				Servo_voidDegree(180);
     29e:	84 eb       	ldi	r24, 0xB4	; 180
     2a0:	0e 94 dd 04 	call	0x9ba	; 0x9ba <Servo_voidDegree>
				Local_u8DoorStatus=1;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__data_end>
     2aa:	5a c0       	rjmp	.+180    	; 0x360 <void_Locker+0x208>

			}
			else{
				LCD_voidSendString("Locker is Closed");
     2ac:	88 ea       	ldi	r24, 0xA8	; 168
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_voidSendString>
				// stop servo
				Servo_voidDegree(0);
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <Servo_voidDegree>
				Local_u8DoorStatus=0;
     2ba:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <__data_end>
     2be:	50 c0       	rjmp	.+160    	; 0x360 <void_Locker+0x208>

			}

		}
		else{
			LCD_voidSendString("Wrong pass! ");
     2c0:	89 eb       	ldi	r24, 0xB9	; 185
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_voidSendString>
						_delay_ms(100);
					}
				}
			}*/
			// reset the entered password after typing enter
			Local_u16DoorPassword=0;
     2c8:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <Local_u16DoorPassword.1927+0x1>
     2cc:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <Local_u16DoorPassword.1927>
			Local_u8DigitsCount=0;
     2d0:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1928>
     2d4:	45 c0       	rjmp	.+138    	; 0x360 <void_Locker+0x208>
		}
	}

	/****************************************************************************************************************************************************************/
	/* Case user pressed a digit key*/
	else if(Local_u8Keypad_Key != KPD_NO_PRESS){
     2d6:	8a 3a       	cpi	r24, 0xAA	; 170
     2d8:	09 f4       	brne	.+2      	; 0x2dc <void_Locker+0x184>
     2da:	42 c0       	rjmp	.+132    	; 0x360 <void_Locker+0x208>
		// if it is the first digit that user enter --> clear any previous message on the screen
		if(Local_u8DigitsCount==0)
     2dc:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <Local_u8DigitsCount.1928>
     2e0:	81 11       	cpse	r24, r1
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <void_Locker+0x190>
			LCD_voidClearDisplay();
     2e4:	0e 94 92 04 	call	0x924	; 0x924 <LCD_voidClearDisplay>
		/* dispaly the pressed key for 1.2 Sec then hide it and dispaly *  */
		LCD_voidSendNumber(Local_u8Keypad_Key);
     2e8:	6c 2f       	mov	r22, r28
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 b5 04 	call	0x96a	; 0x96a <LCD_voidSendNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f4:	2f e7       	ldi	r18, 0x7F	; 127
     2f6:	8a e1       	ldi	r24, 0x1A	; 26
     2f8:	96 e0       	ldi	r25, 0x06	; 6
     2fa:	21 50       	subi	r18, 0x01	; 1
     2fc:	80 40       	sbci	r24, 0x00	; 0
     2fe:	90 40       	sbci	r25, 0x00	; 0
     300:	e1 f7       	brne	.-8      	; 0x2fa <void_Locker+0x1a2>
     302:	00 c0       	rjmp	.+0      	; 0x304 <void_Locker+0x1ac>
     304:	00 00       	nop
		_delay_ms(250);
		LCD_voidGoTOXY(0,Local_u8DigitsCount);
     306:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <Local_u8DigitsCount.1928>
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_voidGoTOXY>
		LCD_voidSendData('*');
     310:	8a e2       	ldi	r24, 0x2A	; 42
     312:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_voidSendData>

		Local_u8DigitsCount++;
     316:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <Local_u8DigitsCount.1928>
     31a:	8f 5f       	subi	r24, 0xFF	; 255
     31c:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <Local_u8DigitsCount.1928>
		Local_u16DoorPassword=Local_u16DoorPassword*10 + Local_u8Keypad_Key;
     320:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <Local_u16DoorPassword.1927>
     324:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <Local_u16DoorPassword.1927+0x1>
     328:	9c 01       	movw	r18, r24
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	88 0f       	add	r24, r24
     338:	99 1f       	adc	r25, r25
     33a:	82 0f       	add	r24, r18
     33c:	93 1f       	adc	r25, r19
     33e:	8c 0f       	add	r24, r28
     340:	91 1d       	adc	r25, r1
     342:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <Local_u16DoorPassword.1927+0x1>
     346:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <Local_u16DoorPassword.1927>


	}


}
     34a:	0a c0       	rjmp	.+20     	; 0x360 <void_Locker+0x208>
						Local_u8DigitsCount++;
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
					}

				}
				LCD_voidClearDisplay();
     34c:	0e 94 92 04 	call	0x924	; 0x924 <LCD_voidClearDisplay>
				LCD_voidSendString("pass is updated");
     350:	86 ec       	ldi	r24, 0xC6	; 198
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_voidSendString>
				// reset counter
				Local_u8DigitsCount=0;
     358:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1928>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				// save the new pass to eeprom
				void_SetEPROMLockerPass();
     35c:	0e 94 87 00 	call	0x10e	; 0x10e <void_SetEPROMLockerPass>


	}


}
     360:	cf 91       	pop	r28
     362:	08 95       	ret

00000364 <void_GetEPROMLockerPass>:
}

void void_GetEPROMLockerPass(void){

	// read pass low byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
     364:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     368:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     36c:	87 ea       	ldi	r24, 0xA7	; 167
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	0e 94 34 03 	call	0x668	; 0x668 <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
     374:	6c e2       	ldi	r22, 0x2C	; 44
     376:	71 e0       	ldi	r23, 0x01	; 1
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 42 06 	call	0xc84	; 0xc84 <TIMER_delay_ms>
	// read pass high byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
     380:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     384:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     388:	66 5f       	subi	r22, 0xF6	; 246
     38a:	7f 4f       	sbci	r23, 0xFF	; 255
     38c:	84 ea       	ldi	r24, 0xA4	; 164
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	0e 94 34 03 	call	0x668	; 0x668 <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
     394:	6c e2       	ldi	r22, 0x2C	; 44
     396:	71 e0       	ldi	r23, 0x01	; 1
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 42 06 	call	0xc84	; 0xc84 <TIMER_delay_ms>
	// combine the high and low byte
	Global_u16EPROMDoorPass= ( (u16)(Global_u8SavedDoorPassHighByte<<8) )| Global_u8SavedDoorPassLowByte;
     3a0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <Global_u8SavedDoorPassHighByte>
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	98 2f       	mov	r25, r24
     3a8:	88 27       	eor	r24, r24
     3aa:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <Global_u8SavedDoorPassLowByte>
     3ae:	82 2b       	or	r24, r18
     3b0:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     3b4:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Global_u16EPROMDoorPass>
     3b8:	08 95       	ret

000003ba <main>:
void void_Locker(void);
void void_SetEPROMLockerPass(void);
void void_GetEPROMLockerPass(void);

void main(void)
{	
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	1f 92       	push	r1
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16EPROMSystemStateAddress=5;
	u8 Local_u8EPROMSystemState=0;
     3c4:	19 82       	std	Y+1, r1	; 0x01
	
	ADC_voidInit();
     3c6:	0e 94 02 05 	call	0xa04	; 0xa04 <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_OUTPUT);
     3ca:	41 e0       	ldi	r20, 0x01	; 1
     3cc:	66 e0       	ldi	r22, 0x06	; 6
     3ce:	83 e0       	ldi	r24, 0x03	; 3
     3d0:	0e 94 16 05 	call	0xa2c	; 0xa2c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_OUTPUT);
     3d4:	41 e0       	ldi	r20, 0x01	; 1
     3d6:	67 e0       	ldi	r22, 0x07	; 7
     3d8:	83 e0       	ldi	r24, 0x03	; 3
     3da:	0e 94 16 05 	call	0xa2c	; 0xa2c <DIO_voidSetPinDirection>

	LCD_voidInit();
     3de:	0e 94 69 04 	call	0x8d2	; 0x8d2 <LCD_voidInit>
	KPD_voidInit();
     3e2:	0e 94 53 03 	call	0x6a6	; 0x6a6 <KPD_voidInit>
	//servo pin
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
     3e6:	41 e0       	ldi	r20, 0x01	; 1
     3e8:	65 e0       	ldi	r22, 0x05	; 5
     3ea:	83 e0       	ldi	r24, 0x03	; 3
     3ec:	0e 94 16 05 	call	0xa2c	; 0xa2c <DIO_voidSetPinDirection>
	Servo_voidInit();
     3f0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Servo_voidInit>

	TWI_voidMasterInit(0);
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	0e 94 78 07 	call	0xef0	; 0xef0 <TWI_voidMasterInit>
	
	/*Read system state form EPROM to check if this is the first time to run the project*/
	EEPROM_voidReadDataByte(&Local_u8EPROMSystemState,Local_u16EPROMSystemStateAddress);
     3fa:	65 e0       	ldi	r22, 0x05	; 5
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	ce 01       	movw	r24, r28
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	0e 94 34 03 	call	0x668	; 0x668 <EEPROM_voidReadDataByte>
	if(Local_u8EPROMSystemState != SystemHasRunBefore){
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	8c 31       	cpi	r24, 0x1C	; 28
     40a:	d1 f0       	breq	.+52     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		LCD_voidSendString("First Run");
     40c:	86 ed       	ldi	r24, 0xD6	; 214
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_voidSendString>
		// save the system state as has run before
		Local_u8EPROMSystemState=SystemHasRunBefore;
     414:	8c e1       	ldi	r24, 0x1C	; 28
     416:	89 83       	std	Y+1, r24	; 0x01
		// save initial password = 100
		Global_u16EPROMDoorPass=1234;
     418:	82 ed       	ldi	r24, 0xD2	; 210
     41a:	94 e0       	ldi	r25, 0x04	; 4
     41c:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     420:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Global_u16EPROMDoorPass>
		void_SetEPROMLockerPass();
     424:	0e 94 87 00 	call	0x10e	; 0x10e <void_SetEPROMLockerPass>
		// save the system state to eprom
		EEPROM_voidSendDataByte(Local_u8EPROMSystemState,Local_u16EPROMSystemStateAddress);
     428:	65 e0       	ldi	r22, 0x05	; 5
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	0e 94 1c 03 	call	0x638	; 0x638 <EEPROM_voidSendDataByte>
		TIMER_delay_ms(300);
     432:	6c e2       	ldi	r22, 0x2C	; 44
     434:	71 e0       	ldi	r23, 0x01	; 1
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 42 06 	call	0xc84	; 0xc84 <TIMER_delay_ms>
     43e:	04 c0       	rjmp	.+8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	}
	else
		LCD_voidSendString("System is On");
     440:	80 ee       	ldi	r24, 0xE0	; 224
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_voidSendString>

	// get the saved password and store it the global EPROM_variable
	void_GetEPROMLockerPass();
     448:	0e 94 b2 01 	call	0x364	; 0x364 <void_GetEPROMLockerPass>
	
	//LCD_voidSendNumber(Global_u16EPROMDoorPass);
	//WDT
	WDT_voidInit();
     44c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <WDT_voidInit>
	
	// Initialize USART
	USART_voidInit();
     450:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <USART_voidInit>
	//Initialize Call Back Function
	USART_voidCallBackFunction(&USART_Start);
     454:	88 e6       	ldi	r24, 0x68	; 104
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	0e 94 43 08 	call	0x1086	; 0x1086 <USART_voidCallBackFunction>
	//Enable USART PIE
	USART_voidEnableRxINT();
     45c:	0e 94 48 08 	call	0x1090	; 0x1090 <USART_voidEnableRxINT>
	//Enable GIE
	GIE_voidEnableGlobalInt();
     460:	0e 94 3e 06 	call	0xc7c	; 0xc7c <GIE_voidEnableGlobalInt>
	// LED Pins
	DIO_voidSetPinDirection(DIO_PORTC,LIGHT1,DIO_OUTPUT);
     464:	41 e0       	ldi	r20, 0x01	; 1
     466:	65 e0       	ldi	r22, 0x05	; 5
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	0e 94 16 05 	call	0xa2c	; 0xa2c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,LIGHT2,DIO_OUTPUT);
     46e:	41 e0       	ldi	r20, 0x01	; 1
     470:	66 e0       	ldi	r22, 0x06	; 6
     472:	82 e0       	ldi	r24, 0x02	; 2
     474:	0e 94 16 05 	call	0xa2c	; 0xa2c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,LIGHT3,DIO_OUTPUT);
     478:	41 e0       	ldi	r20, 0x01	; 1
     47a:	67 e0       	ldi	r22, 0x07	; 7
     47c:	82 e0       	ldi	r24, 0x02	; 2
     47e:	0e 94 16 05 	call	0xa2c	; 0xa2c <DIO_voidSetPinDirection>

	while(1){
		WDT_voidReset();
     482:	0e 94 80 08 	call	0x1100	; 0x1100 <WDT_voidReset>
		/*USART is Controlled by ISR TIMER1_COMPB*/
		USART_voidEnableRxINT();
     486:	0e 94 48 08 	call	0x1090	; 0x1090 <USART_voidEnableRxINT>
		//Call locker Control Function
		WDT_voidReset();
     48a:	0e 94 80 08 	call	0x1100	; 0x1100 <WDT_voidReset>
		void_Locker();
     48e:	0e 94 ac 00 	call	0x158	; 0x158 <void_Locker>
		//Call Temperature Sensor Control Function
		TempSensor();
     492:	0e 94 49 00 	call	0x92	; 0x92 <TempSensor>
     496:	f5 cf       	rjmp	.-22     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>

00000498 <USART_voidProcessCommand>:
	}
	//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
	Servo_voidInit();
}

ConditionsState USART_voidProcessCommand(u8 command,u8 Local_LightNum) {
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	c8 2f       	mov	r28, r24
     49e:	d6 2f       	mov	r29, r22
	ConditionsState Con_St = NoErrors; // Check Variable
	LCD_voidClearDisplay();
     4a0:	0e 94 92 04 	call	0x924	; 0x924 <LCD_voidClearDisplay>
	//Check Command to turn Light on or off
	if (command=='1') {
     4a4:	c1 33       	cpi	r28, 0x31	; 49
     4a6:	39 f4       	brne	.+14     	; 0x4b6 <USART_voidProcessCommand+0x1e>
		// Turning ON ROOM 1 LIGHT
		DIO_voidSetPinValue(DIO_PORTC,Local_LightNum,DIO_HIGH);
     4a8:	41 e0       	ldi	r20, 0x01	; 1
     4aa:	6d 2f       	mov	r22, r29
     4ac:	82 e0       	ldi	r24, 0x02	; 2
     4ae:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
		
		Con_St = ROOM_LIGHT_ON;
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	0a c0       	rjmp	.+20     	; 0x4ca <USART_voidProcessCommand+0x32>
	}
	else if ( command=='0') {
     4b6:	c0 33       	cpi	r28, 0x30	; 48
     4b8:	39 f4       	brne	.+14     	; 0x4c8 <USART_voidProcessCommand+0x30>
		// Turning OFF ROOM 1 LIGHT
		DIO_voidSetPinValue(DIO_PORTC,Local_LightNum,DIO_LOW);
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	6d 2f       	mov	r22, r29
     4be:	82 e0       	ldi	r24, 0x02	; 2
     4c0:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
		
		Con_St = ROOM_LIGHT_OFF;
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	01 c0       	rjmp	.+2      	; 0x4ca <USART_voidProcessCommand+0x32>
	}
	else{ // IF input is not 0 nor 1 ==> INCORRECT INP
		Con_St = Input_Format_Is_Incorrect;
     4c8:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Con_St;
}
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <USART_Start>:
	TIMER_delay_ms(300);
	// combine the high and low byte
	Global_u16EPROMDoorPass= ( (u16)(Global_u8SavedDoorPassHighByte<<8) )| Global_u8SavedDoorPassLowByte;
}

void USART_Start(void){
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	00 d0       	rcall	.+0      	; 0x4e2 <USART_Start+0x12>
     4e2:	00 d0       	rcall	.+0      	; 0x4e4 <USART_Start+0x14>
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <USART_Start+0x16>
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
	//Save First Received Input AS It MUST be '*' If not return from function
	u8 FirstReceived = USART_u8ReceiverData();
     4ea:	0e 94 f7 07 	call	0xfee	; 0xfee <USART_u8ReceiverData>
	if(FirstReceived!='*')
     4ee:	8a 32       	cpi	r24, 0x2A	; 42
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <USART_Start+0x24>
     4f2:	93 c0       	rjmp	.+294    	; 0x61a <USART_Start+0x14a>
		return;
	//Start Display Message
	USART_voidTransmitString("Expected INP Format \" *i*x*x# \" :\r");
     4f4:	8d ee       	ldi	r24, 0xED	; 237
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 2d 08 	call	0x105a	; 0x105a <USART_voidTransmitString>

	//Display first '*'
	USART_voidTransmitData(FirstReceived);
     4fc:	8a e2       	ldi	r24, 0x2A	; 42
     4fe:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <USART_voidTransmitData>

	//Clear LCD to Start Displaying on it
	LCD_voidClearDisplay();
     502:	0e 94 92 04 	call	0x924	; 0x924 <LCD_voidClearDisplay>
	LCD_voidSendData('*');
     506:	8a e2       	ldi	r24, 0x2A	; 42
     508:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_voidSendData>
     50c:	8e 01       	movw	r16, r28
     50e:	0f 5f       	subi	r16, 0xFF	; 255
     510:	1f 4f       	sbci	r17, 0xFF	; 255
     512:	6e 01       	movw	r12, r28
     514:	87 e0       	ldi	r24, 0x07	; 7
     516:	c8 0e       	add	r12, r24
     518:	d1 1c       	adc	r13, r1
	TimeOut TimeOut_Err;
	// Loop until reaching Max val of Input, if stucked Timer will INT and Time out
	while (Max_Num) {
		 //Receive data element by element
		 TimeOut TimeOut_Err;
		 TimeOut_Err = USART_u8TimeOUTReceiverData(&DataReceived[DataIdx]);
     51a:	78 01       	movw	r14, r16
     51c:	c8 01       	movw	r24, r16
     51e:	0e 94 fb 07 	call	0xff6	; 0xff6 <USART_u8TimeOUTReceiverData>
		//DataReceived[DataIdx] = USART_u8ReceiverData();
		if(TimeOut_Err == TimeOUT_Occured){
     522:	81 30       	cpi	r24, 0x01	; 1
     524:	79 f4       	brne	.+30     	; 0x544 <USART_Start+0x74>
			 * 1- SET TCNT1 with 0 before initializing timer
			 * 2- SET Comparing Value by TIMEOUTVALUE Macro  e.g. 40000====> 5.12 sec "time waiting before time out"
			 * 3- Initialize Timer with 1024 Prescaler
			 */
			//Sending Warning Message if TIMEOUT and return from function
			USART_voidTransmitData('\r');
     526:	8d e0       	ldi	r24, 0x0D	; 13
     528:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <USART_voidTransmitData>
			USART_voidTransmitString("##ERROR: Time Out");
     52c:	80 e1       	ldi	r24, 0x10	; 16
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	0e 94 2d 08 	call	0x105a	; 0x105a <USART_voidTransmitString>
			USART_voidTransmitData('\r');
     534:	8d e0       	ldi	r24, 0x0D	; 13
     536:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <USART_voidTransmitData>
			//Clear LCD
			LCD_voidClearDisplay();
     53a:	0e 94 92 04 	call	0x924	; 0x924 <LCD_voidClearDisplay>
			//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
			Servo_voidInit();
     53e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Servo_voidInit>
			return;
     542:	6b c0       	rjmp	.+214    	; 0x61a <USART_Start+0x14a>
		}
		//Send Received Data to Display it on Virtual Terminal
		USART_voidTransmitData(DataReceived[DataIdx] );
     544:	f8 01       	movw	r30, r16
     546:	81 91       	ld	r24, Z+
     548:	8f 01       	movw	r16, r30
     54a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <USART_voidTransmitData>
		//Display Data on LCD
		LCD_voidSendData(DataReceived[DataIdx]);
     54e:	f7 01       	movw	r30, r14
     550:	80 81       	ld	r24, Z
     552:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_voidSendData>
	//Containing max enter value
	u8 Max_Num = INPUT_DECIDED_LENGTH-1;
	//initialize error state
	TimeOut TimeOut_Err;
	// Loop until reaching Max val of Input, if stucked Timer will INT and Time out
	while (Max_Num) {
     556:	0c 15       	cp	r16, r12
     558:	1d 05       	cpc	r17, r13
     55a:	f9 f6       	brne	.-66     	; 0x51a <USART_Start+0x4a>
		Max_Num --;
	
			}

	//Display Enter in the terminal
	USART_voidTransmitData('\r');
     55c:	8d e0       	ldi	r24, 0x0D	; 13
     55e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <USART_voidTransmitData>

	//Checking Input Format
	ConditionsState Con_St=NoErrors;
	//Check all input Defined values * and i and * and * and #
	if(DataReceived[0]!='i' || DataReceived[1]!='*' || DataReceived[3]!='*' || DataReceived[5]!='#'){
     562:	89 81       	ldd	r24, Y+1	; 0x01
     564:	89 36       	cpi	r24, 0x69	; 105
     566:	49 f4       	brne	.+18     	; 0x57a <USART_Start+0xaa>
     568:	8a 81       	ldd	r24, Y+2	; 0x02
     56a:	8a 32       	cpi	r24, 0x2A	; 42
     56c:	31 f4       	brne	.+12     	; 0x57a <USART_Start+0xaa>
     56e:	8c 81       	ldd	r24, Y+4	; 0x04
     570:	8a 32       	cpi	r24, 0x2A	; 42
     572:	19 f4       	brne	.+6      	; 0x57a <USART_Start+0xaa>
     574:	8e 81       	ldd	r24, Y+6	; 0x06
     576:	83 32       	cpi	r24, 0x23	; 35
     578:	39 f0       	breq	.+14     	; 0x588 <USART_Start+0xb8>
		Con_St = Input_Format_Is_Incorrect;
		USART_voidTransmitString("##INCORRECT INPUT FORMAT\r");
     57a:	82 e2       	ldi	r24, 0x22	; 34
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	0e 94 2d 08 	call	0x105a	; 0x105a <USART_voidTransmitString>
		//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
		Servo_voidInit();
     582:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Servo_voidInit>
		return;
     586:	49 c0       	rjmp	.+146    	; 0x61a <USART_Start+0x14a>
	}
	// Check First Undefined Val to be 1 or 2 or 3
	// also, sending it to USART_voidProcessCommand to light correct led
	// Receiving return value as indicator to incorrect second undefined Val
	if(DataReceived[2]=='1')
     588:	8b 81       	ldd	r24, Y+3	; 0x03
     58a:	81 33       	cpi	r24, 0x31	; 49
     58c:	31 f4       	brne	.+12     	; 0x59a <USART_Start+0xca>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT1);
     58e:	65 e0       	ldi	r22, 0x05	; 5
     590:	8d 81       	ldd	r24, Y+5	; 0x05
     592:	0e 94 4c 02 	call	0x498	; 0x498 <USART_voidProcessCommand>
     596:	18 2f       	mov	r17, r24
     598:	0f c0       	rjmp	.+30     	; 0x5b8 <USART_Start+0xe8>
	else if(DataReceived[2]=='2')
     59a:	82 33       	cpi	r24, 0x32	; 50
     59c:	31 f4       	brne	.+12     	; 0x5aa <USART_Start+0xda>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT2);
     59e:	66 e0       	ldi	r22, 0x06	; 6
     5a0:	8d 81       	ldd	r24, Y+5	; 0x05
     5a2:	0e 94 4c 02 	call	0x498	; 0x498 <USART_voidProcessCommand>
     5a6:	18 2f       	mov	r17, r24
     5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <USART_Start+0xe8>
	else if (DataReceived[2]=='3')
     5aa:	83 33       	cpi	r24, 0x33	; 51
     5ac:	39 f4       	brne	.+14     	; 0x5bc <USART_Start+0xec>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT3);
     5ae:	67 e0       	ldi	r22, 0x07	; 7
     5b0:	8d 81       	ldd	r24, Y+5	; 0x05
     5b2:	0e 94 4c 02 	call	0x498	; 0x498 <USART_voidProcessCommand>
     5b6:	18 2f       	mov	r17, r24
	else// If First Undefined Val is not correct
		Con_St = Input_Format_Is_Incorrect;
	//Check on Con_St Condition
	if(Con_St == Input_Format_Is_Incorrect)//There's an Error in the Format Entered
     5b8:	13 30       	cpi	r17, 0x03	; 3
     5ba:	29 f4       	brne	.+10     	; 0x5c6 <USART_Start+0xf6>
		USART_voidTransmitString("##INCORRECT ROOM Num or State\r");
     5bc:	8c e3       	ldi	r24, 0x3C	; 60
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 2d 08 	call	0x105a	; 0x105a <USART_voidTransmitString>
     5c4:	28 c0       	rjmp	.+80     	; 0x616 <USART_Start+0x146>
	else{//Check is Completed and there's no Error
		USART_voidTransmitString("ROOM ");
     5c6:	8b e5       	ldi	r24, 0x5B	; 91
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	0e 94 2d 08 	call	0x105a	; 0x105a <USART_voidTransmitString>
		USART_voidTransmitData(DataReceived[2]);
     5ce:	8b 81       	ldd	r24, Y+3	; 0x03
     5d0:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <USART_voidTransmitData>
		if(Con_St==ROOM_LIGHT_ON){
     5d4:	11 30       	cpi	r17, 0x01	; 1
     5d6:	81 f4       	brne	.+32     	; 0x5f8 <USART_Start+0x128>
			USART_voidTransmitString(" Light Is ON\r");
     5d8:	81 e6       	ldi	r24, 0x61	; 97
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	0e 94 2d 08 	call	0x105a	; 0x105a <USART_voidTransmitString>
			LCD_voidSendString("ROOM ");
     5e0:	8b e5       	ldi	r24, 0x5B	; 91
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_voidSendString>
			// display the room number
			LCD_voidSendData(DataReceived[2]);
     5e8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ea:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_voidSendData>
			LCD_voidSendString(" is ON");
     5ee:	8f e6       	ldi	r24, 0x6F	; 111
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_voidSendString>
     5f6:	0f c0       	rjmp	.+30     	; 0x616 <USART_Start+0x146>
			}
		else{
			USART_voidTransmitString(" Light Is OFF\r");
     5f8:	86 e7       	ldi	r24, 0x76	; 118
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 2d 08 	call	0x105a	; 0x105a <USART_voidTransmitString>
			LCD_voidSendString("ROOM ");
     600:	8b e5       	ldi	r24, 0x5B	; 91
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_voidSendString>
			// display the room number
			LCD_voidSendData(DataReceived[2]);
     608:	8b 81       	ldd	r24, Y+3	; 0x03
     60a:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_voidSendData>
			LCD_voidSendString(" is OFF");
     60e:	85 e8       	ldi	r24, 0x85	; 133
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_voidSendString>
		}
	}
	//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
	Servo_voidInit();
     616:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Servo_voidInit>
}
     61a:	26 96       	adiw	r28, 0x06	; 6
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	de bf       	out	0x3e, r29	; 62
     622:	0f be       	out	0x3f, r0	; 63
     624:	cd bf       	out	0x3d, r28	; 61
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	ff 90       	pop	r15
     630:	ef 90       	pop	r14
     632:	df 90       	pop	r13
     634:	cf 90       	pop	r12
     636:	08 95       	ret

00000638 <EEPROM_voidSendDataByte>:

#include "../../MCAL/TWI_Driver/TWI_interface.h"
#include "EPROM_interface.h"

void EEPROM_voidSendDataByte(u8 Copy_u8DataByte,u16 Copy_u16LocationAddress)
{	u8 Address = ((0b1010<<3) | (A2<<2) | (Copy_u16LocationAddress>>8));
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	c8 2f       	mov	r28, r24
     640:	d6 2f       	mov	r29, r22
     642:	17 2f       	mov	r17, r23

	TWI_SendStartCondition();
     644:	0e 94 84 07 	call	0xf08	; 0xf08 <TWI_SendStartCondition>
	TWI_SendSlaveAddressWithWrite(Address);
     648:	81 2f       	mov	r24, r17
     64a:	80 65       	ori	r24, 0x50	; 80
     64c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <TWI_SendSlaveAddressWithWrite>
	//TWI_SendSlaveAddressWithWrite(0b1010000);/**/

	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
     650:	8d 2f       	mov	r24, r29
     652:	0e 94 c5 07 	call	0xf8a	; 0xf8a <TWI_MasterWriteDataByte>
	TWI_MasterWriteDataByte(Copy_u8DataByte);
     656:	8c 2f       	mov	r24, r28
     658:	0e 94 c5 07 	call	0xf8a	; 0xf8a <TWI_MasterWriteDataByte>
	TWI_SendStopCondition();
     65c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <TWI_SendStopCondition>
}
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	08 95       	ret

00000668 <EEPROM_voidReadDataByte>:

void EEPROM_voidReadDataByte(u8 *Copy_u8DataByte,u16 Copy_u16LocationAddress)
{	u8 Address = ((0b1010<<3) | (A2<<2) | (Copy_u16LocationAddress>>8));
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	8c 01       	movw	r16, r24
     672:	d6 2f       	mov	r29, r22
     674:	c7 2f       	mov	r28, r23
     676:	c0 65       	ori	r28, 0x50	; 80
	TWI_SendStartCondition();
     678:	0e 94 84 07 	call	0xf08	; 0xf08 <TWI_SendStartCondition>
	TWI_SendSlaveAddressWithWrite(Address);
     67c:	8c 2f       	mov	r24, r28
     67e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <TWI_SendSlaveAddressWithWrite>
	//TWI_SendSlaveAddressWithWrite(0b1010000);

	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
     682:	8d 2f       	mov	r24, r29
     684:	0e 94 c5 07 	call	0xf8a	; 0xf8a <TWI_MasterWriteDataByte>

	TWI_SendRepeatedStart();
     688:	0e 94 94 07 	call	0xf28	; 0xf28 <TWI_SendRepeatedStart>

	//TWI_MasterWriteDataByte(0b10100001);/**/
	TWI_SendSlaveAddressWithRead(Address);
     68c:	8c 2f       	mov	r24, r28
     68e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <TWI_SendSlaveAddressWithRead>
	TWI_MasterReadDataByte(Copy_u8DataByte);
     692:	c8 01       	movw	r24, r16
     694:	0e 94 cf 07 	call	0xf9e	; 0xf9e <TWI_MasterReadDataByte>
	TWI_SendStopCondition();
     698:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <TWI_SendStopCondition>
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	0f 91       	pop	r16
     6a4:	08 95       	ret

000006a6 <KPD_voidInit>:
			
void KPD_voidInit(){
	
	
	// set col s output high
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL0_PIN,DIO_OUTPUT);
     6a6:	41 e0       	ldi	r20, 0x01	; 1
     6a8:	62 e0       	ldi	r22, 0x02	; 2
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	0e 94 16 05 	call	0xa2c	; 0xa2c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL1_PIN,DIO_OUTPUT);
     6b0:	41 e0       	ldi	r20, 0x01	; 1
     6b2:	63 e0       	ldi	r22, 0x03	; 3
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	0e 94 16 05 	call	0xa2c	; 0xa2c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL2_PIN,DIO_OUTPUT);
     6ba:	41 e0       	ldi	r20, 0x01	; 1
     6bc:	64 e0       	ldi	r22, 0x04	; 4
     6be:	82 e0       	ldi	r24, 0x02	; 2
     6c0:	0e 94 16 05 	call	0xa2c	; 0xa2c <DIO_voidSetPinDirection>
	//DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL3_PIN,DIO_OUTPUT);

	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL0_PIN,DIO_HIGH);
     6c4:	41 e0       	ldi	r20, 0x01	; 1
     6c6:	62 e0       	ldi	r22, 0x02	; 2
     6c8:	82 e0       	ldi	r24, 0x02	; 2
     6ca:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL1_PIN,DIO_HIGH);
     6ce:	41 e0       	ldi	r20, 0x01	; 1
     6d0:	63 e0       	ldi	r22, 0x03	; 3
     6d2:	82 e0       	ldi	r24, 0x02	; 2
     6d4:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL2_PIN,DIO_HIGH);
     6d8:	41 e0       	ldi	r20, 0x01	; 1
     6da:	64 e0       	ldi	r22, 0x04	; 4
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL3_PIN,DIO_HIGH);

	// set rows input pull up
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_INPUT);
     6e2:	40 e0       	ldi	r20, 0x00	; 0
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	0e 94 16 05 	call	0xa2c	; 0xa2c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_INPUT);
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	62 e0       	ldi	r22, 0x02	; 2
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	0e 94 16 05 	call	0xa2c	; 0xa2c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_INPUT);
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	63 e0       	ldi	r22, 0x03	; 3
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	0e 94 16 05 	call	0xa2c	; 0xa2c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_INPUT);
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	64 e0       	ldi	r22, 0x04	; 4
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	0e 94 16 05 	call	0xa2c	; 0xa2c <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_HIGH);
     70a:	41 e0       	ldi	r20, 0x01	; 1
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_HIGH);
     714:	41 e0       	ldi	r20, 0x01	; 1
     716:	62 e0       	ldi	r22, 0x02	; 2
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_HIGH);
     71e:	41 e0       	ldi	r20, 0x01	; 1
     720:	63 e0       	ldi	r22, 0x03	; 3
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_HIGH);
     728:	41 e0       	ldi	r20, 0x01	; 1
     72a:	64 e0       	ldi	r22, 0x04	; 4
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
     732:	08 95       	ret

00000734 <KPD_u8GetPressedKey>:

}

u8 KPD_u8GetPressedKey(void){
     734:	4f 92       	push	r4
     736:	5f 92       	push	r5
     738:	6f 92       	push	r6
     73a:	7f 92       	push	r7
     73c:	8f 92       	push	r8
     73e:	9f 92       	push	r9
     740:	af 92       	push	r10
     742:	bf 92       	push	r11
     744:	cf 92       	push	r12
     746:	df 92       	push	r13
     748:	ef 92       	push	r14
     74a:	ff 92       	push	r15
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
     758:	63 97       	sbiw	r28, 0x13	; 19
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	de bf       	out	0x3e, r29	; 62
     760:	0f be       	out	0x3f, r0	; 63
     762:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8Pressedkey= KPD_NO_PRESS;
	u8 Local_u8RowxValue ;


	u8 Local_u8ColumnsArray[]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN};
     764:	22 e0       	ldi	r18, 0x02	; 2
     766:	29 83       	std	Y+1, r18	; 0x01
     768:	93 e0       	ldi	r25, 0x03	; 3
     76a:	9a 83       	std	Y+2, r25	; 0x02
     76c:	84 e0       	ldi	r24, 0x04	; 4
     76e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
     770:	31 e0       	ldi	r19, 0x01	; 1
     772:	3c 83       	std	Y+4, r19	; 0x04
     774:	2d 83       	std	Y+5, r18	; 0x05
     776:	9e 83       	std	Y+6, r25	; 0x06
     778:	8f 83       	std	Y+7, r24	; 0x07

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;
     77a:	8c e0       	ldi	r24, 0x0C	; 12
     77c:	e2 e6       	ldi	r30, 0x62	; 98
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	de 01       	movw	r26, r28
     782:	18 96       	adiw	r26, 0x08	; 8
     784:	01 90       	ld	r0, Z+
     786:	0d 92       	st	X+, r0
     788:	8a 95       	dec	r24
     78a:	e1 f7       	brne	.-8      	; 0x784 <KPD_u8GetPressedKey+0x50>
     78c:	ce 01       	movw	r24, r28
     78e:	01 96       	adiw	r24, 0x01	; 1
     790:	4c 01       	movw	r8, r24
     792:	a1 2c       	mov	r10, r1
     794:	b1 2c       	mov	r11, r1


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);
     796:	35 01       	movw	r6, r10
     798:	f4 01       	movw	r30, r8
     79a:	41 90       	ld	r4, Z+
     79c:	4f 01       	movw	r8, r30
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	64 2d       	mov	r22, r4
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
     7a8:	7e 01       	movw	r14, r28
     7aa:	f4 e0       	ldi	r31, 0x04	; 4
     7ac:	ef 0e       	add	r14, r31
     7ae:	f1 1c       	adc	r15, r1
     7b0:	00 e0       	ldi	r16, 0x00	; 0
     7b2:	10 e0       	ldi	r17, 0x00	; 0

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){

			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
     7b4:	68 01       	movw	r12, r16
     7b6:	f7 01       	movw	r30, r14
     7b8:	51 90       	ld	r5, Z+
     7ba:	7f 01       	movw	r14, r30
     7bc:	65 2d       	mov	r22, r5
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	0e 94 92 05 	call	0xb24	; 0xb24 <DIO_u8GetPinValue>

			if(Local_u8RowxValue==0){
     7c4:	81 11       	cpse	r24, r1
     7c6:	17 c0       	rjmp	.+46     	; 0x7f6 <KPD_u8GetPressedKey+0xc2>

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
     7c8:	c8 01       	movw	r24, r16
     7ca:	88 0f       	add	r24, r24
     7cc:	99 1f       	adc	r25, r25
     7ce:	c8 0e       	add	r12, r24
     7d0:	d9 1e       	adc	r13, r25
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	8c 0f       	add	r24, r28
     7d8:	9d 1f       	adc	r25, r29
     7da:	c8 0e       	add	r12, r24
     7dc:	d9 1e       	adc	r13, r25
     7de:	f6 01       	movw	r30, r12
     7e0:	e6 0d       	add	r30, r6
     7e2:	f7 1d       	adc	r31, r7
     7e4:	17 81       	ldd	r17, Z+7	; 0x07
				while(Local_u8RowxValue==0){
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
     7e6:	65 2d       	mov	r22, r5
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	0e 94 92 05 	call	0xb24	; 0xb24 <DIO_u8GetPinValue>
			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

			if(Local_u8RowxValue==0){

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
				while(Local_u8RowxValue==0){
     7ee:	88 23       	and	r24, r24
     7f0:	d1 f3       	breq	.-12     	; 0x7e6 <KPD_u8GetPressedKey+0xb2>
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

				}

				return Local_u8Pressedkey ;
     7f2:	81 2f       	mov	r24, r17
     7f4:	13 c0       	rjmp	.+38     	; 0x81c <KPD_u8GetPressedKey+0xe8>
     7f6:	0f 5f       	subi	r16, 0xFF	; 255
     7f8:	1f 4f       	sbci	r17, 0xFF	; 255

	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){
     7fa:	04 30       	cpi	r16, 0x04	; 4
     7fc:	11 05       	cpc	r17, r1
     7fe:	d1 f6       	brne	.-76     	; 0x7b4 <KPD_u8GetPressedKey+0x80>
			}


		}

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_HIGH);
     800:	41 e0       	ldi	r20, 0x01	; 1
     802:	64 2d       	mov	r22, r4
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
     80a:	9f ef       	ldi	r25, 0xFF	; 255
     80c:	a9 1a       	sub	r10, r25
     80e:	b9 0a       	sbc	r11, r25
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){
     810:	e3 e0       	ldi	r30, 0x03	; 3
     812:	ae 16       	cp	r10, r30
     814:	b1 04       	cpc	r11, r1
     816:	09 f0       	breq	.+2      	; 0x81a <KPD_u8GetPressedKey+0xe6>
     818:	be cf       	rjmp	.-132    	; 0x796 <KPD_u8GetPressedKey+0x62>


	}


	return Local_u8Pressedkey ;
     81a:	8a ea       	ldi	r24, 0xAA	; 170
     81c:	63 96       	adiw	r28, 0x13	; 19
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	ff 90       	pop	r15
     832:	ef 90       	pop	r14
     834:	df 90       	pop	r13
     836:	cf 90       	pop	r12
     838:	bf 90       	pop	r11
     83a:	af 90       	pop	r10
     83c:	9f 90       	pop	r9
     83e:	8f 90       	pop	r8
     840:	7f 90       	pop	r7
     842:	6f 90       	pop	r6
     844:	5f 90       	pop	r5
     846:	4f 90       	pop	r4
     848:	08 95       	ret

0000084a <LCD_voidSendData>:
		LCD_voidSendCommand(0b00000010);
		Local_u8AddressCounter=0;
		
	}
	else
		Local_u8AddressCounter++;
     84a:	cf 93       	push	r28
     84c:	c8 2f       	mov	r28, r24
     84e:	41 e0       	ldi	r20, 0x01	; 1
     850:	65 e0       	ldi	r22, 0x05	; 5
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	66 e0       	ldi	r22, 0x06	; 6
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
     862:	6c 2f       	mov	r22, r28
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	0e 94 82 05 	call	0xb04	; 0xb04 <DIO_voidSetPortValue>
     86a:	41 e0       	ldi	r20, 0x01	; 1
     86c:	67 e0       	ldi	r22, 0x07	; 7
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
     874:	8f e9       	ldi	r24, 0x9F	; 159
     876:	9f e0       	ldi	r25, 0x0F	; 15
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	f1 f7       	brne	.-4      	; 0x878 <__stack+0x19>
     87c:	00 c0       	rjmp	.+0      	; 0x87e <__stack+0x1f>
     87e:	00 00       	nop
     880:	40 e0       	ldi	r20, 0x00	; 0
     882:	67 e0       	ldi	r22, 0x07	; 7
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <LCD_voidSendCommand>:
     88e:	cf 93       	push	r28
     890:	c8 2f       	mov	r28, r24
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	65 e0       	ldi	r22, 0x05	; 5
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	66 e0       	ldi	r22, 0x06	; 6
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
     8a6:	6c 2f       	mov	r22, r28
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	0e 94 82 05 	call	0xb04	; 0xb04 <DIO_voidSetPortValue>
     8ae:	41 e0       	ldi	r20, 0x01	; 1
     8b0:	67 e0       	ldi	r22, 0x07	; 7
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
     8b8:	8f e9       	ldi	r24, 0x9F	; 159
     8ba:	9f e0       	ldi	r25, 0x0F	; 15
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	f1 f7       	brne	.-4      	; 0x8bc <LCD_voidSendCommand+0x2e>
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <LCD_voidSendCommand+0x34>
     8c2:	00 00       	nop
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	67 e0       	ldi	r22, 0x07	; 7
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	0e 94 44 05 	call	0xa88	; 0xa88 <DIO_voidSetPinValue>
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <LCD_voidInit>:
     8d2:	6f ef       	ldi	r22, 0xFF	; 255
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	0e 94 72 05 	call	0xae4	; 0xae4 <DIO_voidSetPortDirection>
     8da:	41 e0       	ldi	r20, 0x01	; 1
     8dc:	65 e0       	ldi	r22, 0x05	; 5
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	0e 94 16 05 	call	0xa2c	; 0xa2c <DIO_voidSetPinDirection>
     8e4:	41 e0       	ldi	r20, 0x01	; 1
     8e6:	66 e0       	ldi	r22, 0x06	; 6
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	0e 94 16 05 	call	0xa2c	; 0xa2c <DIO_voidSetPinDirection>
     8ee:	41 e0       	ldi	r20, 0x01	; 1
     8f0:	67 e0       	ldi	r22, 0x07	; 7
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	0e 94 16 05 	call	0xa2c	; 0xa2c <DIO_voidSetPinDirection>
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	89 ef       	ldi	r24, 0xF9	; 249
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	21 50       	subi	r18, 0x01	; 1
     900:	80 40       	sbci	r24, 0x00	; 0
     902:	90 40       	sbci	r25, 0x00	; 0
     904:	e1 f7       	brne	.-8      	; 0x8fe <LCD_voidInit+0x2c>
     906:	00 c0       	rjmp	.+0      	; 0x908 <LCD_voidInit+0x36>
     908:	00 00       	nop
     90a:	88 e3       	ldi	r24, 0x38	; 56
     90c:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_voidSendCommand>
     910:	8c e0       	ldi	r24, 0x0C	; 12
     912:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_voidSendCommand>
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_voidSendCommand>
     91c:	86 e0       	ldi	r24, 0x06	; 6
     91e:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_voidSendCommand>
     922:	08 95       	ret

00000924 <LCD_voidClearDisplay>:
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_voidSendCommand>
     92a:	08 95       	ret

0000092c <LCD_voidGoTOXY>:
     92c:	90 e4       	ldi	r25, 0x40	; 64
     92e:	89 9f       	mul	r24, r25
     930:	60 0d       	add	r22, r0
     932:	11 24       	eor	r1, r1
     934:	86 2f       	mov	r24, r22
     936:	80 68       	ori	r24, 0x80	; 128
     938:	0e 94 47 04 	call	0x88e	; 0x88e <LCD_voidSendCommand>
     93c:	08 95       	ret

0000093e <LCD_voidSendString>:
		
		
}

void LCD_voidSendString(u8* Copy_pcString)
{
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	fc 01       	movw	r30, r24
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
     946:	80 81       	ld	r24, Z
     948:	88 23       	and	r24, r24
     94a:	59 f0       	breq	.+22     	; 0x962 <LCD_voidSendString+0x24>
     94c:	8f 01       	movw	r16, r30
     94e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
     950:	0e 94 25 04 	call	0x84a	; 0x84a <LCD_voidSendData>
		Local_u8Index++;
     954:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_voidSendString(u8* Copy_pcString)
{
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
     956:	f8 01       	movw	r30, r16
     958:	ec 0f       	add	r30, r28
     95a:	f1 1d       	adc	r31, r1
     95c:	80 81       	ld	r24, Z
     95e:	81 11       	cpse	r24, r1
     960:	f7 cf       	rjmp	.-18     	; 0x950 <LCD_voidSendString+0x12>
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
		Local_u8Index++;
	}
}
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	08 95       	ret

0000096a <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
     972:	2a 97       	sbiw	r28, 0x0a	; 10
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	f8 94       	cli
     978:	de bf       	out	0x3e, r29	; 62
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	cd bf       	out	0x3d, r28	; 61
     97e:	dc 01       	movw	r26, r24
     980:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     982:	4a e0       	ldi	r20, 0x0A	; 10
     984:	be 01       	movw	r22, r28
     986:	6f 5f       	subi	r22, 0xFF	; 255
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__itoa_ncheck>
	u8 Local_u8Str[10];
	itoa(Copy_u32Number, Local_u8Str,10);
	LCD_voidSendString(Local_u8Str);
     98e:	ce 01       	movw	r24, r28
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_voidSendString>

}
     996:	2a 96       	adiw	r28, 0x0a	; 10
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <Servo_voidInit>:

#include"../../MCAL/TIMER_Driver/TIMER_Interface.h"
 u16 Ticks=0;
 void Servo_voidInit(void){
	 //Using Timer 1 PWM Mode,  prescaller 8 ==>010
		TIMER_voidTimer1Init(PWM,10);
     9a8:	6a e0       	ldi	r22, 0x0A	; 10
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	0e 94 60 06 	call	0xcc0	; 0xcc0 <TIMER_voidTimer1Init>
	 // Servo Total time = 20ms
		TIMER_voidSetOverFlow(20000);
     9b0:	80 e2       	ldi	r24, 0x20	; 32
     9b2:	9e e4       	ldi	r25, 0x4E	; 78
     9b4:	0e 94 ce 06 	call	0xd9c	; 0xd9c <TIMER_voidSetOverFlow>
     9b8:	08 95       	ret

000009ba <Servo_voidDegree>:

void Servo_voidDegree(u8 Copy_u8Degree){
	if(Copy_u8Degree>180)
		Copy_u8Degree = 180;
	f32 Ton = (1/180.0) * Copy_u8Degree + 1;
	Ticks = Ton * 1000;
     9ba:	85 3b       	cpi	r24, 0xB5	; 181
     9bc:	08 f0       	brcs	.+2      	; 0x9c0 <Servo_voidDegree+0x6>
     9be:	84 eb       	ldi	r24, 0xB4	; 180
     9c0:	68 2f       	mov	r22, r24
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 92 09 	call	0x1324	; 0x1324 <__floatsisf>
     9cc:	21 e6       	ldi	r18, 0x61	; 97
     9ce:	3b e0       	ldi	r19, 0x0B	; 11
     9d0:	46 eb       	ldi	r20, 0xB6	; 182
     9d2:	5b e3       	ldi	r21, 0x3B	; 59
     9d4:	0e 94 1e 0a 	call	0x143c	; 0x143c <__mulsf3>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	40 e8       	ldi	r20, 0x80	; 128
     9de:	5f e3       	ldi	r21, 0x3F	; 63
     9e0:	0e 94 83 08 	call	0x1106	; 0x1106 <__addsf3>
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	4a e7       	ldi	r20, 0x7A	; 122
     9ea:	54 e4       	ldi	r21, 0x44	; 68
     9ec:	0e 94 1e 0a 	call	0x143c	; 0x143c <__mulsf3>
     9f0:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__fixunssfsi>
     9f4:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <Ticks+0x1>
     9f8:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <Ticks>
	TIMER_voidTimer1ChannelASetCompareValue(Ticks);
     9fc:	cb 01       	movw	r24, r22
     9fe:	0e 94 d1 06 	call	0xda2	; 0xda2 <TIMER_voidTimer1ChannelASetCompareValue>
     a02:	08 95       	ret

00000a04 <ADC_voidInit>:
	2- 8bit res --> left adjustment
	3- prescaler
	4- enable ADC
	*/
	// use AVCC
	SET_BIT(ADMUX,6);
     a04:	3e 9a       	sbi	0x07, 6	; 7
	CLR_BIT(ADMUX,7);
     a06:	3f 98       	cbi	0x07, 7	; 7
	// left adjust
	SET_BIT(ADMUX,5);
     a08:	3d 9a       	sbi	0x07, 5	; 7
	// prescaler  --> /64
	CLR_BIT(ADCSRA,0);
     a0a:	30 98       	cbi	0x06, 0	; 6
	SET_BIT(ADCSRA,1);
     a0c:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,2);
     a0e:	32 9a       	sbi	0x06, 2	; 6
	// enable 
	SET_BIT(ADCSRA,7);
     a10:	37 9a       	sbi	0x06, 7	; 6
     a12:	08 95       	ret

00000a14 <ADC_u8StartConversion>:
	
}

u8 ADC_u8StartConversion(u8 Copy_u8ChannelNumber){
	// channel select
	ADMUX &= 0b11100000;
     a14:	97 b1       	in	r25, 0x07	; 7
     a16:	90 7e       	andi	r25, 0xE0	; 224
     a18:	97 b9       	out	0x07, r25	; 7
	ADMUX |=Copy_u8ChannelNumber;
     a1a:	97 b1       	in	r25, 0x07	; 7
     a1c:	89 2b       	or	r24, r25
     a1e:	87 b9       	out	0x07, r24	; 7
	
	// start conversion
	SET_BIT(ADCSRA,6);
     a20:	36 9a       	sbi	0x06, 6	; 6
	
	// wait until conversion complete
	// by checking the flag
	while(GET_BIT(ADCSRA,4)==0);
     a22:	34 9b       	sbis	0x06, 4	; 6
     a24:	fe cf       	rjmp	.-4      	; 0xa22 <ADC_u8StartConversion+0xe>
	
	//clear flag 
	SET_BIT(ADCSRA,4);
     a26:	34 9a       	sbi	0x06, 4	; 6
	
	return ADCH;
     a28:	85 b1       	in	r24, 0x05	; 5
}
     a2a:	08 95       	ret

00000a2c <DIO_voidSetPinDirection>:


void DIO_voidSetPinDirection(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinState ){

	volatile u8* Local_u8PTR_DDRx;
	switch(Copy_u8PortName){
     a2c:	81 30       	cpi	r24, 0x01	; 1
     a2e:	49 f0       	breq	.+18     	; 0xa42 <DIO_voidSetPinDirection+0x16>
     a30:	28 f0       	brcs	.+10     	; 0xa3c <DIO_voidSetPinDirection+0x10>
     a32:	82 30       	cpi	r24, 0x02	; 2
     a34:	49 f0       	breq	.+18     	; 0xa48 <DIO_voidSetPinDirection+0x1c>
     a36:	83 30       	cpi	r24, 0x03	; 3
     a38:	51 f0       	breq	.+20     	; 0xa4e <DIO_voidSetPinDirection+0x22>
     a3a:	0b c0       	rjmp	.+22     	; 0xa52 <DIO_voidSetPinDirection+0x26>

		case DIO_PORTA:
		Local_u8PTR_DDRx=&DDRA;
     a3c:	ea e3       	ldi	r30, 0x3A	; 58
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	08 c0       	rjmp	.+16     	; 0xa52 <DIO_voidSetPinDirection+0x26>
		break;
		case DIO_PORTB:
		Local_u8PTR_DDRx=&DDRB;
     a42:	e7 e3       	ldi	r30, 0x37	; 55
     a44:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     a46:	05 c0       	rjmp	.+10     	; 0xa52 <DIO_voidSetPinDirection+0x26>
		case DIO_PORTC:
		Local_u8PTR_DDRx=&DDRC;
     a48:	e4 e3       	ldi	r30, 0x34	; 52
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <DIO_voidSetPinDirection+0x26>
		case DIO_PORTD:
		Local_u8PTR_DDRx=&DDRD;
     a4e:	e1 e3       	ldi	r30, 0x31	; 49
     a50:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinState){
     a52:	44 23       	and	r20, r20
     a54:	69 f0       	breq	.+26     	; 0xa70 <DIO_voidSetPinDirection+0x44>
     a56:	41 30       	cpi	r20, 0x01	; 1
     a58:	b1 f4       	brne	.+44     	; 0xa86 <DIO_voidSetPinDirection+0x5a>

		case DIO_OUTPUT:
		SET_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
     a5a:	20 81       	ld	r18, Z
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <DIO_voidSetPinDirection+0x3a>
     a62:	88 0f       	add	r24, r24
     a64:	99 1f       	adc	r25, r25
     a66:	6a 95       	dec	r22
     a68:	e2 f7       	brpl	.-8      	; 0xa62 <DIO_voidSetPinDirection+0x36>
     a6a:	82 2b       	or	r24, r18
     a6c:	80 83       	st	Z, r24
		break;
     a6e:	08 95       	ret
		case DIO_INPUT:
		CLR_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
     a70:	20 81       	ld	r18, Z
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <DIO_voidSetPinDirection+0x50>
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	6a 95       	dec	r22
     a7e:	e2 f7       	brpl	.-8      	; 0xa78 <DIO_voidSetPinDirection+0x4c>
     a80:	80 95       	com	r24
     a82:	82 23       	and	r24, r18
     a84:	80 83       	st	Z, r24
     a86:	08 95       	ret

00000a88 <DIO_voidSetPinValue>:

}
void DIO_voidSetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinValue ){

	volatile u8* Local_u8PTR_PORTx;
	switch(Copy_u8PortName){
     a88:	81 30       	cpi	r24, 0x01	; 1
     a8a:	49 f0       	breq	.+18     	; 0xa9e <DIO_voidSetPinValue+0x16>
     a8c:	28 f0       	brcs	.+10     	; 0xa98 <DIO_voidSetPinValue+0x10>
     a8e:	82 30       	cpi	r24, 0x02	; 2
     a90:	49 f0       	breq	.+18     	; 0xaa4 <DIO_voidSetPinValue+0x1c>
     a92:	83 30       	cpi	r24, 0x03	; 3
     a94:	51 f0       	breq	.+20     	; 0xaaa <DIO_voidSetPinValue+0x22>
     a96:	0b c0       	rjmp	.+22     	; 0xaae <DIO_voidSetPinValue+0x26>

		case DIO_PORTA:
		Local_u8PTR_PORTx=&PORTA;
     a98:	eb e3       	ldi	r30, 0x3B	; 59
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	08 c0       	rjmp	.+16     	; 0xaae <DIO_voidSetPinValue+0x26>
		break;
		case DIO_PORTB:
		Local_u8PTR_PORTx=&PORTB;
     a9e:	e8 e3       	ldi	r30, 0x38	; 56
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     aa2:	05 c0       	rjmp	.+10     	; 0xaae <DIO_voidSetPinValue+0x26>
		case DIO_PORTC:
		Local_u8PTR_PORTx=&PORTC;
     aa4:	e5 e3       	ldi	r30, 0x35	; 53
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <DIO_voidSetPinValue+0x26>
		case DIO_PORTD:
		Local_u8PTR_PORTx=&PORTD;
     aaa:	e2 e3       	ldi	r30, 0x32	; 50
     aac:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinValue){
     aae:	44 23       	and	r20, r20
     ab0:	69 f0       	breq	.+26     	; 0xacc <DIO_voidSetPinValue+0x44>
     ab2:	41 30       	cpi	r20, 0x01	; 1
     ab4:	b1 f4       	brne	.+44     	; 0xae2 <DIO_voidSetPinValue+0x5a>

		case DIO_HIGH:
		SET_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
     ab6:	20 81       	ld	r18, Z
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <DIO_voidSetPinValue+0x3a>
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	6a 95       	dec	r22
     ac4:	e2 f7       	brpl	.-8      	; 0xabe <DIO_voidSetPinValue+0x36>
     ac6:	82 2b       	or	r24, r18
     ac8:	80 83       	st	Z, r24
		break;
     aca:	08 95       	ret
		case DIO_LOW:
		CLR_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
     acc:	20 81       	ld	r18, Z
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <DIO_voidSetPinValue+0x50>
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	6a 95       	dec	r22
     ada:	e2 f7       	brpl	.-8      	; 0xad4 <DIO_voidSetPinValue+0x4c>
     adc:	80 95       	com	r24
     ade:	82 23       	and	r24, r18
     ae0:	80 83       	st	Z, r24
     ae2:	08 95       	ret

00000ae4 <DIO_voidSetPortDirection>:

}

void DIO_voidSetPortDirection(u8 Copy_u8PortName ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
     ae4:	81 30       	cpi	r24, 0x01	; 1
     ae6:	41 f0       	breq	.+16     	; 0xaf8 <DIO_voidSetPortDirection+0x14>
     ae8:	28 f0       	brcs	.+10     	; 0xaf4 <DIO_voidSetPortDirection+0x10>
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	39 f0       	breq	.+14     	; 0xafc <DIO_voidSetPortDirection+0x18>
     aee:	83 30       	cpi	r24, 0x03	; 3
     af0:	39 f0       	breq	.+14     	; 0xb00 <DIO_voidSetPortDirection+0x1c>
     af2:	08 95       	ret

		case DIO_PORTA:
		DDRA=Copy_u8PortValue;
     af4:	6a bb       	out	0x1a, r22	; 26
		break;
     af6:	08 95       	ret
		case DIO_PORTB:
		DDRB=Copy_u8PortValue;
     af8:	67 bb       	out	0x17, r22	; 23
		break;
     afa:	08 95       	ret
		case DIO_PORTC:
		DDRC=Copy_u8PortValue;
     afc:	64 bb       	out	0x14, r22	; 20
		break;
     afe:	08 95       	ret
		case DIO_PORTD:
		DDRD=Copy_u8PortValue;
     b00:	61 bb       	out	0x11, r22	; 17
     b02:	08 95       	ret

00000b04 <DIO_voidSetPortValue>:
	}

}
void DIO_voidSetPortValue(u8 Copy_u8PortName  ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
     b04:	81 30       	cpi	r24, 0x01	; 1
     b06:	41 f0       	breq	.+16     	; 0xb18 <DIO_voidSetPortValue+0x14>
     b08:	28 f0       	brcs	.+10     	; 0xb14 <DIO_voidSetPortValue+0x10>
     b0a:	82 30       	cpi	r24, 0x02	; 2
     b0c:	39 f0       	breq	.+14     	; 0xb1c <DIO_voidSetPortValue+0x18>
     b0e:	83 30       	cpi	r24, 0x03	; 3
     b10:	39 f0       	breq	.+14     	; 0xb20 <DIO_voidSetPortValue+0x1c>
     b12:	08 95       	ret

		case DIO_PORTA:
		PORTA=Copy_u8PortValue;
     b14:	6b bb       	out	0x1b, r22	; 27
		break;
     b16:	08 95       	ret
		case DIO_PORTB:
		PORTB=Copy_u8PortValue;
     b18:	68 bb       	out	0x18, r22	; 24
		break;
     b1a:	08 95       	ret
		case DIO_PORTC:
		PORTC=Copy_u8PortValue;
     b1c:	65 bb       	out	0x15, r22	; 21
		break;
     b1e:	08 95       	ret
		case DIO_PORTD:
		PORTD=Copy_u8PortValue;
     b20:	62 bb       	out	0x12, r22	; 18
     b22:	08 95       	ret

00000b24 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber){

	
	u8 Local_u8PinValue;
	switch(Copy_u8PortName){
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	81 f0       	breq	.+32     	; 0xb48 <DIO_u8GetPinValue+0x24>
     b28:	28 f0       	brcs	.+10     	; 0xb34 <DIO_u8GetPinValue+0x10>
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	b9 f0       	breq	.+46     	; 0xb5c <DIO_u8GetPinValue+0x38>
     b2e:	83 30       	cpi	r24, 0x03	; 3
     b30:	f9 f0       	breq	.+62     	; 0xb70 <DIO_u8GetPinValue+0x4c>
     b32:	27 c0       	rjmp	.+78     	; 0xb82 <DIO_u8GetPinValue+0x5e>

		case DIO_PORTA:
		Local_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
     b34:	89 b3       	in	r24, 0x19	; 25
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <DIO_u8GetPinValue+0x1a>
     b3a:	95 95       	asr	r25
     b3c:	87 95       	ror	r24
     b3e:	6a 95       	dec	r22
     b40:	e2 f7       	brpl	.-8      	; 0xb3a <DIO_u8GetPinValue+0x16>
     b42:	98 2f       	mov	r25, r24
     b44:	91 70       	andi	r25, 0x01	; 1
		break;
     b46:	1d c0       	rjmp	.+58     	; 0xb82 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTB:
		Local_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
     b48:	86 b3       	in	r24, 0x16	; 22
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <DIO_u8GetPinValue+0x2e>
     b4e:	95 95       	asr	r25
     b50:	87 95       	ror	r24
     b52:	6a 95       	dec	r22
     b54:	e2 f7       	brpl	.-8      	; 0xb4e <DIO_u8GetPinValue+0x2a>
     b56:	98 2f       	mov	r25, r24
     b58:	91 70       	andi	r25, 0x01	; 1
		break;
     b5a:	13 c0       	rjmp	.+38     	; 0xb82 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTC:
		Local_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
     b5c:	83 b3       	in	r24, 0x13	; 19
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <DIO_u8GetPinValue+0x42>
     b62:	95 95       	asr	r25
     b64:	87 95       	ror	r24
     b66:	6a 95       	dec	r22
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <DIO_u8GetPinValue+0x3e>
     b6a:	98 2f       	mov	r25, r24
     b6c:	91 70       	andi	r25, 0x01	; 1
		break;
     b6e:	09 c0       	rjmp	.+18     	; 0xb82 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTD:
		Local_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
     b70:	80 b3       	in	r24, 0x10	; 16
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <DIO_u8GetPinValue+0x56>
     b76:	95 95       	asr	r25
     b78:	87 95       	ror	r24
     b7a:	6a 95       	dec	r22
     b7c:	e2 f7       	brpl	.-8      	; 0xb76 <DIO_u8GetPinValue+0x52>
     b7e:	98 2f       	mov	r25, r24
     b80:	91 70       	andi	r25, 0x01	; 1

	

	return Local_u8PinValue;

}
     b82:	89 2f       	mov	r24, r25
     b84:	08 95       	ret

00000b86 <__vector_1>:
void EXTI_voidSetCallBackINT2(void(*NotifyFunc2)(void)){
	
	Global_pvINT2NotifyFunc=NotifyFunc2;
}

ISR(INT0_vect){
     b86:	1f 92       	push	r1
     b88:	0f 92       	push	r0
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	0f 92       	push	r0
     b8e:	11 24       	eor	r1, r1
     b90:	2f 93       	push	r18
     b92:	3f 93       	push	r19
     b94:	4f 93       	push	r20
     b96:	5f 93       	push	r21
     b98:	6f 93       	push	r22
     b9a:	7f 93       	push	r23
     b9c:	8f 93       	push	r24
     b9e:	9f 93       	push	r25
     ba0:	af 93       	push	r26
     ba2:	bf 93       	push	r27
     ba4:	ef 93       	push	r30
     ba6:	ff 93       	push	r31
	
	if(Global_pvINT0NotifyFunc!=NULL_PTR)
     ba8:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <Global_pvINT0NotifyFunc>
     bac:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <Global_pvINT0NotifyFunc+0x1>
     bb0:	30 97       	sbiw	r30, 0x00	; 0
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <__vector_1+0x30>
			Global_pvINT0NotifyFunc();
     bb4:	09 95       	icall
	
}
     bb6:	ff 91       	pop	r31
     bb8:	ef 91       	pop	r30
     bba:	bf 91       	pop	r27
     bbc:	af 91       	pop	r26
     bbe:	9f 91       	pop	r25
     bc0:	8f 91       	pop	r24
     bc2:	7f 91       	pop	r23
     bc4:	6f 91       	pop	r22
     bc6:	5f 91       	pop	r21
     bc8:	4f 91       	pop	r20
     bca:	3f 91       	pop	r19
     bcc:	2f 91       	pop	r18
     bce:	0f 90       	pop	r0
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	0f 90       	pop	r0
     bd4:	1f 90       	pop	r1
     bd6:	18 95       	reti

00000bd8 <__vector_2>:

ISR(INT1_vect){
     bd8:	1f 92       	push	r1
     bda:	0f 92       	push	r0
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	0f 92       	push	r0
     be0:	11 24       	eor	r1, r1
     be2:	2f 93       	push	r18
     be4:	3f 93       	push	r19
     be6:	4f 93       	push	r20
     be8:	5f 93       	push	r21
     bea:	6f 93       	push	r22
     bec:	7f 93       	push	r23
     bee:	8f 93       	push	r24
     bf0:	9f 93       	push	r25
     bf2:	af 93       	push	r26
     bf4:	bf 93       	push	r27
     bf6:	ef 93       	push	r30
     bf8:	ff 93       	push	r31
	
	if(Global_pvINT1NotifyFunc!=NULL_PTR)
     bfa:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <Global_pvINT1NotifyFunc>
     bfe:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <Global_pvINT1NotifyFunc+0x1>
     c02:	30 97       	sbiw	r30, 0x00	; 0
     c04:	09 f0       	breq	.+2      	; 0xc08 <__vector_2+0x30>
			Global_pvINT1NotifyFunc();
     c06:	09 95       	icall
	
}
     c08:	ff 91       	pop	r31
     c0a:	ef 91       	pop	r30
     c0c:	bf 91       	pop	r27
     c0e:	af 91       	pop	r26
     c10:	9f 91       	pop	r25
     c12:	8f 91       	pop	r24
     c14:	7f 91       	pop	r23
     c16:	6f 91       	pop	r22
     c18:	5f 91       	pop	r21
     c1a:	4f 91       	pop	r20
     c1c:	3f 91       	pop	r19
     c1e:	2f 91       	pop	r18
     c20:	0f 90       	pop	r0
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	0f 90       	pop	r0
     c26:	1f 90       	pop	r1
     c28:	18 95       	reti

00000c2a <__vector_3>:
ISR(INT2_vect){
     c2a:	1f 92       	push	r1
     c2c:	0f 92       	push	r0
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	0f 92       	push	r0
     c32:	11 24       	eor	r1, r1
     c34:	2f 93       	push	r18
     c36:	3f 93       	push	r19
     c38:	4f 93       	push	r20
     c3a:	5f 93       	push	r21
     c3c:	6f 93       	push	r22
     c3e:	7f 93       	push	r23
     c40:	8f 93       	push	r24
     c42:	9f 93       	push	r25
     c44:	af 93       	push	r26
     c46:	bf 93       	push	r27
     c48:	ef 93       	push	r30
     c4a:	ff 93       	push	r31
	
	if(Global_pvINT2NotifyFunc!=NULL_PTR)
     c4c:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <Global_pvINT2NotifyFunc>
     c50:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <Global_pvINT2NotifyFunc+0x1>
     c54:	30 97       	sbiw	r30, 0x00	; 0
     c56:	09 f0       	breq	.+2      	; 0xc5a <__vector_3+0x30>
			Global_pvINT2NotifyFunc();
     c58:	09 95       	icall
	
     c5a:	ff 91       	pop	r31
     c5c:	ef 91       	pop	r30
     c5e:	bf 91       	pop	r27
     c60:	af 91       	pop	r26
     c62:	9f 91       	pop	r25
     c64:	8f 91       	pop	r24
     c66:	7f 91       	pop	r23
     c68:	6f 91       	pop	r22
     c6a:	5f 91       	pop	r21
     c6c:	4f 91       	pop	r20
     c6e:	3f 91       	pop	r19
     c70:	2f 91       	pop	r18
     c72:	0f 90       	pop	r0
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	0f 90       	pop	r0
     c78:	1f 90       	pop	r1
     c7a:	18 95       	reti

00000c7c <GIE_voidEnableGlobalInt>:
#include<avr/io.h>
#include"../../LIB/BIT_MATH.h"

void GIE_voidEnableGlobalInt(void){
	
	SET_BIT(SREG,7);
     c7c:	8f b7       	in	r24, 0x3f	; 63
     c7e:	80 68       	ori	r24, 0x80	; 128
     c80:	8f bf       	out	0x3f, r24	; 63
     c82:	08 95       	ret

00000c84 <TIMER_delay_ms>:
	GLOBAL_ICU_ISR = Copy_PTR_ICUFunction;
}

u16 ICU_u16ReadInputCapture(void){
	return ICR1;
}
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	8b 01       	movw	r16, r22
     c8a:	9c 01       	movw	r18, r24
     c8c:	67 2b       	or	r22, r23
     c8e:	68 2b       	or	r22, r24
     c90:	69 2b       	or	r22, r25
     c92:	69 f4       	brne	.+26     	; 0xcae <TIMER_delay_ms+0x2a>
     c94:	12 c0       	rjmp	.+36     	; 0xcba <TIMER_delay_ms+0x36>
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <TIMER_delay_ms+0x12>
     c9a:	4f 5f       	subi	r20, 0xFF	; 255
     c9c:	5f 4f       	sbci	r21, 0xFF	; 255
     c9e:	6f 4f       	sbci	r22, 0xFF	; 255
     ca0:	7f 4f       	sbci	r23, 0xFF	; 255
     ca2:	04 17       	cp	r16, r20
     ca4:	15 07       	cpc	r17, r21
     ca6:	26 07       	cpc	r18, r22
     ca8:	37 07       	cpc	r19, r23
     caa:	21 f4       	brne	.+8      	; 0xcb4 <TIMER_delay_ms+0x30>
     cac:	06 c0       	rjmp	.+12     	; 0xcba <TIMER_delay_ms+0x36>
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	ba 01       	movw	r22, r20
     cb4:	8e e5       	ldi	r24, 0x5E	; 94
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	ee cf       	rjmp	.-36     	; 0xc96 <TIMER_delay_ms+0x12>
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	08 95       	ret

00000cc0 <TIMER_voidTimer1Init>:
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	a1 f0       	breq	.+40     	; 0xcec <TIMER_voidTimer1Init+0x2c>
     cc4:	18 f0       	brcs	.+6      	; 0xccc <TIMER_voidTimer1Init+0xc>
     cc6:	82 30       	cpi	r24, 0x02	; 2
     cc8:	09 f1       	breq	.+66     	; 0xd0c <TIMER_voidTimer1Init+0x4c>
     cca:	32 c0       	rjmp	.+100    	; 0xd30 <TIMER_voidTimer1Init+0x70>
     ccc:	8f b5       	in	r24, 0x2f	; 47
     cce:	8e 7f       	andi	r24, 0xFE	; 254
     cd0:	8f bd       	out	0x2f, r24	; 47
     cd2:	8f b5       	in	r24, 0x2f	; 47
     cd4:	8d 7f       	andi	r24, 0xFD	; 253
     cd6:	8f bd       	out	0x2f, r24	; 47
     cd8:	8e b5       	in	r24, 0x2e	; 46
     cda:	87 7f       	andi	r24, 0xF7	; 247
     cdc:	8e bd       	out	0x2e, r24	; 46
     cde:	8e b5       	in	r24, 0x2e	; 46
     ce0:	8f 7e       	andi	r24, 0xEF	; 239
     ce2:	8e bd       	out	0x2e, r24	; 46
     ce4:	89 b7       	in	r24, 0x39	; 57
     ce6:	84 60       	ori	r24, 0x04	; 4
     ce8:	89 bf       	out	0x39, r24	; 57
     cea:	22 c0       	rjmp	.+68     	; 0xd30 <TIMER_voidTimer1Init+0x70>
     cec:	8f b5       	in	r24, 0x2f	; 47
     cee:	8e 7f       	andi	r24, 0xFE	; 254
     cf0:	8f bd       	out	0x2f, r24	; 47
     cf2:	8f b5       	in	r24, 0x2f	; 47
     cf4:	8d 7f       	andi	r24, 0xFD	; 253
     cf6:	8f bd       	out	0x2f, r24	; 47
     cf8:	8e b5       	in	r24, 0x2e	; 46
     cfa:	88 60       	ori	r24, 0x08	; 8
     cfc:	8e bd       	out	0x2e, r24	; 46
     cfe:	8e b5       	in	r24, 0x2e	; 46
     d00:	8f 7e       	andi	r24, 0xEF	; 239
     d02:	8e bd       	out	0x2e, r24	; 46
     d04:	89 b7       	in	r24, 0x39	; 57
     d06:	80 61       	ori	r24, 0x10	; 16
     d08:	89 bf       	out	0x39, r24	; 57
     d0a:	12 c0       	rjmp	.+36     	; 0xd30 <TIMER_voidTimer1Init+0x70>
     d0c:	8f b5       	in	r24, 0x2f	; 47
     d0e:	8f 7b       	andi	r24, 0xBF	; 191
     d10:	8f bd       	out	0x2f, r24	; 47
     d12:	8f b5       	in	r24, 0x2f	; 47
     d14:	80 68       	ori	r24, 0x80	; 128
     d16:	8f bd       	out	0x2f, r24	; 47
     d18:	8f b5       	in	r24, 0x2f	; 47
     d1a:	8e 7f       	andi	r24, 0xFE	; 254
     d1c:	8f bd       	out	0x2f, r24	; 47
     d1e:	8f b5       	in	r24, 0x2f	; 47
     d20:	82 60       	ori	r24, 0x02	; 2
     d22:	8f bd       	out	0x2f, r24	; 47
     d24:	8e b5       	in	r24, 0x2e	; 46
     d26:	88 60       	ori	r24, 0x08	; 8
     d28:	8e bd       	out	0x2e, r24	; 46
     d2a:	8e b5       	in	r24, 0x2e	; 46
     d2c:	80 61       	ori	r24, 0x10	; 16
     d2e:	8e bd       	out	0x2e, r24	; 46
     d30:	e0 e0       	ldi	r30, 0x00	; 0
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	4d ec       	ldi	r20, 0xCD	; 205
     d36:	a1 e0       	ldi	r26, 0x01	; 1
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	64 9f       	mul	r22, r20
     d3c:	81 2d       	mov	r24, r1
     d3e:	11 24       	eor	r1, r1
     d40:	86 95       	lsr	r24
     d42:	86 95       	lsr	r24
     d44:	86 95       	lsr	r24
     d46:	88 0f       	add	r24, r24
     d48:	98 2f       	mov	r25, r24
     d4a:	99 0f       	add	r25, r25
     d4c:	99 0f       	add	r25, r25
     d4e:	89 0f       	add	r24, r25
     d50:	96 2f       	mov	r25, r22
     d52:	98 1b       	sub	r25, r24
     d54:	91 30       	cpi	r25, 0x01	; 1
     d56:	59 f4       	brne	.+22     	; 0xd6e <TIMER_voidTimer1Init+0xae>
     d58:	2e b5       	in	r18, 0x2e	; 46
     d5a:	cd 01       	movw	r24, r26
     d5c:	0e 2e       	mov	r0, r30
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <TIMER_voidTimer1Init+0xa4>
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	0a 94       	dec	r0
     d66:	e2 f7       	brpl	.-8      	; 0xd60 <TIMER_voidTimer1Init+0xa0>
     d68:	82 2b       	or	r24, r18
     d6a:	8e bd       	out	0x2e, r24	; 46
     d6c:	0c c0       	rjmp	.+24     	; 0xd86 <TIMER_voidTimer1Init+0xc6>
     d6e:	9e b5       	in	r25, 0x2e	; 46
     d70:	9d 01       	movw	r18, r26
     d72:	0e 2e       	mov	r0, r30
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <TIMER_voidTimer1Init+0xba>
     d76:	22 0f       	add	r18, r18
     d78:	33 1f       	adc	r19, r19
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <TIMER_voidTimer1Init+0xb6>
     d7e:	82 2f       	mov	r24, r18
     d80:	80 95       	com	r24
     d82:	89 23       	and	r24, r25
     d84:	8e bd       	out	0x2e, r24	; 46
     d86:	64 9f       	mul	r22, r20
     d88:	61 2d       	mov	r22, r1
     d8a:	11 24       	eor	r1, r1
     d8c:	66 95       	lsr	r22
     d8e:	66 95       	lsr	r22
     d90:	66 95       	lsr	r22
     d92:	31 96       	adiw	r30, 0x01	; 1
     d94:	e3 30       	cpi	r30, 0x03	; 3
     d96:	f1 05       	cpc	r31, r1
     d98:	81 f6       	brne	.-96     	; 0xd3a <TIMER_voidTimer1Init+0x7a>
     d9a:	08 95       	ret

00000d9c <TIMER_voidSetOverFlow>:
     d9c:	97 bd       	out	0x27, r25	; 39
     d9e:	86 bd       	out	0x26, r24	; 38
     da0:	08 95       	ret

00000da2 <TIMER_voidTimer1ChannelASetCompareValue>:
     da2:	9b bd       	out	0x2b, r25	; 43
     da4:	8a bd       	out	0x2a, r24	; 42
     da6:	08 95       	ret

00000da8 <__vector_11>:



//Timer 0 Normal ISR
void __vector_11(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_11(void){
     da8:	1f 92       	push	r1
     daa:	0f 92       	push	r0
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	0f 92       	push	r0
     db0:	11 24       	eor	r1, r1
     db2:	2f 93       	push	r18
     db4:	3f 93       	push	r19
     db6:	4f 93       	push	r20
     db8:	5f 93       	push	r21
     dba:	6f 93       	push	r22
     dbc:	7f 93       	push	r23
     dbe:	8f 93       	push	r24
     dc0:	9f 93       	push	r25
     dc2:	af 93       	push	r26
     dc4:	bf 93       	push	r27
     dc6:	ef 93       	push	r30
     dc8:	ff 93       	push	r31
	if(TIMER0_Normal_ISR_PTR!=0x00)
     dca:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <TIMER0_Normal_ISR_PTR>
     dce:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <TIMER0_Normal_ISR_PTR+0x1>
     dd2:	30 97       	sbiw	r30, 0x00	; 0
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <__vector_11+0x30>
		TIMER0_Normal_ISR_PTR();
     dd6:	09 95       	icall
}
     dd8:	ff 91       	pop	r31
     dda:	ef 91       	pop	r30
     ddc:	bf 91       	pop	r27
     dde:	af 91       	pop	r26
     de0:	9f 91       	pop	r25
     de2:	8f 91       	pop	r24
     de4:	7f 91       	pop	r23
     de6:	6f 91       	pop	r22
     de8:	5f 91       	pop	r21
     dea:	4f 91       	pop	r20
     dec:	3f 91       	pop	r19
     dee:	2f 91       	pop	r18
     df0:	0f 90       	pop	r0
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	0f 90       	pop	r0
     df6:	1f 90       	pop	r1
     df8:	18 95       	reti

00000dfa <__vector_10>:

//Timer 0 CTC ISR
void __vector_10(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_10(void){
     dfa:	1f 92       	push	r1
     dfc:	0f 92       	push	r0
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	0f 92       	push	r0
     e02:	11 24       	eor	r1, r1
     e04:	2f 93       	push	r18
     e06:	3f 93       	push	r19
     e08:	4f 93       	push	r20
     e0a:	5f 93       	push	r21
     e0c:	6f 93       	push	r22
     e0e:	7f 93       	push	r23
     e10:	8f 93       	push	r24
     e12:	9f 93       	push	r25
     e14:	af 93       	push	r26
     e16:	bf 93       	push	r27
     e18:	ef 93       	push	r30
     e1a:	ff 93       	push	r31
	if(TIMER0_CTC_ISR_PTR!=0x00)
     e1c:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <TIMER0_CTC_ISR_PTR>
     e20:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <TIMER0_CTC_ISR_PTR+0x1>
     e24:	30 97       	sbiw	r30, 0x00	; 0
     e26:	09 f0       	breq	.+2      	; 0xe2a <__vector_10+0x30>
		TIMER0_CTC_ISR_PTR();
     e28:	09 95       	icall

}
     e2a:	ff 91       	pop	r31
     e2c:	ef 91       	pop	r30
     e2e:	bf 91       	pop	r27
     e30:	af 91       	pop	r26
     e32:	9f 91       	pop	r25
     e34:	8f 91       	pop	r24
     e36:	7f 91       	pop	r23
     e38:	6f 91       	pop	r22
     e3a:	5f 91       	pop	r21
     e3c:	4f 91       	pop	r20
     e3e:	3f 91       	pop	r19
     e40:	2f 91       	pop	r18
     e42:	0f 90       	pop	r0
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	0f 90       	pop	r0
     e48:	1f 90       	pop	r1
     e4a:	18 95       	reti

00000e4c <__vector_6>:

//ICU
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void){
     e4c:	1f 92       	push	r1
     e4e:	0f 92       	push	r0
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	0f 92       	push	r0
     e54:	11 24       	eor	r1, r1
     e56:	2f 93       	push	r18
     e58:	3f 93       	push	r19
     e5a:	4f 93       	push	r20
     e5c:	5f 93       	push	r21
     e5e:	6f 93       	push	r22
     e60:	7f 93       	push	r23
     e62:	8f 93       	push	r24
     e64:	9f 93       	push	r25
     e66:	af 93       	push	r26
     e68:	bf 93       	push	r27
     e6a:	ef 93       	push	r30
     e6c:	ff 93       	push	r31
	if(GLOBAL_ICU_ISR!=0x00)
     e6e:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <GLOBAL_ICU_ISR>
     e72:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <GLOBAL_ICU_ISR+0x1>
     e76:	30 97       	sbiw	r30, 0x00	; 0
     e78:	09 f0       	breq	.+2      	; 0xe7c <__vector_6+0x30>
		GLOBAL_ICU_ISR();
     e7a:	09 95       	icall
}
     e7c:	ff 91       	pop	r31
     e7e:	ef 91       	pop	r30
     e80:	bf 91       	pop	r27
     e82:	af 91       	pop	r26
     e84:	9f 91       	pop	r25
     e86:	8f 91       	pop	r24
     e88:	7f 91       	pop	r23
     e8a:	6f 91       	pop	r22
     e8c:	5f 91       	pop	r21
     e8e:	4f 91       	pop	r20
     e90:	3f 91       	pop	r19
     e92:	2f 91       	pop	r18
     e94:	0f 90       	pop	r0
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	0f 90       	pop	r0
     e9a:	1f 90       	pop	r1
     e9c:	18 95       	reti

00000e9e <__vector_7>:

//Timer 1 CTC ISR
void __vector_7(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_7(void){
     e9e:	1f 92       	push	r1
     ea0:	0f 92       	push	r0
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	0f 92       	push	r0
     ea6:	11 24       	eor	r1, r1
     ea8:	2f 93       	push	r18
     eaa:	3f 93       	push	r19
     eac:	4f 93       	push	r20
     eae:	5f 93       	push	r21
     eb0:	6f 93       	push	r22
     eb2:	7f 93       	push	r23
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
     eb8:	af 93       	push	r26
     eba:	bf 93       	push	r27
     ebc:	ef 93       	push	r30
     ebe:	ff 93       	push	r31
	if(GLOBAL_TIMER1_COMPARE_MATCH_PTR!=0x00)
     ec0:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <GLOBAL_TIMER1_COMPARE_MATCH_PTR>
     ec4:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <GLOBAL_TIMER1_COMPARE_MATCH_PTR+0x1>
     ec8:	30 97       	sbiw	r30, 0x00	; 0
     eca:	09 f0       	breq	.+2      	; 0xece <__vector_7+0x30>
		GLOBAL_TIMER1_COMPARE_MATCH_PTR();
     ecc:	09 95       	icall
}
     ece:	ff 91       	pop	r31
     ed0:	ef 91       	pop	r30
     ed2:	bf 91       	pop	r27
     ed4:	af 91       	pop	r26
     ed6:	9f 91       	pop	r25
     ed8:	8f 91       	pop	r24
     eda:	7f 91       	pop	r23
     edc:	6f 91       	pop	r22
     ede:	5f 91       	pop	r21
     ee0:	4f 91       	pop	r20
     ee2:	3f 91       	pop	r19
     ee4:	2f 91       	pop	r18
     ee6:	0f 90       	pop	r0
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	0f 90       	pop	r0
     eec:	1f 90       	pop	r1
     eee:	18 95       	reti

00000ef0 <TWI_voidMasterInit>:
void TWI_voidSlaveInit(u8 Copy_SlaveAddress){
	//Set Slave Address
	TWAR = Copy_SlaveAddress <<1;

	//Enable TWI
	SET_BIT(TWCR,TWEN);
     ef0:	96 e9       	ldi	r25, 0x96	; 150
     ef2:	90 b9       	out	0x00, r25	; 0
     ef4:	09 98       	cbi	0x01, 1	; 1
     ef6:	08 98       	cbi	0x01, 0	; 1
     ef8:	88 23       	and	r24, r24
     efa:	11 f0       	breq	.+4      	; 0xf00 <TWI_voidMasterInit+0x10>
     efc:	88 0f       	add	r24, r24
     efe:	82 b9       	out	0x02, r24	; 2
     f00:	86 b7       	in	r24, 0x36	; 54
     f02:	84 60       	ori	r24, 0x04	; 4
     f04:	86 bf       	out	0x36, r24	; 54
     f06:	08 95       	ret

00000f08 <TWI_SendStartCondition>:
}

TWI_ErrStatus TWI_SendStartCondition(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
     f08:	86 b7       	in	r24, 0x36	; 54
     f0a:	80 62       	ori	r24, 0x20	; 32
     f0c:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     f0e:	86 b7       	in	r24, 0x36	; 54
     f10:	80 68       	ori	r24, 0x80	; 128
     f12:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f14:	06 b6       	in	r0, 0x36	; 54
     f16:	07 fe       	sbrs	r0, 7
     f18:	fd cf       	rjmp	.-6      	; 0xf14 <TWI_SendStartCondition+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=START_ACK){
     f1a:	91 b1       	in	r25, 0x01	; 1
		Local_ErrStatus = StartConditionErr;
		}
	return Local_ErrStatus;
     f1c:	98 7f       	andi	r25, 0xF8	; 248
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	98 30       	cpi	r25, 0x08	; 8
     f22:	09 f4       	brne	.+2      	; 0xf26 <TWI_SendStartCondition+0x1e>
     f24:	80 e0       	ldi	r24, 0x00	; 0
}
     f26:	08 95       	ret

00000f28 <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
     f28:	86 b7       	in	r24, 0x36	; 54
     f2a:	80 62       	ori	r24, 0x20	; 32
     f2c:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     f2e:	86 b7       	in	r24, 0x36	; 54
     f30:	80 68       	ori	r24, 0x80	; 128
     f32:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f34:	06 b6       	in	r0, 0x36	; 54
     f36:	07 fe       	sbrs	r0, 7
     f38:	fd cf       	rjmp	.-6      	; 0xf34 <TWI_SendRepeatedStart+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
     f3a:	81 b1       	in	r24, 0x01	; 1
     f3c:	88 7f       	andi	r24, 0xF8	; 248
     f3e:	80 31       	cpi	r24, 0x10	; 16
     f40:	11 f0       	breq	.+4      	; 0xf46 <TWI_SendRepeatedStart+0x1e>
		Local_ErrStatus = RepeatedStartErr;
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     f46:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
		Local_ErrStatus = RepeatedStartErr;
		}
	return Local_ErrStatus;
}
     f48:	08 95       	ret

00000f4a <TWI_SendSlaveAddressWithWrite>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
     f4a:	88 0f       	add	r24, r24
     f4c:	83 b9       	out	0x03, r24	; 3
	//For Write Operation
	CLR_BIT(TWDR,0);
     f4e:	18 98       	cbi	0x03, 0	; 3

	//Clear Flag to start previous operation  //Enable TWI
	TWCR=(1<<TWINT)|(1<<TWEN);
     f50:	84 e8       	ldi	r24, 0x84	; 132
     f52:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f54:	06 b6       	in	r0, 0x36	; 54
     f56:	07 fe       	sbrs	r0, 7
     f58:	fd cf       	rjmp	.-6      	; 0xf54 <TWI_SendSlaveAddressWithWrite+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
     f5a:	81 b1       	in	r24, 0x01	; 1
     f5c:	88 7f       	andi	r24, 0xF8	; 248
     f5e:	88 31       	cpi	r24, 0x18	; 24
     f60:	11 f0       	breq	.+4      	; 0xf66 <TWI_SendSlaveAddressWithWrite+0x1c>
		Local_ErrStatus = SlaveAddressWithWriteErr;
     f62:	83 e0       	ldi	r24, 0x03	; 3
     f64:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     f66:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
		Local_ErrStatus = SlaveAddressWithWriteErr;
		}
	return Local_ErrStatus;
}
     f68:	08 95       	ret

00000f6a <TWI_SendSlaveAddressWithRead>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
     f6a:	88 0f       	add	r24, r24
     f6c:	83 b9       	out	0x03, r24	; 3
	//For Read Operation
	SET_BIT(TWDR,0);
     f6e:	18 9a       	sbi	0x03, 0	; 3

	//Clear Flag to start previous operation
	TWCR=(1<<TWINT)|(1<<TWEN);
     f70:	84 e8       	ldi	r24, 0x84	; 132
     f72:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f74:	06 b6       	in	r0, 0x36	; 54
     f76:	07 fe       	sbrs	r0, 7
     f78:	fd cf       	rjmp	.-6      	; 0xf74 <TWI_SendSlaveAddressWithRead+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
     f7a:	81 b1       	in	r24, 0x01	; 1
     f7c:	88 7f       	andi	r24, 0xF8	; 248
     f7e:	80 34       	cpi	r24, 0x40	; 64
     f80:	11 f0       	breq	.+4      	; 0xf86 <TWI_SendSlaveAddressWithRead+0x1c>
		Local_ErrStatus = SlaveAddressWithReadErr;
     f82:	84 e0       	ldi	r24, 0x04	; 4
     f84:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     f86:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
		Local_ErrStatus = SlaveAddressWithReadErr;
		}
	return Local_ErrStatus;
}
     f88:	08 95       	ret

00000f8a <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte){
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Write Data to data byte
	TWDR = Copy_u8DataByte;
     f8a:	83 b9       	out	0x03, r24	; 3

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     f8c:	86 b7       	in	r24, 0x36	; 54
     f8e:	80 68       	ori	r24, 0x80	; 128
     f90:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f92:	06 b6       	in	r0, 0x36	; 54
     f94:	07 fe       	sbrs	r0, 7
     f96:	fd cf       	rjmp	.-6      	; 0xf92 <TWI_MasterWriteDataByte+0x8>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MasterWriteDataByteErr){
     f98:	81 b1       	in	r24, 0x01	; 1
		Local_ErrStatus = MasterWriteDataByteErr;
		}
	return Local_ErrStatus;

}
     f9a:	85 e0       	ldi	r24, 0x05	; 5
     f9c:	08 95       	ret

00000f9e <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
     f9e:	fc 01       	movw	r30, r24
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Enable ACK
	SET_BIT(TWCR,TWEA);
     fa0:	96 b7       	in	r25, 0x36	; 54
     fa2:	90 64       	ori	r25, 0x40	; 64
     fa4:	96 bf       	out	0x36, r25	; 54
	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     fa6:	96 b7       	in	r25, 0x36	; 54
     fa8:	90 68       	ori	r25, 0x80	; 128
     faa:	96 bf       	out	0x36, r25	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     fac:	06 b6       	in	r0, 0x36	; 54
     fae:	07 fe       	sbrs	r0, 7
     fb0:	fd cf       	rjmp	.-6      	; 0xfac <TWI_MasterReadDataByte+0xe>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
     fb2:	91 b1       	in	r25, 0x01	; 1
     fb4:	98 7f       	andi	r25, 0xF8	; 248
     fb6:	90 35       	cpi	r25, 0x50	; 80
     fb8:	21 f4       	brne	.+8      	; 0xfc2 <TWI_MasterReadDataByte+0x24>
		Local_ErrStatus = MasterReadDataByteErr;
		}
	else{
		// Read Data
		*Copy_Pu8DataByte = TWDR;
     fba:	83 b1       	in	r24, 0x03	; 3
     fbc:	80 83       	st	Z, r24

}

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	08 95       	ret
	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
		Local_ErrStatus = MasterReadDataByteErr;
     fc2:	86 e0       	ldi	r24, 0x06	; 6
		// Read Data
		*Copy_Pu8DataByte = TWDR;

	}
	return Local_ErrStatus;
}
     fc4:	08 95       	ret

00000fc6 <TWI_SendStopCondition>:

void TWI_SendStopCondition(void)
{
	/* generate stop condition on the bus */
	SET_BIT(TWCR,TWSTO);
     fc6:	86 b7       	in	r24, 0x36	; 54
     fc8:	80 61       	ori	r24, 0x10	; 16
     fca:	86 bf       	out	0x36, r24	; 54

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWINT);
     fcc:	86 b7       	in	r24, 0x36	; 54
     fce:	80 68       	ori	r24, 0x80	; 128
     fd0:	86 bf       	out	0x36, r24	; 54
     fd2:	08 95       	ret

00000fd4 <USART_voidInit>:
void USART_voidEnableRxINT(void){
	SET_BIT(UCSRB,7);
}

void USART_voidDisableRxINT(void){
	CLR_BIT(UCSRB,7);
     fd4:	52 98       	cbi	0x0a, 2	; 10
     fd6:	86 e8       	ldi	r24, 0x86	; 134
     fd8:	80 bd       	out	0x20, r24	; 32
     fda:	83 e3       	ldi	r24, 0x33	; 51
     fdc:	89 b9       	out	0x09, r24	; 9
     fde:	53 9a       	sbi	0x0a, 3	; 10
     fe0:	54 9a       	sbi	0x0a, 4	; 10
     fe2:	08 95       	ret

00000fe4 <USART_voidTransmitData>:
     fe4:	5d 9b       	sbis	0x0b, 5	; 11
     fe6:	fe cf       	rjmp	.-4      	; 0xfe4 <USART_voidTransmitData>
     fe8:	5d 9a       	sbi	0x0b, 5	; 11
     fea:	8c b9       	out	0x0c, r24	; 12
     fec:	08 95       	ret

00000fee <USART_u8ReceiverData>:
     fee:	5f 9b       	sbis	0x0b, 7	; 11
     ff0:	fe cf       	rjmp	.-4      	; 0xfee <USART_u8ReceiverData>
     ff2:	8c b1       	in	r24, 0x0c	; 12
     ff4:	08 95       	ret

00000ff6 <USART_u8TimeOUTReceiverData>:
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	ec 01       	movw	r28, r24
     ffc:	1d bc       	out	0x2d, r1	; 45
     ffe:	1c bc       	out	0x2c, r1	; 44
    1000:	8f b5       	in	r24, 0x2f	; 47
    1002:	8e 7f       	andi	r24, 0xFE	; 254
    1004:	8f bd       	out	0x2f, r24	; 47
    1006:	8f b5       	in	r24, 0x2f	; 47
    1008:	8d 7f       	andi	r24, 0xFD	; 253
    100a:	8f bd       	out	0x2f, r24	; 47
    100c:	8e b5       	in	r24, 0x2e	; 46
    100e:	87 7f       	andi	r24, 0xF7	; 247
    1010:	8e bd       	out	0x2e, r24	; 46
    1012:	8e b5       	in	r24, 0x2e	; 46
    1014:	8f 7e       	andi	r24, 0xEF	; 239
    1016:	8e bd       	out	0x2e, r24	; 46
    1018:	8e b5       	in	r24, 0x2e	; 46
    101a:	81 60       	ori	r24, 0x01	; 1
    101c:	8e bd       	out	0x2e, r24	; 46
    101e:	8e b5       	in	r24, 0x2e	; 46
    1020:	8d 7f       	andi	r24, 0xFD	; 253
    1022:	8e bd       	out	0x2e, r24	; 46
    1024:	8e b5       	in	r24, 0x2e	; 46
    1026:	84 60       	ori	r24, 0x04	; 4
    1028:	8e bd       	out	0x2e, r24	; 46
    102a:	0d c0       	rjmp	.+26     	; 0x1046 <USART_u8TimeOUTReceiverData+0x50>
    102c:	0e 94 80 08 	call	0x1100	; 0x1100 <WDT_voidReset>
    1030:	8c b5       	in	r24, 0x2c	; 44
    1032:	9d b5       	in	r25, 0x2d	; 45
    1034:	80 34       	cpi	r24, 0x40	; 64
    1036:	9c 49       	sbci	r25, 0x9C	; 156
    1038:	30 f0       	brcs	.+12     	; 0x1046 <USART_u8TimeOUTReceiverData+0x50>
    103a:	5f 9a       	sbi	0x0b, 7	; 11
    103c:	8e b5       	in	r24, 0x2e	; 46
    103e:	88 7f       	andi	r24, 0xF8	; 248
    1040:	8e bd       	out	0x2e, r24	; 46
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	07 c0       	rjmp	.+14     	; 0x1054 <USART_u8TimeOUTReceiverData+0x5e>
    1046:	5f 9b       	sbis	0x0b, 7	; 11
    1048:	f1 cf       	rjmp	.-30     	; 0x102c <USART_u8TimeOUTReceiverData+0x36>
    104a:	8c b1       	in	r24, 0x0c	; 12
    104c:	88 83       	st	Y, r24
    104e:	1d bc       	out	0x2d, r1	; 45
    1050:	1c bc       	out	0x2c, r1	; 44
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	08 95       	ret

0000105a <USART_voidTransmitString>:
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	fc 01       	movw	r30, r24
    1062:	80 81       	ld	r24, Z
    1064:	88 23       	and	r24, r24
    1066:	59 f0       	breq	.+22     	; 0x107e <USART_voidTransmitString+0x24>
    1068:	8f 01       	movw	r16, r30
    106a:	c0 e0       	ldi	r28, 0x00	; 0
    106c:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <USART_voidTransmitData>
    1070:	cf 5f       	subi	r28, 0xFF	; 255
    1072:	f8 01       	movw	r30, r16
    1074:	ec 0f       	add	r30, r28
    1076:	f1 1d       	adc	r31, r1
    1078:	80 81       	ld	r24, Z
    107a:	81 11       	cpse	r24, r1
    107c:	f7 cf       	rjmp	.-18     	; 0x106c <USART_voidTransmitString+0x12>
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	08 95       	ret

00001086 <USART_voidCallBackFunction>:
    1086:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <GLOBAL_PTR_CallBack+0x1>
    108a:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <GLOBAL_PTR_CallBack>
    108e:	08 95       	ret

00001090 <USART_voidEnableRxINT>:
    1090:	57 9a       	sbi	0x0a, 7	; 10
    1092:	08 95       	ret

00001094 <__vector_13>:
}

void __vector_13 (void) __attribute__((signal));
void __vector_13 (void){
    1094:	1f 92       	push	r1
    1096:	0f 92       	push	r0
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	0f 92       	push	r0
    109c:	11 24       	eor	r1, r1
    109e:	2f 93       	push	r18
    10a0:	3f 93       	push	r19
    10a2:	4f 93       	push	r20
    10a4:	5f 93       	push	r21
    10a6:	6f 93       	push	r22
    10a8:	7f 93       	push	r23
    10aa:	8f 93       	push	r24
    10ac:	9f 93       	push	r25
    10ae:	af 93       	push	r26
    10b0:	bf 93       	push	r27
    10b2:	ef 93       	push	r30
    10b4:	ff 93       	push	r31
	if(GLOBAL_PTR_CallBack!=0x00)
    10b6:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <GLOBAL_PTR_CallBack>
    10ba:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <GLOBAL_PTR_CallBack+0x1>
    10be:	30 97       	sbiw	r30, 0x00	; 0
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <__vector_13+0x30>
		GLOBAL_PTR_CallBack();
    10c2:	09 95       	icall
}
    10c4:	ff 91       	pop	r31
    10c6:	ef 91       	pop	r30
    10c8:	bf 91       	pop	r27
    10ca:	af 91       	pop	r26
    10cc:	9f 91       	pop	r25
    10ce:	8f 91       	pop	r24
    10d0:	7f 91       	pop	r23
    10d2:	6f 91       	pop	r22
    10d4:	5f 91       	pop	r21
    10d6:	4f 91       	pop	r20
    10d8:	3f 91       	pop	r19
    10da:	2f 91       	pop	r18
    10dc:	0f 90       	pop	r0
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	0f 90       	pop	r0
    10e2:	1f 90       	pop	r1
    10e4:	18 95       	reti

000010e6 <WDT_voidInit>:
}

void WDT_voidDisable(void){
	
	WDTCR |= (1<<4) | (1<<3) ;
	WDTCR=0;
    10e6:	81 b5       	in	r24, 0x21	; 33
    10e8:	88 60       	ori	r24, 0x08	; 8
    10ea:	81 bd       	out	0x21, r24	; 33
    10ec:	81 b5       	in	r24, 0x21	; 33
    10ee:	81 60       	ori	r24, 0x01	; 1
    10f0:	81 bd       	out	0x21, r24	; 33
    10f2:	81 b5       	in	r24, 0x21	; 33
    10f4:	82 60       	ori	r24, 0x02	; 2
    10f6:	81 bd       	out	0x21, r24	; 33
    10f8:	81 b5       	in	r24, 0x21	; 33
    10fa:	84 60       	ori	r24, 0x04	; 4
    10fc:	81 bd       	out	0x21, r24	; 33
    10fe:	08 95       	ret

00001100 <WDT_voidReset>:
}

void WDT_voidReset(void){
	
	__asm__ __volatile__ ("wdr");
    1100:	a8 95       	wdr
    1102:	08 95       	ret

00001104 <__subsf3>:
    1104:	50 58       	subi	r21, 0x80	; 128

00001106 <__addsf3>:
    1106:	bb 27       	eor	r27, r27
    1108:	aa 27       	eor	r26, r26
    110a:	0e 94 9a 08 	call	0x1134	; 0x1134 <__addsf3x>
    110e:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__fp_round>
    1112:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__fp_pscA>
    1116:	38 f0       	brcs	.+14     	; 0x1126 <__addsf3+0x20>
    1118:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__fp_pscB>
    111c:	20 f0       	brcs	.+8      	; 0x1126 <__addsf3+0x20>
    111e:	39 f4       	brne	.+14     	; 0x112e <__addsf3+0x28>
    1120:	9f 3f       	cpi	r25, 0xFF	; 255
    1122:	19 f4       	brne	.+6      	; 0x112a <__addsf3+0x24>
    1124:	26 f4       	brtc	.+8      	; 0x112e <__addsf3+0x28>
    1126:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__fp_nan>
    112a:	0e f4       	brtc	.+2      	; 0x112e <__addsf3+0x28>
    112c:	e0 95       	com	r30
    112e:	e7 fb       	bst	r30, 7
    1130:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__fp_inf>

00001134 <__addsf3x>:
    1134:	e9 2f       	mov	r30, r25
    1136:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__fp_split3>
    113a:	58 f3       	brcs	.-42     	; 0x1112 <__addsf3+0xc>
    113c:	ba 17       	cp	r27, r26
    113e:	62 07       	cpc	r22, r18
    1140:	73 07       	cpc	r23, r19
    1142:	84 07       	cpc	r24, r20
    1144:	95 07       	cpc	r25, r21
    1146:	20 f0       	brcs	.+8      	; 0x1150 <__addsf3x+0x1c>
    1148:	79 f4       	brne	.+30     	; 0x1168 <__addsf3x+0x34>
    114a:	a6 f5       	brtc	.+104    	; 0x11b4 <__addsf3x+0x80>
    114c:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__fp_zero>
    1150:	0e f4       	brtc	.+2      	; 0x1154 <__addsf3x+0x20>
    1152:	e0 95       	com	r30
    1154:	0b 2e       	mov	r0, r27
    1156:	ba 2f       	mov	r27, r26
    1158:	a0 2d       	mov	r26, r0
    115a:	0b 01       	movw	r0, r22
    115c:	b9 01       	movw	r22, r18
    115e:	90 01       	movw	r18, r0
    1160:	0c 01       	movw	r0, r24
    1162:	ca 01       	movw	r24, r20
    1164:	a0 01       	movw	r20, r0
    1166:	11 24       	eor	r1, r1
    1168:	ff 27       	eor	r31, r31
    116a:	59 1b       	sub	r21, r25
    116c:	99 f0       	breq	.+38     	; 0x1194 <__addsf3x+0x60>
    116e:	59 3f       	cpi	r21, 0xF9	; 249
    1170:	50 f4       	brcc	.+20     	; 0x1186 <__addsf3x+0x52>
    1172:	50 3e       	cpi	r21, 0xE0	; 224
    1174:	68 f1       	brcs	.+90     	; 0x11d0 <__addsf3x+0x9c>
    1176:	1a 16       	cp	r1, r26
    1178:	f0 40       	sbci	r31, 0x00	; 0
    117a:	a2 2f       	mov	r26, r18
    117c:	23 2f       	mov	r18, r19
    117e:	34 2f       	mov	r19, r20
    1180:	44 27       	eor	r20, r20
    1182:	58 5f       	subi	r21, 0xF8	; 248
    1184:	f3 cf       	rjmp	.-26     	; 0x116c <__addsf3x+0x38>
    1186:	46 95       	lsr	r20
    1188:	37 95       	ror	r19
    118a:	27 95       	ror	r18
    118c:	a7 95       	ror	r26
    118e:	f0 40       	sbci	r31, 0x00	; 0
    1190:	53 95       	inc	r21
    1192:	c9 f7       	brne	.-14     	; 0x1186 <__addsf3x+0x52>
    1194:	7e f4       	brtc	.+30     	; 0x11b4 <__addsf3x+0x80>
    1196:	1f 16       	cp	r1, r31
    1198:	ba 0b       	sbc	r27, r26
    119a:	62 0b       	sbc	r22, r18
    119c:	73 0b       	sbc	r23, r19
    119e:	84 0b       	sbc	r24, r20
    11a0:	ba f0       	brmi	.+46     	; 0x11d0 <__addsf3x+0x9c>
    11a2:	91 50       	subi	r25, 0x01	; 1
    11a4:	a1 f0       	breq	.+40     	; 0x11ce <__addsf3x+0x9a>
    11a6:	ff 0f       	add	r31, r31
    11a8:	bb 1f       	adc	r27, r27
    11aa:	66 1f       	adc	r22, r22
    11ac:	77 1f       	adc	r23, r23
    11ae:	88 1f       	adc	r24, r24
    11b0:	c2 f7       	brpl	.-16     	; 0x11a2 <__addsf3x+0x6e>
    11b2:	0e c0       	rjmp	.+28     	; 0x11d0 <__addsf3x+0x9c>
    11b4:	ba 0f       	add	r27, r26
    11b6:	62 1f       	adc	r22, r18
    11b8:	73 1f       	adc	r23, r19
    11ba:	84 1f       	adc	r24, r20
    11bc:	48 f4       	brcc	.+18     	; 0x11d0 <__addsf3x+0x9c>
    11be:	87 95       	ror	r24
    11c0:	77 95       	ror	r23
    11c2:	67 95       	ror	r22
    11c4:	b7 95       	ror	r27
    11c6:	f7 95       	ror	r31
    11c8:	9e 3f       	cpi	r25, 0xFE	; 254
    11ca:	08 f0       	brcs	.+2      	; 0x11ce <__addsf3x+0x9a>
    11cc:	b0 cf       	rjmp	.-160    	; 0x112e <__addsf3+0x28>
    11ce:	93 95       	inc	r25
    11d0:	88 0f       	add	r24, r24
    11d2:	08 f0       	brcs	.+2      	; 0x11d6 <__addsf3x+0xa2>
    11d4:	99 27       	eor	r25, r25
    11d6:	ee 0f       	add	r30, r30
    11d8:	97 95       	ror	r25
    11da:	87 95       	ror	r24
    11dc:	08 95       	ret

000011de <__divsf3>:
    11de:	0e 94 03 09 	call	0x1206	; 0x1206 <__divsf3x>
    11e2:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__fp_round>
    11e6:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__fp_pscB>
    11ea:	58 f0       	brcs	.+22     	; 0x1202 <__divsf3+0x24>
    11ec:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__fp_pscA>
    11f0:	40 f0       	brcs	.+16     	; 0x1202 <__divsf3+0x24>
    11f2:	29 f4       	brne	.+10     	; 0x11fe <__divsf3+0x20>
    11f4:	5f 3f       	cpi	r21, 0xFF	; 255
    11f6:	29 f0       	breq	.+10     	; 0x1202 <__divsf3+0x24>
    11f8:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__fp_inf>
    11fc:	51 11       	cpse	r21, r1
    11fe:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__fp_szero>
    1202:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__fp_nan>

00001206 <__divsf3x>:
    1206:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__fp_split3>
    120a:	68 f3       	brcs	.-38     	; 0x11e6 <__divsf3+0x8>

0000120c <__divsf3_pse>:
    120c:	99 23       	and	r25, r25
    120e:	b1 f3       	breq	.-20     	; 0x11fc <__divsf3+0x1e>
    1210:	55 23       	and	r21, r21
    1212:	91 f3       	breq	.-28     	; 0x11f8 <__divsf3+0x1a>
    1214:	95 1b       	sub	r25, r21
    1216:	55 0b       	sbc	r21, r21
    1218:	bb 27       	eor	r27, r27
    121a:	aa 27       	eor	r26, r26
    121c:	62 17       	cp	r22, r18
    121e:	73 07       	cpc	r23, r19
    1220:	84 07       	cpc	r24, r20
    1222:	38 f0       	brcs	.+14     	; 0x1232 <__divsf3_pse+0x26>
    1224:	9f 5f       	subi	r25, 0xFF	; 255
    1226:	5f 4f       	sbci	r21, 0xFF	; 255
    1228:	22 0f       	add	r18, r18
    122a:	33 1f       	adc	r19, r19
    122c:	44 1f       	adc	r20, r20
    122e:	aa 1f       	adc	r26, r26
    1230:	a9 f3       	breq	.-22     	; 0x121c <__divsf3_pse+0x10>
    1232:	35 d0       	rcall	.+106    	; 0x129e <__divsf3_pse+0x92>
    1234:	0e 2e       	mov	r0, r30
    1236:	3a f0       	brmi	.+14     	; 0x1246 <__divsf3_pse+0x3a>
    1238:	e0 e8       	ldi	r30, 0x80	; 128
    123a:	32 d0       	rcall	.+100    	; 0x12a0 <__divsf3_pse+0x94>
    123c:	91 50       	subi	r25, 0x01	; 1
    123e:	50 40       	sbci	r21, 0x00	; 0
    1240:	e6 95       	lsr	r30
    1242:	00 1c       	adc	r0, r0
    1244:	ca f7       	brpl	.-14     	; 0x1238 <__divsf3_pse+0x2c>
    1246:	2b d0       	rcall	.+86     	; 0x129e <__divsf3_pse+0x92>
    1248:	fe 2f       	mov	r31, r30
    124a:	29 d0       	rcall	.+82     	; 0x129e <__divsf3_pse+0x92>
    124c:	66 0f       	add	r22, r22
    124e:	77 1f       	adc	r23, r23
    1250:	88 1f       	adc	r24, r24
    1252:	bb 1f       	adc	r27, r27
    1254:	26 17       	cp	r18, r22
    1256:	37 07       	cpc	r19, r23
    1258:	48 07       	cpc	r20, r24
    125a:	ab 07       	cpc	r26, r27
    125c:	b0 e8       	ldi	r27, 0x80	; 128
    125e:	09 f0       	breq	.+2      	; 0x1262 <__divsf3_pse+0x56>
    1260:	bb 0b       	sbc	r27, r27
    1262:	80 2d       	mov	r24, r0
    1264:	bf 01       	movw	r22, r30
    1266:	ff 27       	eor	r31, r31
    1268:	93 58       	subi	r25, 0x83	; 131
    126a:	5f 4f       	sbci	r21, 0xFF	; 255
    126c:	3a f0       	brmi	.+14     	; 0x127c <__divsf3_pse+0x70>
    126e:	9e 3f       	cpi	r25, 0xFE	; 254
    1270:	51 05       	cpc	r21, r1
    1272:	78 f0       	brcs	.+30     	; 0x1292 <__divsf3_pse+0x86>
    1274:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__fp_inf>
    1278:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__fp_szero>
    127c:	5f 3f       	cpi	r21, 0xFF	; 255
    127e:	e4 f3       	brlt	.-8      	; 0x1278 <__divsf3_pse+0x6c>
    1280:	98 3e       	cpi	r25, 0xE8	; 232
    1282:	d4 f3       	brlt	.-12     	; 0x1278 <__divsf3_pse+0x6c>
    1284:	86 95       	lsr	r24
    1286:	77 95       	ror	r23
    1288:	67 95       	ror	r22
    128a:	b7 95       	ror	r27
    128c:	f7 95       	ror	r31
    128e:	9f 5f       	subi	r25, 0xFF	; 255
    1290:	c9 f7       	brne	.-14     	; 0x1284 <__divsf3_pse+0x78>
    1292:	88 0f       	add	r24, r24
    1294:	91 1d       	adc	r25, r1
    1296:	96 95       	lsr	r25
    1298:	87 95       	ror	r24
    129a:	97 f9       	bld	r25, 7
    129c:	08 95       	ret
    129e:	e1 e0       	ldi	r30, 0x01	; 1
    12a0:	66 0f       	add	r22, r22
    12a2:	77 1f       	adc	r23, r23
    12a4:	88 1f       	adc	r24, r24
    12a6:	bb 1f       	adc	r27, r27
    12a8:	62 17       	cp	r22, r18
    12aa:	73 07       	cpc	r23, r19
    12ac:	84 07       	cpc	r24, r20
    12ae:	ba 07       	cpc	r27, r26
    12b0:	20 f0       	brcs	.+8      	; 0x12ba <__divsf3_pse+0xae>
    12b2:	62 1b       	sub	r22, r18
    12b4:	73 0b       	sbc	r23, r19
    12b6:	84 0b       	sbc	r24, r20
    12b8:	ba 0b       	sbc	r27, r26
    12ba:	ee 1f       	adc	r30, r30
    12bc:	88 f7       	brcc	.-30     	; 0x12a0 <__divsf3_pse+0x94>
    12be:	e0 95       	com	r30
    12c0:	08 95       	ret

000012c2 <__fixunssfsi>:
    12c2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__fp_splitA>
    12c6:	88 f0       	brcs	.+34     	; 0x12ea <__fixunssfsi+0x28>
    12c8:	9f 57       	subi	r25, 0x7F	; 127
    12ca:	98 f0       	brcs	.+38     	; 0x12f2 <__fixunssfsi+0x30>
    12cc:	b9 2f       	mov	r27, r25
    12ce:	99 27       	eor	r25, r25
    12d0:	b7 51       	subi	r27, 0x17	; 23
    12d2:	b0 f0       	brcs	.+44     	; 0x1300 <__fixunssfsi+0x3e>
    12d4:	e1 f0       	breq	.+56     	; 0x130e <__fixunssfsi+0x4c>
    12d6:	66 0f       	add	r22, r22
    12d8:	77 1f       	adc	r23, r23
    12da:	88 1f       	adc	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	1a f0       	brmi	.+6      	; 0x12e6 <__fixunssfsi+0x24>
    12e0:	ba 95       	dec	r27
    12e2:	c9 f7       	brne	.-14     	; 0x12d6 <__fixunssfsi+0x14>
    12e4:	14 c0       	rjmp	.+40     	; 0x130e <__fixunssfsi+0x4c>
    12e6:	b1 30       	cpi	r27, 0x01	; 1
    12e8:	91 f0       	breq	.+36     	; 0x130e <__fixunssfsi+0x4c>
    12ea:	0e 94 17 0a 	call	0x142e	; 0x142e <__fp_zero>
    12ee:	b1 e0       	ldi	r27, 0x01	; 1
    12f0:	08 95       	ret
    12f2:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__fp_zero>
    12f6:	67 2f       	mov	r22, r23
    12f8:	78 2f       	mov	r23, r24
    12fa:	88 27       	eor	r24, r24
    12fc:	b8 5f       	subi	r27, 0xF8	; 248
    12fe:	39 f0       	breq	.+14     	; 0x130e <__fixunssfsi+0x4c>
    1300:	b9 3f       	cpi	r27, 0xF9	; 249
    1302:	cc f3       	brlt	.-14     	; 0x12f6 <__fixunssfsi+0x34>
    1304:	86 95       	lsr	r24
    1306:	77 95       	ror	r23
    1308:	67 95       	ror	r22
    130a:	b3 95       	inc	r27
    130c:	d9 f7       	brne	.-10     	; 0x1304 <__fixunssfsi+0x42>
    130e:	3e f4       	brtc	.+14     	; 0x131e <__fixunssfsi+0x5c>
    1310:	90 95       	com	r25
    1312:	80 95       	com	r24
    1314:	70 95       	com	r23
    1316:	61 95       	neg	r22
    1318:	7f 4f       	sbci	r23, 0xFF	; 255
    131a:	8f 4f       	sbci	r24, 0xFF	; 255
    131c:	9f 4f       	sbci	r25, 0xFF	; 255
    131e:	08 95       	ret

00001320 <__floatunsisf>:
    1320:	e8 94       	clt
    1322:	09 c0       	rjmp	.+18     	; 0x1336 <__floatsisf+0x12>

00001324 <__floatsisf>:
    1324:	97 fb       	bst	r25, 7
    1326:	3e f4       	brtc	.+14     	; 0x1336 <__floatsisf+0x12>
    1328:	90 95       	com	r25
    132a:	80 95       	com	r24
    132c:	70 95       	com	r23
    132e:	61 95       	neg	r22
    1330:	7f 4f       	sbci	r23, 0xFF	; 255
    1332:	8f 4f       	sbci	r24, 0xFF	; 255
    1334:	9f 4f       	sbci	r25, 0xFF	; 255
    1336:	99 23       	and	r25, r25
    1338:	a9 f0       	breq	.+42     	; 0x1364 <__floatsisf+0x40>
    133a:	f9 2f       	mov	r31, r25
    133c:	96 e9       	ldi	r25, 0x96	; 150
    133e:	bb 27       	eor	r27, r27
    1340:	93 95       	inc	r25
    1342:	f6 95       	lsr	r31
    1344:	87 95       	ror	r24
    1346:	77 95       	ror	r23
    1348:	67 95       	ror	r22
    134a:	b7 95       	ror	r27
    134c:	f1 11       	cpse	r31, r1
    134e:	f8 cf       	rjmp	.-16     	; 0x1340 <__floatsisf+0x1c>
    1350:	fa f4       	brpl	.+62     	; 0x1390 <__floatsisf+0x6c>
    1352:	bb 0f       	add	r27, r27
    1354:	11 f4       	brne	.+4      	; 0x135a <__floatsisf+0x36>
    1356:	60 ff       	sbrs	r22, 0
    1358:	1b c0       	rjmp	.+54     	; 0x1390 <__floatsisf+0x6c>
    135a:	6f 5f       	subi	r22, 0xFF	; 255
    135c:	7f 4f       	sbci	r23, 0xFF	; 255
    135e:	8f 4f       	sbci	r24, 0xFF	; 255
    1360:	9f 4f       	sbci	r25, 0xFF	; 255
    1362:	16 c0       	rjmp	.+44     	; 0x1390 <__floatsisf+0x6c>
    1364:	88 23       	and	r24, r24
    1366:	11 f0       	breq	.+4      	; 0x136c <__floatsisf+0x48>
    1368:	96 e9       	ldi	r25, 0x96	; 150
    136a:	11 c0       	rjmp	.+34     	; 0x138e <__floatsisf+0x6a>
    136c:	77 23       	and	r23, r23
    136e:	21 f0       	breq	.+8      	; 0x1378 <__floatsisf+0x54>
    1370:	9e e8       	ldi	r25, 0x8E	; 142
    1372:	87 2f       	mov	r24, r23
    1374:	76 2f       	mov	r23, r22
    1376:	05 c0       	rjmp	.+10     	; 0x1382 <__floatsisf+0x5e>
    1378:	66 23       	and	r22, r22
    137a:	71 f0       	breq	.+28     	; 0x1398 <__floatsisf+0x74>
    137c:	96 e8       	ldi	r25, 0x86	; 134
    137e:	86 2f       	mov	r24, r22
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	2a f0       	brmi	.+10     	; 0x1390 <__floatsisf+0x6c>
    1386:	9a 95       	dec	r25
    1388:	66 0f       	add	r22, r22
    138a:	77 1f       	adc	r23, r23
    138c:	88 1f       	adc	r24, r24
    138e:	da f7       	brpl	.-10     	; 0x1386 <__floatsisf+0x62>
    1390:	88 0f       	add	r24, r24
    1392:	96 95       	lsr	r25
    1394:	87 95       	ror	r24
    1396:	97 f9       	bld	r25, 7
    1398:	08 95       	ret

0000139a <__fp_inf>:
    139a:	97 f9       	bld	r25, 7
    139c:	9f 67       	ori	r25, 0x7F	; 127
    139e:	80 e8       	ldi	r24, 0x80	; 128
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	08 95       	ret

000013a6 <__fp_nan>:
    13a6:	9f ef       	ldi	r25, 0xFF	; 255
    13a8:	80 ec       	ldi	r24, 0xC0	; 192
    13aa:	08 95       	ret

000013ac <__fp_pscA>:
    13ac:	00 24       	eor	r0, r0
    13ae:	0a 94       	dec	r0
    13b0:	16 16       	cp	r1, r22
    13b2:	17 06       	cpc	r1, r23
    13b4:	18 06       	cpc	r1, r24
    13b6:	09 06       	cpc	r0, r25
    13b8:	08 95       	ret

000013ba <__fp_pscB>:
    13ba:	00 24       	eor	r0, r0
    13bc:	0a 94       	dec	r0
    13be:	12 16       	cp	r1, r18
    13c0:	13 06       	cpc	r1, r19
    13c2:	14 06       	cpc	r1, r20
    13c4:	05 06       	cpc	r0, r21
    13c6:	08 95       	ret

000013c8 <__fp_round>:
    13c8:	09 2e       	mov	r0, r25
    13ca:	03 94       	inc	r0
    13cc:	00 0c       	add	r0, r0
    13ce:	11 f4       	brne	.+4      	; 0x13d4 <__fp_round+0xc>
    13d0:	88 23       	and	r24, r24
    13d2:	52 f0       	brmi	.+20     	; 0x13e8 <__fp_round+0x20>
    13d4:	bb 0f       	add	r27, r27
    13d6:	40 f4       	brcc	.+16     	; 0x13e8 <__fp_round+0x20>
    13d8:	bf 2b       	or	r27, r31
    13da:	11 f4       	brne	.+4      	; 0x13e0 <__fp_round+0x18>
    13dc:	60 ff       	sbrs	r22, 0
    13de:	04 c0       	rjmp	.+8      	; 0x13e8 <__fp_round+0x20>
    13e0:	6f 5f       	subi	r22, 0xFF	; 255
    13e2:	7f 4f       	sbci	r23, 0xFF	; 255
    13e4:	8f 4f       	sbci	r24, 0xFF	; 255
    13e6:	9f 4f       	sbci	r25, 0xFF	; 255
    13e8:	08 95       	ret

000013ea <__fp_split3>:
    13ea:	57 fd       	sbrc	r21, 7
    13ec:	90 58       	subi	r25, 0x80	; 128
    13ee:	44 0f       	add	r20, r20
    13f0:	55 1f       	adc	r21, r21
    13f2:	59 f0       	breq	.+22     	; 0x140a <__fp_splitA+0x10>
    13f4:	5f 3f       	cpi	r21, 0xFF	; 255
    13f6:	71 f0       	breq	.+28     	; 0x1414 <__fp_splitA+0x1a>
    13f8:	47 95       	ror	r20

000013fa <__fp_splitA>:
    13fa:	88 0f       	add	r24, r24
    13fc:	97 fb       	bst	r25, 7
    13fe:	99 1f       	adc	r25, r25
    1400:	61 f0       	breq	.+24     	; 0x141a <__fp_splitA+0x20>
    1402:	9f 3f       	cpi	r25, 0xFF	; 255
    1404:	79 f0       	breq	.+30     	; 0x1424 <__fp_splitA+0x2a>
    1406:	87 95       	ror	r24
    1408:	08 95       	ret
    140a:	12 16       	cp	r1, r18
    140c:	13 06       	cpc	r1, r19
    140e:	14 06       	cpc	r1, r20
    1410:	55 1f       	adc	r21, r21
    1412:	f2 cf       	rjmp	.-28     	; 0x13f8 <__fp_split3+0xe>
    1414:	46 95       	lsr	r20
    1416:	f1 df       	rcall	.-30     	; 0x13fa <__fp_splitA>
    1418:	08 c0       	rjmp	.+16     	; 0x142a <__fp_splitA+0x30>
    141a:	16 16       	cp	r1, r22
    141c:	17 06       	cpc	r1, r23
    141e:	18 06       	cpc	r1, r24
    1420:	99 1f       	adc	r25, r25
    1422:	f1 cf       	rjmp	.-30     	; 0x1406 <__fp_splitA+0xc>
    1424:	86 95       	lsr	r24
    1426:	71 05       	cpc	r23, r1
    1428:	61 05       	cpc	r22, r1
    142a:	08 94       	sec
    142c:	08 95       	ret

0000142e <__fp_zero>:
    142e:	e8 94       	clt

00001430 <__fp_szero>:
    1430:	bb 27       	eor	r27, r27
    1432:	66 27       	eor	r22, r22
    1434:	77 27       	eor	r23, r23
    1436:	cb 01       	movw	r24, r22
    1438:	97 f9       	bld	r25, 7
    143a:	08 95       	ret

0000143c <__mulsf3>:
    143c:	0e 94 31 0a 	call	0x1462	; 0x1462 <__mulsf3x>
    1440:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__fp_round>
    1444:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__fp_pscA>
    1448:	38 f0       	brcs	.+14     	; 0x1458 <__mulsf3+0x1c>
    144a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__fp_pscB>
    144e:	20 f0       	brcs	.+8      	; 0x1458 <__mulsf3+0x1c>
    1450:	95 23       	and	r25, r21
    1452:	11 f0       	breq	.+4      	; 0x1458 <__mulsf3+0x1c>
    1454:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__fp_inf>
    1458:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__fp_nan>
    145c:	11 24       	eor	r1, r1
    145e:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__fp_szero>

00001462 <__mulsf3x>:
    1462:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__fp_split3>
    1466:	70 f3       	brcs	.-36     	; 0x1444 <__mulsf3+0x8>

00001468 <__mulsf3_pse>:
    1468:	95 9f       	mul	r25, r21
    146a:	c1 f3       	breq	.-16     	; 0x145c <__mulsf3+0x20>
    146c:	95 0f       	add	r25, r21
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	55 1f       	adc	r21, r21
    1472:	62 9f       	mul	r22, r18
    1474:	f0 01       	movw	r30, r0
    1476:	72 9f       	mul	r23, r18
    1478:	bb 27       	eor	r27, r27
    147a:	f0 0d       	add	r31, r0
    147c:	b1 1d       	adc	r27, r1
    147e:	63 9f       	mul	r22, r19
    1480:	aa 27       	eor	r26, r26
    1482:	f0 0d       	add	r31, r0
    1484:	b1 1d       	adc	r27, r1
    1486:	aa 1f       	adc	r26, r26
    1488:	64 9f       	mul	r22, r20
    148a:	66 27       	eor	r22, r22
    148c:	b0 0d       	add	r27, r0
    148e:	a1 1d       	adc	r26, r1
    1490:	66 1f       	adc	r22, r22
    1492:	82 9f       	mul	r24, r18
    1494:	22 27       	eor	r18, r18
    1496:	b0 0d       	add	r27, r0
    1498:	a1 1d       	adc	r26, r1
    149a:	62 1f       	adc	r22, r18
    149c:	73 9f       	mul	r23, r19
    149e:	b0 0d       	add	r27, r0
    14a0:	a1 1d       	adc	r26, r1
    14a2:	62 1f       	adc	r22, r18
    14a4:	83 9f       	mul	r24, r19
    14a6:	a0 0d       	add	r26, r0
    14a8:	61 1d       	adc	r22, r1
    14aa:	22 1f       	adc	r18, r18
    14ac:	74 9f       	mul	r23, r20
    14ae:	33 27       	eor	r19, r19
    14b0:	a0 0d       	add	r26, r0
    14b2:	61 1d       	adc	r22, r1
    14b4:	23 1f       	adc	r18, r19
    14b6:	84 9f       	mul	r24, r20
    14b8:	60 0d       	add	r22, r0
    14ba:	21 1d       	adc	r18, r1
    14bc:	82 2f       	mov	r24, r18
    14be:	76 2f       	mov	r23, r22
    14c0:	6a 2f       	mov	r22, r26
    14c2:	11 24       	eor	r1, r1
    14c4:	9f 57       	subi	r25, 0x7F	; 127
    14c6:	50 40       	sbci	r21, 0x00	; 0
    14c8:	9a f0       	brmi	.+38     	; 0x14f0 <__mulsf3_pse+0x88>
    14ca:	f1 f0       	breq	.+60     	; 0x1508 <__mulsf3_pse+0xa0>
    14cc:	88 23       	and	r24, r24
    14ce:	4a f0       	brmi	.+18     	; 0x14e2 <__mulsf3_pse+0x7a>
    14d0:	ee 0f       	add	r30, r30
    14d2:	ff 1f       	adc	r31, r31
    14d4:	bb 1f       	adc	r27, r27
    14d6:	66 1f       	adc	r22, r22
    14d8:	77 1f       	adc	r23, r23
    14da:	88 1f       	adc	r24, r24
    14dc:	91 50       	subi	r25, 0x01	; 1
    14de:	50 40       	sbci	r21, 0x00	; 0
    14e0:	a9 f7       	brne	.-22     	; 0x14cc <__mulsf3_pse+0x64>
    14e2:	9e 3f       	cpi	r25, 0xFE	; 254
    14e4:	51 05       	cpc	r21, r1
    14e6:	80 f0       	brcs	.+32     	; 0x1508 <__mulsf3_pse+0xa0>
    14e8:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__fp_inf>
    14ec:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__fp_szero>
    14f0:	5f 3f       	cpi	r21, 0xFF	; 255
    14f2:	e4 f3       	brlt	.-8      	; 0x14ec <__mulsf3_pse+0x84>
    14f4:	98 3e       	cpi	r25, 0xE8	; 232
    14f6:	d4 f3       	brlt	.-12     	; 0x14ec <__mulsf3_pse+0x84>
    14f8:	86 95       	lsr	r24
    14fa:	77 95       	ror	r23
    14fc:	67 95       	ror	r22
    14fe:	b7 95       	ror	r27
    1500:	f7 95       	ror	r31
    1502:	e7 95       	ror	r30
    1504:	9f 5f       	subi	r25, 0xFF	; 255
    1506:	c1 f7       	brne	.-16     	; 0x14f8 <__mulsf3_pse+0x90>
    1508:	fe 2b       	or	r31, r30
    150a:	88 0f       	add	r24, r24
    150c:	91 1d       	adc	r25, r1
    150e:	96 95       	lsr	r25
    1510:	87 95       	ror	r24
    1512:	97 f9       	bld	r25, 7
    1514:	08 95       	ret

00001516 <__itoa_ncheck>:
    1516:	bb 27       	eor	r27, r27
    1518:	4a 30       	cpi	r20, 0x0A	; 10
    151a:	31 f4       	brne	.+12     	; 0x1528 <__itoa_ncheck+0x12>
    151c:	99 23       	and	r25, r25
    151e:	22 f4       	brpl	.+8      	; 0x1528 <__itoa_ncheck+0x12>
    1520:	bd e2       	ldi	r27, 0x2D	; 45
    1522:	90 95       	com	r25
    1524:	81 95       	neg	r24
    1526:	9f 4f       	sbci	r25, 0xFF	; 255
    1528:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__utoa_common>

0000152c <__utoa_ncheck>:
    152c:	bb 27       	eor	r27, r27

0000152e <__utoa_common>:
    152e:	fb 01       	movw	r30, r22
    1530:	55 27       	eor	r21, r21
    1532:	aa 27       	eor	r26, r26
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	aa 1f       	adc	r26, r26
    153a:	a4 17       	cp	r26, r20
    153c:	10 f0       	brcs	.+4      	; 0x1542 <__utoa_common+0x14>
    153e:	a4 1b       	sub	r26, r20
    1540:	83 95       	inc	r24
    1542:	50 51       	subi	r21, 0x10	; 16
    1544:	b9 f7       	brne	.-18     	; 0x1534 <__utoa_common+0x6>
    1546:	a0 5d       	subi	r26, 0xD0	; 208
    1548:	aa 33       	cpi	r26, 0x3A	; 58
    154a:	08 f0       	brcs	.+2      	; 0x154e <__utoa_common+0x20>
    154c:	a9 5d       	subi	r26, 0xD9	; 217
    154e:	a1 93       	st	Z+, r26
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	79 f7       	brne	.-34     	; 0x1532 <__utoa_common+0x4>
    1554:	b1 11       	cpse	r27, r1
    1556:	b1 93       	st	Z+, r27
    1558:	11 92       	st	Z+, r1
    155a:	cb 01       	movw	r24, r22
    155c:	0c 94 b0 0a 	jmp	0x1560	; 0x1560 <strrev>

00001560 <strrev>:
    1560:	dc 01       	movw	r26, r24
    1562:	fc 01       	movw	r30, r24
    1564:	67 2f       	mov	r22, r23
    1566:	71 91       	ld	r23, Z+
    1568:	77 23       	and	r23, r23
    156a:	e1 f7       	brne	.-8      	; 0x1564 <strrev+0x4>
    156c:	32 97       	sbiw	r30, 0x02	; 2
    156e:	04 c0       	rjmp	.+8      	; 0x1578 <strrev+0x18>
    1570:	7c 91       	ld	r23, X
    1572:	6d 93       	st	X+, r22
    1574:	70 83       	st	Z, r23
    1576:	62 91       	ld	r22, -Z
    1578:	ae 17       	cp	r26, r30
    157a:	bf 07       	cpc	r27, r31
    157c:	c8 f3       	brcs	.-14     	; 0x1570 <strrev+0x10>
    157e:	08 95       	ret

00001580 <_exit>:
    1580:	f8 94       	cli

00001582 <__stop_program>:
    1582:	ff cf       	rjmp	.-2      	; 0x1582 <__stop_program>
