
ITI_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  000014da  0000156e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800172  00800172  00001680  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002eeb  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010df  00000000  00000000  000049af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f04  00000000  00000000  00005a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000958  00000000  00000000  00007994  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001307  00000000  00000000  000082ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a48  00000000  00000000  000095f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000b03b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__vector_1>
       8:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__vector_2>
       c:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <__vector_6>
      1c:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <__vector_10>
      2c:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
      8a:	0c 94 6b 0a 	jmp	0x14d6	; 0x14d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TempSensor>:

}

void TempSensor(void){
	//Read Voltage value from ADC conversion
	u8 Temp = ADC_u8StartConversion(0);
      92:	80 e0       	ldi	r24, 0x00	; 0
      94:	0e 94 c7 04 	call	0x98e	; 0x98e <ADC_u8StartConversion>
	 * LM35 Temperature Sensor Vout Calculations with connection applied in proteus:
	 * Vout = 10 mV/C
	 * Vref = 5v
	 * Temp Calculation (Voltage Value*Voltage ref)/(10*(10^-3)*25*2^8)
	 */
	Temp = (u8)((Temp*5)/ (.01*256));
      98:	90 e0       	ldi	r25, 0x00	; 0
      9a:	bc 01       	movw	r22, r24
      9c:	66 0f       	add	r22, r22
      9e:	77 1f       	adc	r23, r23
      a0:	66 0f       	add	r22, r22
      a2:	77 1f       	adc	r23, r23
      a4:	68 0f       	add	r22, r24
      a6:	79 1f       	adc	r23, r25
      a8:	07 2e       	mov	r0, r23
      aa:	00 0c       	add	r0, r0
      ac:	88 0b       	sbc	r24, r24
      ae:	99 0b       	sbc	r25, r25
      b0:	0e 94 3d 09 	call	0x127a	; 0x127a <__floatsisf>
      b4:	2a e0       	ldi	r18, 0x0A	; 10
      b6:	37 ed       	ldi	r19, 0xD7	; 215
      b8:	43 e2       	ldi	r20, 0x23	; 35
      ba:	50 e4       	ldi	r21, 0x40	; 64
      bc:	0e 94 9a 08 	call	0x1134	; 0x1134 <__divsf3>
      c0:	0e 94 0c 09 	call	0x1218	; 0x1218 <__fixunssfsi>
	//Check on Temp if over 35C ===> AC will work and turn off Fan if was on
	if(Temp>=35){
      c4:	63 32       	cpi	r22, 0x23	; 35
      c6:	58 f0       	brcs	.+22     	; 0xde <TempSensor+0x4c>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
      c8:	41 e0       	ldi	r20, 0x01	; 1
      ca:	66 e0       	ldi	r22, 0x06	; 6
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
      d2:	40 e0       	ldi	r20, 0x00	; 0
      d4:	67 e0       	ldi	r22, 0x07	; 7
      d6:	83 e0       	ldi	r24, 0x03	; 3
      d8:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
      dc:	08 95       	ret
	}
	//Check on Temp if over 25C ===> Fan will work and turn off AC if was on
	else if (Temp>=25){
      de:	69 31       	cpi	r22, 0x19	; 25
      e0:	58 f0       	brcs	.+22     	; 0xf8 <TempSensor+0x66>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	66 e0       	ldi	r22, 0x06	; 6
      e6:	83 e0       	ldi	r24, 0x03	; 3
      e8:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH);
      ec:	41 e0       	ldi	r20, 0x01	; 1
      ee:	67 e0       	ldi	r22, 0x07	; 7
      f0:	83 e0       	ldi	r24, 0x03	; 3
      f2:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
      f6:	08 95       	ret
	}//Else State declare that Temp is lower than 25 so turning off both AC and Fan
	else{
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
      f8:	40 e0       	ldi	r20, 0x00	; 0
      fa:	66 e0       	ldi	r22, 0x06	; 6
      fc:	83 e0       	ldi	r24, 0x03	; 3
      fe:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
     102:	40 e0       	ldi	r20, 0x00	; 0
     104:	67 e0       	ldi	r22, 0x07	; 7
     106:	83 e0       	ldi	r24, 0x03	; 3
     108:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
     10c:	08 95       	ret

0000010e <void_SetEPROMLockerPass>:


}
void void_SetEPROMLockerPass(void ){
	
	Global_u8SavedDoorPassLowByte=(u8)Global_u16EPROMDoorPass;
     10e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <Global_u16EPROMDoorPass>
     112:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     116:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <Global_u8SavedDoorPassLowByte>
	
	Global_u8SavedDoorPassHighByte=(u8)(Global_u16EPROMDoorPass>>8);
     11a:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <Global_u8SavedDoorPassHighByte>
	
	EEPROM_voidSendDataByte(Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
     11e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     122:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     126:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <EEPROM_voidSendDataByte>
	TIMER_delay_ms(300);
     12a:	6c e2       	ldi	r22, 0x2C	; 44
     12c:	71 e0       	ldi	r23, 0x01	; 1
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 ff 05 	call	0xbfe	; 0xbfe <TIMER_delay_ms>

	EEPROM_voidSendDataByte(Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
     136:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     13a:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     13e:	66 5f       	subi	r22, 0xF6	; 246
     140:	7f 4f       	sbci	r23, 0xFF	; 255
     142:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Global_u8SavedDoorPassHighByte>
     146:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <EEPROM_voidSendDataByte>
	TIMER_delay_ms(300);
     14a:	6c e2       	ldi	r22, 0x2C	; 44
     14c:	71 e0       	ldi	r23, 0x01	; 1
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 ff 05 	call	0xbfe	; 0xbfe <TIMER_delay_ms>
     156:	08 95       	ret

00000158 <void_Locker>:
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
	}
}

void void_Locker(){
     158:	cf 93       	push	r28
	/*To set new pass enter your old pass and press clear*/
	/* max password digits is 4*/

	// pressed key
	u8 Local_u8Keypad_Key=KPD_u8GetPressedKey();
     15a:	0e 94 57 03 	call	0x6ae	; 0x6ae <KPD_u8GetPressedKey>
     15e:	c8 2f       	mov	r28, r24
	/* case user entered clear */
		/* two cases to enter clear
		* First : To set new pass
		* Second : clear screen and clear the entered password
		*/
	if(Local_u8Keypad_Key==KPD_CLEAR){
     160:	8d 30       	cpi	r24, 0x0D	; 13
     162:	09 f0       	breq	.+2      	; 0x166 <void_Locker+0xe>
     164:	74 c0       	rjmp	.+232    	; 0x24e <void_Locker+0xf6>

		// First case : set new pass
		if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
     166:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <Local_u16DoorPassword.1766>
     16a:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <Local_u16DoorPassword.1766+0x1>
     16e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <Global_u16EPROMDoorPass>
     172:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     176:	28 17       	cp	r18, r24
     178:	39 07       	cpc	r19, r25
     17a:	09 f0       	breq	.+2      	; 0x17e <void_Locker+0x26>
     17c:	5f c0       	rjmp	.+190    	; 0x23c <void_Locker+0xe4>

			LCD_voidClearDisplay();
     17e:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_voidClearDisplay>
			// setting new password
				// clear all saved passes and digit counter
				Global_u16EPROMDoorPass=0;
     182:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     186:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <Global_u16EPROMDoorPass>
				Local_u16DoorPassword=0;
     18a:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <Local_u16DoorPassword.1766+0x1>
     18e:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <Local_u16DoorPassword.1766>
				Local_u8DigitsCount=0;
     192:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Local_u8DigitsCount.1767>

				LCD_voidSendString("Set new pass:");
     196:	8e e6       	ldi	r24, 0x6E	; 110
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_voidSendString>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				while(Local_u8Keypad_Key != KPD_ENTER ){

					Local_u8Keypad_Key=KPD_u8GetPressedKey();
     19e:	0e 94 57 03 	call	0x6ae	; 0x6ae <KPD_u8GetPressedKey>
     1a2:	c8 2f       	mov	r28, r24
					// check if the user entered more than 4 digits
					if(Local_u8DigitsCount==Max_Pass_Digits+1){
     1a4:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Local_u8DigitsCount.1767>
     1a8:	85 30       	cpi	r24, 0x05	; 5
     1aa:	a1 f4       	brne	.+40     	; 0x1d4 <void_Locker+0x7c>
						LCD_voidClearDisplay();
     1ac:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_voidClearDisplay>
						LCD_voidSendString("ERROR !!!!");
     1b0:	8c e7       	ldi	r24, 0x7C	; 124
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_voidSendString>
						LCD_voidGoTOXY(1,0);
     1b8:	60 e0       	ldi	r22, 0x00	; 0
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	0e 94 53 04 	call	0x8a6	; 0x8a6 <LCD_voidGoTOXY>
						LCD_voidSendString("Max Digits is 4");
     1c0:	87 e8       	ldi	r24, 0x87	; 135
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_voidSendString>
						Local_u8DigitsCount=0;
     1c8:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Local_u8DigitsCount.1767>
						Global_u16EPROMDoorPass=0;
     1cc:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     1d0:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <Global_u16EPROMDoorPass>
					}

					if(Local_u8Keypad_Key==KPD_CLEAR){
     1d4:	cd 30       	cpi	r28, 0x0D	; 13
     1d6:	49 f4       	brne	.+18     	; 0x1ea <void_Locker+0x92>
						Local_u8DigitsCount=0;
     1d8:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Local_u8DigitsCount.1767>
						LCD_voidClearDisplay();
     1dc:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_voidClearDisplay>
						Global_u16EPROMDoorPass=0;
     1e0:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     1e4:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <Global_u16EPROMDoorPass>
     1e8:	da cf       	rjmp	.-76     	; 0x19e <void_Locker+0x46>

					}
					else if(Local_u8Keypad_Key !=KPD_NO_PRESS && Local_u8Keypad_Key!=KPD_ENTER){
     1ea:	ca 3a       	cpi	r28, 0xAA	; 170
     1ec:	c1 f2       	breq	.-80     	; 0x19e <void_Locker+0x46>
     1ee:	cc 30       	cpi	r28, 0x0C	; 12
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <void_Locker+0x9c>
     1f2:	86 c0       	rjmp	.+268    	; 0x300 <void_Locker+0x1a8>
						// if it is the first digit that user enter --> clear any previous message on the screen
						if(Local_u8DigitsCount==0)
     1f4:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Local_u8DigitsCount.1767>
     1f8:	81 11       	cpse	r24, r1
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <void_Locker+0xa8>
							LCD_voidClearDisplay();
     1fc:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_voidClearDisplay>
						LCD_voidSendData('*');
     200:	8a e2       	ldi	r24, 0x2A	; 42
     202:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <LCD_voidSendData>
						Local_u8DigitsCount++;
     206:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Local_u8DigitsCount.1767>
     20a:	8f 5f       	subi	r24, 0xFF	; 255
     20c:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <Local_u8DigitsCount.1767>
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
     210:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <Global_u16EPROMDoorPass>
     214:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     218:	9c 01       	movw	r18, r24
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	88 0f       	add	r24, r24
     224:	99 1f       	adc	r25, r25
     226:	88 0f       	add	r24, r24
     228:	99 1f       	adc	r25, r25
     22a:	82 0f       	add	r24, r18
     22c:	93 1f       	adc	r25, r19
     22e:	8c 0f       	add	r24, r28
     230:	91 1d       	adc	r25, r1
     232:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     236:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <Global_u16EPROMDoorPass>
     23a:	b1 cf       	rjmp	.-158    	; 0x19e <void_Locker+0x46>

		}

		// Second case : to clear Screen or typed password
		else{
		LCD_voidClearDisplay();
     23c:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_voidClearDisplay>
		Local_u16DoorPassword=0;
     240:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <Local_u16DoorPassword.1766+0x1>
     244:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <Local_u16DoorPassword.1766>
		Local_u8DigitsCount=0;
     248:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Local_u8DigitsCount.1767>
     24c:	63 c0       	rjmp	.+198    	; 0x314 <void_Locker+0x1bc>

		}
	}
	/******************************************************************************************************************************************************************/
	/* case user pressed enter or equal */
	else if(Local_u8Keypad_Key==KPD_ENTER){
     24e:	8c 30       	cpi	r24, 0x0C	; 12
     250:	89 f5       	brne	.+98     	; 0x2b4 <void_Locker+0x15c>

		LCD_voidClearDisplay();
     252:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_voidClearDisplay>
		// check if entered pass is correct
		 if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
     256:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <Local_u16DoorPassword.1766>
     25a:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <Local_u16DoorPassword.1766+0x1>
     25e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <Global_u16EPROMDoorPass>
     262:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     266:	28 17       	cp	r18, r24
     268:	39 07       	cpc	r19, r25
     26a:	c9 f4       	brne	.+50     	; 0x29e <void_Locker+0x146>
			// check door status
			if(Local_u8DoorStatus==0){
     26c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     270:	81 11       	cpse	r24, r1
     272:	0b c0       	rjmp	.+22     	; 0x28a <void_Locker+0x132>
				LCD_voidSendString("Door is opened");
     274:	87 e9       	ldi	r24, 0x97	; 151
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_voidSendString>
				// run servo
				Servo_voidDegree(180);
     27c:	84 eb       	ldi	r24, 0xB4	; 180
     27e:	0e 94 9a 04 	call	0x934	; 0x934 <Servo_voidDegree>
				Local_u8DoorStatus=1;
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
     288:	0e c0       	rjmp	.+28     	; 0x2a6 <void_Locker+0x14e>

			}
			else{
				LCD_voidSendString("Door is Closed");
     28a:	86 ea       	ldi	r24, 0xA6	; 166
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_voidSendString>
				// stop servo
				Servo_voidDegree(0);
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	0e 94 9a 04 	call	0x934	; 0x934 <Servo_voidDegree>
				Local_u8DoorStatus=0;
     298:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <void_Locker+0x14e>

			}

		}
		else
			LCD_voidSendString("Wrong password !");
     29e:	85 eb       	ldi	r24, 0xB5	; 181
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_voidSendString>

			// reset the entered password after typing enter
			Local_u16DoorPassword=0;
     2a6:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <Local_u16DoorPassword.1766+0x1>
     2aa:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <Local_u16DoorPassword.1766>
			Local_u8DigitsCount=0;
     2ae:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Local_u8DigitsCount.1767>
     2b2:	30 c0       	rjmp	.+96     	; 0x314 <void_Locker+0x1bc>
	}

	/****************************************************************************************************************************************************************/
	/* Case user pressed a digit key*/
	else if(Local_u8Keypad_Key != KPD_NO_PRESS){
     2b4:	8a 3a       	cpi	r24, 0xAA	; 170
     2b6:	71 f1       	breq	.+92     	; 0x314 <void_Locker+0x1bc>
		// if it is the first digit that user enter --> clear any previous message on the screen
		if(Local_u8DigitsCount==0)
     2b8:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Local_u8DigitsCount.1767>
     2bc:	81 11       	cpse	r24, r1
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <void_Locker+0x16c>
			LCD_voidClearDisplay();
     2c0:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_voidClearDisplay>

		LCD_voidSendData('*');
     2c4:	8a e2       	ldi	r24, 0x2A	; 42
     2c6:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <LCD_voidSendData>

		Local_u8DigitsCount++;
     2ca:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Local_u8DigitsCount.1767>
     2ce:	8f 5f       	subi	r24, 0xFF	; 255
     2d0:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <Local_u8DigitsCount.1767>
		Local_u16DoorPassword=Local_u16DoorPassword*10 + Local_u8Keypad_Key;
     2d4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <Local_u16DoorPassword.1766>
     2d8:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <Local_u16DoorPassword.1766+0x1>
     2dc:	9c 01       	movw	r18, r24
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	88 0f       	add	r24, r24
     2e4:	99 1f       	adc	r25, r25
     2e6:	88 0f       	add	r24, r24
     2e8:	99 1f       	adc	r25, r25
     2ea:	88 0f       	add	r24, r24
     2ec:	99 1f       	adc	r25, r25
     2ee:	82 0f       	add	r24, r18
     2f0:	93 1f       	adc	r25, r19
     2f2:	8c 0f       	add	r24, r28
     2f4:	91 1d       	adc	r25, r1
     2f6:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <Local_u16DoorPassword.1766+0x1>
     2fa:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <Local_u16DoorPassword.1766>


	}


}
     2fe:	0a c0       	rjmp	.+20     	; 0x314 <void_Locker+0x1bc>
						Local_u8DigitsCount++;
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
					}

				}
				LCD_voidClearDisplay();
     300:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_voidClearDisplay>
				LCD_voidSendString("pass is updated");
     304:	86 ec       	ldi	r24, 0xC6	; 198
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_voidSendString>
				// reset counter
				Local_u8DigitsCount=0;
     30c:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Local_u8DigitsCount.1767>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				// save the new pass to eeprom
				void_SetEPROMLockerPass();
     310:	0e 94 87 00 	call	0x10e	; 0x10e <void_SetEPROMLockerPass>


	}


}
     314:	cf 91       	pop	r28
     316:	08 95       	ret

00000318 <void_GetEPROMLockerPass>:
}

void void_GetEPROMLockerPass(void){

	// read pass low byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
     318:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     31c:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     320:	8b e8       	ldi	r24, 0x8B	; 139
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
     328:	6c e2       	ldi	r22, 0x2C	; 44
     32a:	71 e0       	ldi	r23, 0x01	; 1
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 ff 05 	call	0xbfe	; 0xbfe <TIMER_delay_ms>
	// read pass high byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
     334:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     338:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     33c:	66 5f       	subi	r22, 0xF6	; 246
     33e:	7f 4f       	sbci	r23, 0xFF	; 255
     340:	88 e8       	ldi	r24, 0x88	; 136
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
     348:	6c e2       	ldi	r22, 0x2C	; 44
     34a:	71 e0       	ldi	r23, 0x01	; 1
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 ff 05 	call	0xbfe	; 0xbfe <TIMER_delay_ms>
	// combine the high and low byte
	Global_u16EPROMDoorPass= ( (u16)(Global_u8SavedDoorPassHighByte<<8) )| Global_u8SavedDoorPassLowByte;
     354:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Global_u8SavedDoorPassHighByte>
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	98 2f       	mov	r25, r24
     35c:	88 27       	eor	r24, r24
     35e:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <Global_u8SavedDoorPassLowByte>
     362:	82 2b       	or	r24, r18
     364:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     368:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <Global_u16EPROMDoorPass>
     36c:	08 95       	ret

0000036e <main>:
void void_Locker(void);
void void_SetEPROMLockerPass(void);
void void_GetEPROMLockerPass(void);

void main(void)
{	
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	1f 92       	push	r1
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16EPROMSystemStateAddress=5;
	u8 Local_u8EPROMSystemState=0;
     378:	19 82       	std	Y+1, r1	; 0x01
	
	ADC_voidInit();
     37a:	0e 94 bf 04 	call	0x97e	; 0x97e <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_OUTPUT);
     37e:	41 e0       	ldi	r20, 0x01	; 1
     380:	66 e0       	ldi	r22, 0x06	; 6
     382:	83 e0       	ldi	r24, 0x03	; 3
     384:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_OUTPUT);
     388:	41 e0       	ldi	r20, 0x01	; 1
     38a:	67 e0       	ldi	r22, 0x07	; 7
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_voidSetPinDirection>

	LCD_voidInit();
     392:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_voidInit>
	KPD_voidInit();
     396:	0e 94 10 03 	call	0x620	; 0x620 <KPD_voidInit>
	//servo pin
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
     39a:	41 e0       	ldi	r20, 0x01	; 1
     39c:	65 e0       	ldi	r22, 0x05	; 5
     39e:	83 e0       	ldi	r24, 0x03	; 3
     3a0:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_voidSetPinDirection>
	Servo_voidInit();
     3a4:	0e 94 91 04 	call	0x922	; 0x922 <Servo_voidInit>

	TWI_voidMasterInit(0);
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	0e 94 38 07 	call	0xe70	; 0xe70 <TWI_voidMasterInit>
	
	/*Read system state form EPROM to check if this is the first time to run the project*/
	EEPROM_voidReadDataByte(&Local_u8EPROMSystemState,Local_u16EPROMSystemStateAddress);
     3ae:	65 e0       	ldi	r22, 0x05	; 5
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <EEPROM_voidReadDataByte>
	if(Local_u8EPROMSystemState != SystemHasRunBefore){
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	8c 31       	cpi	r24, 0x1C	; 28
     3be:	c9 f0       	breq	.+50     	; 0x3f2 <main+0x84>
		LCD_voidSendString("First Run");
     3c0:	86 ed       	ldi	r24, 0xD6	; 214
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_voidSendString>
		// save the system state as has run before
		Local_u8EPROMSystemState=SystemHasRunBefore;
     3c8:	8c e1       	ldi	r24, 0x1C	; 28
     3ca:	89 83       	std	Y+1, r24	; 0x01
		// save initial password = 100
		Global_u16EPROMDoorPass=1234;
     3cc:	82 ed       	ldi	r24, 0xD2	; 210
     3ce:	94 e0       	ldi	r25, 0x04	; 4
     3d0:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     3d4:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <Global_u16EPROMDoorPass>
		void_SetEPROMLockerPass();
     3d8:	0e 94 87 00 	call	0x10e	; 0x10e <void_SetEPROMLockerPass>
		// save the system state to eprom
		EEPROM_voidSendDataByte(Local_u8EPROMSystemState,Local_u16EPROMSystemStateAddress);
     3dc:	65 e0       	ldi	r22, 0x05	; 5
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <EEPROM_voidSendDataByte>
		TIMER_delay_ms(300);
     3e6:	6c e2       	ldi	r22, 0x2C	; 44
     3e8:	71 e0       	ldi	r23, 0x01	; 1
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 ff 05 	call	0xbfe	; 0xbfe <TIMER_delay_ms>
	}

	// get the saved password and store it the global EPROM_variable
	void_GetEPROMLockerPass();
     3f2:	0e 94 8c 01 	call	0x318	; 0x318 <void_GetEPROMLockerPass>
	
	LCD_voidSendNumber(Global_u16EPROMDoorPass);
     3f6:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <Global_u16EPROMDoorPass>
     3fa:	70 91 8a 01 	lds	r23, 0x018A	; 0x80018a <Global_u16EPROMDoorPass+0x1>
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 72 04 	call	0x8e4	; 0x8e4 <LCD_voidSendNumber>
	
	// Initialize USART
	USART_voidInit();
     406:	0e 94 aa 07 	call	0xf54	; 0xf54 <USART_voidInit>
	//Initialize Call Back Function
	USART_voidCallBackFunction(&USART_Start);
     40a:	87 e3       	ldi	r24, 0x37	; 55
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	0e 94 fd 07 	call	0xffa	; 0xffa <USART_voidCallBackFunction>
	//Enable USART PIE
	USART_voidEnableRxINT();
     412:	0e 94 02 08 	call	0x1004	; 0x1004 <USART_voidEnableRxINT>
	//Enable GIE
	GIE_voidEnableGlobalInt();
     416:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <GIE_voidEnableGlobalInt>
	// LED Pins
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN5,DIO_OUTPUT);
     41a:	41 e0       	ldi	r20, 0x01	; 1
     41c:	65 e0       	ldi	r22, 0x05	; 5
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN6,DIO_OUTPUT);
     424:	41 e0       	ldi	r20, 0x01	; 1
     426:	66 e0       	ldi	r22, 0x06	; 6
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN7,DIO_OUTPUT);
     42e:	41 e0       	ldi	r20, 0x01	; 1
     430:	67 e0       	ldi	r22, 0x07	; 7
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_voidSetPinDirection>

	while(1){
		/*USART is Controlled by ISR TIMER1_COMPB*/
		GIE_voidEnableGlobalInt();
     438:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <GIE_voidEnableGlobalInt>
		USART_voidEnableRxINT();
     43c:	0e 94 02 08 	call	0x1004	; 0x1004 <USART_voidEnableRxINT>
		//Call locker Control Function
		void_Locker();
     440:	0e 94 ac 00 	call	0x158	; 0x158 <void_Locker>
		//Call Temperature Sensor Control Function
		TempSensor();
     444:	0e 94 49 00 	call	0x92	; 0x92 <TempSensor>
     448:	f7 cf       	rjmp	.-18     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>

0000044a <USART_voidProcessCommand>:
}

ConditionsState USART_voidProcessCommand(u8 command,u8 Local_LightNum) {
	ConditionsState Con_St = NoErrors; // Check Variable
	//Check Command to turn Light on or off
	if (command=='1') {
     44a:	81 33       	cpi	r24, 0x31	; 49
     44c:	31 f4       	brne	.+12     	; 0x45a <USART_voidProcessCommand+0x10>
		// Turning ON ROOM 1 LIGHT
		DIO_voidSetPinValue(DIO_PORTC,Local_LightNum,DIO_HIGH);
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
		Con_St = ROOM_LIGHT_ON;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	08 95       	ret
	}
	else if ( command=='0') {
     45a:	80 33       	cpi	r24, 0x30	; 48
     45c:	31 f4       	brne	.+12     	; 0x46a <USART_voidProcessCommand+0x20>
		// Turning OFF ROOM 1 LIGHT
		DIO_voidSetPinValue(DIO_PORTC,Local_LightNum,DIO_LOW);
     45e:	40 e0       	ldi	r20, 0x00	; 0
     460:	82 e0       	ldi	r24, 0x02	; 2
     462:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
		Con_St = ROOM_LIGHT_OFF;
     466:	82 e0       	ldi	r24, 0x02	; 2
     468:	08 95       	ret
	}
	else{ // IF input is not 0 nor 1 ==> INCORRECT INP
		Con_St = Input_Format_Is_Incorrect;
     46a:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Con_St;
}
     46c:	08 95       	ret

0000046e <USART_Start>:
	TIMER_delay_ms(300);
	// combine the high and low byte
	Global_u16EPROMDoorPass= ( (u16)(Global_u8SavedDoorPassHighByte<<8) )| Global_u8SavedDoorPassLowByte;
}

void USART_Start(void){
     46e:	cf 92       	push	r12
     470:	df 92       	push	r13
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	00 d0       	rcall	.+0      	; 0x480 <USART_Start+0x12>
     480:	00 d0       	rcall	.+0      	; 0x482 <USART_Start+0x14>
     482:	00 d0       	rcall	.+0      	; 0x484 <USART_Start+0x16>
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
	//Save First Receieved Input AS It MUST be '*' If not return from function
	u8 FirstReceived = USART_u8ReceiverData();
     488:	0e 94 b7 07 	call	0xf6e	; 0xf6e <USART_u8ReceiverData>
	if(FirstReceived!='*')
     48c:	8a 32       	cpi	r24, 0x2A	; 42
     48e:	09 f0       	breq	.+2      	; 0x492 <USART_Start+0x24>
     490:	81 c0       	rjmp	.+258    	; 0x594 <USART_Start+0x126>
		return;
	//Start Display Message
	USART_voidTransmitString("Expected INP Format \" *i*x*x# \" :\r");
     492:	80 ee       	ldi	r24, 0xE0	; 224
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 e7 07 	call	0xfce	; 0xfce <USART_voidTransmitString>

	//Display first '*'
	USART_voidTransmitData(FirstReceived);
     49a:	8a e2       	ldi	r24, 0x2A	; 42
     49c:	0e 94 b2 07 	call	0xf64	; 0xf64 <USART_voidTransmitData>

	//Clear LCD to Start Displaying on it
	LCD_voidClearDisplay();
     4a0:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_voidClearDisplay>
	LCD_voidSendData('*');
     4a4:	8a e2       	ldi	r24, 0x2A	; 42
     4a6:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <LCD_voidSendData>
     4aa:	8e 01       	movw	r16, r28
     4ac:	0f 5f       	subi	r16, 0xFF	; 255
     4ae:	1f 4f       	sbci	r17, 0xFF	; 255
     4b0:	6e 01       	movw	r12, r28
     4b2:	87 e0       	ldi	r24, 0x07	; 7
     4b4:	c8 0e       	add	r12, r24
     4b6:	d1 1c       	adc	r13, r1

	// Loop until reaching Max val of Input, if stucked Timer will INT and Time out
	while (Max_Num) {
		//Receive data element by element
		TimeOut TimeOut_Err=100;
		 TimeOut_Err = USART_u8TimeOUTReceiverData(&DataReceived[DataIdx]);
     4b8:	78 01       	movw	r14, r16
     4ba:	c8 01       	movw	r24, r16
     4bc:	0e 94 bb 07 	call	0xf76	; 0xf76 <USART_u8TimeOUTReceiverData>
		//DataReceived[DataIdx] = USART_u8ReceiverData();
		if(TimeOut_Err == TimeOUT_Occured){
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	79 f4       	brne	.+30     	; 0x4e2 <USART_Start+0x74>
			 * 1- SET TCNT1 with 0 before initializing timer
			 * 2- SET Comparing Value by TIMEOUTVALUE Macro  e.g. 40000====> 5.12 sec "time waiting before time out"
			 * 3- Initialize Timer with 1024 Prescaler
			 */
			//Sending Warning Message if TIMEOUT and return from function
			USART_voidTransmitData('\r');
     4c4:	8d e0       	ldi	r24, 0x0D	; 13
     4c6:	0e 94 b2 07 	call	0xf64	; 0xf64 <USART_voidTransmitData>
			USART_voidTransmitString("##ERROR: Time Out");
     4ca:	83 e0       	ldi	r24, 0x03	; 3
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	0e 94 e7 07 	call	0xfce	; 0xfce <USART_voidTransmitString>
			USART_voidTransmitData('\r');
     4d2:	8d e0       	ldi	r24, 0x0D	; 13
     4d4:	0e 94 b2 07 	call	0xf64	; 0xf64 <USART_voidTransmitData>
			//Clear LCD
			LCD_voidClearDisplay();
     4d8:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_voidClearDisplay>
			//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
			Servo_voidInit();
     4dc:	0e 94 91 04 	call	0x922	; 0x922 <Servo_voidInit>
			return;
     4e0:	59 c0       	rjmp	.+178    	; 0x594 <USART_Start+0x126>
		}
		//Send Received Data to Display it on Virtual Terminal
		USART_voidTransmitData(DataReceived[DataIdx] );
     4e2:	f8 01       	movw	r30, r16
     4e4:	81 91       	ld	r24, Z+
     4e6:	8f 01       	movw	r16, r30
     4e8:	0e 94 b2 07 	call	0xf64	; 0xf64 <USART_voidTransmitData>
		//Display Data on LCD
		LCD_voidSendData(DataReceived[DataIdx]);
     4ec:	f7 01       	movw	r30, r14
     4ee:	80 81       	ld	r24, Z
     4f0:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <LCD_voidSendData>
		//Increment Idx
		DataIdx++;
		//Decrement Max_Num only to loop Max_Num Inside While LOOP
		Max_Num --;
		//Set Timer Counter to 0 with Each Entered Input
		TIMER_voidTimer1SetPreloadValue(0);
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 91 06 	call	0xd22	; 0xd22 <TIMER_voidTimer1SetPreloadValue>

	//Containing max enter value
	u8 Max_Num = INPUT_DECIDED_LENGTH-1;

	// Loop until reaching Max val of Input, if stucked Timer will INT and Time out
	while (Max_Num) {
     4fc:	0c 15       	cp	r16, r12
     4fe:	1d 05       	cpc	r17, r13
     500:	d9 f6       	brne	.-74     	; 0x4b8 <USART_Start+0x4a>
		//Set Timer Counter to 0 with Each Entered Input
		TIMER_voidTimer1SetPreloadValue(0);
			}

	//Display Enter in the terminal
	USART_voidTransmitData('\r');
     502:	8d e0       	ldi	r24, 0x0D	; 13
     504:	0e 94 b2 07 	call	0xf64	; 0xf64 <USART_voidTransmitData>

	//Checking Input Format
	ConditionsState Con_St=NoErrors;
	//Check all input Defined values * and i and * and * and #
	if(DataReceived[0]!='i' || DataReceived[1]!='*' || DataReceived[3]!='*' || DataReceived[5]!='#'){
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	89 36       	cpi	r24, 0x69	; 105
     50c:	49 f4       	brne	.+18     	; 0x520 <USART_Start+0xb2>
     50e:	8a 81       	ldd	r24, Y+2	; 0x02
     510:	8a 32       	cpi	r24, 0x2A	; 42
     512:	31 f4       	brne	.+12     	; 0x520 <USART_Start+0xb2>
     514:	8c 81       	ldd	r24, Y+4	; 0x04
     516:	8a 32       	cpi	r24, 0x2A	; 42
     518:	19 f4       	brne	.+6      	; 0x520 <USART_Start+0xb2>
     51a:	8e 81       	ldd	r24, Y+6	; 0x06
     51c:	83 32       	cpi	r24, 0x23	; 35
     51e:	39 f0       	breq	.+14     	; 0x52e <USART_Start+0xc0>
		Con_St = Input_Format_Is_Incorrect;
		USART_voidTransmitString("##INCORRECT INPUT FORMAT\r");
     520:	85 e1       	ldi	r24, 0x15	; 21
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 e7 07 	call	0xfce	; 0xfce <USART_voidTransmitString>
		//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
		Servo_voidInit();
     528:	0e 94 91 04 	call	0x922	; 0x922 <Servo_voidInit>
		return;
     52c:	33 c0       	rjmp	.+102    	; 0x594 <USART_Start+0x126>
	}
	// Check First Undefined Val to be 1 or 2 or 3
	// also, sending it to USART_voidProcessCommand to light correct led
	// Receiving return value as indicator to uncorrect second undefined Val
	if(DataReceived[2]=='1')
     52e:	8b 81       	ldd	r24, Y+3	; 0x03
     530:	81 33       	cpi	r24, 0x31	; 49
     532:	31 f4       	brne	.+12     	; 0x540 <USART_Start+0xd2>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT1);
     534:	65 e0       	ldi	r22, 0x05	; 5
     536:	8d 81       	ldd	r24, Y+5	; 0x05
     538:	0e 94 25 02 	call	0x44a	; 0x44a <USART_voidProcessCommand>
     53c:	18 2f       	mov	r17, r24
     53e:	0f c0       	rjmp	.+30     	; 0x55e <USART_Start+0xf0>
	else if(DataReceived[2]=='2')
     540:	82 33       	cpi	r24, 0x32	; 50
     542:	31 f4       	brne	.+12     	; 0x550 <USART_Start+0xe2>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT2);
     544:	66 e0       	ldi	r22, 0x06	; 6
     546:	8d 81       	ldd	r24, Y+5	; 0x05
     548:	0e 94 25 02 	call	0x44a	; 0x44a <USART_voidProcessCommand>
     54c:	18 2f       	mov	r17, r24
     54e:	07 c0       	rjmp	.+14     	; 0x55e <USART_Start+0xf0>
	else if (DataReceived[2]=='3')
     550:	83 33       	cpi	r24, 0x33	; 51
     552:	39 f4       	brne	.+14     	; 0x562 <USART_Start+0xf4>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT3);
     554:	67 e0       	ldi	r22, 0x07	; 7
     556:	8d 81       	ldd	r24, Y+5	; 0x05
     558:	0e 94 25 02 	call	0x44a	; 0x44a <USART_voidProcessCommand>
     55c:	18 2f       	mov	r17, r24
	else// If First Undefined Val is not correct
		Con_St = Input_Format_Is_Incorrect;
	//Check on Con_St Condition
	if(Con_St == Input_Format_Is_Incorrect)//There's an Error in the Format Entered
     55e:	13 30       	cpi	r17, 0x03	; 3
     560:	29 f4       	brne	.+10     	; 0x56c <USART_Start+0xfe>
		USART_voidTransmitString("##INCORRECT ROOM Num or State\r");
     562:	8f e2       	ldi	r24, 0x2F	; 47
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	0e 94 e7 07 	call	0xfce	; 0xfce <USART_voidTransmitString>
     56a:	12 c0       	rjmp	.+36     	; 0x590 <USART_Start+0x122>
	else{//Check is Completed and there's no Error
		USART_voidTransmitString("ROOM ");
     56c:	8e e4       	ldi	r24, 0x4E	; 78
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	0e 94 e7 07 	call	0xfce	; 0xfce <USART_voidTransmitString>
		USART_voidTransmitData(DataReceived[2]);
     574:	8b 81       	ldd	r24, Y+3	; 0x03
     576:	0e 94 b2 07 	call	0xf64	; 0xf64 <USART_voidTransmitData>
		if(Con_St==ROOM_LIGHT_ON)
     57a:	11 30       	cpi	r17, 0x01	; 1
     57c:	29 f4       	brne	.+10     	; 0x588 <USART_Start+0x11a>
			USART_voidTransmitString(" Light Is ON\r");
     57e:	84 e5       	ldi	r24, 0x54	; 84
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	0e 94 e7 07 	call	0xfce	; 0xfce <USART_voidTransmitString>
     586:	04 c0       	rjmp	.+8      	; 0x590 <USART_Start+0x122>
		else
			USART_voidTransmitString(" Light Is OFF\r");
     588:	82 e6       	ldi	r24, 0x62	; 98
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	0e 94 e7 07 	call	0xfce	; 0xfce <USART_voidTransmitString>
	}
	//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
	Servo_voidInit();
     590:	0e 94 91 04 	call	0x922	; 0x922 <Servo_voidInit>
}
     594:	26 96       	adiw	r28, 0x06	; 6
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	df 90       	pop	r13
     5ae:	cf 90       	pop	r12
     5b0:	08 95       	ret

000005b2 <EEPROM_voidSendDataByte>:
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	c8 2f       	mov	r28, r24
     5ba:	d6 2f       	mov	r29, r22
     5bc:	17 2f       	mov	r17, r23
     5be:	0e 94 44 07 	call	0xe88	; 0xe88 <TWI_SendStartCondition>
     5c2:	81 2f       	mov	r24, r17
     5c4:	80 65       	ori	r24, 0x50	; 80
     5c6:	0e 94 65 07 	call	0xeca	; 0xeca <TWI_SendSlaveAddressWithWrite>
     5ca:	8d 2f       	mov	r24, r29
     5cc:	0e 94 85 07 	call	0xf0a	; 0xf0a <TWI_MasterWriteDataByte>
     5d0:	8c 2f       	mov	r24, r28
     5d2:	0e 94 85 07 	call	0xf0a	; 0xf0a <TWI_MasterWriteDataByte>
     5d6:	0e 94 a3 07 	call	0xf46	; 0xf46 <TWI_SendStopCondition>
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	08 95       	ret

000005e2 <EEPROM_voidReadDataByte>:
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	8c 01       	movw	r16, r24
     5ec:	d6 2f       	mov	r29, r22
     5ee:	c7 2f       	mov	r28, r23
     5f0:	c0 65       	ori	r28, 0x50	; 80
     5f2:	0e 94 44 07 	call	0xe88	; 0xe88 <TWI_SendStartCondition>
     5f6:	8c 2f       	mov	r24, r28
     5f8:	0e 94 65 07 	call	0xeca	; 0xeca <TWI_SendSlaveAddressWithWrite>
     5fc:	8d 2f       	mov	r24, r29
     5fe:	0e 94 85 07 	call	0xf0a	; 0xf0a <TWI_MasterWriteDataByte>
     602:	0e 94 54 07 	call	0xea8	; 0xea8 <TWI_SendRepeatedStart>
     606:	8c 2f       	mov	r24, r28
     608:	0e 94 75 07 	call	0xeea	; 0xeea <TWI_SendSlaveAddressWithRead>
     60c:	c8 01       	movw	r24, r16
     60e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <TWI_MasterReadDataByte>
     612:	0e 94 a3 07 	call	0xf46	; 0xf46 <TWI_SendStopCondition>
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	08 95       	ret

00000620 <KPD_voidInit>:
			
void KPD_voidInit(){
	
	
	// set col s output high
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL0_PIN,DIO_OUTPUT);
     620:	41 e0       	ldi	r20, 0x01	; 1
     622:	62 e0       	ldi	r22, 0x02	; 2
     624:	82 e0       	ldi	r24, 0x02	; 2
     626:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL1_PIN,DIO_OUTPUT);
     62a:	41 e0       	ldi	r20, 0x01	; 1
     62c:	63 e0       	ldi	r22, 0x03	; 3
     62e:	82 e0       	ldi	r24, 0x02	; 2
     630:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL2_PIN,DIO_OUTPUT);
     634:	41 e0       	ldi	r20, 0x01	; 1
     636:	64 e0       	ldi	r22, 0x04	; 4
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_voidSetPinDirection>
	//DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL3_PIN,DIO_OUTPUT);

	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL0_PIN,DIO_HIGH);
     63e:	41 e0       	ldi	r20, 0x01	; 1
     640:	62 e0       	ldi	r22, 0x02	; 2
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL1_PIN,DIO_HIGH);
     648:	41 e0       	ldi	r20, 0x01	; 1
     64a:	63 e0       	ldi	r22, 0x03	; 3
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL2_PIN,DIO_HIGH);
     652:	41 e0       	ldi	r20, 0x01	; 1
     654:	64 e0       	ldi	r22, 0x04	; 4
     656:	82 e0       	ldi	r24, 0x02	; 2
     658:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL3_PIN,DIO_HIGH);

	// set rows input pull up
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_INPUT);
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_INPUT);
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	62 e0       	ldi	r22, 0x02	; 2
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_INPUT);
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	63 e0       	ldi	r22, 0x03	; 3
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_INPUT);
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	64 e0       	ldi	r22, 0x04	; 4
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_HIGH);
     684:	41 e0       	ldi	r20, 0x01	; 1
     686:	61 e0       	ldi	r22, 0x01	; 1
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_HIGH);
     68e:	41 e0       	ldi	r20, 0x01	; 1
     690:	62 e0       	ldi	r22, 0x02	; 2
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_HIGH);
     698:	41 e0       	ldi	r20, 0x01	; 1
     69a:	63 e0       	ldi	r22, 0x03	; 3
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_HIGH);
     6a2:	41 e0       	ldi	r20, 0x01	; 1
     6a4:	64 e0       	ldi	r22, 0x04	; 4
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
     6ac:	08 95       	ret

000006ae <KPD_u8GetPressedKey>:

}

u8 KPD_u8GetPressedKey(void){
     6ae:	4f 92       	push	r4
     6b0:	5f 92       	push	r5
     6b2:	6f 92       	push	r6
     6b4:	7f 92       	push	r7
     6b6:	8f 92       	push	r8
     6b8:	9f 92       	push	r9
     6ba:	af 92       	push	r10
     6bc:	bf 92       	push	r11
     6be:	cf 92       	push	r12
     6c0:	df 92       	push	r13
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	63 97       	sbiw	r28, 0x13	; 19
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8Pressedkey= KPD_NO_PRESS;
	u8 Local_u8RowxValue ;


	u8 Local_u8ColumnsArray[]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN};
     6de:	22 e0       	ldi	r18, 0x02	; 2
     6e0:	29 83       	std	Y+1, r18	; 0x01
     6e2:	93 e0       	ldi	r25, 0x03	; 3
     6e4:	9a 83       	std	Y+2, r25	; 0x02
     6e6:	84 e0       	ldi	r24, 0x04	; 4
     6e8:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
     6ea:	31 e0       	ldi	r19, 0x01	; 1
     6ec:	3c 83       	std	Y+4, r19	; 0x04
     6ee:	2d 83       	std	Y+5, r18	; 0x05
     6f0:	9e 83       	std	Y+6, r25	; 0x06
     6f2:	8f 83       	std	Y+7, r24	; 0x07

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;
     6f4:	8c e0       	ldi	r24, 0x0C	; 12
     6f6:	e2 e6       	ldi	r30, 0x62	; 98
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	de 01       	movw	r26, r28
     6fc:	18 96       	adiw	r26, 0x08	; 8
     6fe:	01 90       	ld	r0, Z+
     700:	0d 92       	st	X+, r0
     702:	8a 95       	dec	r24
     704:	e1 f7       	brne	.-8      	; 0x6fe <KPD_u8GetPressedKey+0x50>
     706:	ce 01       	movw	r24, r28
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	4c 01       	movw	r8, r24
     70c:	a1 2c       	mov	r10, r1
     70e:	b1 2c       	mov	r11, r1


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);
     710:	35 01       	movw	r6, r10
     712:	f4 01       	movw	r30, r8
     714:	41 90       	ld	r4, Z+
     716:	4f 01       	movw	r8, r30
     718:	40 e0       	ldi	r20, 0x00	; 0
     71a:	64 2d       	mov	r22, r4
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
     722:	7e 01       	movw	r14, r28
     724:	f4 e0       	ldi	r31, 0x04	; 4
     726:	ef 0e       	add	r14, r31
     728:	f1 1c       	adc	r15, r1
     72a:	00 e0       	ldi	r16, 0x00	; 0
     72c:	10 e0       	ldi	r17, 0x00	; 0

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){

			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
     72e:	68 01       	movw	r12, r16
     730:	f7 01       	movw	r30, r14
     732:	51 90       	ld	r5, Z+
     734:	7f 01       	movw	r14, r30
     736:	65 2d       	mov	r22, r5
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_u8GetPinValue>

			if(Local_u8RowxValue==0){
     73e:	81 11       	cpse	r24, r1
     740:	17 c0       	rjmp	.+46     	; 0x770 <KPD_u8GetPressedKey+0xc2>

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
     742:	c8 01       	movw	r24, r16
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	c8 0e       	add	r12, r24
     74a:	d9 1e       	adc	r13, r25
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	8c 0f       	add	r24, r28
     752:	9d 1f       	adc	r25, r29
     754:	c8 0e       	add	r12, r24
     756:	d9 1e       	adc	r13, r25
     758:	f6 01       	movw	r30, r12
     75a:	e6 0d       	add	r30, r6
     75c:	f7 1d       	adc	r31, r7
     75e:	17 81       	ldd	r17, Z+7	; 0x07
				while(Local_u8RowxValue==0){
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
     760:	65 2d       	mov	r22, r5
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0e 94 4f 05 	call	0xa9e	; 0xa9e <DIO_u8GetPinValue>
			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

			if(Local_u8RowxValue==0){

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
				while(Local_u8RowxValue==0){
     768:	88 23       	and	r24, r24
     76a:	d1 f3       	breq	.-12     	; 0x760 <KPD_u8GetPressedKey+0xb2>
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

				}

				return Local_u8Pressedkey ;
     76c:	81 2f       	mov	r24, r17
     76e:	13 c0       	rjmp	.+38     	; 0x796 <KPD_u8GetPressedKey+0xe8>
     770:	0f 5f       	subi	r16, 0xFF	; 255
     772:	1f 4f       	sbci	r17, 0xFF	; 255

	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){
     774:	04 30       	cpi	r16, 0x04	; 4
     776:	11 05       	cpc	r17, r1
     778:	d1 f6       	brne	.-76     	; 0x72e <KPD_u8GetPressedKey+0x80>
			}


		}

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_HIGH);
     77a:	41 e0       	ldi	r20, 0x01	; 1
     77c:	64 2d       	mov	r22, r4
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
     784:	9f ef       	ldi	r25, 0xFF	; 255
     786:	a9 1a       	sub	r10, r25
     788:	b9 0a       	sbc	r11, r25
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){
     78a:	e3 e0       	ldi	r30, 0x03	; 3
     78c:	ae 16       	cp	r10, r30
     78e:	b1 04       	cpc	r11, r1
     790:	09 f0       	breq	.+2      	; 0x794 <KPD_u8GetPressedKey+0xe6>
     792:	be cf       	rjmp	.-132    	; 0x710 <KPD_u8GetPressedKey+0x62>


	}


	return Local_u8Pressedkey ;
     794:	8a ea       	ldi	r24, 0xAA	; 170
     796:	63 96       	adiw	r28, 0x13	; 19
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	af 90       	pop	r10
     7b6:	9f 90       	pop	r9
     7b8:	8f 90       	pop	r8
     7ba:	7f 90       	pop	r7
     7bc:	6f 90       	pop	r6
     7be:	5f 90       	pop	r5
     7c0:	4f 90       	pop	r4
     7c2:	08 95       	ret

000007c4 <LCD_voidSendData>:
		LCD_voidSendCommand(0b00000010);
		Local_u8AddressCounter=0;
		
	}
	else
		Local_u8AddressCounter++;
     7c4:	cf 93       	push	r28
     7c6:	c8 2f       	mov	r28, r24
     7c8:	41 e0       	ldi	r20, 0x01	; 1
     7ca:	65 e0       	ldi	r22, 0x05	; 5
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	66 e0       	ldi	r22, 0x06	; 6
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
     7dc:	6c 2f       	mov	r22, r28
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <DIO_voidSetPortValue>
     7e4:	41 e0       	ldi	r20, 0x01	; 1
     7e6:	67 e0       	ldi	r22, 0x07	; 7
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
     7ee:	8f e9       	ldi	r24, 0x9F	; 159
     7f0:	9f e0       	ldi	r25, 0x0F	; 15
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <LCD_voidSendData+0x2e>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <LCD_voidSendData+0x34>
     7f8:	00 00       	nop
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	67 e0       	ldi	r22, 0x07	; 7
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <LCD_voidSendCommand>:
     808:	cf 93       	push	r28
     80a:	c8 2f       	mov	r28, r24
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	65 e0       	ldi	r22, 0x05	; 5
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	66 e0       	ldi	r22, 0x06	; 6
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
     820:	6c 2f       	mov	r22, r28
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	0e 94 3f 05 	call	0xa7e	; 0xa7e <DIO_voidSetPortValue>
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	67 e0       	ldi	r22, 0x07	; 7
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
     832:	8f e9       	ldi	r24, 0x9F	; 159
     834:	9f e0       	ldi	r25, 0x0F	; 15
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <LCD_voidSendCommand+0x2e>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <LCD_voidSendCommand+0x34>
     83c:	00 00       	nop
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	67 e0       	ldi	r22, 0x07	; 7
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	0e 94 01 05 	call	0xa02	; 0xa02 <DIO_voidSetPinValue>
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <LCD_voidInit>:
     84c:	6f ef       	ldi	r22, 0xFF	; 255
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	0e 94 2f 05 	call	0xa5e	; 0xa5e <DIO_voidSetPortDirection>
     854:	41 e0       	ldi	r20, 0x01	; 1
     856:	65 e0       	ldi	r22, 0x05	; 5
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_voidSetPinDirection>
     85e:	41 e0       	ldi	r20, 0x01	; 1
     860:	66 e0       	ldi	r22, 0x06	; 6
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_voidSetPinDirection>
     868:	41 e0       	ldi	r20, 0x01	; 1
     86a:	67 e0       	ldi	r22, 0x07	; 7
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DIO_voidSetPinDirection>
     872:	2f ef       	ldi	r18, 0xFF	; 255
     874:	89 ef       	ldi	r24, 0xF9	; 249
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	21 50       	subi	r18, 0x01	; 1
     87a:	80 40       	sbci	r24, 0x00	; 0
     87c:	90 40       	sbci	r25, 0x00	; 0
     87e:	e1 f7       	brne	.-8      	; 0x878 <__stack+0x19>
     880:	00 c0       	rjmp	.+0      	; 0x882 <__stack+0x23>
     882:	00 00       	nop
     884:	88 e3       	ldi	r24, 0x38	; 56
     886:	0e 94 04 04 	call	0x808	; 0x808 <LCD_voidSendCommand>
     88a:	8c e0       	ldi	r24, 0x0C	; 12
     88c:	0e 94 04 04 	call	0x808	; 0x808 <LCD_voidSendCommand>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	0e 94 04 04 	call	0x808	; 0x808 <LCD_voidSendCommand>
     896:	86 e0       	ldi	r24, 0x06	; 6
     898:	0e 94 04 04 	call	0x808	; 0x808 <LCD_voidSendCommand>
     89c:	08 95       	ret

0000089e <LCD_voidClearDisplay>:
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	0e 94 04 04 	call	0x808	; 0x808 <LCD_voidSendCommand>
     8a4:	08 95       	ret

000008a6 <LCD_voidGoTOXY>:
     8a6:	90 e4       	ldi	r25, 0x40	; 64
     8a8:	89 9f       	mul	r24, r25
     8aa:	60 0d       	add	r22, r0
     8ac:	11 24       	eor	r1, r1
     8ae:	86 2f       	mov	r24, r22
     8b0:	80 68       	ori	r24, 0x80	; 128
     8b2:	0e 94 04 04 	call	0x808	; 0x808 <LCD_voidSendCommand>
     8b6:	08 95       	ret

000008b8 <LCD_voidSendString>:
		
		
}

void LCD_voidSendString(u8* Copy_pcString)
{
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	fc 01       	movw	r30, r24
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
     8c0:	80 81       	ld	r24, Z
     8c2:	88 23       	and	r24, r24
     8c4:	59 f0       	breq	.+22     	; 0x8dc <LCD_voidSendString+0x24>
     8c6:	8f 01       	movw	r16, r30
     8c8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
     8ca:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <LCD_voidSendData>
		Local_u8Index++;
     8ce:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_voidSendString(u8* Copy_pcString)
{
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
     8d0:	f8 01       	movw	r30, r16
     8d2:	ec 0f       	add	r30, r28
     8d4:	f1 1d       	adc	r31, r1
     8d6:	80 81       	ld	r24, Z
     8d8:	81 11       	cpse	r24, r1
     8da:	f7 cf       	rjmp	.-18     	; 0x8ca <LCD_voidSendString+0x12>
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
		Local_u8Index++;
	}
}
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	08 95       	ret

000008e4 <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	2a 97       	sbiw	r28, 0x0a	; 10
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	cd bf       	out	0x3d, r28	; 61
     8f8:	dc 01       	movw	r26, r24
     8fa:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     8fc:	4a e0       	ldi	r20, 0x0A	; 10
     8fe:	be 01       	movw	r22, r28
     900:	6f 5f       	subi	r22, 0xFF	; 255
     902:	7f 4f       	sbci	r23, 0xFF	; 255
     904:	0e 94 36 0a 	call	0x146c	; 0x146c <__itoa_ncheck>
	u8 Local_u8Str[10];
	itoa(Copy_u32Number, Local_u8Str,10);
	LCD_voidSendString(Local_u8Str);
     908:	ce 01       	movw	r24, r28
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_voidSendString>

}
     910:	2a 96       	adiw	r28, 0x0a	; 10
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	08 95       	ret

00000922 <Servo_voidInit>:
     922:	6a e0       	ldi	r22, 0x0A	; 10
     924:	82 e0       	ldi	r24, 0x02	; 2
     926:	0e 94 1d 06 	call	0xc3a	; 0xc3a <TIMER_voidTimer1Init>
     92a:	80 e2       	ldi	r24, 0x20	; 32
     92c:	9e e4       	ldi	r25, 0x4E	; 78
     92e:	0e 94 8b 06 	call	0xd16	; 0xd16 <TIMER_voidSetOverFlow>
     932:	08 95       	ret

00000934 <Servo_voidDegree>:
     934:	85 3b       	cpi	r24, 0xB5	; 181
     936:	08 f0       	brcs	.+2      	; 0x93a <Servo_voidDegree+0x6>
     938:	84 eb       	ldi	r24, 0xB4	; 180
     93a:	68 2f       	mov	r22, r24
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 3d 09 	call	0x127a	; 0x127a <__floatsisf>
     946:	21 e6       	ldi	r18, 0x61	; 97
     948:	3b e0       	ldi	r19, 0x0B	; 11
     94a:	46 eb       	ldi	r20, 0xB6	; 182
     94c:	5b e3       	ldi	r21, 0x3B	; 59
     94e:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	40 e8       	ldi	r20, 0x80	; 128
     958:	5f e3       	ldi	r21, 0x3F	; 63
     95a:	0e 94 2e 08 	call	0x105c	; 0x105c <__addsf3>
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	4a e7       	ldi	r20, 0x7A	; 122
     964:	54 e4       	ldi	r21, 0x44	; 68
     966:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     96a:	0e 94 0c 09 	call	0x1218	; 0x1218 <__fixunssfsi>
     96e:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <Ticks+0x1>
     972:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <Ticks>
     976:	cb 01       	movw	r24, r22
     978:	0e 94 8e 06 	call	0xd1c	; 0xd1c <TIMER_voidTimer1ChannelASetCompareValue>
     97c:	08 95       	ret

0000097e <ADC_voidInit>:
	2- 8bit res --> left adjustment
	3- prescaler
	4- enable ADC
	*/
	// use AVCC
	SET_BIT(ADMUX,6);
     97e:	3e 9a       	sbi	0x07, 6	; 7
	CLR_BIT(ADMUX,7);
     980:	3f 98       	cbi	0x07, 7	; 7
	// left adjust
	SET_BIT(ADMUX,5);
     982:	3d 9a       	sbi	0x07, 5	; 7
	// prescaler  --> /64
	CLR_BIT(ADCSRA,0);
     984:	30 98       	cbi	0x06, 0	; 6
	SET_BIT(ADCSRA,1);
     986:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,2);
     988:	32 9a       	sbi	0x06, 2	; 6
	// enable 
	SET_BIT(ADCSRA,7);
     98a:	37 9a       	sbi	0x06, 7	; 6
     98c:	08 95       	ret

0000098e <ADC_u8StartConversion>:
	
}

u8 ADC_u8StartConversion(u8 Copy_u8ChannelNumber){
	// channel select
	ADMUX &= 0b11100000;
     98e:	97 b1       	in	r25, 0x07	; 7
     990:	90 7e       	andi	r25, 0xE0	; 224
     992:	97 b9       	out	0x07, r25	; 7
	ADMUX |=Copy_u8ChannelNumber;
     994:	97 b1       	in	r25, 0x07	; 7
     996:	89 2b       	or	r24, r25
     998:	87 b9       	out	0x07, r24	; 7
	
	// start conversion
	SET_BIT(ADCSRA,6);
     99a:	36 9a       	sbi	0x06, 6	; 6
	
	// wait until conversion complete
	// by checking the flag
	while(GET_BIT(ADCSRA,4)==0);
     99c:	34 9b       	sbis	0x06, 4	; 6
     99e:	fe cf       	rjmp	.-4      	; 0x99c <ADC_u8StartConversion+0xe>
	
	//clear flag 
	SET_BIT(ADCSRA,4);
     9a0:	34 9a       	sbi	0x06, 4	; 6
	
	return ADCH;
     9a2:	85 b1       	in	r24, 0x05	; 5
}
     9a4:	08 95       	ret

000009a6 <DIO_voidSetPinDirection>:


void DIO_voidSetPinDirection(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinState ){

	volatile u8* Local_u8PTR_DDRx;
	switch(Copy_u8PortName){
     9a6:	81 30       	cpi	r24, 0x01	; 1
     9a8:	49 f0       	breq	.+18     	; 0x9bc <DIO_voidSetPinDirection+0x16>
     9aa:	28 f0       	brcs	.+10     	; 0x9b6 <DIO_voidSetPinDirection+0x10>
     9ac:	82 30       	cpi	r24, 0x02	; 2
     9ae:	49 f0       	breq	.+18     	; 0x9c2 <DIO_voidSetPinDirection+0x1c>
     9b0:	83 30       	cpi	r24, 0x03	; 3
     9b2:	51 f0       	breq	.+20     	; 0x9c8 <DIO_voidSetPinDirection+0x22>
     9b4:	0b c0       	rjmp	.+22     	; 0x9cc <DIO_voidSetPinDirection+0x26>

		case DIO_PORTA:
		Local_u8PTR_DDRx=&DDRA;
     9b6:	ea e3       	ldi	r30, 0x3A	; 58
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	08 c0       	rjmp	.+16     	; 0x9cc <DIO_voidSetPinDirection+0x26>
		break;
		case DIO_PORTB:
		Local_u8PTR_DDRx=&DDRB;
     9bc:	e7 e3       	ldi	r30, 0x37	; 55
     9be:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     9c0:	05 c0       	rjmp	.+10     	; 0x9cc <DIO_voidSetPinDirection+0x26>
		case DIO_PORTC:
		Local_u8PTR_DDRx=&DDRC;
     9c2:	e4 e3       	ldi	r30, 0x34	; 52
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <DIO_voidSetPinDirection+0x26>
		case DIO_PORTD:
		Local_u8PTR_DDRx=&DDRD;
     9c8:	e1 e3       	ldi	r30, 0x31	; 49
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinState){
     9cc:	44 23       	and	r20, r20
     9ce:	69 f0       	breq	.+26     	; 0x9ea <DIO_voidSetPinDirection+0x44>
     9d0:	41 30       	cpi	r20, 0x01	; 1
     9d2:	b1 f4       	brne	.+44     	; 0xa00 <DIO_voidSetPinDirection+0x5a>

		case DIO_OUTPUT:
		SET_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
     9d4:	20 81       	ld	r18, Z
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <DIO_voidSetPinDirection+0x3a>
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	6a 95       	dec	r22
     9e2:	e2 f7       	brpl	.-8      	; 0x9dc <DIO_voidSetPinDirection+0x36>
     9e4:	82 2b       	or	r24, r18
     9e6:	80 83       	st	Z, r24
		break;
     9e8:	08 95       	ret
		case DIO_INPUT:
		CLR_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
     9ea:	20 81       	ld	r18, Z
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <DIO_voidSetPinDirection+0x50>
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	6a 95       	dec	r22
     9f8:	e2 f7       	brpl	.-8      	; 0x9f2 <DIO_voidSetPinDirection+0x4c>
     9fa:	80 95       	com	r24
     9fc:	82 23       	and	r24, r18
     9fe:	80 83       	st	Z, r24
     a00:	08 95       	ret

00000a02 <DIO_voidSetPinValue>:

}
void DIO_voidSetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinValue ){

	volatile u8* Local_u8PTR_PORTx;
	switch(Copy_u8PortName){
     a02:	81 30       	cpi	r24, 0x01	; 1
     a04:	49 f0       	breq	.+18     	; 0xa18 <DIO_voidSetPinValue+0x16>
     a06:	28 f0       	brcs	.+10     	; 0xa12 <DIO_voidSetPinValue+0x10>
     a08:	82 30       	cpi	r24, 0x02	; 2
     a0a:	49 f0       	breq	.+18     	; 0xa1e <DIO_voidSetPinValue+0x1c>
     a0c:	83 30       	cpi	r24, 0x03	; 3
     a0e:	51 f0       	breq	.+20     	; 0xa24 <DIO_voidSetPinValue+0x22>
     a10:	0b c0       	rjmp	.+22     	; 0xa28 <DIO_voidSetPinValue+0x26>

		case DIO_PORTA:
		Local_u8PTR_PORTx=&PORTA;
     a12:	eb e3       	ldi	r30, 0x3B	; 59
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	08 c0       	rjmp	.+16     	; 0xa28 <DIO_voidSetPinValue+0x26>
		break;
		case DIO_PORTB:
		Local_u8PTR_PORTx=&PORTB;
     a18:	e8 e3       	ldi	r30, 0x38	; 56
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     a1c:	05 c0       	rjmp	.+10     	; 0xa28 <DIO_voidSetPinValue+0x26>
		case DIO_PORTC:
		Local_u8PTR_PORTx=&PORTC;
     a1e:	e5 e3       	ldi	r30, 0x35	; 53
     a20:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <DIO_voidSetPinValue+0x26>
		case DIO_PORTD:
		Local_u8PTR_PORTx=&PORTD;
     a24:	e2 e3       	ldi	r30, 0x32	; 50
     a26:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinValue){
     a28:	44 23       	and	r20, r20
     a2a:	69 f0       	breq	.+26     	; 0xa46 <DIO_voidSetPinValue+0x44>
     a2c:	41 30       	cpi	r20, 0x01	; 1
     a2e:	b1 f4       	brne	.+44     	; 0xa5c <DIO_voidSetPinValue+0x5a>

		case DIO_HIGH:
		SET_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
     a30:	20 81       	ld	r18, Z
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	02 c0       	rjmp	.+4      	; 0xa3c <DIO_voidSetPinValue+0x3a>
     a38:	88 0f       	add	r24, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	6a 95       	dec	r22
     a3e:	e2 f7       	brpl	.-8      	; 0xa38 <DIO_voidSetPinValue+0x36>
     a40:	82 2b       	or	r24, r18
     a42:	80 83       	st	Z, r24
		break;
     a44:	08 95       	ret
		case DIO_LOW:
		CLR_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
     a46:	20 81       	ld	r18, Z
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <DIO_voidSetPinValue+0x50>
     a4e:	88 0f       	add	r24, r24
     a50:	99 1f       	adc	r25, r25
     a52:	6a 95       	dec	r22
     a54:	e2 f7       	brpl	.-8      	; 0xa4e <DIO_voidSetPinValue+0x4c>
     a56:	80 95       	com	r24
     a58:	82 23       	and	r24, r18
     a5a:	80 83       	st	Z, r24
     a5c:	08 95       	ret

00000a5e <DIO_voidSetPortDirection>:

}

void DIO_voidSetPortDirection(u8 Copy_u8PortName ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
     a5e:	81 30       	cpi	r24, 0x01	; 1
     a60:	41 f0       	breq	.+16     	; 0xa72 <DIO_voidSetPortDirection+0x14>
     a62:	28 f0       	brcs	.+10     	; 0xa6e <DIO_voidSetPortDirection+0x10>
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	39 f0       	breq	.+14     	; 0xa76 <DIO_voidSetPortDirection+0x18>
     a68:	83 30       	cpi	r24, 0x03	; 3
     a6a:	39 f0       	breq	.+14     	; 0xa7a <DIO_voidSetPortDirection+0x1c>
     a6c:	08 95       	ret

		case DIO_PORTA:
		DDRA=Copy_u8PortValue;
     a6e:	6a bb       	out	0x1a, r22	; 26
		break;
     a70:	08 95       	ret
		case DIO_PORTB:
		DDRB=Copy_u8PortValue;
     a72:	67 bb       	out	0x17, r22	; 23
		break;
     a74:	08 95       	ret
		case DIO_PORTC:
		DDRC=Copy_u8PortValue;
     a76:	64 bb       	out	0x14, r22	; 20
		break;
     a78:	08 95       	ret
		case DIO_PORTD:
		DDRD=Copy_u8PortValue;
     a7a:	61 bb       	out	0x11, r22	; 17
     a7c:	08 95       	ret

00000a7e <DIO_voidSetPortValue>:
	}

}
void DIO_voidSetPortValue(u8 Copy_u8PortName  ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
     a7e:	81 30       	cpi	r24, 0x01	; 1
     a80:	41 f0       	breq	.+16     	; 0xa92 <DIO_voidSetPortValue+0x14>
     a82:	28 f0       	brcs	.+10     	; 0xa8e <DIO_voidSetPortValue+0x10>
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	39 f0       	breq	.+14     	; 0xa96 <DIO_voidSetPortValue+0x18>
     a88:	83 30       	cpi	r24, 0x03	; 3
     a8a:	39 f0       	breq	.+14     	; 0xa9a <DIO_voidSetPortValue+0x1c>
     a8c:	08 95       	ret

		case DIO_PORTA:
		PORTA=Copy_u8PortValue;
     a8e:	6b bb       	out	0x1b, r22	; 27
		break;
     a90:	08 95       	ret
		case DIO_PORTB:
		PORTB=Copy_u8PortValue;
     a92:	68 bb       	out	0x18, r22	; 24
		break;
     a94:	08 95       	ret
		case DIO_PORTC:
		PORTC=Copy_u8PortValue;
     a96:	65 bb       	out	0x15, r22	; 21
		break;
     a98:	08 95       	ret
		case DIO_PORTD:
		PORTD=Copy_u8PortValue;
     a9a:	62 bb       	out	0x12, r22	; 18
     a9c:	08 95       	ret

00000a9e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber){

	
	u8 Local_u8PinValue;
	switch(Copy_u8PortName){
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	81 f0       	breq	.+32     	; 0xac2 <DIO_u8GetPinValue+0x24>
     aa2:	28 f0       	brcs	.+10     	; 0xaae <DIO_u8GetPinValue+0x10>
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	b9 f0       	breq	.+46     	; 0xad6 <DIO_u8GetPinValue+0x38>
     aa8:	83 30       	cpi	r24, 0x03	; 3
     aaa:	f9 f0       	breq	.+62     	; 0xaea <DIO_u8GetPinValue+0x4c>
     aac:	27 c0       	rjmp	.+78     	; 0xafc <DIO_u8GetPinValue+0x5e>

		case DIO_PORTA:
		Local_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
     aae:	89 b3       	in	r24, 0x19	; 25
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <DIO_u8GetPinValue+0x1a>
     ab4:	95 95       	asr	r25
     ab6:	87 95       	ror	r24
     ab8:	6a 95       	dec	r22
     aba:	e2 f7       	brpl	.-8      	; 0xab4 <DIO_u8GetPinValue+0x16>
     abc:	98 2f       	mov	r25, r24
     abe:	91 70       	andi	r25, 0x01	; 1
		break;
     ac0:	1d c0       	rjmp	.+58     	; 0xafc <DIO_u8GetPinValue+0x5e>
		case DIO_PORTB:
		Local_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
     ac2:	86 b3       	in	r24, 0x16	; 22
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <DIO_u8GetPinValue+0x2e>
     ac8:	95 95       	asr	r25
     aca:	87 95       	ror	r24
     acc:	6a 95       	dec	r22
     ace:	e2 f7       	brpl	.-8      	; 0xac8 <DIO_u8GetPinValue+0x2a>
     ad0:	98 2f       	mov	r25, r24
     ad2:	91 70       	andi	r25, 0x01	; 1
		break;
     ad4:	13 c0       	rjmp	.+38     	; 0xafc <DIO_u8GetPinValue+0x5e>
		case DIO_PORTC:
		Local_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
     ad6:	83 b3       	in	r24, 0x13	; 19
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <DIO_u8GetPinValue+0x42>
     adc:	95 95       	asr	r25
     ade:	87 95       	ror	r24
     ae0:	6a 95       	dec	r22
     ae2:	e2 f7       	brpl	.-8      	; 0xadc <DIO_u8GetPinValue+0x3e>
     ae4:	98 2f       	mov	r25, r24
     ae6:	91 70       	andi	r25, 0x01	; 1
		break;
     ae8:	09 c0       	rjmp	.+18     	; 0xafc <DIO_u8GetPinValue+0x5e>
		case DIO_PORTD:
		Local_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
     aea:	80 b3       	in	r24, 0x10	; 16
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <DIO_u8GetPinValue+0x56>
     af0:	95 95       	asr	r25
     af2:	87 95       	ror	r24
     af4:	6a 95       	dec	r22
     af6:	e2 f7       	brpl	.-8      	; 0xaf0 <DIO_u8GetPinValue+0x52>
     af8:	98 2f       	mov	r25, r24
     afa:	91 70       	andi	r25, 0x01	; 1

	

	return Local_u8PinValue;

}
     afc:	89 2f       	mov	r24, r25
     afe:	08 95       	ret

00000b00 <__vector_1>:
void EXTI_voidSetCallBackINT2(void(*NotifyFunc2)(void)){
	
	Global_pvINT2NotifyFunc=NotifyFunc2;
}

ISR(INT0_vect){
     b00:	1f 92       	push	r1
     b02:	0f 92       	push	r0
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	0f 92       	push	r0
     b08:	11 24       	eor	r1, r1
     b0a:	2f 93       	push	r18
     b0c:	3f 93       	push	r19
     b0e:	4f 93       	push	r20
     b10:	5f 93       	push	r21
     b12:	6f 93       	push	r22
     b14:	7f 93       	push	r23
     b16:	8f 93       	push	r24
     b18:	9f 93       	push	r25
     b1a:	af 93       	push	r26
     b1c:	bf 93       	push	r27
     b1e:	ef 93       	push	r30
     b20:	ff 93       	push	r31
	
	if(Global_pvINT0NotifyFunc!=NULL_PTR)
     b22:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <Global_pvINT0NotifyFunc>
     b26:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <Global_pvINT0NotifyFunc+0x1>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	09 f0       	breq	.+2      	; 0xb30 <__vector_1+0x30>
			Global_pvINT0NotifyFunc();
     b2e:	09 95       	icall
	
}
     b30:	ff 91       	pop	r31
     b32:	ef 91       	pop	r30
     b34:	bf 91       	pop	r27
     b36:	af 91       	pop	r26
     b38:	9f 91       	pop	r25
     b3a:	8f 91       	pop	r24
     b3c:	7f 91       	pop	r23
     b3e:	6f 91       	pop	r22
     b40:	5f 91       	pop	r21
     b42:	4f 91       	pop	r20
     b44:	3f 91       	pop	r19
     b46:	2f 91       	pop	r18
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	0f 90       	pop	r0
     b4e:	1f 90       	pop	r1
     b50:	18 95       	reti

00000b52 <__vector_2>:

ISR(INT1_vect){
     b52:	1f 92       	push	r1
     b54:	0f 92       	push	r0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	0f 92       	push	r0
     b5a:	11 24       	eor	r1, r1
     b5c:	2f 93       	push	r18
     b5e:	3f 93       	push	r19
     b60:	4f 93       	push	r20
     b62:	5f 93       	push	r21
     b64:	6f 93       	push	r22
     b66:	7f 93       	push	r23
     b68:	8f 93       	push	r24
     b6a:	9f 93       	push	r25
     b6c:	af 93       	push	r26
     b6e:	bf 93       	push	r27
     b70:	ef 93       	push	r30
     b72:	ff 93       	push	r31
	
	if(Global_pvINT1NotifyFunc!=NULL_PTR)
     b74:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <Global_pvINT1NotifyFunc>
     b78:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <Global_pvINT1NotifyFunc+0x1>
     b7c:	30 97       	sbiw	r30, 0x00	; 0
     b7e:	09 f0       	breq	.+2      	; 0xb82 <__vector_2+0x30>
			Global_pvINT1NotifyFunc();
     b80:	09 95       	icall
	
}
     b82:	ff 91       	pop	r31
     b84:	ef 91       	pop	r30
     b86:	bf 91       	pop	r27
     b88:	af 91       	pop	r26
     b8a:	9f 91       	pop	r25
     b8c:	8f 91       	pop	r24
     b8e:	7f 91       	pop	r23
     b90:	6f 91       	pop	r22
     b92:	5f 91       	pop	r21
     b94:	4f 91       	pop	r20
     b96:	3f 91       	pop	r19
     b98:	2f 91       	pop	r18
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	0f 90       	pop	r0
     ba0:	1f 90       	pop	r1
     ba2:	18 95       	reti

00000ba4 <__vector_3>:
ISR(INT2_vect){
     ba4:	1f 92       	push	r1
     ba6:	0f 92       	push	r0
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	0f 92       	push	r0
     bac:	11 24       	eor	r1, r1
     bae:	2f 93       	push	r18
     bb0:	3f 93       	push	r19
     bb2:	4f 93       	push	r20
     bb4:	5f 93       	push	r21
     bb6:	6f 93       	push	r22
     bb8:	7f 93       	push	r23
     bba:	8f 93       	push	r24
     bbc:	9f 93       	push	r25
     bbe:	af 93       	push	r26
     bc0:	bf 93       	push	r27
     bc2:	ef 93       	push	r30
     bc4:	ff 93       	push	r31
	
	if(Global_pvINT2NotifyFunc!=NULL_PTR)
     bc6:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <Global_pvINT2NotifyFunc>
     bca:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <Global_pvINT2NotifyFunc+0x1>
     bce:	30 97       	sbiw	r30, 0x00	; 0
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <__vector_3+0x30>
			Global_pvINT2NotifyFunc();
     bd2:	09 95       	icall
	
     bd4:	ff 91       	pop	r31
     bd6:	ef 91       	pop	r30
     bd8:	bf 91       	pop	r27
     bda:	af 91       	pop	r26
     bdc:	9f 91       	pop	r25
     bde:	8f 91       	pop	r24
     be0:	7f 91       	pop	r23
     be2:	6f 91       	pop	r22
     be4:	5f 91       	pop	r21
     be6:	4f 91       	pop	r20
     be8:	3f 91       	pop	r19
     bea:	2f 91       	pop	r18
     bec:	0f 90       	pop	r0
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	0f 90       	pop	r0
     bf2:	1f 90       	pop	r1
     bf4:	18 95       	reti

00000bf6 <GIE_voidEnableGlobalInt>:
#include<avr/io.h>
#include"../../LIB/BIT_MATH.h"

void GIE_voidEnableGlobalInt(void){
	
	SET_BIT(SREG,7);
     bf6:	8f b7       	in	r24, 0x3f	; 63
     bf8:	80 68       	ori	r24, 0x80	; 128
     bfa:	8f bf       	out	0x3f, r24	; 63
     bfc:	08 95       	ret

00000bfe <TIMER_delay_ms>:
	GLOBAL_ICU_ISR = Copy_PTR_ICUFunction;
}

u16 ICU_u16ReadInputCapture(void){
	return ICR1;
}
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	8b 01       	movw	r16, r22
     c04:	9c 01       	movw	r18, r24
     c06:	67 2b       	or	r22, r23
     c08:	68 2b       	or	r22, r24
     c0a:	69 2b       	or	r22, r25
     c0c:	69 f4       	brne	.+26     	; 0xc28 <TIMER_delay_ms+0x2a>
     c0e:	12 c0       	rjmp	.+36     	; 0xc34 <TIMER_delay_ms+0x36>
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	f1 f7       	brne	.-4      	; 0xc10 <TIMER_delay_ms+0x12>
     c14:	4f 5f       	subi	r20, 0xFF	; 255
     c16:	5f 4f       	sbci	r21, 0xFF	; 255
     c18:	6f 4f       	sbci	r22, 0xFF	; 255
     c1a:	7f 4f       	sbci	r23, 0xFF	; 255
     c1c:	04 17       	cp	r16, r20
     c1e:	15 07       	cpc	r17, r21
     c20:	26 07       	cpc	r18, r22
     c22:	37 07       	cpc	r19, r23
     c24:	21 f4       	brne	.+8      	; 0xc2e <TIMER_delay_ms+0x30>
     c26:	06 c0       	rjmp	.+12     	; 0xc34 <TIMER_delay_ms+0x36>
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	ba 01       	movw	r22, r20
     c2e:	8e e5       	ldi	r24, 0x5E	; 94
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	ee cf       	rjmp	.-36     	; 0xc10 <TIMER_delay_ms+0x12>
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	08 95       	ret

00000c3a <TIMER_voidTimer1Init>:
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	a1 f0       	breq	.+40     	; 0xc66 <TIMER_voidTimer1Init+0x2c>
     c3e:	18 f0       	brcs	.+6      	; 0xc46 <TIMER_voidTimer1Init+0xc>
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	09 f1       	breq	.+66     	; 0xc86 <TIMER_voidTimer1Init+0x4c>
     c44:	32 c0       	rjmp	.+100    	; 0xcaa <TIMER_voidTimer1Init+0x70>
     c46:	8f b5       	in	r24, 0x2f	; 47
     c48:	8e 7f       	andi	r24, 0xFE	; 254
     c4a:	8f bd       	out	0x2f, r24	; 47
     c4c:	8f b5       	in	r24, 0x2f	; 47
     c4e:	8d 7f       	andi	r24, 0xFD	; 253
     c50:	8f bd       	out	0x2f, r24	; 47
     c52:	8e b5       	in	r24, 0x2e	; 46
     c54:	87 7f       	andi	r24, 0xF7	; 247
     c56:	8e bd       	out	0x2e, r24	; 46
     c58:	8e b5       	in	r24, 0x2e	; 46
     c5a:	8f 7e       	andi	r24, 0xEF	; 239
     c5c:	8e bd       	out	0x2e, r24	; 46
     c5e:	89 b7       	in	r24, 0x39	; 57
     c60:	84 60       	ori	r24, 0x04	; 4
     c62:	89 bf       	out	0x39, r24	; 57
     c64:	22 c0       	rjmp	.+68     	; 0xcaa <TIMER_voidTimer1Init+0x70>
     c66:	8f b5       	in	r24, 0x2f	; 47
     c68:	8e 7f       	andi	r24, 0xFE	; 254
     c6a:	8f bd       	out	0x2f, r24	; 47
     c6c:	8f b5       	in	r24, 0x2f	; 47
     c6e:	8d 7f       	andi	r24, 0xFD	; 253
     c70:	8f bd       	out	0x2f, r24	; 47
     c72:	8e b5       	in	r24, 0x2e	; 46
     c74:	88 60       	ori	r24, 0x08	; 8
     c76:	8e bd       	out	0x2e, r24	; 46
     c78:	8e b5       	in	r24, 0x2e	; 46
     c7a:	8f 7e       	andi	r24, 0xEF	; 239
     c7c:	8e bd       	out	0x2e, r24	; 46
     c7e:	89 b7       	in	r24, 0x39	; 57
     c80:	80 61       	ori	r24, 0x10	; 16
     c82:	89 bf       	out	0x39, r24	; 57
     c84:	12 c0       	rjmp	.+36     	; 0xcaa <TIMER_voidTimer1Init+0x70>
     c86:	8f b5       	in	r24, 0x2f	; 47
     c88:	8f 7b       	andi	r24, 0xBF	; 191
     c8a:	8f bd       	out	0x2f, r24	; 47
     c8c:	8f b5       	in	r24, 0x2f	; 47
     c8e:	80 68       	ori	r24, 0x80	; 128
     c90:	8f bd       	out	0x2f, r24	; 47
     c92:	8f b5       	in	r24, 0x2f	; 47
     c94:	8e 7f       	andi	r24, 0xFE	; 254
     c96:	8f bd       	out	0x2f, r24	; 47
     c98:	8f b5       	in	r24, 0x2f	; 47
     c9a:	82 60       	ori	r24, 0x02	; 2
     c9c:	8f bd       	out	0x2f, r24	; 47
     c9e:	8e b5       	in	r24, 0x2e	; 46
     ca0:	88 60       	ori	r24, 0x08	; 8
     ca2:	8e bd       	out	0x2e, r24	; 46
     ca4:	8e b5       	in	r24, 0x2e	; 46
     ca6:	80 61       	ori	r24, 0x10	; 16
     ca8:	8e bd       	out	0x2e, r24	; 46
     caa:	e0 e0       	ldi	r30, 0x00	; 0
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	4d ec       	ldi	r20, 0xCD	; 205
     cb0:	a1 e0       	ldi	r26, 0x01	; 1
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	64 9f       	mul	r22, r20
     cb6:	81 2d       	mov	r24, r1
     cb8:	11 24       	eor	r1, r1
     cba:	86 95       	lsr	r24
     cbc:	86 95       	lsr	r24
     cbe:	86 95       	lsr	r24
     cc0:	88 0f       	add	r24, r24
     cc2:	98 2f       	mov	r25, r24
     cc4:	99 0f       	add	r25, r25
     cc6:	99 0f       	add	r25, r25
     cc8:	89 0f       	add	r24, r25
     cca:	96 2f       	mov	r25, r22
     ccc:	98 1b       	sub	r25, r24
     cce:	91 30       	cpi	r25, 0x01	; 1
     cd0:	59 f4       	brne	.+22     	; 0xce8 <TIMER_voidTimer1Init+0xae>
     cd2:	2e b5       	in	r18, 0x2e	; 46
     cd4:	cd 01       	movw	r24, r26
     cd6:	0e 2e       	mov	r0, r30
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <TIMER_voidTimer1Init+0xa4>
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	0a 94       	dec	r0
     ce0:	e2 f7       	brpl	.-8      	; 0xcda <TIMER_voidTimer1Init+0xa0>
     ce2:	82 2b       	or	r24, r18
     ce4:	8e bd       	out	0x2e, r24	; 46
     ce6:	0c c0       	rjmp	.+24     	; 0xd00 <TIMER_voidTimer1Init+0xc6>
     ce8:	9e b5       	in	r25, 0x2e	; 46
     cea:	9d 01       	movw	r18, r26
     cec:	0e 2e       	mov	r0, r30
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <TIMER_voidTimer1Init+0xba>
     cf0:	22 0f       	add	r18, r18
     cf2:	33 1f       	adc	r19, r19
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <TIMER_voidTimer1Init+0xb6>
     cf8:	82 2f       	mov	r24, r18
     cfa:	80 95       	com	r24
     cfc:	89 23       	and	r24, r25
     cfe:	8e bd       	out	0x2e, r24	; 46
     d00:	64 9f       	mul	r22, r20
     d02:	61 2d       	mov	r22, r1
     d04:	11 24       	eor	r1, r1
     d06:	66 95       	lsr	r22
     d08:	66 95       	lsr	r22
     d0a:	66 95       	lsr	r22
     d0c:	31 96       	adiw	r30, 0x01	; 1
     d0e:	e3 30       	cpi	r30, 0x03	; 3
     d10:	f1 05       	cpc	r31, r1
     d12:	81 f6       	brne	.-96     	; 0xcb4 <TIMER_voidTimer1Init+0x7a>
     d14:	08 95       	ret

00000d16 <TIMER_voidSetOverFlow>:
     d16:	97 bd       	out	0x27, r25	; 39
     d18:	86 bd       	out	0x26, r24	; 38
     d1a:	08 95       	ret

00000d1c <TIMER_voidTimer1ChannelASetCompareValue>:
     d1c:	9b bd       	out	0x2b, r25	; 43
     d1e:	8a bd       	out	0x2a, r24	; 42
     d20:	08 95       	ret

00000d22 <TIMER_voidTimer1SetPreloadValue>:
     d22:	9d bd       	out	0x2d, r25	; 45
     d24:	8c bd       	out	0x2c, r24	; 44
     d26:	08 95       	ret

00000d28 <__vector_11>:



//Timer 0 Normal ISR
void __vector_11(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_11(void){
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	0f 92       	push	r0
     d30:	11 24       	eor	r1, r1
     d32:	2f 93       	push	r18
     d34:	3f 93       	push	r19
     d36:	4f 93       	push	r20
     d38:	5f 93       	push	r21
     d3a:	6f 93       	push	r22
     d3c:	7f 93       	push	r23
     d3e:	8f 93       	push	r24
     d40:	9f 93       	push	r25
     d42:	af 93       	push	r26
     d44:	bf 93       	push	r27
     d46:	ef 93       	push	r30
     d48:	ff 93       	push	r31
	if(TIMER0_Normal_ISR_PTR!=0x00)
     d4a:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <TIMER0_Normal_ISR_PTR>
     d4e:	f0 91 85 01 	lds	r31, 0x0185	; 0x800185 <TIMER0_Normal_ISR_PTR+0x1>
     d52:	30 97       	sbiw	r30, 0x00	; 0
     d54:	09 f0       	breq	.+2      	; 0xd58 <__vector_11+0x30>
		TIMER0_Normal_ISR_PTR();
     d56:	09 95       	icall
}
     d58:	ff 91       	pop	r31
     d5a:	ef 91       	pop	r30
     d5c:	bf 91       	pop	r27
     d5e:	af 91       	pop	r26
     d60:	9f 91       	pop	r25
     d62:	8f 91       	pop	r24
     d64:	7f 91       	pop	r23
     d66:	6f 91       	pop	r22
     d68:	5f 91       	pop	r21
     d6a:	4f 91       	pop	r20
     d6c:	3f 91       	pop	r19
     d6e:	2f 91       	pop	r18
     d70:	0f 90       	pop	r0
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	0f 90       	pop	r0
     d76:	1f 90       	pop	r1
     d78:	18 95       	reti

00000d7a <__vector_10>:

//Timer 0 CTC ISR
void __vector_10(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_10(void){
     d7a:	1f 92       	push	r1
     d7c:	0f 92       	push	r0
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	0f 92       	push	r0
     d82:	11 24       	eor	r1, r1
     d84:	2f 93       	push	r18
     d86:	3f 93       	push	r19
     d88:	4f 93       	push	r20
     d8a:	5f 93       	push	r21
     d8c:	6f 93       	push	r22
     d8e:	7f 93       	push	r23
     d90:	8f 93       	push	r24
     d92:	9f 93       	push	r25
     d94:	af 93       	push	r26
     d96:	bf 93       	push	r27
     d98:	ef 93       	push	r30
     d9a:	ff 93       	push	r31
	if(TIMER0_CTC_ISR_PTR!=0x00)
     d9c:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <TIMER0_CTC_ISR_PTR>
     da0:	f0 91 83 01 	lds	r31, 0x0183	; 0x800183 <TIMER0_CTC_ISR_PTR+0x1>
     da4:	30 97       	sbiw	r30, 0x00	; 0
     da6:	09 f0       	breq	.+2      	; 0xdaa <__vector_10+0x30>
		TIMER0_CTC_ISR_PTR();
     da8:	09 95       	icall

}
     daa:	ff 91       	pop	r31
     dac:	ef 91       	pop	r30
     dae:	bf 91       	pop	r27
     db0:	af 91       	pop	r26
     db2:	9f 91       	pop	r25
     db4:	8f 91       	pop	r24
     db6:	7f 91       	pop	r23
     db8:	6f 91       	pop	r22
     dba:	5f 91       	pop	r21
     dbc:	4f 91       	pop	r20
     dbe:	3f 91       	pop	r19
     dc0:	2f 91       	pop	r18
     dc2:	0f 90       	pop	r0
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	0f 90       	pop	r0
     dc8:	1f 90       	pop	r1
     dca:	18 95       	reti

00000dcc <__vector_6>:

//ICU
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void){
     dcc:	1f 92       	push	r1
     dce:	0f 92       	push	r0
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	0f 92       	push	r0
     dd4:	11 24       	eor	r1, r1
     dd6:	2f 93       	push	r18
     dd8:	3f 93       	push	r19
     dda:	4f 93       	push	r20
     ddc:	5f 93       	push	r21
     dde:	6f 93       	push	r22
     de0:	7f 93       	push	r23
     de2:	8f 93       	push	r24
     de4:	9f 93       	push	r25
     de6:	af 93       	push	r26
     de8:	bf 93       	push	r27
     dea:	ef 93       	push	r30
     dec:	ff 93       	push	r31
	if(GLOBAL_ICU_ISR!=0x00)
     dee:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <GLOBAL_ICU_ISR>
     df2:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <GLOBAL_ICU_ISR+0x1>
     df6:	30 97       	sbiw	r30, 0x00	; 0
     df8:	09 f0       	breq	.+2      	; 0xdfc <__vector_6+0x30>
		GLOBAL_ICU_ISR();
     dfa:	09 95       	icall
}
     dfc:	ff 91       	pop	r31
     dfe:	ef 91       	pop	r30
     e00:	bf 91       	pop	r27
     e02:	af 91       	pop	r26
     e04:	9f 91       	pop	r25
     e06:	8f 91       	pop	r24
     e08:	7f 91       	pop	r23
     e0a:	6f 91       	pop	r22
     e0c:	5f 91       	pop	r21
     e0e:	4f 91       	pop	r20
     e10:	3f 91       	pop	r19
     e12:	2f 91       	pop	r18
     e14:	0f 90       	pop	r0
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	0f 90       	pop	r0
     e1a:	1f 90       	pop	r1
     e1c:	18 95       	reti

00000e1e <__vector_7>:

//Timer 1 CTC ISR
void __vector_7(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_7(void){
     e1e:	1f 92       	push	r1
     e20:	0f 92       	push	r0
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	0f 92       	push	r0
     e26:	11 24       	eor	r1, r1
     e28:	2f 93       	push	r18
     e2a:	3f 93       	push	r19
     e2c:	4f 93       	push	r20
     e2e:	5f 93       	push	r21
     e30:	6f 93       	push	r22
     e32:	7f 93       	push	r23
     e34:	8f 93       	push	r24
     e36:	9f 93       	push	r25
     e38:	af 93       	push	r26
     e3a:	bf 93       	push	r27
     e3c:	ef 93       	push	r30
     e3e:	ff 93       	push	r31
	if(GLOBAL_TIMER1_COMPARE_MATCH_PTR!=0x00)
     e40:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <GLOBAL_TIMER1_COMPARE_MATCH_PTR>
     e44:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <GLOBAL_TIMER1_COMPARE_MATCH_PTR+0x1>
     e48:	30 97       	sbiw	r30, 0x00	; 0
     e4a:	09 f0       	breq	.+2      	; 0xe4e <__vector_7+0x30>
		GLOBAL_TIMER1_COMPARE_MATCH_PTR();
     e4c:	09 95       	icall
}
     e4e:	ff 91       	pop	r31
     e50:	ef 91       	pop	r30
     e52:	bf 91       	pop	r27
     e54:	af 91       	pop	r26
     e56:	9f 91       	pop	r25
     e58:	8f 91       	pop	r24
     e5a:	7f 91       	pop	r23
     e5c:	6f 91       	pop	r22
     e5e:	5f 91       	pop	r21
     e60:	4f 91       	pop	r20
     e62:	3f 91       	pop	r19
     e64:	2f 91       	pop	r18
     e66:	0f 90       	pop	r0
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	0f 90       	pop	r0
     e6c:	1f 90       	pop	r1
     e6e:	18 95       	reti

00000e70 <TWI_voidMasterInit>:
void TWI_voidSlaveInit(u8 Copy_SlaveAddress){
	//Set Slave Address
	TWAR = Copy_SlaveAddress <<1;

	//Enable TWI
	SET_BIT(TWCR,TWEN);
     e70:	96 e9       	ldi	r25, 0x96	; 150
     e72:	90 b9       	out	0x00, r25	; 0
     e74:	09 98       	cbi	0x01, 1	; 1
     e76:	08 98       	cbi	0x01, 0	; 1
     e78:	88 23       	and	r24, r24
     e7a:	11 f0       	breq	.+4      	; 0xe80 <TWI_voidMasterInit+0x10>
     e7c:	88 0f       	add	r24, r24
     e7e:	82 b9       	out	0x02, r24	; 2
     e80:	86 b7       	in	r24, 0x36	; 54
     e82:	84 60       	ori	r24, 0x04	; 4
     e84:	86 bf       	out	0x36, r24	; 54
     e86:	08 95       	ret

00000e88 <TWI_SendStartCondition>:
}

TWI_ErrStatus TWI_SendStartCondition(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
     e88:	86 b7       	in	r24, 0x36	; 54
     e8a:	80 62       	ori	r24, 0x20	; 32
     e8c:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     e8e:	86 b7       	in	r24, 0x36	; 54
     e90:	80 68       	ori	r24, 0x80	; 128
     e92:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     e94:	06 b6       	in	r0, 0x36	; 54
     e96:	07 fe       	sbrs	r0, 7
     e98:	fd cf       	rjmp	.-6      	; 0xe94 <TWI_SendStartCondition+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=START_ACK){
     e9a:	91 b1       	in	r25, 0x01	; 1
		Local_ErrStatus = StartConditionErr;
		}
	return Local_ErrStatus;
     e9c:	98 7f       	andi	r25, 0xF8	; 248
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	98 30       	cpi	r25, 0x08	; 8
     ea2:	09 f4       	brne	.+2      	; 0xea6 <TWI_SendStartCondition+0x1e>
     ea4:	80 e0       	ldi	r24, 0x00	; 0
}
     ea6:	08 95       	ret

00000ea8 <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
     ea8:	86 b7       	in	r24, 0x36	; 54
     eaa:	80 62       	ori	r24, 0x20	; 32
     eac:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     eae:	86 b7       	in	r24, 0x36	; 54
     eb0:	80 68       	ori	r24, 0x80	; 128
     eb2:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     eb4:	06 b6       	in	r0, 0x36	; 54
     eb6:	07 fe       	sbrs	r0, 7
     eb8:	fd cf       	rjmp	.-6      	; 0xeb4 <TWI_SendRepeatedStart+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
     eba:	81 b1       	in	r24, 0x01	; 1
     ebc:	88 7f       	andi	r24, 0xF8	; 248
     ebe:	80 31       	cpi	r24, 0x10	; 16
     ec0:	11 f0       	breq	.+4      	; 0xec6 <TWI_SendRepeatedStart+0x1e>
		Local_ErrStatus = RepeatedStartErr;
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     ec6:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
		Local_ErrStatus = RepeatedStartErr;
		}
	return Local_ErrStatus;
}
     ec8:	08 95       	ret

00000eca <TWI_SendSlaveAddressWithWrite>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
     eca:	88 0f       	add	r24, r24
     ecc:	83 b9       	out	0x03, r24	; 3
	//For Write Operation
	CLR_BIT(TWDR,0);
     ece:	18 98       	cbi	0x03, 0	; 3

	//Clear Flag to start previous operation  //Enable TWI
	TWCR=(1<<TWINT)|(1<<TWEN);
     ed0:	84 e8       	ldi	r24, 0x84	; 132
     ed2:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     ed4:	06 b6       	in	r0, 0x36	; 54
     ed6:	07 fe       	sbrs	r0, 7
     ed8:	fd cf       	rjmp	.-6      	; 0xed4 <TWI_SendSlaveAddressWithWrite+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
     eda:	81 b1       	in	r24, 0x01	; 1
     edc:	88 7f       	andi	r24, 0xF8	; 248
     ede:	88 31       	cpi	r24, 0x18	; 24
     ee0:	11 f0       	breq	.+4      	; 0xee6 <TWI_SendSlaveAddressWithWrite+0x1c>
		Local_ErrStatus = SlaveAddressWithWriteErr;
     ee2:	83 e0       	ldi	r24, 0x03	; 3
     ee4:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     ee6:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
		Local_ErrStatus = SlaveAddressWithWriteErr;
		}
	return Local_ErrStatus;
}
     ee8:	08 95       	ret

00000eea <TWI_SendSlaveAddressWithRead>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
     eea:	88 0f       	add	r24, r24
     eec:	83 b9       	out	0x03, r24	; 3
	//For Read Operation
	SET_BIT(TWDR,0);
     eee:	18 9a       	sbi	0x03, 0	; 3

	//Clear Flag to start previous operation
	TWCR=(1<<TWINT)|(1<<TWEN);
     ef0:	84 e8       	ldi	r24, 0x84	; 132
     ef2:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     ef4:	06 b6       	in	r0, 0x36	; 54
     ef6:	07 fe       	sbrs	r0, 7
     ef8:	fd cf       	rjmp	.-6      	; 0xef4 <TWI_SendSlaveAddressWithRead+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
     efa:	81 b1       	in	r24, 0x01	; 1
     efc:	88 7f       	andi	r24, 0xF8	; 248
     efe:	80 34       	cpi	r24, 0x40	; 64
     f00:	11 f0       	breq	.+4      	; 0xf06 <TWI_SendSlaveAddressWithRead+0x1c>
		Local_ErrStatus = SlaveAddressWithReadErr;
     f02:	84 e0       	ldi	r24, 0x04	; 4
     f04:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     f06:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
		Local_ErrStatus = SlaveAddressWithReadErr;
		}
	return Local_ErrStatus;
}
     f08:	08 95       	ret

00000f0a <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte){
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Write Data to data byte
	TWDR = Copy_u8DataByte;
     f0a:	83 b9       	out	0x03, r24	; 3

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     f0c:	86 b7       	in	r24, 0x36	; 54
     f0e:	80 68       	ori	r24, 0x80	; 128
     f10:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f12:	06 b6       	in	r0, 0x36	; 54
     f14:	07 fe       	sbrs	r0, 7
     f16:	fd cf       	rjmp	.-6      	; 0xf12 <TWI_MasterWriteDataByte+0x8>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MasterWriteDataByteErr){
     f18:	81 b1       	in	r24, 0x01	; 1
		Local_ErrStatus = MasterWriteDataByteErr;
		}
	return Local_ErrStatus;

}
     f1a:	85 e0       	ldi	r24, 0x05	; 5
     f1c:	08 95       	ret

00000f1e <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
     f1e:	fc 01       	movw	r30, r24
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Enable ACK
	SET_BIT(TWCR,TWEA);
     f20:	96 b7       	in	r25, 0x36	; 54
     f22:	90 64       	ori	r25, 0x40	; 64
     f24:	96 bf       	out	0x36, r25	; 54
	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     f26:	96 b7       	in	r25, 0x36	; 54
     f28:	90 68       	ori	r25, 0x80	; 128
     f2a:	96 bf       	out	0x36, r25	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f2c:	06 b6       	in	r0, 0x36	; 54
     f2e:	07 fe       	sbrs	r0, 7
     f30:	fd cf       	rjmp	.-6      	; 0xf2c <TWI_MasterReadDataByte+0xe>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
     f32:	91 b1       	in	r25, 0x01	; 1
     f34:	98 7f       	andi	r25, 0xF8	; 248
     f36:	90 35       	cpi	r25, 0x50	; 80
     f38:	21 f4       	brne	.+8      	; 0xf42 <TWI_MasterReadDataByte+0x24>
		Local_ErrStatus = MasterReadDataByteErr;
		}
	else{
		// Read Data
		*Copy_Pu8DataByte = TWDR;
     f3a:	83 b1       	in	r24, 0x03	; 3
     f3c:	80 83       	st	Z, r24

}

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	08 95       	ret
	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
		Local_ErrStatus = MasterReadDataByteErr;
     f42:	86 e0       	ldi	r24, 0x06	; 6
		// Read Data
		*Copy_Pu8DataByte = TWDR;

	}
	return Local_ErrStatus;
}
     f44:	08 95       	ret

00000f46 <TWI_SendStopCondition>:

void TWI_SendStopCondition(void)
{
	/* generate stop condition on the bus */
	SET_BIT(TWCR,TWSTO);
     f46:	86 b7       	in	r24, 0x36	; 54
     f48:	80 61       	ori	r24, 0x10	; 16
     f4a:	86 bf       	out	0x36, r24	; 54

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWINT);
     f4c:	86 b7       	in	r24, 0x36	; 54
     f4e:	80 68       	ori	r24, 0x80	; 128
     f50:	86 bf       	out	0x36, r24	; 54
     f52:	08 95       	ret

00000f54 <USART_voidInit>:
void USART_voidEnableRxINT(void){
	SET_BIT(UCSRB,7);
}

void USART_voidDisableRxINT(void){
	CLR_BIT(UCSRB,7);
     f54:	52 98       	cbi	0x0a, 2	; 10
     f56:	86 e8       	ldi	r24, 0x86	; 134
     f58:	80 bd       	out	0x20, r24	; 32
     f5a:	83 e3       	ldi	r24, 0x33	; 51
     f5c:	89 b9       	out	0x09, r24	; 9
     f5e:	53 9a       	sbi	0x0a, 3	; 10
     f60:	54 9a       	sbi	0x0a, 4	; 10
     f62:	08 95       	ret

00000f64 <USART_voidTransmitData>:
     f64:	5d 9b       	sbis	0x0b, 5	; 11
     f66:	fe cf       	rjmp	.-4      	; 0xf64 <USART_voidTransmitData>
     f68:	5d 9a       	sbi	0x0b, 5	; 11
     f6a:	8c b9       	out	0x0c, r24	; 12
     f6c:	08 95       	ret

00000f6e <USART_u8ReceiverData>:
     f6e:	5f 9b       	sbis	0x0b, 7	; 11
     f70:	fe cf       	rjmp	.-4      	; 0xf6e <USART_u8ReceiverData>
     f72:	8c b1       	in	r24, 0x0c	; 12
     f74:	08 95       	ret

00000f76 <USART_u8TimeOUTReceiverData>:
     f76:	fc 01       	movw	r30, r24
     f78:	1d bc       	out	0x2d, r1	; 45
     f7a:	1c bc       	out	0x2c, r1	; 44
     f7c:	8f b5       	in	r24, 0x2f	; 47
     f7e:	8e 7f       	andi	r24, 0xFE	; 254
     f80:	8f bd       	out	0x2f, r24	; 47
     f82:	9f b5       	in	r25, 0x2f	; 47
     f84:	9d 7f       	andi	r25, 0xFD	; 253
     f86:	9f bd       	out	0x2f, r25	; 47
     f88:	9e b5       	in	r25, 0x2e	; 46
     f8a:	97 7f       	andi	r25, 0xF7	; 247
     f8c:	9e bd       	out	0x2e, r25	; 46
     f8e:	9e b5       	in	r25, 0x2e	; 46
     f90:	9f 7e       	andi	r25, 0xEF	; 239
     f92:	9e bd       	out	0x2e, r25	; 46
     f94:	9e b5       	in	r25, 0x2e	; 46
     f96:	91 60       	ori	r25, 0x01	; 1
     f98:	9e bd       	out	0x2e, r25	; 46
     f9a:	9e b5       	in	r25, 0x2e	; 46
     f9c:	9d 7f       	andi	r25, 0xFD	; 253
     f9e:	9e bd       	out	0x2e, r25	; 46
     fa0:	9e b5       	in	r25, 0x2e	; 46
     fa2:	94 60       	ori	r25, 0x04	; 4
     fa4:	9e bd       	out	0x2e, r25	; 46
     fa6:	0b c0       	rjmp	.+22     	; 0xfbe <USART_u8TimeOUTReceiverData+0x48>
     fa8:	2c b5       	in	r18, 0x2c	; 44
     faa:	3d b5       	in	r19, 0x2d	; 45
     fac:	20 34       	cpi	r18, 0x40	; 64
     fae:	3c 49       	sbci	r19, 0x9C	; 156
     fb0:	30 f0       	brcs	.+12     	; 0xfbe <USART_u8TimeOUTReceiverData+0x48>
     fb2:	5f 9a       	sbi	0x0b, 7	; 11
     fb4:	8e b5       	in	r24, 0x2e	; 46
     fb6:	88 7f       	andi	r24, 0xF8	; 248
     fb8:	8e bd       	out	0x2e, r24	; 46
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	08 95       	ret
     fbe:	5f 9b       	sbis	0x0b, 7	; 11
     fc0:	f3 cf       	rjmp	.-26     	; 0xfa8 <USART_u8TimeOUTReceiverData+0x32>
     fc2:	8c b1       	in	r24, 0x0c	; 12
     fc4:	80 83       	st	Z, r24
     fc6:	1d bc       	out	0x2d, r1	; 45
     fc8:	1c bc       	out	0x2c, r1	; 44
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	08 95       	ret

00000fce <USART_voidTransmitString>:
     fce:	0f 93       	push	r16
     fd0:	1f 93       	push	r17
     fd2:	cf 93       	push	r28
     fd4:	fc 01       	movw	r30, r24
     fd6:	80 81       	ld	r24, Z
     fd8:	88 23       	and	r24, r24
     fda:	59 f0       	breq	.+22     	; 0xff2 <USART_voidTransmitString+0x24>
     fdc:	8f 01       	movw	r16, r30
     fde:	c0 e0       	ldi	r28, 0x00	; 0
     fe0:	0e 94 b2 07 	call	0xf64	; 0xf64 <USART_voidTransmitData>
     fe4:	cf 5f       	subi	r28, 0xFF	; 255
     fe6:	f8 01       	movw	r30, r16
     fe8:	ec 0f       	add	r30, r28
     fea:	f1 1d       	adc	r31, r1
     fec:	80 81       	ld	r24, Z
     fee:	81 11       	cpse	r24, r1
     ff0:	f7 cf       	rjmp	.-18     	; 0xfe0 <USART_voidTransmitString+0x12>
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	08 95       	ret

00000ffa <USART_voidCallBackFunction>:
     ffa:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <GLOBAL_PTR_CallBack+0x1>
     ffe:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <GLOBAL_PTR_CallBack>
    1002:	08 95       	ret

00001004 <USART_voidEnableRxINT>:
    1004:	57 9a       	sbi	0x0a, 7	; 10
    1006:	08 95       	ret

00001008 <__vector_13>:
}

void __vector_13 (void) __attribute__((signal));
void __vector_13 (void){
    1008:	1f 92       	push	r1
    100a:	0f 92       	push	r0
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	0f 92       	push	r0
    1010:	11 24       	eor	r1, r1
    1012:	2f 93       	push	r18
    1014:	3f 93       	push	r19
    1016:	4f 93       	push	r20
    1018:	5f 93       	push	r21
    101a:	6f 93       	push	r22
    101c:	7f 93       	push	r23
    101e:	8f 93       	push	r24
    1020:	9f 93       	push	r25
    1022:	af 93       	push	r26
    1024:	bf 93       	push	r27
    1026:	ef 93       	push	r30
    1028:	ff 93       	push	r31
	if(GLOBAL_PTR_CallBack!=0x00)
    102a:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <GLOBAL_PTR_CallBack>
    102e:	f0 91 87 01 	lds	r31, 0x0187	; 0x800187 <GLOBAL_PTR_CallBack+0x1>
    1032:	30 97       	sbiw	r30, 0x00	; 0
    1034:	09 f0       	breq	.+2      	; 0x1038 <__vector_13+0x30>
		GLOBAL_PTR_CallBack();
    1036:	09 95       	icall
}
    1038:	ff 91       	pop	r31
    103a:	ef 91       	pop	r30
    103c:	bf 91       	pop	r27
    103e:	af 91       	pop	r26
    1040:	9f 91       	pop	r25
    1042:	8f 91       	pop	r24
    1044:	7f 91       	pop	r23
    1046:	6f 91       	pop	r22
    1048:	5f 91       	pop	r21
    104a:	4f 91       	pop	r20
    104c:	3f 91       	pop	r19
    104e:	2f 91       	pop	r18
    1050:	0f 90       	pop	r0
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	0f 90       	pop	r0
    1056:	1f 90       	pop	r1
    1058:	18 95       	reti

0000105a <__subsf3>:
    105a:	50 58       	subi	r21, 0x80	; 128

0000105c <__addsf3>:
    105c:	bb 27       	eor	r27, r27
    105e:	aa 27       	eor	r26, r26
    1060:	0e 94 45 08 	call	0x108a	; 0x108a <__addsf3x>
    1064:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__fp_round>
    1068:	0e 94 81 09 	call	0x1302	; 0x1302 <__fp_pscA>
    106c:	38 f0       	brcs	.+14     	; 0x107c <__addsf3+0x20>
    106e:	0e 94 88 09 	call	0x1310	; 0x1310 <__fp_pscB>
    1072:	20 f0       	brcs	.+8      	; 0x107c <__addsf3+0x20>
    1074:	39 f4       	brne	.+14     	; 0x1084 <__addsf3+0x28>
    1076:	9f 3f       	cpi	r25, 0xFF	; 255
    1078:	19 f4       	brne	.+6      	; 0x1080 <__addsf3+0x24>
    107a:	26 f4       	brtc	.+8      	; 0x1084 <__addsf3+0x28>
    107c:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__fp_nan>
    1080:	0e f4       	brtc	.+2      	; 0x1084 <__addsf3+0x28>
    1082:	e0 95       	com	r30
    1084:	e7 fb       	bst	r30, 7
    1086:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <__fp_inf>

0000108a <__addsf3x>:
    108a:	e9 2f       	mov	r30, r25
    108c:	0e 94 a0 09 	call	0x1340	; 0x1340 <__fp_split3>
    1090:	58 f3       	brcs	.-42     	; 0x1068 <__addsf3+0xc>
    1092:	ba 17       	cp	r27, r26
    1094:	62 07       	cpc	r22, r18
    1096:	73 07       	cpc	r23, r19
    1098:	84 07       	cpc	r24, r20
    109a:	95 07       	cpc	r25, r21
    109c:	20 f0       	brcs	.+8      	; 0x10a6 <__addsf3x+0x1c>
    109e:	79 f4       	brne	.+30     	; 0x10be <__addsf3x+0x34>
    10a0:	a6 f5       	brtc	.+104    	; 0x110a <__addsf3x+0x80>
    10a2:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__fp_zero>
    10a6:	0e f4       	brtc	.+2      	; 0x10aa <__addsf3x+0x20>
    10a8:	e0 95       	com	r30
    10aa:	0b 2e       	mov	r0, r27
    10ac:	ba 2f       	mov	r27, r26
    10ae:	a0 2d       	mov	r26, r0
    10b0:	0b 01       	movw	r0, r22
    10b2:	b9 01       	movw	r22, r18
    10b4:	90 01       	movw	r18, r0
    10b6:	0c 01       	movw	r0, r24
    10b8:	ca 01       	movw	r24, r20
    10ba:	a0 01       	movw	r20, r0
    10bc:	11 24       	eor	r1, r1
    10be:	ff 27       	eor	r31, r31
    10c0:	59 1b       	sub	r21, r25
    10c2:	99 f0       	breq	.+38     	; 0x10ea <__addsf3x+0x60>
    10c4:	59 3f       	cpi	r21, 0xF9	; 249
    10c6:	50 f4       	brcc	.+20     	; 0x10dc <__addsf3x+0x52>
    10c8:	50 3e       	cpi	r21, 0xE0	; 224
    10ca:	68 f1       	brcs	.+90     	; 0x1126 <__addsf3x+0x9c>
    10cc:	1a 16       	cp	r1, r26
    10ce:	f0 40       	sbci	r31, 0x00	; 0
    10d0:	a2 2f       	mov	r26, r18
    10d2:	23 2f       	mov	r18, r19
    10d4:	34 2f       	mov	r19, r20
    10d6:	44 27       	eor	r20, r20
    10d8:	58 5f       	subi	r21, 0xF8	; 248
    10da:	f3 cf       	rjmp	.-26     	; 0x10c2 <__addsf3x+0x38>
    10dc:	46 95       	lsr	r20
    10de:	37 95       	ror	r19
    10e0:	27 95       	ror	r18
    10e2:	a7 95       	ror	r26
    10e4:	f0 40       	sbci	r31, 0x00	; 0
    10e6:	53 95       	inc	r21
    10e8:	c9 f7       	brne	.-14     	; 0x10dc <__addsf3x+0x52>
    10ea:	7e f4       	brtc	.+30     	; 0x110a <__addsf3x+0x80>
    10ec:	1f 16       	cp	r1, r31
    10ee:	ba 0b       	sbc	r27, r26
    10f0:	62 0b       	sbc	r22, r18
    10f2:	73 0b       	sbc	r23, r19
    10f4:	84 0b       	sbc	r24, r20
    10f6:	ba f0       	brmi	.+46     	; 0x1126 <__addsf3x+0x9c>
    10f8:	91 50       	subi	r25, 0x01	; 1
    10fa:	a1 f0       	breq	.+40     	; 0x1124 <__addsf3x+0x9a>
    10fc:	ff 0f       	add	r31, r31
    10fe:	bb 1f       	adc	r27, r27
    1100:	66 1f       	adc	r22, r22
    1102:	77 1f       	adc	r23, r23
    1104:	88 1f       	adc	r24, r24
    1106:	c2 f7       	brpl	.-16     	; 0x10f8 <__addsf3x+0x6e>
    1108:	0e c0       	rjmp	.+28     	; 0x1126 <__addsf3x+0x9c>
    110a:	ba 0f       	add	r27, r26
    110c:	62 1f       	adc	r22, r18
    110e:	73 1f       	adc	r23, r19
    1110:	84 1f       	adc	r24, r20
    1112:	48 f4       	brcc	.+18     	; 0x1126 <__addsf3x+0x9c>
    1114:	87 95       	ror	r24
    1116:	77 95       	ror	r23
    1118:	67 95       	ror	r22
    111a:	b7 95       	ror	r27
    111c:	f7 95       	ror	r31
    111e:	9e 3f       	cpi	r25, 0xFE	; 254
    1120:	08 f0       	brcs	.+2      	; 0x1124 <__addsf3x+0x9a>
    1122:	b0 cf       	rjmp	.-160    	; 0x1084 <__addsf3+0x28>
    1124:	93 95       	inc	r25
    1126:	88 0f       	add	r24, r24
    1128:	08 f0       	brcs	.+2      	; 0x112c <__addsf3x+0xa2>
    112a:	99 27       	eor	r25, r25
    112c:	ee 0f       	add	r30, r30
    112e:	97 95       	ror	r25
    1130:	87 95       	ror	r24
    1132:	08 95       	ret

00001134 <__divsf3>:
    1134:	0e 94 ae 08 	call	0x115c	; 0x115c <__divsf3x>
    1138:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__fp_round>
    113c:	0e 94 88 09 	call	0x1310	; 0x1310 <__fp_pscB>
    1140:	58 f0       	brcs	.+22     	; 0x1158 <__divsf3+0x24>
    1142:	0e 94 81 09 	call	0x1302	; 0x1302 <__fp_pscA>
    1146:	40 f0       	brcs	.+16     	; 0x1158 <__divsf3+0x24>
    1148:	29 f4       	brne	.+10     	; 0x1154 <__divsf3+0x20>
    114a:	5f 3f       	cpi	r21, 0xFF	; 255
    114c:	29 f0       	breq	.+10     	; 0x1158 <__divsf3+0x24>
    114e:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <__fp_inf>
    1152:	51 11       	cpse	r21, r1
    1154:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__fp_szero>
    1158:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__fp_nan>

0000115c <__divsf3x>:
    115c:	0e 94 a0 09 	call	0x1340	; 0x1340 <__fp_split3>
    1160:	68 f3       	brcs	.-38     	; 0x113c <__divsf3+0x8>

00001162 <__divsf3_pse>:
    1162:	99 23       	and	r25, r25
    1164:	b1 f3       	breq	.-20     	; 0x1152 <__divsf3+0x1e>
    1166:	55 23       	and	r21, r21
    1168:	91 f3       	breq	.-28     	; 0x114e <__divsf3+0x1a>
    116a:	95 1b       	sub	r25, r21
    116c:	55 0b       	sbc	r21, r21
    116e:	bb 27       	eor	r27, r27
    1170:	aa 27       	eor	r26, r26
    1172:	62 17       	cp	r22, r18
    1174:	73 07       	cpc	r23, r19
    1176:	84 07       	cpc	r24, r20
    1178:	38 f0       	brcs	.+14     	; 0x1188 <__divsf3_pse+0x26>
    117a:	9f 5f       	subi	r25, 0xFF	; 255
    117c:	5f 4f       	sbci	r21, 0xFF	; 255
    117e:	22 0f       	add	r18, r18
    1180:	33 1f       	adc	r19, r19
    1182:	44 1f       	adc	r20, r20
    1184:	aa 1f       	adc	r26, r26
    1186:	a9 f3       	breq	.-22     	; 0x1172 <__divsf3_pse+0x10>
    1188:	35 d0       	rcall	.+106    	; 0x11f4 <__divsf3_pse+0x92>
    118a:	0e 2e       	mov	r0, r30
    118c:	3a f0       	brmi	.+14     	; 0x119c <__divsf3_pse+0x3a>
    118e:	e0 e8       	ldi	r30, 0x80	; 128
    1190:	32 d0       	rcall	.+100    	; 0x11f6 <__divsf3_pse+0x94>
    1192:	91 50       	subi	r25, 0x01	; 1
    1194:	50 40       	sbci	r21, 0x00	; 0
    1196:	e6 95       	lsr	r30
    1198:	00 1c       	adc	r0, r0
    119a:	ca f7       	brpl	.-14     	; 0x118e <__divsf3_pse+0x2c>
    119c:	2b d0       	rcall	.+86     	; 0x11f4 <__divsf3_pse+0x92>
    119e:	fe 2f       	mov	r31, r30
    11a0:	29 d0       	rcall	.+82     	; 0x11f4 <__divsf3_pse+0x92>
    11a2:	66 0f       	add	r22, r22
    11a4:	77 1f       	adc	r23, r23
    11a6:	88 1f       	adc	r24, r24
    11a8:	bb 1f       	adc	r27, r27
    11aa:	26 17       	cp	r18, r22
    11ac:	37 07       	cpc	r19, r23
    11ae:	48 07       	cpc	r20, r24
    11b0:	ab 07       	cpc	r26, r27
    11b2:	b0 e8       	ldi	r27, 0x80	; 128
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <__divsf3_pse+0x56>
    11b6:	bb 0b       	sbc	r27, r27
    11b8:	80 2d       	mov	r24, r0
    11ba:	bf 01       	movw	r22, r30
    11bc:	ff 27       	eor	r31, r31
    11be:	93 58       	subi	r25, 0x83	; 131
    11c0:	5f 4f       	sbci	r21, 0xFF	; 255
    11c2:	3a f0       	brmi	.+14     	; 0x11d2 <__divsf3_pse+0x70>
    11c4:	9e 3f       	cpi	r25, 0xFE	; 254
    11c6:	51 05       	cpc	r21, r1
    11c8:	78 f0       	brcs	.+30     	; 0x11e8 <__divsf3_pse+0x86>
    11ca:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <__fp_inf>
    11ce:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__fp_szero>
    11d2:	5f 3f       	cpi	r21, 0xFF	; 255
    11d4:	e4 f3       	brlt	.-8      	; 0x11ce <__divsf3_pse+0x6c>
    11d6:	98 3e       	cpi	r25, 0xE8	; 232
    11d8:	d4 f3       	brlt	.-12     	; 0x11ce <__divsf3_pse+0x6c>
    11da:	86 95       	lsr	r24
    11dc:	77 95       	ror	r23
    11de:	67 95       	ror	r22
    11e0:	b7 95       	ror	r27
    11e2:	f7 95       	ror	r31
    11e4:	9f 5f       	subi	r25, 0xFF	; 255
    11e6:	c9 f7       	brne	.-14     	; 0x11da <__divsf3_pse+0x78>
    11e8:	88 0f       	add	r24, r24
    11ea:	91 1d       	adc	r25, r1
    11ec:	96 95       	lsr	r25
    11ee:	87 95       	ror	r24
    11f0:	97 f9       	bld	r25, 7
    11f2:	08 95       	ret
    11f4:	e1 e0       	ldi	r30, 0x01	; 1
    11f6:	66 0f       	add	r22, r22
    11f8:	77 1f       	adc	r23, r23
    11fa:	88 1f       	adc	r24, r24
    11fc:	bb 1f       	adc	r27, r27
    11fe:	62 17       	cp	r22, r18
    1200:	73 07       	cpc	r23, r19
    1202:	84 07       	cpc	r24, r20
    1204:	ba 07       	cpc	r27, r26
    1206:	20 f0       	brcs	.+8      	; 0x1210 <__divsf3_pse+0xae>
    1208:	62 1b       	sub	r22, r18
    120a:	73 0b       	sbc	r23, r19
    120c:	84 0b       	sbc	r24, r20
    120e:	ba 0b       	sbc	r27, r26
    1210:	ee 1f       	adc	r30, r30
    1212:	88 f7       	brcc	.-30     	; 0x11f6 <__divsf3_pse+0x94>
    1214:	e0 95       	com	r30
    1216:	08 95       	ret

00001218 <__fixunssfsi>:
    1218:	0e 94 a8 09 	call	0x1350	; 0x1350 <__fp_splitA>
    121c:	88 f0       	brcs	.+34     	; 0x1240 <__fixunssfsi+0x28>
    121e:	9f 57       	subi	r25, 0x7F	; 127
    1220:	98 f0       	brcs	.+38     	; 0x1248 <__fixunssfsi+0x30>
    1222:	b9 2f       	mov	r27, r25
    1224:	99 27       	eor	r25, r25
    1226:	b7 51       	subi	r27, 0x17	; 23
    1228:	b0 f0       	brcs	.+44     	; 0x1256 <__fixunssfsi+0x3e>
    122a:	e1 f0       	breq	.+56     	; 0x1264 <__fixunssfsi+0x4c>
    122c:	66 0f       	add	r22, r22
    122e:	77 1f       	adc	r23, r23
    1230:	88 1f       	adc	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	1a f0       	brmi	.+6      	; 0x123c <__fixunssfsi+0x24>
    1236:	ba 95       	dec	r27
    1238:	c9 f7       	brne	.-14     	; 0x122c <__fixunssfsi+0x14>
    123a:	14 c0       	rjmp	.+40     	; 0x1264 <__fixunssfsi+0x4c>
    123c:	b1 30       	cpi	r27, 0x01	; 1
    123e:	91 f0       	breq	.+36     	; 0x1264 <__fixunssfsi+0x4c>
    1240:	0e 94 c2 09 	call	0x1384	; 0x1384 <__fp_zero>
    1244:	b1 e0       	ldi	r27, 0x01	; 1
    1246:	08 95       	ret
    1248:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__fp_zero>
    124c:	67 2f       	mov	r22, r23
    124e:	78 2f       	mov	r23, r24
    1250:	88 27       	eor	r24, r24
    1252:	b8 5f       	subi	r27, 0xF8	; 248
    1254:	39 f0       	breq	.+14     	; 0x1264 <__fixunssfsi+0x4c>
    1256:	b9 3f       	cpi	r27, 0xF9	; 249
    1258:	cc f3       	brlt	.-14     	; 0x124c <__fixunssfsi+0x34>
    125a:	86 95       	lsr	r24
    125c:	77 95       	ror	r23
    125e:	67 95       	ror	r22
    1260:	b3 95       	inc	r27
    1262:	d9 f7       	brne	.-10     	; 0x125a <__fixunssfsi+0x42>
    1264:	3e f4       	brtc	.+14     	; 0x1274 <__fixunssfsi+0x5c>
    1266:	90 95       	com	r25
    1268:	80 95       	com	r24
    126a:	70 95       	com	r23
    126c:	61 95       	neg	r22
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	8f 4f       	sbci	r24, 0xFF	; 255
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	08 95       	ret

00001276 <__floatunsisf>:
    1276:	e8 94       	clt
    1278:	09 c0       	rjmp	.+18     	; 0x128c <__floatsisf+0x12>

0000127a <__floatsisf>:
    127a:	97 fb       	bst	r25, 7
    127c:	3e f4       	brtc	.+14     	; 0x128c <__floatsisf+0x12>
    127e:	90 95       	com	r25
    1280:	80 95       	com	r24
    1282:	70 95       	com	r23
    1284:	61 95       	neg	r22
    1286:	7f 4f       	sbci	r23, 0xFF	; 255
    1288:	8f 4f       	sbci	r24, 0xFF	; 255
    128a:	9f 4f       	sbci	r25, 0xFF	; 255
    128c:	99 23       	and	r25, r25
    128e:	a9 f0       	breq	.+42     	; 0x12ba <__floatsisf+0x40>
    1290:	f9 2f       	mov	r31, r25
    1292:	96 e9       	ldi	r25, 0x96	; 150
    1294:	bb 27       	eor	r27, r27
    1296:	93 95       	inc	r25
    1298:	f6 95       	lsr	r31
    129a:	87 95       	ror	r24
    129c:	77 95       	ror	r23
    129e:	67 95       	ror	r22
    12a0:	b7 95       	ror	r27
    12a2:	f1 11       	cpse	r31, r1
    12a4:	f8 cf       	rjmp	.-16     	; 0x1296 <__floatsisf+0x1c>
    12a6:	fa f4       	brpl	.+62     	; 0x12e6 <__floatsisf+0x6c>
    12a8:	bb 0f       	add	r27, r27
    12aa:	11 f4       	brne	.+4      	; 0x12b0 <__floatsisf+0x36>
    12ac:	60 ff       	sbrs	r22, 0
    12ae:	1b c0       	rjmp	.+54     	; 0x12e6 <__floatsisf+0x6c>
    12b0:	6f 5f       	subi	r22, 0xFF	; 255
    12b2:	7f 4f       	sbci	r23, 0xFF	; 255
    12b4:	8f 4f       	sbci	r24, 0xFF	; 255
    12b6:	9f 4f       	sbci	r25, 0xFF	; 255
    12b8:	16 c0       	rjmp	.+44     	; 0x12e6 <__floatsisf+0x6c>
    12ba:	88 23       	and	r24, r24
    12bc:	11 f0       	breq	.+4      	; 0x12c2 <__floatsisf+0x48>
    12be:	96 e9       	ldi	r25, 0x96	; 150
    12c0:	11 c0       	rjmp	.+34     	; 0x12e4 <__floatsisf+0x6a>
    12c2:	77 23       	and	r23, r23
    12c4:	21 f0       	breq	.+8      	; 0x12ce <__floatsisf+0x54>
    12c6:	9e e8       	ldi	r25, 0x8E	; 142
    12c8:	87 2f       	mov	r24, r23
    12ca:	76 2f       	mov	r23, r22
    12cc:	05 c0       	rjmp	.+10     	; 0x12d8 <__floatsisf+0x5e>
    12ce:	66 23       	and	r22, r22
    12d0:	71 f0       	breq	.+28     	; 0x12ee <__floatsisf+0x74>
    12d2:	96 e8       	ldi	r25, 0x86	; 134
    12d4:	86 2f       	mov	r24, r22
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	2a f0       	brmi	.+10     	; 0x12e6 <__floatsisf+0x6c>
    12dc:	9a 95       	dec	r25
    12de:	66 0f       	add	r22, r22
    12e0:	77 1f       	adc	r23, r23
    12e2:	88 1f       	adc	r24, r24
    12e4:	da f7       	brpl	.-10     	; 0x12dc <__floatsisf+0x62>
    12e6:	88 0f       	add	r24, r24
    12e8:	96 95       	lsr	r25
    12ea:	87 95       	ror	r24
    12ec:	97 f9       	bld	r25, 7
    12ee:	08 95       	ret

000012f0 <__fp_inf>:
    12f0:	97 f9       	bld	r25, 7
    12f2:	9f 67       	ori	r25, 0x7F	; 127
    12f4:	80 e8       	ldi	r24, 0x80	; 128
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	08 95       	ret

000012fc <__fp_nan>:
    12fc:	9f ef       	ldi	r25, 0xFF	; 255
    12fe:	80 ec       	ldi	r24, 0xC0	; 192
    1300:	08 95       	ret

00001302 <__fp_pscA>:
    1302:	00 24       	eor	r0, r0
    1304:	0a 94       	dec	r0
    1306:	16 16       	cp	r1, r22
    1308:	17 06       	cpc	r1, r23
    130a:	18 06       	cpc	r1, r24
    130c:	09 06       	cpc	r0, r25
    130e:	08 95       	ret

00001310 <__fp_pscB>:
    1310:	00 24       	eor	r0, r0
    1312:	0a 94       	dec	r0
    1314:	12 16       	cp	r1, r18
    1316:	13 06       	cpc	r1, r19
    1318:	14 06       	cpc	r1, r20
    131a:	05 06       	cpc	r0, r21
    131c:	08 95       	ret

0000131e <__fp_round>:
    131e:	09 2e       	mov	r0, r25
    1320:	03 94       	inc	r0
    1322:	00 0c       	add	r0, r0
    1324:	11 f4       	brne	.+4      	; 0x132a <__fp_round+0xc>
    1326:	88 23       	and	r24, r24
    1328:	52 f0       	brmi	.+20     	; 0x133e <__fp_round+0x20>
    132a:	bb 0f       	add	r27, r27
    132c:	40 f4       	brcc	.+16     	; 0x133e <__fp_round+0x20>
    132e:	bf 2b       	or	r27, r31
    1330:	11 f4       	brne	.+4      	; 0x1336 <__fp_round+0x18>
    1332:	60 ff       	sbrs	r22, 0
    1334:	04 c0       	rjmp	.+8      	; 0x133e <__fp_round+0x20>
    1336:	6f 5f       	subi	r22, 0xFF	; 255
    1338:	7f 4f       	sbci	r23, 0xFF	; 255
    133a:	8f 4f       	sbci	r24, 0xFF	; 255
    133c:	9f 4f       	sbci	r25, 0xFF	; 255
    133e:	08 95       	ret

00001340 <__fp_split3>:
    1340:	57 fd       	sbrc	r21, 7
    1342:	90 58       	subi	r25, 0x80	; 128
    1344:	44 0f       	add	r20, r20
    1346:	55 1f       	adc	r21, r21
    1348:	59 f0       	breq	.+22     	; 0x1360 <__fp_splitA+0x10>
    134a:	5f 3f       	cpi	r21, 0xFF	; 255
    134c:	71 f0       	breq	.+28     	; 0x136a <__fp_splitA+0x1a>
    134e:	47 95       	ror	r20

00001350 <__fp_splitA>:
    1350:	88 0f       	add	r24, r24
    1352:	97 fb       	bst	r25, 7
    1354:	99 1f       	adc	r25, r25
    1356:	61 f0       	breq	.+24     	; 0x1370 <__fp_splitA+0x20>
    1358:	9f 3f       	cpi	r25, 0xFF	; 255
    135a:	79 f0       	breq	.+30     	; 0x137a <__fp_splitA+0x2a>
    135c:	87 95       	ror	r24
    135e:	08 95       	ret
    1360:	12 16       	cp	r1, r18
    1362:	13 06       	cpc	r1, r19
    1364:	14 06       	cpc	r1, r20
    1366:	55 1f       	adc	r21, r21
    1368:	f2 cf       	rjmp	.-28     	; 0x134e <__fp_split3+0xe>
    136a:	46 95       	lsr	r20
    136c:	f1 df       	rcall	.-30     	; 0x1350 <__fp_splitA>
    136e:	08 c0       	rjmp	.+16     	; 0x1380 <__fp_splitA+0x30>
    1370:	16 16       	cp	r1, r22
    1372:	17 06       	cpc	r1, r23
    1374:	18 06       	cpc	r1, r24
    1376:	99 1f       	adc	r25, r25
    1378:	f1 cf       	rjmp	.-30     	; 0x135c <__fp_splitA+0xc>
    137a:	86 95       	lsr	r24
    137c:	71 05       	cpc	r23, r1
    137e:	61 05       	cpc	r22, r1
    1380:	08 94       	sec
    1382:	08 95       	ret

00001384 <__fp_zero>:
    1384:	e8 94       	clt

00001386 <__fp_szero>:
    1386:	bb 27       	eor	r27, r27
    1388:	66 27       	eor	r22, r22
    138a:	77 27       	eor	r23, r23
    138c:	cb 01       	movw	r24, r22
    138e:	97 f9       	bld	r25, 7
    1390:	08 95       	ret

00001392 <__mulsf3>:
    1392:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__mulsf3x>
    1396:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__fp_round>
    139a:	0e 94 81 09 	call	0x1302	; 0x1302 <__fp_pscA>
    139e:	38 f0       	brcs	.+14     	; 0x13ae <__mulsf3+0x1c>
    13a0:	0e 94 88 09 	call	0x1310	; 0x1310 <__fp_pscB>
    13a4:	20 f0       	brcs	.+8      	; 0x13ae <__mulsf3+0x1c>
    13a6:	95 23       	and	r25, r21
    13a8:	11 f0       	breq	.+4      	; 0x13ae <__mulsf3+0x1c>
    13aa:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <__fp_inf>
    13ae:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__fp_nan>
    13b2:	11 24       	eor	r1, r1
    13b4:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__fp_szero>

000013b8 <__mulsf3x>:
    13b8:	0e 94 a0 09 	call	0x1340	; 0x1340 <__fp_split3>
    13bc:	70 f3       	brcs	.-36     	; 0x139a <__mulsf3+0x8>

000013be <__mulsf3_pse>:
    13be:	95 9f       	mul	r25, r21
    13c0:	c1 f3       	breq	.-16     	; 0x13b2 <__mulsf3+0x20>
    13c2:	95 0f       	add	r25, r21
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	55 1f       	adc	r21, r21
    13c8:	62 9f       	mul	r22, r18
    13ca:	f0 01       	movw	r30, r0
    13cc:	72 9f       	mul	r23, r18
    13ce:	bb 27       	eor	r27, r27
    13d0:	f0 0d       	add	r31, r0
    13d2:	b1 1d       	adc	r27, r1
    13d4:	63 9f       	mul	r22, r19
    13d6:	aa 27       	eor	r26, r26
    13d8:	f0 0d       	add	r31, r0
    13da:	b1 1d       	adc	r27, r1
    13dc:	aa 1f       	adc	r26, r26
    13de:	64 9f       	mul	r22, r20
    13e0:	66 27       	eor	r22, r22
    13e2:	b0 0d       	add	r27, r0
    13e4:	a1 1d       	adc	r26, r1
    13e6:	66 1f       	adc	r22, r22
    13e8:	82 9f       	mul	r24, r18
    13ea:	22 27       	eor	r18, r18
    13ec:	b0 0d       	add	r27, r0
    13ee:	a1 1d       	adc	r26, r1
    13f0:	62 1f       	adc	r22, r18
    13f2:	73 9f       	mul	r23, r19
    13f4:	b0 0d       	add	r27, r0
    13f6:	a1 1d       	adc	r26, r1
    13f8:	62 1f       	adc	r22, r18
    13fa:	83 9f       	mul	r24, r19
    13fc:	a0 0d       	add	r26, r0
    13fe:	61 1d       	adc	r22, r1
    1400:	22 1f       	adc	r18, r18
    1402:	74 9f       	mul	r23, r20
    1404:	33 27       	eor	r19, r19
    1406:	a0 0d       	add	r26, r0
    1408:	61 1d       	adc	r22, r1
    140a:	23 1f       	adc	r18, r19
    140c:	84 9f       	mul	r24, r20
    140e:	60 0d       	add	r22, r0
    1410:	21 1d       	adc	r18, r1
    1412:	82 2f       	mov	r24, r18
    1414:	76 2f       	mov	r23, r22
    1416:	6a 2f       	mov	r22, r26
    1418:	11 24       	eor	r1, r1
    141a:	9f 57       	subi	r25, 0x7F	; 127
    141c:	50 40       	sbci	r21, 0x00	; 0
    141e:	9a f0       	brmi	.+38     	; 0x1446 <__mulsf3_pse+0x88>
    1420:	f1 f0       	breq	.+60     	; 0x145e <__mulsf3_pse+0xa0>
    1422:	88 23       	and	r24, r24
    1424:	4a f0       	brmi	.+18     	; 0x1438 <__mulsf3_pse+0x7a>
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	bb 1f       	adc	r27, r27
    142c:	66 1f       	adc	r22, r22
    142e:	77 1f       	adc	r23, r23
    1430:	88 1f       	adc	r24, r24
    1432:	91 50       	subi	r25, 0x01	; 1
    1434:	50 40       	sbci	r21, 0x00	; 0
    1436:	a9 f7       	brne	.-22     	; 0x1422 <__mulsf3_pse+0x64>
    1438:	9e 3f       	cpi	r25, 0xFE	; 254
    143a:	51 05       	cpc	r21, r1
    143c:	80 f0       	brcs	.+32     	; 0x145e <__mulsf3_pse+0xa0>
    143e:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <__fp_inf>
    1442:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__fp_szero>
    1446:	5f 3f       	cpi	r21, 0xFF	; 255
    1448:	e4 f3       	brlt	.-8      	; 0x1442 <__mulsf3_pse+0x84>
    144a:	98 3e       	cpi	r25, 0xE8	; 232
    144c:	d4 f3       	brlt	.-12     	; 0x1442 <__mulsf3_pse+0x84>
    144e:	86 95       	lsr	r24
    1450:	77 95       	ror	r23
    1452:	67 95       	ror	r22
    1454:	b7 95       	ror	r27
    1456:	f7 95       	ror	r31
    1458:	e7 95       	ror	r30
    145a:	9f 5f       	subi	r25, 0xFF	; 255
    145c:	c1 f7       	brne	.-16     	; 0x144e <__mulsf3_pse+0x90>
    145e:	fe 2b       	or	r31, r30
    1460:	88 0f       	add	r24, r24
    1462:	91 1d       	adc	r25, r1
    1464:	96 95       	lsr	r25
    1466:	87 95       	ror	r24
    1468:	97 f9       	bld	r25, 7
    146a:	08 95       	ret

0000146c <__itoa_ncheck>:
    146c:	bb 27       	eor	r27, r27
    146e:	4a 30       	cpi	r20, 0x0A	; 10
    1470:	31 f4       	brne	.+12     	; 0x147e <__itoa_ncheck+0x12>
    1472:	99 23       	and	r25, r25
    1474:	22 f4       	brpl	.+8      	; 0x147e <__itoa_ncheck+0x12>
    1476:	bd e2       	ldi	r27, 0x2D	; 45
    1478:	90 95       	com	r25
    147a:	81 95       	neg	r24
    147c:	9f 4f       	sbci	r25, 0xFF	; 255
    147e:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__utoa_common>

00001482 <__utoa_ncheck>:
    1482:	bb 27       	eor	r27, r27

00001484 <__utoa_common>:
    1484:	fb 01       	movw	r30, r22
    1486:	55 27       	eor	r21, r21
    1488:	aa 27       	eor	r26, r26
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	aa 1f       	adc	r26, r26
    1490:	a4 17       	cp	r26, r20
    1492:	10 f0       	brcs	.+4      	; 0x1498 <__utoa_common+0x14>
    1494:	a4 1b       	sub	r26, r20
    1496:	83 95       	inc	r24
    1498:	50 51       	subi	r21, 0x10	; 16
    149a:	b9 f7       	brne	.-18     	; 0x148a <__utoa_common+0x6>
    149c:	a0 5d       	subi	r26, 0xD0	; 208
    149e:	aa 33       	cpi	r26, 0x3A	; 58
    14a0:	08 f0       	brcs	.+2      	; 0x14a4 <__utoa_common+0x20>
    14a2:	a9 5d       	subi	r26, 0xD9	; 217
    14a4:	a1 93       	st	Z+, r26
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	79 f7       	brne	.-34     	; 0x1488 <__utoa_common+0x4>
    14aa:	b1 11       	cpse	r27, r1
    14ac:	b1 93       	st	Z+, r27
    14ae:	11 92       	st	Z+, r1
    14b0:	cb 01       	movw	r24, r22
    14b2:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <strrev>

000014b6 <strrev>:
    14b6:	dc 01       	movw	r26, r24
    14b8:	fc 01       	movw	r30, r24
    14ba:	67 2f       	mov	r22, r23
    14bc:	71 91       	ld	r23, Z+
    14be:	77 23       	and	r23, r23
    14c0:	e1 f7       	brne	.-8      	; 0x14ba <strrev+0x4>
    14c2:	32 97       	sbiw	r30, 0x02	; 2
    14c4:	04 c0       	rjmp	.+8      	; 0x14ce <strrev+0x18>
    14c6:	7c 91       	ld	r23, X
    14c8:	6d 93       	st	X+, r22
    14ca:	70 83       	st	Z, r23
    14cc:	62 91       	ld	r22, -Z
    14ce:	ae 17       	cp	r26, r30
    14d0:	bf 07       	cpc	r27, r31
    14d2:	c8 f3       	brcs	.-14     	; 0x14c6 <strrev+0x10>
    14d4:	08 95       	ret

000014d6 <_exit>:
    14d6:	f8 94       	cli

000014d8 <__stop_program>:
    14d8:	ff cf       	rjmp	.-2      	; 0x14d8 <__stop_program>
