
ITI_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  000010cc  00001160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  008000e0  008000e0  000011e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000273d  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e6d  00000000  00000000  00003c81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019ab  00000000  00000000  00004aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000760  00000000  00000000  0000649c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ffb  00000000  00000000  00006bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014fd  00000000  00000000  00007bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  000090f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__vector_1>
       8:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__vector_2>
       c:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__vector_10>
      2c:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3f       	cpi	r26, 0xF7	; 247
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bb 01 	call	0x376	; 0x376 <main>
      8a:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TempSensor>:
	}

}

void TempSensor(void){
	u8 Temp = ADC_u8StartConversion(0);
      92:	80 e0       	ldi	r24, 0x00	; 0
      94:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <ADC_u8StartConversion>
	 * LM35 Temperature Sensor Vout Calculations with connection applied in proteus:
	 * Vout = 10 mV/C
	 * 25 C ===> (10*(10^-3)*25*2^8) / 5 = 12.8
	 * 35 C ===> (10*(10^-3)*35*2^8) / 5 = 17.9
	 */
	if(Temp>=18){
      98:	82 31       	cpi	r24, 0x12	; 18
      9a:	58 f0       	brcs	.+22     	; 0xb2 <TempSensor+0x20>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
      9c:	41 e0       	ldi	r20, 0x01	; 1
      9e:	66 e0       	ldi	r22, 0x06	; 6
      a0:	83 e0       	ldi	r24, 0x03	; 3
      a2:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	67 e0       	ldi	r22, 0x07	; 7
      aa:	83 e0       	ldi	r24, 0x03	; 3
      ac:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
      b0:	08 95       	ret
	}
	else if (Temp>=13){
      b2:	8d 30       	cpi	r24, 0x0D	; 13
      b4:	58 f0       	brcs	.+22     	; 0xcc <TempSensor+0x3a>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	66 e0       	ldi	r22, 0x06	; 6
      ba:	83 e0       	ldi	r24, 0x03	; 3
      bc:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH);
      c0:	41 e0       	ldi	r20, 0x01	; 1
      c2:	67 e0       	ldi	r22, 0x07	; 7
      c4:	83 e0       	ldi	r24, 0x03	; 3
      c6:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
      ca:	08 95       	ret
	}
	else{
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
      cc:	40 e0       	ldi	r20, 0x00	; 0
      ce:	66 e0       	ldi	r22, 0x06	; 6
      d0:	83 e0       	ldi	r24, 0x03	; 3
      d2:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
      d6:	40 e0       	ldi	r20, 0x00	; 0
      d8:	67 e0       	ldi	r22, 0x07	; 7
      da:	83 e0       	ldi	r24, 0x03	; 3
      dc:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
      e0:	08 95       	ret

000000e2 <void_SetEPROMLockerPass>:
	
	
}
void void_SetEPROMLockerPass(void ){
	
	Global_u8SavedDoorPassLowByte=(u8)Global_u16EPROMDoorPass;
      e2:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <Global_u16EPROMDoorPass>
      e6:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <Global_u16EPROMDoorPass+0x1>
      ea:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <Global_u8SavedDoorPassLowByte>
	
	Global_u8SavedDoorPassHighByte=(u8)(Global_u16EPROMDoorPass>>8);
      ee:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <Global_u8SavedDoorPassHighByte>
	EEPROM_voidSendDataByte(Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
      f2:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
      f6:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
      fa:	0e 94 0c 02 	call	0x418	; 0x418 <EEPROM_voidSendDataByte>
	TIMER_delay_ms(300);
      fe:	6c e2       	ldi	r22, 0x2C	; 44
     100:	71 e0       	ldi	r23, 0x01	; 1
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	0e 94 30 05 	call	0xa60	; 0xa60 <TIMER_delay_ms>
	
	EEPROM_voidSendDataByte(Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
     10a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     10e:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     112:	66 5f       	subi	r22, 0xF6	; 246
     114:	7f 4f       	sbci	r23, 0xFF	; 255
     116:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <Global_u8SavedDoorPassHighByte>
     11a:	0e 94 0c 02 	call	0x418	; 0x418 <EEPROM_voidSendDataByte>
	TIMER_delay_ms(300);
     11e:	6c e2       	ldi	r22, 0x2C	; 44
     120:	71 e0       	ldi	r23, 0x01	; 1
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 30 05 	call	0xa60	; 0xa60 <TIMER_delay_ms>
     12a:	08 95       	ret

0000012c <void_Locker>:
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
	}
}

void void_Locker(){
     12c:	cf 93       	push	r28
	/*To set new pass enter your old pass and press clear*/
	/* max password digits is 4*/
	
	// pressed key
	u8 Local_u8Keypad_Key=KPD_u8GetPressedKey();
     12e:	0e 94 8a 02 	call	0x514	; 0x514 <KPD_u8GetPressedKey>
     132:	c8 2f       	mov	r28, r24
	/* case user entered clear */
		/* two cases to enter clear
		* First : To set new pass
		* Second : clear screen and clear the entered password 
		*/
	if(Local_u8Keypad_Key==KPD_CLEAR){
     134:	8d 30       	cpi	r24, 0x0D	; 13
     136:	09 f0       	breq	.+2      	; 0x13a <void_Locker+0xe>
     138:	84 c0       	rjmp	.+264    	; 0x242 <void_Locker+0x116>
		
		// First case : set new pass
		if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
     13a:	20 91 e3 00 	lds	r18, 0x00E3	; 0x8000e3 <Local_u16DoorPassword.1916>
     13e:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <Local_u16DoorPassword.1916+0x1>
     142:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <Global_u16EPROMDoorPass>
     146:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <Global_u16EPROMDoorPass+0x1>
     14a:	28 17       	cp	r18, r24
     14c:	39 07       	cpc	r19, r25
     14e:	09 f0       	breq	.+2      	; 0x152 <void_Locker+0x26>
     150:	6d c0       	rjmp	.+218    	; 0x22c <void_Locker+0x100>
			
			LCD_voidClearDisplay();
     152:	0e 94 84 03 	call	0x708	; 0x708 <LCD_voidClearDisplay>
			// setting new password
				// clear all saved passes and digit counter
				Global_u16EPROMDoorPass=0;
     156:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <Global_u16EPROMDoorPass+0x1>
     15a:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <Global_u16EPROMDoorPass>
				Local_u16DoorPassword=0;
     15e:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <Local_u16DoorPassword.1916+0x1>
     162:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <Local_u16DoorPassword.1916>
				Local_u8DigitsCount=0;
     166:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <Local_u8DigitsCount.1917+0x1>
     16a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <Local_u8DigitsCount.1917>
				
				LCD_voidSendString("Set new pass:");
     16e:	8e e6       	ldi	r24, 0x6E	; 110
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 91 03 	call	0x722	; 0x722 <LCD_voidSendString>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				while(Local_u8Keypad_Key != KPD_ENTER ){
					
					Local_u8Keypad_Key=KPD_u8GetPressedKey();
     176:	0e 94 8a 02 	call	0x514	; 0x514 <KPD_u8GetPressedKey>
     17a:	c8 2f       	mov	r28, r24
					// check if the user entered more than 4 digits
					if(Local_u8DigitsCount==Max_Pass_Digits+1){
     17c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <Local_u8DigitsCount.1917>
     180:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <Local_u8DigitsCount.1917+0x1>
     184:	05 97       	sbiw	r24, 0x05	; 5
     186:	b1 f4       	brne	.+44     	; 0x1b4 <void_Locker+0x88>
						LCD_voidClearDisplay();
     188:	0e 94 84 03 	call	0x708	; 0x708 <LCD_voidClearDisplay>
						LCD_voidSendString("ERROR !!!!");
     18c:	8c e7       	ldi	r24, 0x7C	; 124
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 91 03 	call	0x722	; 0x722 <LCD_voidSendString>
						LCD_voidGoTOXY(1,0);
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	0e 94 88 03 	call	0x710	; 0x710 <LCD_voidGoTOXY>
						LCD_voidSendString("Max Digits is 4");
     19c:	87 e8       	ldi	r24, 0x87	; 135
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 91 03 	call	0x722	; 0x722 <LCD_voidSendString>
						Local_u8DigitsCount=0;
     1a4:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <Local_u8DigitsCount.1917+0x1>
     1a8:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <Local_u8DigitsCount.1917>
						Global_u16EPROMDoorPass=0;
     1ac:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <Global_u16EPROMDoorPass+0x1>
     1b0:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <Global_u16EPROMDoorPass>
					}
					
					if(Local_u8Keypad_Key==KPD_CLEAR){
     1b4:	cd 30       	cpi	r28, 0x0D	; 13
     1b6:	59 f4       	brne	.+22     	; 0x1ce <void_Locker+0xa2>
						Local_u8DigitsCount=0;
     1b8:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <Local_u8DigitsCount.1917+0x1>
     1bc:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <Local_u8DigitsCount.1917>
						LCD_voidClearDisplay();
     1c0:	0e 94 84 03 	call	0x708	; 0x708 <LCD_voidClearDisplay>
						Global_u16EPROMDoorPass=0;
     1c4:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <Global_u16EPROMDoorPass+0x1>
     1c8:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <Global_u16EPROMDoorPass>
     1cc:	d4 cf       	rjmp	.-88     	; 0x176 <void_Locker+0x4a>
					
					}
					else if(Local_u8Keypad_Key !=KPD_NO_PRESS && Local_u8Keypad_Key!=KPD_ENTER){
     1ce:	ca 3a       	cpi	r28, 0xAA	; 170
     1d0:	91 f2       	breq	.-92     	; 0x176 <void_Locker+0x4a>
     1d2:	cc 30       	cpi	r28, 0x0C	; 12
     1d4:	09 f4       	brne	.+2      	; 0x1d8 <void_Locker+0xac>
     1d6:	96 c0       	rjmp	.+300    	; 0x304 <void_Locker+0x1d8>
						// if it is the first digit that user enter --> clear any previous message on the screen
						if(Local_u8DigitsCount==0)
     1d8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <Local_u8DigitsCount.1917>
     1dc:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <Local_u8DigitsCount.1917+0x1>
     1e0:	89 2b       	or	r24, r25
     1e2:	11 f4       	brne	.+4      	; 0x1e8 <void_Locker+0xbc>
							LCD_voidClearDisplay();
     1e4:	0e 94 84 03 	call	0x708	; 0x708 <LCD_voidClearDisplay>
						LCD_voidSendData('*');
     1e8:	8a e2       	ldi	r24, 0x2A	; 42
     1ea:	0e 94 17 03 	call	0x62e	; 0x62e <LCD_voidSendData>
						Local_u8DigitsCount++;
     1ee:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <Local_u8DigitsCount.1917>
     1f2:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <Local_u8DigitsCount.1917+0x1>
     1f6:	01 96       	adiw	r24, 0x01	; 1
     1f8:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <Local_u8DigitsCount.1917+0x1>
     1fc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <Local_u8DigitsCount.1917>
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
     200:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <Global_u16EPROMDoorPass>
     204:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <Global_u16EPROMDoorPass+0x1>
     208:	9c 01       	movw	r18, r24
     20a:	22 0f       	add	r18, r18
     20c:	33 1f       	adc	r19, r19
     20e:	88 0f       	add	r24, r24
     210:	99 1f       	adc	r25, r25
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	88 0f       	add	r24, r24
     218:	99 1f       	adc	r25, r25
     21a:	82 0f       	add	r24, r18
     21c:	93 1f       	adc	r25, r19
     21e:	8c 0f       	add	r24, r28
     220:	91 1d       	adc	r25, r1
     222:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <Global_u16EPROMDoorPass+0x1>
     226:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <Global_u16EPROMDoorPass>
     22a:	a5 cf       	rjmp	.-182    	; 0x176 <void_Locker+0x4a>
				
		}
		
		// Second case : to clear Screen or typed password
		else{
		LCD_voidClearDisplay();
     22c:	0e 94 84 03 	call	0x708	; 0x708 <LCD_voidClearDisplay>
		Local_u16DoorPassword=0;
     230:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <Local_u16DoorPassword.1916+0x1>
     234:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <Local_u16DoorPassword.1916>
		Local_u8DigitsCount=0;
     238:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <Local_u8DigitsCount.1917+0x1>
     23c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <Local_u8DigitsCount.1917>
     240:	6d c0       	rjmp	.+218    	; 0x31c <void_Locker+0x1f0>
		
		}
	}
	/******************************************************************************************************************************************************************/
	/* case user pressed enter or equal */
	else if(Local_u8Keypad_Key==KPD_ENTER){
     242:	8c 30       	cpi	r24, 0x0C	; 12
     244:	99 f5       	brne	.+102    	; 0x2ac <void_Locker+0x180>
		
		LCD_voidClearDisplay();
     246:	0e 94 84 03 	call	0x708	; 0x708 <LCD_voidClearDisplay>
		// check if entered pass is correct
		 if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
     24a:	20 91 e3 00 	lds	r18, 0x00E3	; 0x8000e3 <Local_u16DoorPassword.1916>
     24e:	30 91 e4 00 	lds	r19, 0x00E4	; 0x8000e4 <Local_u16DoorPassword.1916+0x1>
     252:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <Global_u16EPROMDoorPass>
     256:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <Global_u16EPROMDoorPass+0x1>
     25a:	28 17       	cp	r18, r24
     25c:	39 07       	cpc	r19, r25
     25e:	c9 f4       	brne	.+50     	; 0x292 <void_Locker+0x166>
			// check door status
			if(Local_u8DoorStatus==0){
     260:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
     264:	81 11       	cpse	r24, r1
     266:	0b c0       	rjmp	.+22     	; 0x27e <void_Locker+0x152>
				LCD_voidSendString("Door is opened");
     268:	87 e9       	ldi	r24, 0x97	; 151
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 91 03 	call	0x722	; 0x722 <LCD_voidSendString>
				// run servo
				Servo_VoidDegree(180);
     270:	84 eb       	ldi	r24, 0xB4	; 180
     272:	0e 94 cf 03 	call	0x79e	; 0x79e <Servo_VoidDegree>
				Local_u8DoorStatus=1;
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
     27c:	0e c0       	rjmp	.+28     	; 0x29a <void_Locker+0x16e>
				
			}
			else{
				LCD_voidSendString("Door is Closed");
     27e:	86 ea       	ldi	r24, 0xA6	; 166
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 91 03 	call	0x722	; 0x722 <LCD_voidSendString>
				// stop servo 
				Servo_VoidDegree(0);
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	0e 94 cf 03 	call	0x79e	; 0x79e <Servo_VoidDegree>
				Local_u8DoorStatus=0;
     28c:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__data_end>
     290:	04 c0       	rjmp	.+8      	; 0x29a <void_Locker+0x16e>
				
			}
			
		}
		else
			LCD_voidSendString("Wrong password !");
     292:	85 eb       	ldi	r24, 0xB5	; 181
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 91 03 	call	0x722	; 0x722 <LCD_voidSendString>
			
			// reset the entered password after typing enter 
			Local_u16DoorPassword=0;
     29a:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <Local_u16DoorPassword.1916+0x1>
     29e:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <Local_u16DoorPassword.1916>
			Local_u8DigitsCount=0;
     2a2:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <Local_u8DigitsCount.1917+0x1>
     2a6:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <Local_u8DigitsCount.1917>
     2aa:	38 c0       	rjmp	.+112    	; 0x31c <void_Locker+0x1f0>
	}
	
	/****************************************************************************************************************************************************************/
	/* Case user pressed a digit key*/
	else if(Local_u8Keypad_Key != KPD_NO_PRESS){
     2ac:	8a 3a       	cpi	r24, 0xAA	; 170
     2ae:	b1 f1       	breq	.+108    	; 0x31c <void_Locker+0x1f0>
		// if it is the first digit that user enter --> clear any previous message on the screen
		if(Local_u8DigitsCount==0)
     2b0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <Local_u8DigitsCount.1917>
     2b4:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <Local_u8DigitsCount.1917+0x1>
     2b8:	89 2b       	or	r24, r25
     2ba:	11 f4       	brne	.+4      	; 0x2c0 <void_Locker+0x194>
			LCD_voidClearDisplay();
     2bc:	0e 94 84 03 	call	0x708	; 0x708 <LCD_voidClearDisplay>
			
		LCD_voidSendData('*');
     2c0:	8a e2       	ldi	r24, 0x2A	; 42
     2c2:	0e 94 17 03 	call	0x62e	; 0x62e <LCD_voidSendData>
		
		Local_u8DigitsCount++;
     2c6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <Local_u8DigitsCount.1917>
     2ca:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <Local_u8DigitsCount.1917+0x1>
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <Local_u8DigitsCount.1917+0x1>
     2d4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <Local_u8DigitsCount.1917>
		Local_u16DoorPassword=Local_u16DoorPassword*10 + Local_u8Keypad_Key;
     2d8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <Local_u16DoorPassword.1916>
     2dc:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <Local_u16DoorPassword.1916+0x1>
     2e0:	9c 01       	movw	r18, r24
     2e2:	22 0f       	add	r18, r18
     2e4:	33 1f       	adc	r19, r19
     2e6:	88 0f       	add	r24, r24
     2e8:	99 1f       	adc	r25, r25
     2ea:	88 0f       	add	r24, r24
     2ec:	99 1f       	adc	r25, r25
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	82 0f       	add	r24, r18
     2f4:	93 1f       	adc	r25, r19
     2f6:	8c 0f       	add	r24, r28
     2f8:	91 1d       	adc	r25, r1
     2fa:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <Local_u16DoorPassword.1916+0x1>
     2fe:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <Local_u16DoorPassword.1916>
		
		
	}
	
	
}
     302:	0c c0       	rjmp	.+24     	; 0x31c <void_Locker+0x1f0>
						Local_u8DigitsCount++;
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
					}
					
				}
				LCD_voidClearDisplay();
     304:	0e 94 84 03 	call	0x708	; 0x708 <LCD_voidClearDisplay>
				LCD_voidSendString("pass is updated");
     308:	86 ec       	ldi	r24, 0xC6	; 198
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 91 03 	call	0x722	; 0x722 <LCD_voidSendString>
				// reset counter
				Local_u8DigitsCount=0;
     310:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <Local_u8DigitsCount.1917+0x1>
     314:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <Local_u8DigitsCount.1917>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				// save the new pass to eeprom
				void_SetEPROMLockerPass();
     318:	0e 94 71 00 	call	0xe2	; 0xe2 <void_SetEPROMLockerPass>
		
		
	}
	
	
}
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret

00000320 <void_GetEPROMLockerPass>:
	
}
void void_GetEPROMLockerPass(void){
	
	// read pass low byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
     320:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     324:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     328:	86 ef       	ldi	r24, 0xF6	; 246
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 24 02 	call	0x448	; 0x448 <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
     330:	6c e2       	ldi	r22, 0x2C	; 44
     332:	71 e0       	ldi	r23, 0x01	; 1
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 30 05 	call	0xa60	; 0xa60 <TIMER_delay_ms>
	// read pass high byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
     33c:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     340:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     344:	66 5f       	subi	r22, 0xF6	; 246
     346:	7f 4f       	sbci	r23, 0xFF	; 255
     348:	83 ef       	ldi	r24, 0xF3	; 243
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 24 02 	call	0x448	; 0x448 <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
     350:	6c e2       	ldi	r22, 0x2C	; 44
     352:	71 e0       	ldi	r23, 0x01	; 1
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 30 05 	call	0xa60	; 0xa60 <TIMER_delay_ms>
	// combine the high and low byte
	Global_u16EPROMDoorPass= ( (u16)(Global_u8SavedDoorPassHighByte<<8) )| Global_u8SavedDoorPassLowByte;
     35c:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <Global_u8SavedDoorPassHighByte>
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	98 2f       	mov	r25, r24
     364:	88 27       	eor	r24, r24
     366:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <Global_u8SavedDoorPassLowByte>
     36a:	82 2b       	or	r24, r18
     36c:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <Global_u16EPROMDoorPass+0x1>
     370:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <Global_u16EPROMDoorPass>
     374:	08 95       	ret

00000376 <main>:
void TempSensor(void);
void void_Locker(void);
void void_SetEPROMLockerPass(void);
void void_GetEPROMLockerPass(void);
void main(void)
{	
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	1f 92       	push	r1
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16EPROMSystemStateAddress=5;
	u8 Local_u8EPROMSystemState=0;
     380:	19 82       	std	Y+1, r1	; 0x01
	ADC_voidInit();
     382:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_OUTPUT);
     386:	41 e0       	ldi	r20, 0x01	; 1
     388:	66 e0       	ldi	r22, 0x06	; 6
     38a:	83 e0       	ldi	r24, 0x03	; 3
     38c:	0e 94 08 04 	call	0x810	; 0x810 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_OUTPUT);
     390:	41 e0       	ldi	r20, 0x01	; 1
     392:	67 e0       	ldi	r22, 0x07	; 7
     394:	83 e0       	ldi	r24, 0x03	; 3
     396:	0e 94 08 04 	call	0x810	; 0x810 <DIO_voidSetPinDirection>
	
	LCD_voidInit();
     39a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_voidInit>
	KPD_voidInit();
     39e:	0e 94 43 02 	call	0x486	; 0x486 <KPD_voidInit>
	//servo pin
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
     3a2:	41 e0       	ldi	r20, 0x01	; 1
     3a4:	65 e0       	ldi	r22, 0x05	; 5
     3a6:	83 e0       	ldi	r24, 0x03	; 3
     3a8:	0e 94 08 04 	call	0x810	; 0x810 <DIO_voidSetPinDirection>
	Servo_VoidInit();
     3ac:	0e 94 c6 03 	call	0x78c	; 0x78c <Servo_VoidInit>
	
	TWI_voidMasterInit(0);
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	0e 94 2a 06 	call	0xc54	; 0xc54 <TWI_voidMasterInit>
	
	/*Read system state form EPROM to check if this is the first time to run the project*/
	EEPROM_voidReadDataByte(&Local_u8EPROMSystemState,Local_u16EPROMSystemStateAddress);
     3b6:	65 e0       	ldi	r22, 0x05	; 5
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	ce 01       	movw	r24, r28
     3bc:	01 96       	adiw	r24, 0x01	; 1
     3be:	0e 94 24 02 	call	0x448	; 0x448 <EEPROM_voidReadDataByte>
	if(Local_u8EPROMSystemState !=SystemHasRunBefore){
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
     3c4:	8c 31       	cpi	r24, 0x1C	; 28
     3c6:	c9 f0       	breq	.+50     	; 0x3fa <main+0x84>
		LCD_voidSendString("First Run");
     3c8:	86 ed       	ldi	r24, 0xD6	; 214
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 91 03 	call	0x722	; 0x722 <LCD_voidSendString>
		// save the system state as has run before
		Local_u8EPROMSystemState=SystemHasRunBefore;
     3d0:	8c e1       	ldi	r24, 0x1C	; 28
     3d2:	89 83       	std	Y+1, r24	; 0x01
		// save initial password = 100
		Global_u16EPROMDoorPass=1234;
     3d4:	82 ed       	ldi	r24, 0xD2	; 210
     3d6:	94 e0       	ldi	r25, 0x04	; 4
     3d8:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <Global_u16EPROMDoorPass+0x1>
     3dc:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <Global_u16EPROMDoorPass>
		void_SetEPROMLockerPass();
     3e0:	0e 94 71 00 	call	0xe2	; 0xe2 <void_SetEPROMLockerPass>
		// save the system state to eprom
		EEPROM_voidSendDataByte(Local_u8EPROMSystemState,Local_u16EPROMSystemStateAddress);
     3e4:	65 e0       	ldi	r22, 0x05	; 5
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	89 81       	ldd	r24, Y+1	; 0x01
     3ea:	0e 94 0c 02 	call	0x418	; 0x418 <EEPROM_voidSendDataByte>
		TIMER_delay_ms(300);
     3ee:	6c e2       	ldi	r22, 0x2C	; 44
     3f0:	71 e0       	ldi	r23, 0x01	; 1
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 30 05 	call	0xa60	; 0xa60 <TIMER_delay_ms>
	}
	
	// get the saved password and store it the global EPROM_variable
	void_GetEPROMLockerPass();
     3fa:	0e 94 90 01 	call	0x320	; 0x320 <void_GetEPROMLockerPass>
	
	LCD_voidSendNumber(Global_u16EPROMDoorPass);
     3fe:	60 91 f4 00 	lds	r22, 0x00F4	; 0x8000f4 <Global_u16EPROMDoorPass>
     402:	70 91 f5 00 	lds	r23, 0x00F5	; 0x8000f5 <Global_u16EPROMDoorPass+0x1>
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_voidSendNumber>
	while(1){
		
		void_Locker();
     40e:	0e 94 96 00 	call	0x12c	; 0x12c <void_Locker>
		TempSensor();
     412:	0e 94 49 00 	call	0x92	; 0x92 <TempSensor>
     416:	fb cf       	rjmp	.-10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>

00000418 <EEPROM_voidSendDataByte>:

#include "../../MCAL/TWI_Driver/TWI_interface.h"
#include "EPROM_interface.h"

void EEPROM_voidSendDataByte(u8 Copy_u8DataByte,u16 Copy_u16LocationAddress)
{	u8 Address = ((0b1010<<3) | (A2<<2) | (Copy_u16LocationAddress>>8));
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	c8 2f       	mov	r28, r24
     420:	d6 2f       	mov	r29, r22
     422:	17 2f       	mov	r17, r23

	TWI_SendStartCondition();
     424:	0e 94 36 06 	call	0xc6c	; 0xc6c <TWI_SendStartCondition>
	TWI_SendSlaveAddressWithWrite(Address);
     428:	81 2f       	mov	r24, r17
     42a:	80 65       	ori	r24, 0x50	; 80
     42c:	0e 94 57 06 	call	0xcae	; 0xcae <TWI_SendSlaveAddressWithWrite>
	//TWI_SendSlaveAddressWithWrite(0b1010000);/**/

	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
     430:	8d 2f       	mov	r24, r29
     432:	0e 94 77 06 	call	0xcee	; 0xcee <TWI_MasterWriteDataByte>
	TWI_MasterWriteDataByte(Copy_u8DataByte);
     436:	8c 2f       	mov	r24, r28
     438:	0e 94 77 06 	call	0xcee	; 0xcee <TWI_MasterWriteDataByte>
	TWI_SendStopCondition();
     43c:	0e 94 95 06 	call	0xd2a	; 0xd2a <TWI_SendStopCondition>
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	08 95       	ret

00000448 <EEPROM_voidReadDataByte>:

void EEPROM_voidReadDataByte(u8 *Copy_u8DataByte,u16 Copy_u16LocationAddress)
{	u8 Address = ((0b1010<<3) | (A2<<2) | (Copy_u16LocationAddress>>8));
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	8c 01       	movw	r16, r24
     452:	d6 2f       	mov	r29, r22
     454:	c7 2f       	mov	r28, r23
     456:	c0 65       	ori	r28, 0x50	; 80
	TWI_SendStartCondition();
     458:	0e 94 36 06 	call	0xc6c	; 0xc6c <TWI_SendStartCondition>
	TWI_SendSlaveAddressWithWrite(Address);
     45c:	8c 2f       	mov	r24, r28
     45e:	0e 94 57 06 	call	0xcae	; 0xcae <TWI_SendSlaveAddressWithWrite>
	//TWI_SendSlaveAddressWithWrite(0b1010000);

	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
     462:	8d 2f       	mov	r24, r29
     464:	0e 94 77 06 	call	0xcee	; 0xcee <TWI_MasterWriteDataByte>

	TWI_SendRepeatedStart();
     468:	0e 94 46 06 	call	0xc8c	; 0xc8c <TWI_SendRepeatedStart>

	//TWI_MasterWriteDataByte(0b10100001);/**/
	TWI_SendSlaveAddressWithRead(Address);
     46c:	8c 2f       	mov	r24, r28
     46e:	0e 94 67 06 	call	0xcce	; 0xcce <TWI_SendSlaveAddressWithRead>
	TWI_MasterReadDataByte(Copy_u8DataByte);
     472:	c8 01       	movw	r24, r16
     474:	0e 94 81 06 	call	0xd02	; 0xd02 <TWI_MasterReadDataByte>
	TWI_SendStopCondition();
     478:	0e 94 95 06 	call	0xd2a	; 0xd2a <TWI_SendStopCondition>
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	08 95       	ret

00000486 <KPD_voidInit>:
			
void KPD_voidInit(){
	
	
	// set col s output high
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL0_PIN,DIO_OUTPUT);
     486:	41 e0       	ldi	r20, 0x01	; 1
     488:	64 e0       	ldi	r22, 0x04	; 4
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	0e 94 08 04 	call	0x810	; 0x810 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL1_PIN,DIO_OUTPUT);
     490:	41 e0       	ldi	r20, 0x01	; 1
     492:	65 e0       	ldi	r22, 0x05	; 5
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	0e 94 08 04 	call	0x810	; 0x810 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL2_PIN,DIO_OUTPUT);
     49a:	41 e0       	ldi	r20, 0x01	; 1
     49c:	66 e0       	ldi	r22, 0x06	; 6
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	0e 94 08 04 	call	0x810	; 0x810 <DIO_voidSetPinDirection>
	//DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL3_PIN,DIO_OUTPUT);

	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL0_PIN,DIO_HIGH);
     4a4:	41 e0       	ldi	r20, 0x01	; 1
     4a6:	64 e0       	ldi	r22, 0x04	; 4
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL1_PIN,DIO_HIGH);
     4ae:	41 e0       	ldi	r20, 0x01	; 1
     4b0:	65 e0       	ldi	r22, 0x05	; 5
     4b2:	82 e0       	ldi	r24, 0x02	; 2
     4b4:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL2_PIN,DIO_HIGH);
     4b8:	41 e0       	ldi	r20, 0x01	; 1
     4ba:	66 e0       	ldi	r22, 0x06	; 6
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL3_PIN,DIO_HIGH);

	// set rows input pull up
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_INPUT);
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	0e 94 08 04 	call	0x810	; 0x810 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_INPUT);
     4cc:	40 e0       	ldi	r20, 0x00	; 0
     4ce:	62 e0       	ldi	r22, 0x02	; 2
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	0e 94 08 04 	call	0x810	; 0x810 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_INPUT);
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	63 e0       	ldi	r22, 0x03	; 3
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	0e 94 08 04 	call	0x810	; 0x810 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_INPUT);
     4e0:	40 e0       	ldi	r20, 0x00	; 0
     4e2:	64 e0       	ldi	r22, 0x04	; 4
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	0e 94 08 04 	call	0x810	; 0x810 <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_HIGH);
     4ea:	41 e0       	ldi	r20, 0x01	; 1
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_HIGH);
     4f4:	41 e0       	ldi	r20, 0x01	; 1
     4f6:	62 e0       	ldi	r22, 0x02	; 2
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_HIGH);
     4fe:	41 e0       	ldi	r20, 0x01	; 1
     500:	63 e0       	ldi	r22, 0x03	; 3
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_HIGH);
     508:	41 e0       	ldi	r20, 0x01	; 1
     50a:	64 e0       	ldi	r22, 0x04	; 4
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
     512:	08 95       	ret

00000514 <KPD_u8GetPressedKey>:

}

u8 KPD_u8GetPressedKey(void){
     514:	4f 92       	push	r4
     516:	5f 92       	push	r5
     518:	6f 92       	push	r6
     51a:	7f 92       	push	r7
     51c:	8f 92       	push	r8
     51e:	9f 92       	push	r9
     520:	af 92       	push	r10
     522:	bf 92       	push	r11
     524:	cf 92       	push	r12
     526:	df 92       	push	r13
     528:	ef 92       	push	r14
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
     538:	63 97       	sbiw	r28, 0x13	; 19
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	f8 94       	cli
     53e:	de bf       	out	0x3e, r29	; 62
     540:	0f be       	out	0x3f, r0	; 63
     542:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8Pressedkey= KPD_NO_PRESS;
	u8 Local_u8RowxValue ;


	u8 Local_u8ColumnsArray[]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN};
     544:	84 e0       	ldi	r24, 0x04	; 4
     546:	89 83       	std	Y+1, r24	; 0x01
     548:	95 e0       	ldi	r25, 0x05	; 5
     54a:	9a 83       	std	Y+2, r25	; 0x02
     54c:	96 e0       	ldi	r25, 0x06	; 6
     54e:	9b 83       	std	Y+3, r25	; 0x03
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	9c 83       	std	Y+4, r25	; 0x04
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	9d 83       	std	Y+5, r25	; 0x05
     558:	93 e0       	ldi	r25, 0x03	; 3
     55a:	9e 83       	std	Y+6, r25	; 0x06
     55c:	8f 83       	std	Y+7, r24	; 0x07

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;
     55e:	8c e0       	ldi	r24, 0x0C	; 12
     560:	e2 e6       	ldi	r30, 0x62	; 98
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	de 01       	movw	r26, r28
     566:	18 96       	adiw	r26, 0x08	; 8
     568:	01 90       	ld	r0, Z+
     56a:	0d 92       	st	X+, r0
     56c:	8a 95       	dec	r24
     56e:	e1 f7       	brne	.-8      	; 0x568 <KPD_u8GetPressedKey+0x54>
     570:	ce 01       	movw	r24, r28
     572:	01 96       	adiw	r24, 0x01	; 1
     574:	4c 01       	movw	r8, r24
     576:	a1 2c       	mov	r10, r1
     578:	b1 2c       	mov	r11, r1


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);
     57a:	35 01       	movw	r6, r10
     57c:	f4 01       	movw	r30, r8
     57e:	41 90       	ld	r4, Z+
     580:	4f 01       	movw	r8, r30
     582:	40 e0       	ldi	r20, 0x00	; 0
     584:	64 2d       	mov	r22, r4
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
     58c:	7e 01       	movw	r14, r28
     58e:	f4 e0       	ldi	r31, 0x04	; 4
     590:	ef 0e       	add	r14, r31
     592:	f1 1c       	adc	r15, r1
     594:	00 e0       	ldi	r16, 0x00	; 0
     596:	10 e0       	ldi	r17, 0x00	; 0

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){

			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
     598:	68 01       	movw	r12, r16
     59a:	f7 01       	movw	r30, r14
     59c:	51 90       	ld	r5, Z+
     59e:	7f 01       	movw	r14, r30
     5a0:	65 2d       	mov	r22, r5
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 84 04 	call	0x908	; 0x908 <DIO_u8GetPinValue>

			if(Local_u8RowxValue==0){
     5a8:	81 11       	cpse	r24, r1
     5aa:	17 c0       	rjmp	.+46     	; 0x5da <KPD_u8GetPressedKey+0xc6>

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
     5ac:	c8 01       	movw	r24, r16
     5ae:	88 0f       	add	r24, r24
     5b0:	99 1f       	adc	r25, r25
     5b2:	c8 0e       	add	r12, r24
     5b4:	d9 1e       	adc	r13, r25
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	8c 0f       	add	r24, r28
     5bc:	9d 1f       	adc	r25, r29
     5be:	c8 0e       	add	r12, r24
     5c0:	d9 1e       	adc	r13, r25
     5c2:	f6 01       	movw	r30, r12
     5c4:	e6 0d       	add	r30, r6
     5c6:	f7 1d       	adc	r31, r7
     5c8:	17 81       	ldd	r17, Z+7	; 0x07
				while(Local_u8RowxValue==0){
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
     5ca:	65 2d       	mov	r22, r5
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	0e 94 84 04 	call	0x908	; 0x908 <DIO_u8GetPinValue>
			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

			if(Local_u8RowxValue==0){

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
				while(Local_u8RowxValue==0){
     5d2:	88 23       	and	r24, r24
     5d4:	d1 f3       	breq	.-12     	; 0x5ca <KPD_u8GetPressedKey+0xb6>
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

				}

				return Local_u8Pressedkey ;
     5d6:	81 2f       	mov	r24, r17
     5d8:	13 c0       	rjmp	.+38     	; 0x600 <KPD_u8GetPressedKey+0xec>
     5da:	0f 5f       	subi	r16, 0xFF	; 255
     5dc:	1f 4f       	sbci	r17, 0xFF	; 255

	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){
     5de:	04 30       	cpi	r16, 0x04	; 4
     5e0:	11 05       	cpc	r17, r1
     5e2:	d1 f6       	brne	.-76     	; 0x598 <KPD_u8GetPressedKey+0x84>
			}


		}

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_HIGH);
     5e4:	41 e0       	ldi	r20, 0x01	; 1
     5e6:	64 2d       	mov	r22, r4
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
     5ee:	9f ef       	ldi	r25, 0xFF	; 255
     5f0:	a9 1a       	sub	r10, r25
     5f2:	b9 0a       	sbc	r11, r25
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){
     5f4:	e3 e0       	ldi	r30, 0x03	; 3
     5f6:	ae 16       	cp	r10, r30
     5f8:	b1 04       	cpc	r11, r1
     5fa:	09 f0       	breq	.+2      	; 0x5fe <KPD_u8GetPressedKey+0xea>
     5fc:	be cf       	rjmp	.-132    	; 0x57a <KPD_u8GetPressedKey+0x66>


	}


	return Local_u8Pressedkey ;
     5fe:	8a ea       	ldi	r24, 0xAA	; 170
     600:	63 96       	adiw	r28, 0x13	; 19
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	de bf       	out	0x3e, r29	; 62
     608:	0f be       	out	0x3f, r0	; 63
     60a:	cd bf       	out	0x3d, r28	; 61
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	ff 90       	pop	r15
     616:	ef 90       	pop	r14
     618:	df 90       	pop	r13
     61a:	cf 90       	pop	r12
     61c:	bf 90       	pop	r11
     61e:	af 90       	pop	r10
     620:	9f 90       	pop	r9
     622:	8f 90       	pop	r8
     624:	7f 90       	pop	r7
     626:	6f 90       	pop	r6
     628:	5f 90       	pop	r5
     62a:	4f 90       	pop	r4
     62c:	08 95       	ret

0000062e <LCD_voidSendData>:
		LCD_voidSendCommand(0b00000010);
		Local_u8AddressCounter=0;
		
	}
	else
		Local_u8AddressCounter++;
     62e:	cf 93       	push	r28
     630:	c8 2f       	mov	r28, r24
     632:	41 e0       	ldi	r20, 0x01	; 1
     634:	65 e0       	ldi	r22, 0x05	; 5
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
     63c:	40 e0       	ldi	r20, 0x00	; 0
     63e:	66 e0       	ldi	r22, 0x06	; 6
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
     646:	6c 2f       	mov	r22, r28
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <DIO_voidSetPortValue>
     64e:	41 e0       	ldi	r20, 0x01	; 1
     650:	67 e0       	ldi	r22, 0x07	; 7
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
     658:	8f e9       	ldi	r24, 0x9F	; 159
     65a:	9f e0       	ldi	r25, 0x0F	; 15
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <LCD_voidSendData+0x2e>
     660:	00 c0       	rjmp	.+0      	; 0x662 <LCD_voidSendData+0x34>
     662:	00 00       	nop
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	67 e0       	ldi	r22, 0x07	; 7
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <LCD_voidSendCommand>:
     672:	cf 93       	push	r28
     674:	c8 2f       	mov	r28, r24
     676:	40 e0       	ldi	r20, 0x00	; 0
     678:	65 e0       	ldi	r22, 0x05	; 5
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	66 e0       	ldi	r22, 0x06	; 6
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
     68a:	6c 2f       	mov	r22, r28
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <DIO_voidSetPortValue>
     692:	41 e0       	ldi	r20, 0x01	; 1
     694:	67 e0       	ldi	r22, 0x07	; 7
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
     69c:	8f e9       	ldi	r24, 0x9F	; 159
     69e:	9f e0       	ldi	r25, 0x0F	; 15
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <LCD_voidSendCommand+0x2e>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <LCD_voidSendCommand+0x34>
     6a6:	00 00       	nop
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	67 e0       	ldi	r22, 0x07	; 7
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_voidSetPinValue>
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret

000006b6 <LCD_voidInit>:
     6b6:	6f ef       	ldi	r22, 0xFF	; 255
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	0e 94 64 04 	call	0x8c8	; 0x8c8 <DIO_voidSetPortDirection>
     6be:	41 e0       	ldi	r20, 0x01	; 1
     6c0:	65 e0       	ldi	r22, 0x05	; 5
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	0e 94 08 04 	call	0x810	; 0x810 <DIO_voidSetPinDirection>
     6c8:	41 e0       	ldi	r20, 0x01	; 1
     6ca:	66 e0       	ldi	r22, 0x06	; 6
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	0e 94 08 04 	call	0x810	; 0x810 <DIO_voidSetPinDirection>
     6d2:	41 e0       	ldi	r20, 0x01	; 1
     6d4:	67 e0       	ldi	r22, 0x07	; 7
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	0e 94 08 04 	call	0x810	; 0x810 <DIO_voidSetPinDirection>
     6dc:	2f ef       	ldi	r18, 0xFF	; 255
     6de:	89 ef       	ldi	r24, 0xF9	; 249
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	21 50       	subi	r18, 0x01	; 1
     6e4:	80 40       	sbci	r24, 0x00	; 0
     6e6:	90 40       	sbci	r25, 0x00	; 0
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <LCD_voidInit+0x2c>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <LCD_voidInit+0x36>
     6ec:	00 00       	nop
     6ee:	88 e3       	ldi	r24, 0x38	; 56
     6f0:	0e 94 39 03 	call	0x672	; 0x672 <LCD_voidSendCommand>
     6f4:	8c e0       	ldi	r24, 0x0C	; 12
     6f6:	0e 94 39 03 	call	0x672	; 0x672 <LCD_voidSendCommand>
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	0e 94 39 03 	call	0x672	; 0x672 <LCD_voidSendCommand>
     700:	86 e0       	ldi	r24, 0x06	; 6
     702:	0e 94 39 03 	call	0x672	; 0x672 <LCD_voidSendCommand>
     706:	08 95       	ret

00000708 <LCD_voidClearDisplay>:
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	0e 94 39 03 	call	0x672	; 0x672 <LCD_voidSendCommand>
     70e:	08 95       	ret

00000710 <LCD_voidGoTOXY>:
     710:	90 e4       	ldi	r25, 0x40	; 64
     712:	89 9f       	mul	r24, r25
     714:	60 0d       	add	r22, r0
     716:	11 24       	eor	r1, r1
     718:	86 2f       	mov	r24, r22
     71a:	80 68       	ori	r24, 0x80	; 128
     71c:	0e 94 39 03 	call	0x672	; 0x672 <LCD_voidSendCommand>
     720:	08 95       	ret

00000722 <LCD_voidSendString>:
		
		
}

void LCD_voidSendString(u8* Copy_pcString)
{
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	fc 01       	movw	r30, r24
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
     72a:	80 81       	ld	r24, Z
     72c:	88 23       	and	r24, r24
     72e:	59 f0       	breq	.+22     	; 0x746 <LCD_voidSendString+0x24>
     730:	8f 01       	movw	r16, r30
     732:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
     734:	0e 94 17 03 	call	0x62e	; 0x62e <LCD_voidSendData>
		Local_u8Index++;
     738:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_voidSendString(u8* Copy_pcString)
{
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
     73a:	f8 01       	movw	r30, r16
     73c:	ec 0f       	add	r30, r28
     73e:	f1 1d       	adc	r31, r1
     740:	80 81       	ld	r24, Z
     742:	81 11       	cpse	r24, r1
     744:	f7 cf       	rjmp	.-18     	; 0x734 <LCD_voidSendString+0x12>
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
		Local_u8Index++;
	}
}
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	08 95       	ret

0000074e <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	2a 97       	sbiw	r28, 0x0a	; 10
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	dc 01       	movw	r26, r24
     764:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     766:	4a e0       	ldi	r20, 0x0A	; 10
     768:	be 01       	movw	r22, r28
     76a:	6f 5f       	subi	r22, 0xFF	; 255
     76c:	7f 4f       	sbci	r23, 0xFF	; 255
     76e:	0e 94 2f 08 	call	0x105e	; 0x105e <__itoa_ncheck>
	u8 Local_u8Str[10];
	itoa(Copy_u32Number, Local_u8Str,10);
	LCD_voidSendString(Local_u8Str);
     772:	ce 01       	movw	r24, r28
     774:	01 96       	adiw	r24, 0x01	; 1
     776:	0e 94 91 03 	call	0x722	; 0x722 <LCD_voidSendString>

}
     77a:	2a 96       	adiw	r28, 0x0a	; 10
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	de bf       	out	0x3e, r29	; 62
     782:	0f be       	out	0x3f, r0	; 63
     784:	cd bf       	out	0x3d, r28	; 61
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <Servo_VoidInit>:

#include"../../MCAL/TIMER_Driver/TIMER_Interface.h"
 u16 Ticks=0;
 void Servo_VoidInit(void){
	 //Using Timer 1 PWM Mode,  prescaller 8 ==>010
		TIMER_VoidTimer1Init(PWM,10);
     78c:	6a e0       	ldi	r22, 0x0A	; 10
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	0e 94 4e 05 	call	0xa9c	; 0xa9c <TIMER_VoidTimer1Init>
	 // Servo Total time = 20ms
		TIMER_VoidSetOverFlow(20000);
     794:	80 e2       	ldi	r24, 0x20	; 32
     796:	9e e4       	ldi	r25, 0x4E	; 78
     798:	0e 94 a9 05 	call	0xb52	; 0xb52 <TIMER_VoidSetOverFlow>
     79c:	08 95       	ret

0000079e <Servo_VoidDegree>:

void Servo_VoidDegree(u8 Copy_u8Degree){
	if(Copy_u8Degree>180)
		Copy_u8Degree = 180;
	f32 Ton = (1/180.0) * Copy_u8Degree + 1;
	Ticks = Ton * 1000;
     79e:	85 3b       	cpi	r24, 0xB5	; 181
     7a0:	08 f0       	brcs	.+2      	; 0x7a4 <Servo_VoidDegree+0x6>
     7a2:	84 eb       	ldi	r24, 0xB4	; 180
     7a4:	68 2f       	mov	r22, r24
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 36 07 	call	0xe6c	; 0xe6c <__floatsisf>
     7b0:	21 e6       	ldi	r18, 0x61	; 97
     7b2:	3b e0       	ldi	r19, 0x0B	; 11
     7b4:	46 eb       	ldi	r20, 0xB6	; 182
     7b6:	5b e3       	ldi	r21, 0x3B	; 59
     7b8:	0e 94 c2 07 	call	0xf84	; 0xf84 <__mulsf3>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 e8       	ldi	r20, 0x80	; 128
     7c2:	5f e3       	ldi	r21, 0x3F	; 63
     7c4:	0e 94 99 06 	call	0xd32	; 0xd32 <__addsf3>
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	4a e7       	ldi	r20, 0x7A	; 122
     7ce:	54 e4       	ldi	r21, 0x44	; 68
     7d0:	0e 94 c2 07 	call	0xf84	; 0xf84 <__mulsf3>
     7d4:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fixunssfsi>
     7d8:	70 93 e6 00 	sts	0x00E6, r23	; 0x8000e6 <Ticks+0x1>
     7dc:	60 93 e5 00 	sts	0x00E5, r22	; 0x8000e5 <Ticks>
	TIMER_VoidTimer1ChannelASetCompareValue(Ticks);
     7e0:	cb 01       	movw	r24, r22
     7e2:	0e 94 ac 05 	call	0xb58	; 0xb58 <TIMER_VoidTimer1ChannelASetCompareValue>
     7e6:	08 95       	ret

000007e8 <ADC_voidInit>:
	2- 8bit res --> left adjustment
	3- prescaler
	4- enable ADC
	*/
	// use AVCC
	SET_BIT(ADMUX,6);
     7e8:	3e 9a       	sbi	0x07, 6	; 7
	CLR_BIT(ADMUX,7);
     7ea:	3f 98       	cbi	0x07, 7	; 7
	// left adjust
	SET_BIT(ADMUX,5);
     7ec:	3d 9a       	sbi	0x07, 5	; 7
	// prescaler  --> /64
	CLR_BIT(ADCSRA,0);
     7ee:	30 98       	cbi	0x06, 0	; 6
	SET_BIT(ADCSRA,1);
     7f0:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,2);
     7f2:	32 9a       	sbi	0x06, 2	; 6
	// enable 
	SET_BIT(ADCSRA,7);
     7f4:	37 9a       	sbi	0x06, 7	; 6
     7f6:	08 95       	ret

000007f8 <ADC_u8StartConversion>:
	
}

u8 ADC_u8StartConversion(u8 Copy_u8ChannelNumber){
	// channel select
	ADMUX &= 0b11100000;
     7f8:	97 b1       	in	r25, 0x07	; 7
     7fa:	90 7e       	andi	r25, 0xE0	; 224
     7fc:	97 b9       	out	0x07, r25	; 7
	ADMUX |=Copy_u8ChannelNumber;
     7fe:	97 b1       	in	r25, 0x07	; 7
     800:	89 2b       	or	r24, r25
     802:	87 b9       	out	0x07, r24	; 7
	
	// start conversion
	SET_BIT(ADCSRA,6);
     804:	36 9a       	sbi	0x06, 6	; 6
	
	// wait until conversion complete
	// by checking the flag
	while(GET_BIT(ADCSRA,4)==0);
     806:	34 9b       	sbis	0x06, 4	; 6
     808:	fe cf       	rjmp	.-4      	; 0x806 <ADC_u8StartConversion+0xe>
	
	//clear flag 
	SET_BIT(ADCSRA,4);
     80a:	34 9a       	sbi	0x06, 4	; 6
	
	return ADCH;
     80c:	85 b1       	in	r24, 0x05	; 5
}
     80e:	08 95       	ret

00000810 <DIO_voidSetPinDirection>:


void DIO_voidSetPinDirection(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinState ){

	volatile u8* Local_u8PTR_DDRx;
	switch(Copy_u8PortName){
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	49 f0       	breq	.+18     	; 0x826 <DIO_voidSetPinDirection+0x16>
     814:	28 f0       	brcs	.+10     	; 0x820 <DIO_voidSetPinDirection+0x10>
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	49 f0       	breq	.+18     	; 0x82c <DIO_voidSetPinDirection+0x1c>
     81a:	83 30       	cpi	r24, 0x03	; 3
     81c:	51 f0       	breq	.+20     	; 0x832 <DIO_voidSetPinDirection+0x22>
     81e:	0b c0       	rjmp	.+22     	; 0x836 <DIO_voidSetPinDirection+0x26>

		case DIO_PORTA:
		Local_u8PTR_DDRx=&DDRA;
     820:	ea e3       	ldi	r30, 0x3A	; 58
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	08 c0       	rjmp	.+16     	; 0x836 <DIO_voidSetPinDirection+0x26>
		break;
		case DIO_PORTB:
		Local_u8PTR_DDRx=&DDRB;
     826:	e7 e3       	ldi	r30, 0x37	; 55
     828:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     82a:	05 c0       	rjmp	.+10     	; 0x836 <DIO_voidSetPinDirection+0x26>
		case DIO_PORTC:
		Local_u8PTR_DDRx=&DDRC;
     82c:	e4 e3       	ldi	r30, 0x34	; 52
     82e:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     830:	02 c0       	rjmp	.+4      	; 0x836 <DIO_voidSetPinDirection+0x26>
		case DIO_PORTD:
		Local_u8PTR_DDRx=&DDRD;
     832:	e1 e3       	ldi	r30, 0x31	; 49
     834:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinState){
     836:	44 23       	and	r20, r20
     838:	69 f0       	breq	.+26     	; 0x854 <DIO_voidSetPinDirection+0x44>
     83a:	41 30       	cpi	r20, 0x01	; 1
     83c:	b1 f4       	brne	.+44     	; 0x86a <__stack+0xb>

		case DIO_OUTPUT:
		SET_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
     83e:	20 81       	ld	r18, Z
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	02 c0       	rjmp	.+4      	; 0x84a <DIO_voidSetPinDirection+0x3a>
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	6a 95       	dec	r22
     84c:	e2 f7       	brpl	.-8      	; 0x846 <DIO_voidSetPinDirection+0x36>
     84e:	82 2b       	or	r24, r18
     850:	80 83       	st	Z, r24
		break;
     852:	08 95       	ret
		case DIO_INPUT:
		CLR_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
     854:	20 81       	ld	r18, Z
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	02 c0       	rjmp	.+4      	; 0x860 <__stack+0x1>
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	6a 95       	dec	r22
     862:	e2 f7       	brpl	.-8      	; 0x85c <DIO_voidSetPinDirection+0x4c>
     864:	80 95       	com	r24
     866:	82 23       	and	r24, r18
     868:	80 83       	st	Z, r24
     86a:	08 95       	ret

0000086c <DIO_voidSetPinValue>:

}
void DIO_voidSetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinValue ){

	volatile u8* Local_u8PTR_PORTx;
	switch(Copy_u8PortName){
     86c:	81 30       	cpi	r24, 0x01	; 1
     86e:	49 f0       	breq	.+18     	; 0x882 <DIO_voidSetPinValue+0x16>
     870:	28 f0       	brcs	.+10     	; 0x87c <DIO_voidSetPinValue+0x10>
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	49 f0       	breq	.+18     	; 0x888 <DIO_voidSetPinValue+0x1c>
     876:	83 30       	cpi	r24, 0x03	; 3
     878:	51 f0       	breq	.+20     	; 0x88e <DIO_voidSetPinValue+0x22>
     87a:	0b c0       	rjmp	.+22     	; 0x892 <DIO_voidSetPinValue+0x26>

		case DIO_PORTA:
		Local_u8PTR_PORTx=&PORTA;
     87c:	eb e3       	ldi	r30, 0x3B	; 59
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	08 c0       	rjmp	.+16     	; 0x892 <DIO_voidSetPinValue+0x26>
		break;
		case DIO_PORTB:
		Local_u8PTR_PORTx=&PORTB;
     882:	e8 e3       	ldi	r30, 0x38	; 56
     884:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     886:	05 c0       	rjmp	.+10     	; 0x892 <DIO_voidSetPinValue+0x26>
		case DIO_PORTC:
		Local_u8PTR_PORTx=&PORTC;
     888:	e5 e3       	ldi	r30, 0x35	; 53
     88a:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     88c:	02 c0       	rjmp	.+4      	; 0x892 <DIO_voidSetPinValue+0x26>
		case DIO_PORTD:
		Local_u8PTR_PORTx=&PORTD;
     88e:	e2 e3       	ldi	r30, 0x32	; 50
     890:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinValue){
     892:	44 23       	and	r20, r20
     894:	69 f0       	breq	.+26     	; 0x8b0 <DIO_voidSetPinValue+0x44>
     896:	41 30       	cpi	r20, 0x01	; 1
     898:	b1 f4       	brne	.+44     	; 0x8c6 <DIO_voidSetPinValue+0x5a>

		case DIO_HIGH:
		SET_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
     89a:	20 81       	ld	r18, Z
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <DIO_voidSetPinValue+0x3a>
     8a2:	88 0f       	add	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	6a 95       	dec	r22
     8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <DIO_voidSetPinValue+0x36>
     8aa:	82 2b       	or	r24, r18
     8ac:	80 83       	st	Z, r24
		break;
     8ae:	08 95       	ret
		case DIO_LOW:
		CLR_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
     8b0:	20 81       	ld	r18, Z
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <DIO_voidSetPinValue+0x50>
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	6a 95       	dec	r22
     8be:	e2 f7       	brpl	.-8      	; 0x8b8 <DIO_voidSetPinValue+0x4c>
     8c0:	80 95       	com	r24
     8c2:	82 23       	and	r24, r18
     8c4:	80 83       	st	Z, r24
     8c6:	08 95       	ret

000008c8 <DIO_voidSetPortDirection>:

}

void DIO_voidSetPortDirection(u8 Copy_u8PortName ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
     8c8:	81 30       	cpi	r24, 0x01	; 1
     8ca:	41 f0       	breq	.+16     	; 0x8dc <DIO_voidSetPortDirection+0x14>
     8cc:	28 f0       	brcs	.+10     	; 0x8d8 <DIO_voidSetPortDirection+0x10>
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	39 f0       	breq	.+14     	; 0x8e0 <DIO_voidSetPortDirection+0x18>
     8d2:	83 30       	cpi	r24, 0x03	; 3
     8d4:	39 f0       	breq	.+14     	; 0x8e4 <DIO_voidSetPortDirection+0x1c>
     8d6:	08 95       	ret

		case DIO_PORTA:
		DDRA=Copy_u8PortValue;
     8d8:	6a bb       	out	0x1a, r22	; 26
		break;
     8da:	08 95       	ret
		case DIO_PORTB:
		DDRB=Copy_u8PortValue;
     8dc:	67 bb       	out	0x17, r22	; 23
		break;
     8de:	08 95       	ret
		case DIO_PORTC:
		DDRC=Copy_u8PortValue;
     8e0:	64 bb       	out	0x14, r22	; 20
		break;
     8e2:	08 95       	ret
		case DIO_PORTD:
		DDRD=Copy_u8PortValue;
     8e4:	61 bb       	out	0x11, r22	; 17
     8e6:	08 95       	ret

000008e8 <DIO_voidSetPortValue>:
	}

}
void DIO_voidSetPortValue(u8 Copy_u8PortName  ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	41 f0       	breq	.+16     	; 0x8fc <DIO_voidSetPortValue+0x14>
     8ec:	28 f0       	brcs	.+10     	; 0x8f8 <DIO_voidSetPortValue+0x10>
     8ee:	82 30       	cpi	r24, 0x02	; 2
     8f0:	39 f0       	breq	.+14     	; 0x900 <DIO_voidSetPortValue+0x18>
     8f2:	83 30       	cpi	r24, 0x03	; 3
     8f4:	39 f0       	breq	.+14     	; 0x904 <DIO_voidSetPortValue+0x1c>
     8f6:	08 95       	ret

		case DIO_PORTA:
		PORTA=Copy_u8PortValue;
     8f8:	6b bb       	out	0x1b, r22	; 27
		break;
     8fa:	08 95       	ret
		case DIO_PORTB:
		PORTB=Copy_u8PortValue;
     8fc:	68 bb       	out	0x18, r22	; 24
		break;
     8fe:	08 95       	ret
		case DIO_PORTC:
		PORTC=Copy_u8PortValue;
     900:	65 bb       	out	0x15, r22	; 21
		break;
     902:	08 95       	ret
		case DIO_PORTD:
		PORTD=Copy_u8PortValue;
     904:	62 bb       	out	0x12, r22	; 18
     906:	08 95       	ret

00000908 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber){

	
	u8 Local_u8PinValue;
	switch(Copy_u8PortName){
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	81 f0       	breq	.+32     	; 0x92c <DIO_u8GetPinValue+0x24>
     90c:	28 f0       	brcs	.+10     	; 0x918 <DIO_u8GetPinValue+0x10>
     90e:	82 30       	cpi	r24, 0x02	; 2
     910:	b9 f0       	breq	.+46     	; 0x940 <DIO_u8GetPinValue+0x38>
     912:	83 30       	cpi	r24, 0x03	; 3
     914:	f9 f0       	breq	.+62     	; 0x954 <DIO_u8GetPinValue+0x4c>
     916:	27 c0       	rjmp	.+78     	; 0x966 <DIO_u8GetPinValue+0x5e>

		case DIO_PORTA:
		Local_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
     918:	89 b3       	in	r24, 0x19	; 25
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	02 c0       	rjmp	.+4      	; 0x922 <DIO_u8GetPinValue+0x1a>
     91e:	95 95       	asr	r25
     920:	87 95       	ror	r24
     922:	6a 95       	dec	r22
     924:	e2 f7       	brpl	.-8      	; 0x91e <DIO_u8GetPinValue+0x16>
     926:	98 2f       	mov	r25, r24
     928:	91 70       	andi	r25, 0x01	; 1
		break;
     92a:	1d c0       	rjmp	.+58     	; 0x966 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTB:
		Local_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
     92c:	86 b3       	in	r24, 0x16	; 22
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	02 c0       	rjmp	.+4      	; 0x936 <DIO_u8GetPinValue+0x2e>
     932:	95 95       	asr	r25
     934:	87 95       	ror	r24
     936:	6a 95       	dec	r22
     938:	e2 f7       	brpl	.-8      	; 0x932 <DIO_u8GetPinValue+0x2a>
     93a:	98 2f       	mov	r25, r24
     93c:	91 70       	andi	r25, 0x01	; 1
		break;
     93e:	13 c0       	rjmp	.+38     	; 0x966 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTC:
		Local_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
     940:	83 b3       	in	r24, 0x13	; 19
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	02 c0       	rjmp	.+4      	; 0x94a <DIO_u8GetPinValue+0x42>
     946:	95 95       	asr	r25
     948:	87 95       	ror	r24
     94a:	6a 95       	dec	r22
     94c:	e2 f7       	brpl	.-8      	; 0x946 <DIO_u8GetPinValue+0x3e>
     94e:	98 2f       	mov	r25, r24
     950:	91 70       	andi	r25, 0x01	; 1
		break;
     952:	09 c0       	rjmp	.+18     	; 0x966 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTD:
		Local_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
     954:	80 b3       	in	r24, 0x10	; 16
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	02 c0       	rjmp	.+4      	; 0x95e <DIO_u8GetPinValue+0x56>
     95a:	95 95       	asr	r25
     95c:	87 95       	ror	r24
     95e:	6a 95       	dec	r22
     960:	e2 f7       	brpl	.-8      	; 0x95a <DIO_u8GetPinValue+0x52>
     962:	98 2f       	mov	r25, r24
     964:	91 70       	andi	r25, 0x01	; 1

	

	return Local_u8PinValue;

}
     966:	89 2f       	mov	r24, r25
     968:	08 95       	ret

0000096a <__vector_1>:
void EXTI_voidSetCallBackINT2(void(*NotifyFunc2)(void)){
	
	Global_pvINT2NotifyFunc=NotifyFunc2;
}

ISR(INT0_vect){
     96a:	1f 92       	push	r1
     96c:	0f 92       	push	r0
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	0f 92       	push	r0
     972:	11 24       	eor	r1, r1
     974:	2f 93       	push	r18
     976:	3f 93       	push	r19
     978:	4f 93       	push	r20
     97a:	5f 93       	push	r21
     97c:	6f 93       	push	r22
     97e:	7f 93       	push	r23
     980:	8f 93       	push	r24
     982:	9f 93       	push	r25
     984:	af 93       	push	r26
     986:	bf 93       	push	r27
     988:	ef 93       	push	r30
     98a:	ff 93       	push	r31
	
	if(Global_pvINT0NotifyFunc!=NULL_PTR)
     98c:	e0 91 eb 00 	lds	r30, 0x00EB	; 0x8000eb <Global_pvINT0NotifyFunc>
     990:	f0 91 ec 00 	lds	r31, 0x00EC	; 0x8000ec <Global_pvINT0NotifyFunc+0x1>
     994:	30 97       	sbiw	r30, 0x00	; 0
     996:	09 f0       	breq	.+2      	; 0x99a <__vector_1+0x30>
			Global_pvINT0NotifyFunc();
     998:	09 95       	icall
	
}
     99a:	ff 91       	pop	r31
     99c:	ef 91       	pop	r30
     99e:	bf 91       	pop	r27
     9a0:	af 91       	pop	r26
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	7f 91       	pop	r23
     9a8:	6f 91       	pop	r22
     9aa:	5f 91       	pop	r21
     9ac:	4f 91       	pop	r20
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <__vector_2>:

ISR(INT1_vect){
     9bc:	1f 92       	push	r1
     9be:	0f 92       	push	r0
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	0f 92       	push	r0
     9c4:	11 24       	eor	r1, r1
     9c6:	2f 93       	push	r18
     9c8:	3f 93       	push	r19
     9ca:	4f 93       	push	r20
     9cc:	5f 93       	push	r21
     9ce:	6f 93       	push	r22
     9d0:	7f 93       	push	r23
     9d2:	8f 93       	push	r24
     9d4:	9f 93       	push	r25
     9d6:	af 93       	push	r26
     9d8:	bf 93       	push	r27
     9da:	ef 93       	push	r30
     9dc:	ff 93       	push	r31
	
	if(Global_pvINT1NotifyFunc!=NULL_PTR)
     9de:	e0 91 e9 00 	lds	r30, 0x00E9	; 0x8000e9 <Global_pvINT1NotifyFunc>
     9e2:	f0 91 ea 00 	lds	r31, 0x00EA	; 0x8000ea <Global_pvINT1NotifyFunc+0x1>
     9e6:	30 97       	sbiw	r30, 0x00	; 0
     9e8:	09 f0       	breq	.+2      	; 0x9ec <__vector_2+0x30>
			Global_pvINT1NotifyFunc();
     9ea:	09 95       	icall
	
}
     9ec:	ff 91       	pop	r31
     9ee:	ef 91       	pop	r30
     9f0:	bf 91       	pop	r27
     9f2:	af 91       	pop	r26
     9f4:	9f 91       	pop	r25
     9f6:	8f 91       	pop	r24
     9f8:	7f 91       	pop	r23
     9fa:	6f 91       	pop	r22
     9fc:	5f 91       	pop	r21
     9fe:	4f 91       	pop	r20
     a00:	3f 91       	pop	r19
     a02:	2f 91       	pop	r18
     a04:	0f 90       	pop	r0
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	0f 90       	pop	r0
     a0a:	1f 90       	pop	r1
     a0c:	18 95       	reti

00000a0e <__vector_3>:
ISR(INT2_vect){
     a0e:	1f 92       	push	r1
     a10:	0f 92       	push	r0
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	0f 92       	push	r0
     a16:	11 24       	eor	r1, r1
     a18:	2f 93       	push	r18
     a1a:	3f 93       	push	r19
     a1c:	4f 93       	push	r20
     a1e:	5f 93       	push	r21
     a20:	6f 93       	push	r22
     a22:	7f 93       	push	r23
     a24:	8f 93       	push	r24
     a26:	9f 93       	push	r25
     a28:	af 93       	push	r26
     a2a:	bf 93       	push	r27
     a2c:	ef 93       	push	r30
     a2e:	ff 93       	push	r31
	
	if(Global_pvINT2NotifyFunc!=NULL_PTR)
     a30:	e0 91 e7 00 	lds	r30, 0x00E7	; 0x8000e7 <Global_pvINT2NotifyFunc>
     a34:	f0 91 e8 00 	lds	r31, 0x00E8	; 0x8000e8 <Global_pvINT2NotifyFunc+0x1>
     a38:	30 97       	sbiw	r30, 0x00	; 0
     a3a:	09 f0       	breq	.+2      	; 0xa3e <__vector_3+0x30>
			Global_pvINT2NotifyFunc();
     a3c:	09 95       	icall
	
     a3e:	ff 91       	pop	r31
     a40:	ef 91       	pop	r30
     a42:	bf 91       	pop	r27
     a44:	af 91       	pop	r26
     a46:	9f 91       	pop	r25
     a48:	8f 91       	pop	r24
     a4a:	7f 91       	pop	r23
     a4c:	6f 91       	pop	r22
     a4e:	5f 91       	pop	r21
     a50:	4f 91       	pop	r20
     a52:	3f 91       	pop	r19
     a54:	2f 91       	pop	r18
     a56:	0f 90       	pop	r0
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	0f 90       	pop	r0
     a5c:	1f 90       	pop	r1
     a5e:	18 95       	reti

00000a60 <TIMER_delay_ms>:
	GLOBAL_ICU_ISR = Copy_PTR_ICUFunction;
}

u16 ICU_u16ReadInputCapture(void){
	return ICR1;
}
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	8b 01       	movw	r16, r22
     a66:	9c 01       	movw	r18, r24
     a68:	67 2b       	or	r22, r23
     a6a:	68 2b       	or	r22, r24
     a6c:	69 2b       	or	r22, r25
     a6e:	69 f4       	brne	.+26     	; 0xa8a <TIMER_delay_ms+0x2a>
     a70:	12 c0       	rjmp	.+36     	; 0xa96 <TIMER_delay_ms+0x36>
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	f1 f7       	brne	.-4      	; 0xa72 <TIMER_delay_ms+0x12>
     a76:	4f 5f       	subi	r20, 0xFF	; 255
     a78:	5f 4f       	sbci	r21, 0xFF	; 255
     a7a:	6f 4f       	sbci	r22, 0xFF	; 255
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	04 17       	cp	r16, r20
     a80:	15 07       	cpc	r17, r21
     a82:	26 07       	cpc	r18, r22
     a84:	37 07       	cpc	r19, r23
     a86:	21 f4       	brne	.+8      	; 0xa90 <TIMER_delay_ms+0x30>
     a88:	06 c0       	rjmp	.+12     	; 0xa96 <TIMER_delay_ms+0x36>
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	ba 01       	movw	r22, r20
     a90:	8e e5       	ldi	r24, 0x5E	; 94
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	ee cf       	rjmp	.-36     	; 0xa72 <TIMER_delay_ms+0x12>
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	08 95       	ret

00000a9c <TIMER_VoidTimer1Init>:
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	5d ec       	ldi	r21, 0xCD	; 205
     aa2:	a1 e0       	ldi	r26, 0x01	; 1
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	65 9f       	mul	r22, r21
     aa8:	91 2d       	mov	r25, r1
     aaa:	11 24       	eor	r1, r1
     aac:	96 95       	lsr	r25
     aae:	96 95       	lsr	r25
     ab0:	96 95       	lsr	r25
     ab2:	99 0f       	add	r25, r25
     ab4:	49 2f       	mov	r20, r25
     ab6:	44 0f       	add	r20, r20
     ab8:	44 0f       	add	r20, r20
     aba:	94 0f       	add	r25, r20
     abc:	46 2f       	mov	r20, r22
     abe:	49 1b       	sub	r20, r25
     ac0:	41 30       	cpi	r20, 0x01	; 1
     ac2:	59 f4       	brne	.+22     	; 0xada <TIMER_VoidTimer1Init+0x3e>
     ac4:	9e b5       	in	r25, 0x2e	; 46
     ac6:	fd 01       	movw	r30, r26
     ac8:	02 2e       	mov	r0, r18
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <TIMER_VoidTimer1Init+0x34>
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	0a 94       	dec	r0
     ad2:	e2 f7       	brpl	.-8      	; 0xacc <TIMER_VoidTimer1Init+0x30>
     ad4:	e9 2b       	or	r30, r25
     ad6:	ee bd       	out	0x2e, r30	; 46
     ad8:	0c c0       	rjmp	.+24     	; 0xaf2 <TIMER_VoidTimer1Init+0x56>
     ada:	4e b5       	in	r20, 0x2e	; 46
     adc:	fd 01       	movw	r30, r26
     ade:	02 2e       	mov	r0, r18
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <TIMER_VoidTimer1Init+0x4a>
     ae2:	ee 0f       	add	r30, r30
     ae4:	ff 1f       	adc	r31, r31
     ae6:	0a 94       	dec	r0
     ae8:	e2 f7       	brpl	.-8      	; 0xae2 <TIMER_VoidTimer1Init+0x46>
     aea:	9e 2f       	mov	r25, r30
     aec:	90 95       	com	r25
     aee:	94 23       	and	r25, r20
     af0:	9e bd       	out	0x2e, r25	; 46
     af2:	65 9f       	mul	r22, r21
     af4:	61 2d       	mov	r22, r1
     af6:	11 24       	eor	r1, r1
     af8:	66 95       	lsr	r22
     afa:	66 95       	lsr	r22
     afc:	66 95       	lsr	r22
     afe:	2f 5f       	subi	r18, 0xFF	; 255
     b00:	3f 4f       	sbci	r19, 0xFF	; 255
     b02:	23 30       	cpi	r18, 0x03	; 3
     b04:	31 05       	cpc	r19, r1
     b06:	79 f6       	brne	.-98     	; 0xaa6 <TIMER_VoidTimer1Init+0xa>
     b08:	88 23       	and	r24, r24
     b0a:	19 f0       	breq	.+6      	; 0xb12 <TIMER_VoidTimer1Init+0x76>
     b0c:	82 30       	cpi	r24, 0x02	; 2
     b0e:	71 f0       	breq	.+28     	; 0xb2c <TIMER_VoidTimer1Init+0x90>
     b10:	08 95       	ret
     b12:	8f b5       	in	r24, 0x2f	; 47
     b14:	8e 7f       	andi	r24, 0xFE	; 254
     b16:	8f bd       	out	0x2f, r24	; 47
     b18:	8f b5       	in	r24, 0x2f	; 47
     b1a:	8d 7f       	andi	r24, 0xFD	; 253
     b1c:	8f bd       	out	0x2f, r24	; 47
     b1e:	8e b5       	in	r24, 0x2e	; 46
     b20:	87 7f       	andi	r24, 0xF7	; 247
     b22:	8e bd       	out	0x2e, r24	; 46
     b24:	8e b5       	in	r24, 0x2e	; 46
     b26:	8f 7e       	andi	r24, 0xEF	; 239
     b28:	8e bd       	out	0x2e, r24	; 46
     b2a:	08 95       	ret
     b2c:	8f b5       	in	r24, 0x2f	; 47
     b2e:	8f 7b       	andi	r24, 0xBF	; 191
     b30:	8f bd       	out	0x2f, r24	; 47
     b32:	8f b5       	in	r24, 0x2f	; 47
     b34:	80 68       	ori	r24, 0x80	; 128
     b36:	8f bd       	out	0x2f, r24	; 47
     b38:	8f b5       	in	r24, 0x2f	; 47
     b3a:	8e 7f       	andi	r24, 0xFE	; 254
     b3c:	8f bd       	out	0x2f, r24	; 47
     b3e:	8f b5       	in	r24, 0x2f	; 47
     b40:	82 60       	ori	r24, 0x02	; 2
     b42:	8f bd       	out	0x2f, r24	; 47
     b44:	8e b5       	in	r24, 0x2e	; 46
     b46:	88 60       	ori	r24, 0x08	; 8
     b48:	8e bd       	out	0x2e, r24	; 46
     b4a:	8e b5       	in	r24, 0x2e	; 46
     b4c:	80 61       	ori	r24, 0x10	; 16
     b4e:	8e bd       	out	0x2e, r24	; 46
     b50:	08 95       	ret

00000b52 <TIMER_VoidSetOverFlow>:
     b52:	97 bd       	out	0x27, r25	; 39
     b54:	86 bd       	out	0x26, r24	; 38
     b56:	08 95       	ret

00000b58 <TIMER_VoidTimer1ChannelASetCompareValue>:
     b58:	9b bd       	out	0x2b, r25	; 43
     b5a:	8a bd       	out	0x2a, r24	; 42
     b5c:	08 95       	ret

00000b5e <__vector_11>:



//Normal ISR
void __vector_11(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_11(void){
     b5e:	1f 92       	push	r1
     b60:	0f 92       	push	r0
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	0f 92       	push	r0
     b66:	11 24       	eor	r1, r1
     b68:	2f 93       	push	r18
     b6a:	3f 93       	push	r19
     b6c:	4f 93       	push	r20
     b6e:	5f 93       	push	r21
     b70:	6f 93       	push	r22
     b72:	7f 93       	push	r23
     b74:	8f 93       	push	r24
     b76:	9f 93       	push	r25
     b78:	af 93       	push	r26
     b7a:	bf 93       	push	r27
     b7c:	ef 93       	push	r30
     b7e:	ff 93       	push	r31
	if(TIMER0_Normal_ISR_PTR!=0x00)
     b80:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <TIMER0_Normal_ISR_PTR>
     b84:	f0 91 f2 00 	lds	r31, 0x00F2	; 0x8000f2 <TIMER0_Normal_ISR_PTR+0x1>
     b88:	30 97       	sbiw	r30, 0x00	; 0
     b8a:	09 f0       	breq	.+2      	; 0xb8e <__vector_11+0x30>
		TIMER0_Normal_ISR_PTR();
     b8c:	09 95       	icall
}
     b8e:	ff 91       	pop	r31
     b90:	ef 91       	pop	r30
     b92:	bf 91       	pop	r27
     b94:	af 91       	pop	r26
     b96:	9f 91       	pop	r25
     b98:	8f 91       	pop	r24
     b9a:	7f 91       	pop	r23
     b9c:	6f 91       	pop	r22
     b9e:	5f 91       	pop	r21
     ba0:	4f 91       	pop	r20
     ba2:	3f 91       	pop	r19
     ba4:	2f 91       	pop	r18
     ba6:	0f 90       	pop	r0
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	0f 90       	pop	r0
     bac:	1f 90       	pop	r1
     bae:	18 95       	reti

00000bb0 <__vector_10>:

//CTC ISR
void __vector_10(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_10(void){
     bb0:	1f 92       	push	r1
     bb2:	0f 92       	push	r0
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	0f 92       	push	r0
     bb8:	11 24       	eor	r1, r1
     bba:	2f 93       	push	r18
     bbc:	3f 93       	push	r19
     bbe:	4f 93       	push	r20
     bc0:	5f 93       	push	r21
     bc2:	6f 93       	push	r22
     bc4:	7f 93       	push	r23
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	af 93       	push	r26
     bcc:	bf 93       	push	r27
     bce:	ef 93       	push	r30
     bd0:	ff 93       	push	r31
	if(TIMER0_CTC_ISR_PTR!=0x00)
     bd2:	e0 91 ef 00 	lds	r30, 0x00EF	; 0x8000ef <TIMER0_CTC_ISR_PTR>
     bd6:	f0 91 f0 00 	lds	r31, 0x00F0	; 0x8000f0 <TIMER0_CTC_ISR_PTR+0x1>
     bda:	30 97       	sbiw	r30, 0x00	; 0
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <__vector_10+0x30>
		TIMER0_CTC_ISR_PTR();
     bde:	09 95       	icall

}
     be0:	ff 91       	pop	r31
     be2:	ef 91       	pop	r30
     be4:	bf 91       	pop	r27
     be6:	af 91       	pop	r26
     be8:	9f 91       	pop	r25
     bea:	8f 91       	pop	r24
     bec:	7f 91       	pop	r23
     bee:	6f 91       	pop	r22
     bf0:	5f 91       	pop	r21
     bf2:	4f 91       	pop	r20
     bf4:	3f 91       	pop	r19
     bf6:	2f 91       	pop	r18
     bf8:	0f 90       	pop	r0
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	0f 90       	pop	r0
     bfe:	1f 90       	pop	r1
     c00:	18 95       	reti

00000c02 <__vector_6>:

//ICU
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void){
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
     c0c:	2f 93       	push	r18
     c0e:	3f 93       	push	r19
     c10:	4f 93       	push	r20
     c12:	5f 93       	push	r21
     c14:	6f 93       	push	r22
     c16:	7f 93       	push	r23
     c18:	8f 93       	push	r24
     c1a:	9f 93       	push	r25
     c1c:	af 93       	push	r26
     c1e:	bf 93       	push	r27
     c20:	ef 93       	push	r30
     c22:	ff 93       	push	r31
	if(GLOBAL_ICU_ISR!=0x00)
     c24:	e0 91 ed 00 	lds	r30, 0x00ED	; 0x8000ed <GLOBAL_ICU_ISR>
     c28:	f0 91 ee 00 	lds	r31, 0x00EE	; 0x8000ee <GLOBAL_ICU_ISR+0x1>
     c2c:	30 97       	sbiw	r30, 0x00	; 0
     c2e:	09 f0       	breq	.+2      	; 0xc32 <__vector_6+0x30>
		GLOBAL_ICU_ISR();
     c30:	09 95       	icall
}
     c32:	ff 91       	pop	r31
     c34:	ef 91       	pop	r30
     c36:	bf 91       	pop	r27
     c38:	af 91       	pop	r26
     c3a:	9f 91       	pop	r25
     c3c:	8f 91       	pop	r24
     c3e:	7f 91       	pop	r23
     c40:	6f 91       	pop	r22
     c42:	5f 91       	pop	r21
     c44:	4f 91       	pop	r20
     c46:	3f 91       	pop	r19
     c48:	2f 91       	pop	r18
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <TWI_voidMasterInit>:
void TWI_voidSlaveInit(u8 Copy_SlaveAddress){
	//Set Slave Address
	TWAR = Copy_SlaveAddress <<1;

	//Enable TWI
	SET_BIT(TWCR,TWEN);
     c54:	96 e9       	ldi	r25, 0x96	; 150
     c56:	90 b9       	out	0x00, r25	; 0
     c58:	09 98       	cbi	0x01, 1	; 1
     c5a:	08 98       	cbi	0x01, 0	; 1
     c5c:	88 23       	and	r24, r24
     c5e:	11 f0       	breq	.+4      	; 0xc64 <TWI_voidMasterInit+0x10>
     c60:	88 0f       	add	r24, r24
     c62:	82 b9       	out	0x02, r24	; 2
     c64:	86 b7       	in	r24, 0x36	; 54
     c66:	84 60       	ori	r24, 0x04	; 4
     c68:	86 bf       	out	0x36, r24	; 54
     c6a:	08 95       	ret

00000c6c <TWI_SendStartCondition>:
}

TWI_ErrStatus TWI_SendStartCondition(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
     c6c:	86 b7       	in	r24, 0x36	; 54
     c6e:	80 62       	ori	r24, 0x20	; 32
     c70:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     c72:	86 b7       	in	r24, 0x36	; 54
     c74:	80 68       	ori	r24, 0x80	; 128
     c76:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     c78:	06 b6       	in	r0, 0x36	; 54
     c7a:	07 fe       	sbrs	r0, 7
     c7c:	fd cf       	rjmp	.-6      	; 0xc78 <TWI_SendStartCondition+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=START_ACK){
     c7e:	91 b1       	in	r25, 0x01	; 1
		Local_ErrStatus = StartConditionErr;
		}
	return Local_ErrStatus;
     c80:	98 7f       	andi	r25, 0xF8	; 248
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	98 30       	cpi	r25, 0x08	; 8
     c86:	09 f4       	brne	.+2      	; 0xc8a <TWI_SendStartCondition+0x1e>
     c88:	80 e0       	ldi	r24, 0x00	; 0
}
     c8a:	08 95       	ret

00000c8c <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
     c8c:	86 b7       	in	r24, 0x36	; 54
     c8e:	80 62       	ori	r24, 0x20	; 32
     c90:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     c92:	86 b7       	in	r24, 0x36	; 54
     c94:	80 68       	ori	r24, 0x80	; 128
     c96:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     c98:	06 b6       	in	r0, 0x36	; 54
     c9a:	07 fe       	sbrs	r0, 7
     c9c:	fd cf       	rjmp	.-6      	; 0xc98 <TWI_SendRepeatedStart+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
     c9e:	81 b1       	in	r24, 0x01	; 1
     ca0:	88 7f       	andi	r24, 0xF8	; 248
     ca2:	80 31       	cpi	r24, 0x10	; 16
     ca4:	11 f0       	breq	.+4      	; 0xcaa <TWI_SendRepeatedStart+0x1e>
		Local_ErrStatus = RepeatedStartErr;
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     caa:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
		Local_ErrStatus = RepeatedStartErr;
		}
	return Local_ErrStatus;
}
     cac:	08 95       	ret

00000cae <TWI_SendSlaveAddressWithWrite>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
     cae:	88 0f       	add	r24, r24
     cb0:	83 b9       	out	0x03, r24	; 3
	//For Write Operation
	CLR_BIT(TWDR,0);
     cb2:	18 98       	cbi	0x03, 0	; 3

	//Clear Flag to start previous operation  //Enable TWI
	TWCR=(1<<TWINT)|(1<<TWEN);
     cb4:	84 e8       	ldi	r24, 0x84	; 132
     cb6:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     cb8:	06 b6       	in	r0, 0x36	; 54
     cba:	07 fe       	sbrs	r0, 7
     cbc:	fd cf       	rjmp	.-6      	; 0xcb8 <TWI_SendSlaveAddressWithWrite+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
     cbe:	81 b1       	in	r24, 0x01	; 1
     cc0:	88 7f       	andi	r24, 0xF8	; 248
     cc2:	88 31       	cpi	r24, 0x18	; 24
     cc4:	11 f0       	breq	.+4      	; 0xcca <TWI_SendSlaveAddressWithWrite+0x1c>
		Local_ErrStatus = SlaveAddressWithWriteErr;
     cc6:	83 e0       	ldi	r24, 0x03	; 3
     cc8:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     cca:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
		Local_ErrStatus = SlaveAddressWithWriteErr;
		}
	return Local_ErrStatus;
}
     ccc:	08 95       	ret

00000cce <TWI_SendSlaveAddressWithRead>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
     cce:	88 0f       	add	r24, r24
     cd0:	83 b9       	out	0x03, r24	; 3
	//For Read Operation
	SET_BIT(TWDR,0);
     cd2:	18 9a       	sbi	0x03, 0	; 3

	//Clear Flag to start previous operation
	TWCR=(1<<TWINT)|(1<<TWEN);
     cd4:	84 e8       	ldi	r24, 0x84	; 132
     cd6:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     cd8:	06 b6       	in	r0, 0x36	; 54
     cda:	07 fe       	sbrs	r0, 7
     cdc:	fd cf       	rjmp	.-6      	; 0xcd8 <TWI_SendSlaveAddressWithRead+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
     cde:	81 b1       	in	r24, 0x01	; 1
     ce0:	88 7f       	andi	r24, 0xF8	; 248
     ce2:	80 34       	cpi	r24, 0x40	; 64
     ce4:	11 f0       	breq	.+4      	; 0xcea <TWI_SendSlaveAddressWithRead+0x1c>
		Local_ErrStatus = SlaveAddressWithReadErr;
     ce6:	84 e0       	ldi	r24, 0x04	; 4
     ce8:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     cea:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
		Local_ErrStatus = SlaveAddressWithReadErr;
		}
	return Local_ErrStatus;
}
     cec:	08 95       	ret

00000cee <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte){
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Write Data to data byte
	TWDR = Copy_u8DataByte;
     cee:	83 b9       	out	0x03, r24	; 3

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     cf0:	86 b7       	in	r24, 0x36	; 54
     cf2:	80 68       	ori	r24, 0x80	; 128
     cf4:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     cf6:	06 b6       	in	r0, 0x36	; 54
     cf8:	07 fe       	sbrs	r0, 7
     cfa:	fd cf       	rjmp	.-6      	; 0xcf6 <TWI_MasterWriteDataByte+0x8>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MasterWriteDataByteErr){
     cfc:	81 b1       	in	r24, 0x01	; 1
		Local_ErrStatus = MasterWriteDataByteErr;
		}
	return Local_ErrStatus;

}
     cfe:	85 e0       	ldi	r24, 0x05	; 5
     d00:	08 95       	ret

00000d02 <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
     d02:	fc 01       	movw	r30, r24
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Enable ACK
	SET_BIT(TWCR,TWEA);
     d04:	96 b7       	in	r25, 0x36	; 54
     d06:	90 64       	ori	r25, 0x40	; 64
     d08:	96 bf       	out	0x36, r25	; 54
	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     d0a:	96 b7       	in	r25, 0x36	; 54
     d0c:	90 68       	ori	r25, 0x80	; 128
     d0e:	96 bf       	out	0x36, r25	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     d10:	06 b6       	in	r0, 0x36	; 54
     d12:	07 fe       	sbrs	r0, 7
     d14:	fd cf       	rjmp	.-6      	; 0xd10 <TWI_MasterReadDataByte+0xe>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
     d16:	91 b1       	in	r25, 0x01	; 1
     d18:	98 7f       	andi	r25, 0xF8	; 248
     d1a:	90 35       	cpi	r25, 0x50	; 80
     d1c:	21 f4       	brne	.+8      	; 0xd26 <TWI_MasterReadDataByte+0x24>
		Local_ErrStatus = MasterReadDataByteErr;
		}
	else{
		// Read Data
		*Copy_Pu8DataByte = TWDR;
     d1e:	83 b1       	in	r24, 0x03	; 3
     d20:	80 83       	st	Z, r24

}

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	08 95       	ret
	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
		Local_ErrStatus = MasterReadDataByteErr;
     d26:	86 e0       	ldi	r24, 0x06	; 6
		// Read Data
		*Copy_Pu8DataByte = TWDR;

	}
	return Local_ErrStatus;
}
     d28:	08 95       	ret

00000d2a <TWI_SendStopCondition>:
void TWI_SendStopCondition(void)
{
    /* generate stop condition on the bus /

    / Clear the interrupt flag to start the previous operation */
    TWCR = (1<<TWINT)|(1<<TWEN)|
     d2a:	84 e9       	ldi	r24, 0x94	; 148
     d2c:	86 bf       	out	0x36, r24	; 54
     d2e:	08 95       	ret

00000d30 <__subsf3>:
     d30:	50 58       	subi	r21, 0x80	; 128

00000d32 <__addsf3>:
     d32:	bb 27       	eor	r27, r27
     d34:	aa 27       	eor	r26, r26
     d36:	0e 94 b0 06 	call	0xd60	; 0xd60 <__addsf3x>
     d3a:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_round>
     d3e:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_pscA>
     d42:	38 f0       	brcs	.+14     	; 0xd52 <__addsf3+0x20>
     d44:	0e 94 81 07 	call	0xf02	; 0xf02 <__fp_pscB>
     d48:	20 f0       	brcs	.+8      	; 0xd52 <__addsf3+0x20>
     d4a:	39 f4       	brne	.+14     	; 0xd5a <__addsf3+0x28>
     d4c:	9f 3f       	cpi	r25, 0xFF	; 255
     d4e:	19 f4       	brne	.+6      	; 0xd56 <__addsf3+0x24>
     d50:	26 f4       	brtc	.+8      	; 0xd5a <__addsf3+0x28>
     d52:	0c 94 77 07 	jmp	0xeee	; 0xeee <__fp_nan>
     d56:	0e f4       	brtc	.+2      	; 0xd5a <__addsf3+0x28>
     d58:	e0 95       	com	r30
     d5a:	e7 fb       	bst	r30, 7
     d5c:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_inf>

00000d60 <__addsf3x>:
     d60:	e9 2f       	mov	r30, r25
     d62:	0e 94 99 07 	call	0xf32	; 0xf32 <__fp_split3>
     d66:	58 f3       	brcs	.-42     	; 0xd3e <__addsf3+0xc>
     d68:	ba 17       	cp	r27, r26
     d6a:	62 07       	cpc	r22, r18
     d6c:	73 07       	cpc	r23, r19
     d6e:	84 07       	cpc	r24, r20
     d70:	95 07       	cpc	r25, r21
     d72:	20 f0       	brcs	.+8      	; 0xd7c <__addsf3x+0x1c>
     d74:	79 f4       	brne	.+30     	; 0xd94 <__addsf3x+0x34>
     d76:	a6 f5       	brtc	.+104    	; 0xde0 <__addsf3x+0x80>
     d78:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__fp_zero>
     d7c:	0e f4       	brtc	.+2      	; 0xd80 <__addsf3x+0x20>
     d7e:	e0 95       	com	r30
     d80:	0b 2e       	mov	r0, r27
     d82:	ba 2f       	mov	r27, r26
     d84:	a0 2d       	mov	r26, r0
     d86:	0b 01       	movw	r0, r22
     d88:	b9 01       	movw	r22, r18
     d8a:	90 01       	movw	r18, r0
     d8c:	0c 01       	movw	r0, r24
     d8e:	ca 01       	movw	r24, r20
     d90:	a0 01       	movw	r20, r0
     d92:	11 24       	eor	r1, r1
     d94:	ff 27       	eor	r31, r31
     d96:	59 1b       	sub	r21, r25
     d98:	99 f0       	breq	.+38     	; 0xdc0 <__addsf3x+0x60>
     d9a:	59 3f       	cpi	r21, 0xF9	; 249
     d9c:	50 f4       	brcc	.+20     	; 0xdb2 <__addsf3x+0x52>
     d9e:	50 3e       	cpi	r21, 0xE0	; 224
     da0:	68 f1       	brcs	.+90     	; 0xdfc <__addsf3x+0x9c>
     da2:	1a 16       	cp	r1, r26
     da4:	f0 40       	sbci	r31, 0x00	; 0
     da6:	a2 2f       	mov	r26, r18
     da8:	23 2f       	mov	r18, r19
     daa:	34 2f       	mov	r19, r20
     dac:	44 27       	eor	r20, r20
     dae:	58 5f       	subi	r21, 0xF8	; 248
     db0:	f3 cf       	rjmp	.-26     	; 0xd98 <__addsf3x+0x38>
     db2:	46 95       	lsr	r20
     db4:	37 95       	ror	r19
     db6:	27 95       	ror	r18
     db8:	a7 95       	ror	r26
     dba:	f0 40       	sbci	r31, 0x00	; 0
     dbc:	53 95       	inc	r21
     dbe:	c9 f7       	brne	.-14     	; 0xdb2 <__addsf3x+0x52>
     dc0:	7e f4       	brtc	.+30     	; 0xde0 <__addsf3x+0x80>
     dc2:	1f 16       	cp	r1, r31
     dc4:	ba 0b       	sbc	r27, r26
     dc6:	62 0b       	sbc	r22, r18
     dc8:	73 0b       	sbc	r23, r19
     dca:	84 0b       	sbc	r24, r20
     dcc:	ba f0       	brmi	.+46     	; 0xdfc <__addsf3x+0x9c>
     dce:	91 50       	subi	r25, 0x01	; 1
     dd0:	a1 f0       	breq	.+40     	; 0xdfa <__addsf3x+0x9a>
     dd2:	ff 0f       	add	r31, r31
     dd4:	bb 1f       	adc	r27, r27
     dd6:	66 1f       	adc	r22, r22
     dd8:	77 1f       	adc	r23, r23
     dda:	88 1f       	adc	r24, r24
     ddc:	c2 f7       	brpl	.-16     	; 0xdce <__addsf3x+0x6e>
     dde:	0e c0       	rjmp	.+28     	; 0xdfc <__addsf3x+0x9c>
     de0:	ba 0f       	add	r27, r26
     de2:	62 1f       	adc	r22, r18
     de4:	73 1f       	adc	r23, r19
     de6:	84 1f       	adc	r24, r20
     de8:	48 f4       	brcc	.+18     	; 0xdfc <__addsf3x+0x9c>
     dea:	87 95       	ror	r24
     dec:	77 95       	ror	r23
     dee:	67 95       	ror	r22
     df0:	b7 95       	ror	r27
     df2:	f7 95       	ror	r31
     df4:	9e 3f       	cpi	r25, 0xFE	; 254
     df6:	08 f0       	brcs	.+2      	; 0xdfa <__addsf3x+0x9a>
     df8:	b0 cf       	rjmp	.-160    	; 0xd5a <__addsf3+0x28>
     dfa:	93 95       	inc	r25
     dfc:	88 0f       	add	r24, r24
     dfe:	08 f0       	brcs	.+2      	; 0xe02 <__addsf3x+0xa2>
     e00:	99 27       	eor	r25, r25
     e02:	ee 0f       	add	r30, r30
     e04:	97 95       	ror	r25
     e06:	87 95       	ror	r24
     e08:	08 95       	ret

00000e0a <__fixunssfsi>:
     e0a:	0e 94 a1 07 	call	0xf42	; 0xf42 <__fp_splitA>
     e0e:	88 f0       	brcs	.+34     	; 0xe32 <__fixunssfsi+0x28>
     e10:	9f 57       	subi	r25, 0x7F	; 127
     e12:	98 f0       	brcs	.+38     	; 0xe3a <__fixunssfsi+0x30>
     e14:	b9 2f       	mov	r27, r25
     e16:	99 27       	eor	r25, r25
     e18:	b7 51       	subi	r27, 0x17	; 23
     e1a:	b0 f0       	brcs	.+44     	; 0xe48 <__fixunssfsi+0x3e>
     e1c:	e1 f0       	breq	.+56     	; 0xe56 <__fixunssfsi+0x4c>
     e1e:	66 0f       	add	r22, r22
     e20:	77 1f       	adc	r23, r23
     e22:	88 1f       	adc	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	1a f0       	brmi	.+6      	; 0xe2e <__fixunssfsi+0x24>
     e28:	ba 95       	dec	r27
     e2a:	c9 f7       	brne	.-14     	; 0xe1e <__fixunssfsi+0x14>
     e2c:	14 c0       	rjmp	.+40     	; 0xe56 <__fixunssfsi+0x4c>
     e2e:	b1 30       	cpi	r27, 0x01	; 1
     e30:	91 f0       	breq	.+36     	; 0xe56 <__fixunssfsi+0x4c>
     e32:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fp_zero>
     e36:	b1 e0       	ldi	r27, 0x01	; 1
     e38:	08 95       	ret
     e3a:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__fp_zero>
     e3e:	67 2f       	mov	r22, r23
     e40:	78 2f       	mov	r23, r24
     e42:	88 27       	eor	r24, r24
     e44:	b8 5f       	subi	r27, 0xF8	; 248
     e46:	39 f0       	breq	.+14     	; 0xe56 <__fixunssfsi+0x4c>
     e48:	b9 3f       	cpi	r27, 0xF9	; 249
     e4a:	cc f3       	brlt	.-14     	; 0xe3e <__fixunssfsi+0x34>
     e4c:	86 95       	lsr	r24
     e4e:	77 95       	ror	r23
     e50:	67 95       	ror	r22
     e52:	b3 95       	inc	r27
     e54:	d9 f7       	brne	.-10     	; 0xe4c <__fixunssfsi+0x42>
     e56:	3e f4       	brtc	.+14     	; 0xe66 <__fixunssfsi+0x5c>
     e58:	90 95       	com	r25
     e5a:	80 95       	com	r24
     e5c:	70 95       	com	r23
     e5e:	61 95       	neg	r22
     e60:	7f 4f       	sbci	r23, 0xFF	; 255
     e62:	8f 4f       	sbci	r24, 0xFF	; 255
     e64:	9f 4f       	sbci	r25, 0xFF	; 255
     e66:	08 95       	ret

00000e68 <__floatunsisf>:
     e68:	e8 94       	clt
     e6a:	09 c0       	rjmp	.+18     	; 0xe7e <__floatsisf+0x12>

00000e6c <__floatsisf>:
     e6c:	97 fb       	bst	r25, 7
     e6e:	3e f4       	brtc	.+14     	; 0xe7e <__floatsisf+0x12>
     e70:	90 95       	com	r25
     e72:	80 95       	com	r24
     e74:	70 95       	com	r23
     e76:	61 95       	neg	r22
     e78:	7f 4f       	sbci	r23, 0xFF	; 255
     e7a:	8f 4f       	sbci	r24, 0xFF	; 255
     e7c:	9f 4f       	sbci	r25, 0xFF	; 255
     e7e:	99 23       	and	r25, r25
     e80:	a9 f0       	breq	.+42     	; 0xeac <__floatsisf+0x40>
     e82:	f9 2f       	mov	r31, r25
     e84:	96 e9       	ldi	r25, 0x96	; 150
     e86:	bb 27       	eor	r27, r27
     e88:	93 95       	inc	r25
     e8a:	f6 95       	lsr	r31
     e8c:	87 95       	ror	r24
     e8e:	77 95       	ror	r23
     e90:	67 95       	ror	r22
     e92:	b7 95       	ror	r27
     e94:	f1 11       	cpse	r31, r1
     e96:	f8 cf       	rjmp	.-16     	; 0xe88 <__floatsisf+0x1c>
     e98:	fa f4       	brpl	.+62     	; 0xed8 <__floatsisf+0x6c>
     e9a:	bb 0f       	add	r27, r27
     e9c:	11 f4       	brne	.+4      	; 0xea2 <__floatsisf+0x36>
     e9e:	60 ff       	sbrs	r22, 0
     ea0:	1b c0       	rjmp	.+54     	; 0xed8 <__floatsisf+0x6c>
     ea2:	6f 5f       	subi	r22, 0xFF	; 255
     ea4:	7f 4f       	sbci	r23, 0xFF	; 255
     ea6:	8f 4f       	sbci	r24, 0xFF	; 255
     ea8:	9f 4f       	sbci	r25, 0xFF	; 255
     eaa:	16 c0       	rjmp	.+44     	; 0xed8 <__floatsisf+0x6c>
     eac:	88 23       	and	r24, r24
     eae:	11 f0       	breq	.+4      	; 0xeb4 <__floatsisf+0x48>
     eb0:	96 e9       	ldi	r25, 0x96	; 150
     eb2:	11 c0       	rjmp	.+34     	; 0xed6 <__floatsisf+0x6a>
     eb4:	77 23       	and	r23, r23
     eb6:	21 f0       	breq	.+8      	; 0xec0 <__floatsisf+0x54>
     eb8:	9e e8       	ldi	r25, 0x8E	; 142
     eba:	87 2f       	mov	r24, r23
     ebc:	76 2f       	mov	r23, r22
     ebe:	05 c0       	rjmp	.+10     	; 0xeca <__floatsisf+0x5e>
     ec0:	66 23       	and	r22, r22
     ec2:	71 f0       	breq	.+28     	; 0xee0 <__floatsisf+0x74>
     ec4:	96 e8       	ldi	r25, 0x86	; 134
     ec6:	86 2f       	mov	r24, r22
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	2a f0       	brmi	.+10     	; 0xed8 <__floatsisf+0x6c>
     ece:	9a 95       	dec	r25
     ed0:	66 0f       	add	r22, r22
     ed2:	77 1f       	adc	r23, r23
     ed4:	88 1f       	adc	r24, r24
     ed6:	da f7       	brpl	.-10     	; 0xece <__floatsisf+0x62>
     ed8:	88 0f       	add	r24, r24
     eda:	96 95       	lsr	r25
     edc:	87 95       	ror	r24
     ede:	97 f9       	bld	r25, 7
     ee0:	08 95       	ret

00000ee2 <__fp_inf>:
     ee2:	97 f9       	bld	r25, 7
     ee4:	9f 67       	ori	r25, 0x7F	; 127
     ee6:	80 e8       	ldi	r24, 0x80	; 128
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	08 95       	ret

00000eee <__fp_nan>:
     eee:	9f ef       	ldi	r25, 0xFF	; 255
     ef0:	80 ec       	ldi	r24, 0xC0	; 192
     ef2:	08 95       	ret

00000ef4 <__fp_pscA>:
     ef4:	00 24       	eor	r0, r0
     ef6:	0a 94       	dec	r0
     ef8:	16 16       	cp	r1, r22
     efa:	17 06       	cpc	r1, r23
     efc:	18 06       	cpc	r1, r24
     efe:	09 06       	cpc	r0, r25
     f00:	08 95       	ret

00000f02 <__fp_pscB>:
     f02:	00 24       	eor	r0, r0
     f04:	0a 94       	dec	r0
     f06:	12 16       	cp	r1, r18
     f08:	13 06       	cpc	r1, r19
     f0a:	14 06       	cpc	r1, r20
     f0c:	05 06       	cpc	r0, r21
     f0e:	08 95       	ret

00000f10 <__fp_round>:
     f10:	09 2e       	mov	r0, r25
     f12:	03 94       	inc	r0
     f14:	00 0c       	add	r0, r0
     f16:	11 f4       	brne	.+4      	; 0xf1c <__fp_round+0xc>
     f18:	88 23       	and	r24, r24
     f1a:	52 f0       	brmi	.+20     	; 0xf30 <__fp_round+0x20>
     f1c:	bb 0f       	add	r27, r27
     f1e:	40 f4       	brcc	.+16     	; 0xf30 <__fp_round+0x20>
     f20:	bf 2b       	or	r27, r31
     f22:	11 f4       	brne	.+4      	; 0xf28 <__fp_round+0x18>
     f24:	60 ff       	sbrs	r22, 0
     f26:	04 c0       	rjmp	.+8      	; 0xf30 <__fp_round+0x20>
     f28:	6f 5f       	subi	r22, 0xFF	; 255
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	8f 4f       	sbci	r24, 0xFF	; 255
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	08 95       	ret

00000f32 <__fp_split3>:
     f32:	57 fd       	sbrc	r21, 7
     f34:	90 58       	subi	r25, 0x80	; 128
     f36:	44 0f       	add	r20, r20
     f38:	55 1f       	adc	r21, r21
     f3a:	59 f0       	breq	.+22     	; 0xf52 <__fp_splitA+0x10>
     f3c:	5f 3f       	cpi	r21, 0xFF	; 255
     f3e:	71 f0       	breq	.+28     	; 0xf5c <__fp_splitA+0x1a>
     f40:	47 95       	ror	r20

00000f42 <__fp_splitA>:
     f42:	88 0f       	add	r24, r24
     f44:	97 fb       	bst	r25, 7
     f46:	99 1f       	adc	r25, r25
     f48:	61 f0       	breq	.+24     	; 0xf62 <__fp_splitA+0x20>
     f4a:	9f 3f       	cpi	r25, 0xFF	; 255
     f4c:	79 f0       	breq	.+30     	; 0xf6c <__fp_splitA+0x2a>
     f4e:	87 95       	ror	r24
     f50:	08 95       	ret
     f52:	12 16       	cp	r1, r18
     f54:	13 06       	cpc	r1, r19
     f56:	14 06       	cpc	r1, r20
     f58:	55 1f       	adc	r21, r21
     f5a:	f2 cf       	rjmp	.-28     	; 0xf40 <__fp_split3+0xe>
     f5c:	46 95       	lsr	r20
     f5e:	f1 df       	rcall	.-30     	; 0xf42 <__fp_splitA>
     f60:	08 c0       	rjmp	.+16     	; 0xf72 <__fp_splitA+0x30>
     f62:	16 16       	cp	r1, r22
     f64:	17 06       	cpc	r1, r23
     f66:	18 06       	cpc	r1, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	f1 cf       	rjmp	.-30     	; 0xf4e <__fp_splitA+0xc>
     f6c:	86 95       	lsr	r24
     f6e:	71 05       	cpc	r23, r1
     f70:	61 05       	cpc	r22, r1
     f72:	08 94       	sec
     f74:	08 95       	ret

00000f76 <__fp_zero>:
     f76:	e8 94       	clt

00000f78 <__fp_szero>:
     f78:	bb 27       	eor	r27, r27
     f7a:	66 27       	eor	r22, r22
     f7c:	77 27       	eor	r23, r23
     f7e:	cb 01       	movw	r24, r22
     f80:	97 f9       	bld	r25, 7
     f82:	08 95       	ret

00000f84 <__mulsf3>:
     f84:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__mulsf3x>
     f88:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_round>
     f8c:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_pscA>
     f90:	38 f0       	brcs	.+14     	; 0xfa0 <__mulsf3+0x1c>
     f92:	0e 94 81 07 	call	0xf02	; 0xf02 <__fp_pscB>
     f96:	20 f0       	brcs	.+8      	; 0xfa0 <__mulsf3+0x1c>
     f98:	95 23       	and	r25, r21
     f9a:	11 f0       	breq	.+4      	; 0xfa0 <__mulsf3+0x1c>
     f9c:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_inf>
     fa0:	0c 94 77 07 	jmp	0xeee	; 0xeee <__fp_nan>
     fa4:	11 24       	eor	r1, r1
     fa6:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_szero>

00000faa <__mulsf3x>:
     faa:	0e 94 99 07 	call	0xf32	; 0xf32 <__fp_split3>
     fae:	70 f3       	brcs	.-36     	; 0xf8c <__mulsf3+0x8>

00000fb0 <__mulsf3_pse>:
     fb0:	95 9f       	mul	r25, r21
     fb2:	c1 f3       	breq	.-16     	; 0xfa4 <__mulsf3+0x20>
     fb4:	95 0f       	add	r25, r21
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	55 1f       	adc	r21, r21
     fba:	62 9f       	mul	r22, r18
     fbc:	f0 01       	movw	r30, r0
     fbe:	72 9f       	mul	r23, r18
     fc0:	bb 27       	eor	r27, r27
     fc2:	f0 0d       	add	r31, r0
     fc4:	b1 1d       	adc	r27, r1
     fc6:	63 9f       	mul	r22, r19
     fc8:	aa 27       	eor	r26, r26
     fca:	f0 0d       	add	r31, r0
     fcc:	b1 1d       	adc	r27, r1
     fce:	aa 1f       	adc	r26, r26
     fd0:	64 9f       	mul	r22, r20
     fd2:	66 27       	eor	r22, r22
     fd4:	b0 0d       	add	r27, r0
     fd6:	a1 1d       	adc	r26, r1
     fd8:	66 1f       	adc	r22, r22
     fda:	82 9f       	mul	r24, r18
     fdc:	22 27       	eor	r18, r18
     fde:	b0 0d       	add	r27, r0
     fe0:	a1 1d       	adc	r26, r1
     fe2:	62 1f       	adc	r22, r18
     fe4:	73 9f       	mul	r23, r19
     fe6:	b0 0d       	add	r27, r0
     fe8:	a1 1d       	adc	r26, r1
     fea:	62 1f       	adc	r22, r18
     fec:	83 9f       	mul	r24, r19
     fee:	a0 0d       	add	r26, r0
     ff0:	61 1d       	adc	r22, r1
     ff2:	22 1f       	adc	r18, r18
     ff4:	74 9f       	mul	r23, r20
     ff6:	33 27       	eor	r19, r19
     ff8:	a0 0d       	add	r26, r0
     ffa:	61 1d       	adc	r22, r1
     ffc:	23 1f       	adc	r18, r19
     ffe:	84 9f       	mul	r24, r20
    1000:	60 0d       	add	r22, r0
    1002:	21 1d       	adc	r18, r1
    1004:	82 2f       	mov	r24, r18
    1006:	76 2f       	mov	r23, r22
    1008:	6a 2f       	mov	r22, r26
    100a:	11 24       	eor	r1, r1
    100c:	9f 57       	subi	r25, 0x7F	; 127
    100e:	50 40       	sbci	r21, 0x00	; 0
    1010:	9a f0       	brmi	.+38     	; 0x1038 <__mulsf3_pse+0x88>
    1012:	f1 f0       	breq	.+60     	; 0x1050 <__mulsf3_pse+0xa0>
    1014:	88 23       	and	r24, r24
    1016:	4a f0       	brmi	.+18     	; 0x102a <__mulsf3_pse+0x7a>
    1018:	ee 0f       	add	r30, r30
    101a:	ff 1f       	adc	r31, r31
    101c:	bb 1f       	adc	r27, r27
    101e:	66 1f       	adc	r22, r22
    1020:	77 1f       	adc	r23, r23
    1022:	88 1f       	adc	r24, r24
    1024:	91 50       	subi	r25, 0x01	; 1
    1026:	50 40       	sbci	r21, 0x00	; 0
    1028:	a9 f7       	brne	.-22     	; 0x1014 <__mulsf3_pse+0x64>
    102a:	9e 3f       	cpi	r25, 0xFE	; 254
    102c:	51 05       	cpc	r21, r1
    102e:	80 f0       	brcs	.+32     	; 0x1050 <__mulsf3_pse+0xa0>
    1030:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_inf>
    1034:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_szero>
    1038:	5f 3f       	cpi	r21, 0xFF	; 255
    103a:	e4 f3       	brlt	.-8      	; 0x1034 <__mulsf3_pse+0x84>
    103c:	98 3e       	cpi	r25, 0xE8	; 232
    103e:	d4 f3       	brlt	.-12     	; 0x1034 <__mulsf3_pse+0x84>
    1040:	86 95       	lsr	r24
    1042:	77 95       	ror	r23
    1044:	67 95       	ror	r22
    1046:	b7 95       	ror	r27
    1048:	f7 95       	ror	r31
    104a:	e7 95       	ror	r30
    104c:	9f 5f       	subi	r25, 0xFF	; 255
    104e:	c1 f7       	brne	.-16     	; 0x1040 <__mulsf3_pse+0x90>
    1050:	fe 2b       	or	r31, r30
    1052:	88 0f       	add	r24, r24
    1054:	91 1d       	adc	r25, r1
    1056:	96 95       	lsr	r25
    1058:	87 95       	ror	r24
    105a:	97 f9       	bld	r25, 7
    105c:	08 95       	ret

0000105e <__itoa_ncheck>:
    105e:	bb 27       	eor	r27, r27
    1060:	4a 30       	cpi	r20, 0x0A	; 10
    1062:	31 f4       	brne	.+12     	; 0x1070 <__itoa_ncheck+0x12>
    1064:	99 23       	and	r25, r25
    1066:	22 f4       	brpl	.+8      	; 0x1070 <__itoa_ncheck+0x12>
    1068:	bd e2       	ldi	r27, 0x2D	; 45
    106a:	90 95       	com	r25
    106c:	81 95       	neg	r24
    106e:	9f 4f       	sbci	r25, 0xFF	; 255
    1070:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__utoa_common>

00001074 <__utoa_ncheck>:
    1074:	bb 27       	eor	r27, r27

00001076 <__utoa_common>:
    1076:	fb 01       	movw	r30, r22
    1078:	55 27       	eor	r21, r21
    107a:	aa 27       	eor	r26, r26
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	aa 1f       	adc	r26, r26
    1082:	a4 17       	cp	r26, r20
    1084:	10 f0       	brcs	.+4      	; 0x108a <__utoa_common+0x14>
    1086:	a4 1b       	sub	r26, r20
    1088:	83 95       	inc	r24
    108a:	50 51       	subi	r21, 0x10	; 16
    108c:	b9 f7       	brne	.-18     	; 0x107c <__utoa_common+0x6>
    108e:	a0 5d       	subi	r26, 0xD0	; 208
    1090:	aa 33       	cpi	r26, 0x3A	; 58
    1092:	08 f0       	brcs	.+2      	; 0x1096 <__utoa_common+0x20>
    1094:	a9 5d       	subi	r26, 0xD9	; 217
    1096:	a1 93       	st	Z+, r26
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	79 f7       	brne	.-34     	; 0x107a <__utoa_common+0x4>
    109c:	b1 11       	cpse	r27, r1
    109e:	b1 93       	st	Z+, r27
    10a0:	11 92       	st	Z+, r1
    10a2:	cb 01       	movw	r24, r22
    10a4:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <strrev>

000010a8 <strrev>:
    10a8:	dc 01       	movw	r26, r24
    10aa:	fc 01       	movw	r30, r24
    10ac:	67 2f       	mov	r22, r23
    10ae:	71 91       	ld	r23, Z+
    10b0:	77 23       	and	r23, r23
    10b2:	e1 f7       	brne	.-8      	; 0x10ac <strrev+0x4>
    10b4:	32 97       	sbiw	r30, 0x02	; 2
    10b6:	04 c0       	rjmp	.+8      	; 0x10c0 <strrev+0x18>
    10b8:	7c 91       	ld	r23, X
    10ba:	6d 93       	st	X+, r22
    10bc:	70 83       	st	Z, r23
    10be:	62 91       	ld	r22, -Z
    10c0:	ae 17       	cp	r26, r30
    10c2:	bf 07       	cpc	r27, r31
    10c4:	c8 f3       	brcs	.-14     	; 0x10b8 <strrev+0x10>
    10c6:	08 95       	ret

000010c8 <_exit>:
    10c8:	f8 94       	cli

000010ca <__stop_program>:
    10ca:	ff cf       	rjmp	.-2      	; 0x10ca <__stop_program>
