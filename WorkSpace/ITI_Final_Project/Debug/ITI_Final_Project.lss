
ITI_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000154e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  0000154e  000015e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080018e  0080018e  00001710  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003062  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000115f  00000000  00000000  00004b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002089  00000000  00000000  00005ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000964  00000000  00000000  00007d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012cd  00000000  00000000  000086d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a72  00000000  00000000  000099a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000b413  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__vector_1>
       8:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__vector_2>
       c:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__vector_6>
      1c:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__vector_10>
      2c:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dd 01 	call	0x3ba	; 0x3ba <main>
      8a:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TempSensor>:

}

void TempSensor(void){
	//Read Voltage value from ADC conversion
	u8 Temp = ADC_u8StartConversion(0);
      92:	80 e0       	ldi	r24, 0x00	; 0
      94:	0e 94 04 05 	call	0xa08	; 0xa08 <ADC_u8StartConversion>
	 * LM35 Temperature Sensor Vout Calculations with connection applied in proteus:
	 * Vout = 10 mV/C
	 * Vref = 5v
	 * Temp Calculation (Voltage Value*Voltage ref)/(10*(10^-3)*25*2^8)
	 */
	Temp = (u8)((Temp*5)/ (.01*256));
      98:	90 e0       	ldi	r25, 0x00	; 0
      9a:	bc 01       	movw	r22, r24
      9c:	66 0f       	add	r22, r22
      9e:	77 1f       	adc	r23, r23
      a0:	66 0f       	add	r22, r22
      a2:	77 1f       	adc	r23, r23
      a4:	68 0f       	add	r22, r24
      a6:	79 1f       	adc	r23, r25
      a8:	07 2e       	mov	r0, r23
      aa:	00 0c       	add	r0, r0
      ac:	88 0b       	sbc	r24, r24
      ae:	99 0b       	sbc	r25, r25
      b0:	0e 94 77 09 	call	0x12ee	; 0x12ee <__floatsisf>
      b4:	2a e0       	ldi	r18, 0x0A	; 10
      b6:	37 ed       	ldi	r19, 0xD7	; 215
      b8:	43 e2       	ldi	r20, 0x23	; 35
      ba:	50 e4       	ldi	r21, 0x40	; 64
      bc:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__divsf3>
      c0:	0e 94 46 09 	call	0x128c	; 0x128c <__fixunssfsi>
	//Check on Temp if over 35C ===> AC will work and turn off Fan if was on
	if(Temp>=35){
      c4:	63 32       	cpi	r22, 0x23	; 35
      c6:	58 f0       	brcs	.+22     	; 0xde <TempSensor+0x4c>
		//ac
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
      c8:	41 e0       	ldi	r20, 0x01	; 1
      ca:	66 e0       	ldi	r22, 0x06	; 6
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
		//fan
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
      d2:	40 e0       	ldi	r20, 0x00	; 0
      d4:	67 e0       	ldi	r22, 0x07	; 7
      d6:	83 e0       	ldi	r24, 0x03	; 3
      d8:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
      dc:	08 95       	ret
	}
	//Check on Temp if over 25C ===> Fan will work and turn off AC if was on
	else if (Temp>=25){
      de:	69 31       	cpi	r22, 0x19	; 25
      e0:	58 f0       	brcs	.+22     	; 0xf8 <TempSensor+0x66>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	66 e0       	ldi	r22, 0x06	; 6
      e6:	83 e0       	ldi	r24, 0x03	; 3
      e8:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH);
      ec:	41 e0       	ldi	r20, 0x01	; 1
      ee:	67 e0       	ldi	r22, 0x07	; 7
      f0:	83 e0       	ldi	r24, 0x03	; 3
      f2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
      f6:	08 95       	ret
	}//Else State declare that Temp is lower than 25 so turning off both AC and Fan
	else{
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
      f8:	40 e0       	ldi	r20, 0x00	; 0
      fa:	66 e0       	ldi	r22, 0x06	; 6
      fc:	83 e0       	ldi	r24, 0x03	; 3
      fe:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
     102:	40 e0       	ldi	r20, 0x00	; 0
     104:	67 e0       	ldi	r22, 0x07	; 7
     106:	83 e0       	ldi	r24, 0x03	; 3
     108:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
     10c:	08 95       	ret

0000010e <void_SetEPROMLockerPass>:


}
void void_SetEPROMLockerPass(void ){
	// get low byte
	Global_u8SavedDoorPassLowByte=(u8)Global_u16EPROMDoorPass;
     10e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <Global_u16EPROMDoorPass>
     112:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     116:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <Global_u8SavedDoorPassLowByte>
	// get high byte
	Global_u8SavedDoorPassHighByte=(u8)(Global_u16EPROMDoorPass>>8);
     11a:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <Global_u8SavedDoorPassHighByte>
	// save low byte
	EEPROM_voidSendDataByte(Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
     11e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     122:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     126:	0e 94 16 03 	call	0x62c	; 0x62c <EEPROM_voidSendDataByte>
	TIMER_delay_ms(300);
     12a:	6c e2       	ldi	r22, 0x2C	; 44
     12c:	71 e0       	ldi	r23, 0x01	; 1
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 3c 06 	call	0xc78	; 0xc78 <TIMER_delay_ms>
	// save high byte
	EEPROM_voidSendDataByte(Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
     136:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     13a:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     13e:	66 5f       	subi	r22, 0xF6	; 246
     140:	7f 4f       	sbci	r23, 0xFF	; 255
     142:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <Global_u8SavedDoorPassHighByte>
     146:	0e 94 16 03 	call	0x62c	; 0x62c <EEPROM_voidSendDataByte>
	TIMER_delay_ms(300);
     14a:	6c e2       	ldi	r22, 0x2C	; 44
     14c:	71 e0       	ldi	r23, 0x01	; 1
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 3c 06 	call	0xc78	; 0xc78 <TIMER_delay_ms>
     156:	08 95       	ret

00000158 <void_Locker>:
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
	}
}

void void_Locker(){
     158:	cf 93       	push	r28
	/*To set new pass enter your old pass and press clear*/
	/* max password digits is 4*/

	// pressed key
	u8 Local_u8Keypad_Key=KPD_u8GetPressedKey();
     15a:	0e 94 94 03 	call	0x728	; 0x728 <KPD_u8GetPressedKey>
     15e:	c8 2f       	mov	r28, r24
	/* case user entered clear */
		/* two cases to enter clear
		* First : To set new pass
		* Second : clear screen and clear the entered password
		*/
	if(Local_u8Keypad_Key==KPD_CLEAR){
     160:	8d 30       	cpi	r24, 0x0D	; 13
     162:	09 f0       	breq	.+2      	; 0x166 <void_Locker+0xe>
     164:	85 c0       	rjmp	.+266    	; 0x270 <void_Locker+0x118>

		// First case : set new pass
		if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
     166:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <Local_u16DoorPassword.1923>
     16a:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <Local_u16DoorPassword.1923+0x1>
     16e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <Global_u16EPROMDoorPass>
     172:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     176:	28 17       	cp	r18, r24
     178:	39 07       	cpc	r19, r25
     17a:	09 f0       	breq	.+2      	; 0x17e <void_Locker+0x26>
     17c:	70 c0       	rjmp	.+224    	; 0x25e <void_Locker+0x106>

			LCD_voidClearDisplay();
     17e:	0e 94 8c 04 	call	0x918	; 0x918 <LCD_voidClearDisplay>
			// setting new password
				// clear all saved passes and digit counter
				Global_u16EPROMDoorPass=0;
     182:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     186:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <Global_u16EPROMDoorPass>
				Local_u16DoorPassword=0;
     18a:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <Local_u16DoorPassword.1923+0x1>
     18e:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <Local_u16DoorPassword.1923>
				Local_u8DigitsCount=0;
     192:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1924>

				LCD_voidSendString("Set new pass:");
     196:	8e e6       	ldi	r24, 0x6E	; 110
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 99 04 	call	0x932	; 0x932 <LCD_voidSendString>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				while(Local_u8Keypad_Key != KPD_ENTER ){

					Local_u8Keypad_Key=KPD_u8GetPressedKey();
     19e:	0e 94 94 03 	call	0x728	; 0x728 <KPD_u8GetPressedKey>
     1a2:	c8 2f       	mov	r28, r24
					// check if the user entered more than 4 digits
					if(Local_u8DigitsCount==Max_Pass_Digits+1){
     1a4:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <Local_u8DigitsCount.1924>
     1a8:	85 30       	cpi	r24, 0x05	; 5
     1aa:	a1 f4       	brne	.+40     	; 0x1d4 <void_Locker+0x7c>
						LCD_voidClearDisplay();
     1ac:	0e 94 8c 04 	call	0x918	; 0x918 <LCD_voidClearDisplay>
						LCD_voidSendString("ERROR !!!!");
     1b0:	8c e7       	ldi	r24, 0x7C	; 124
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 99 04 	call	0x932	; 0x932 <LCD_voidSendString>
						LCD_voidGoTOXY(1,0);
     1b8:	60 e0       	ldi	r22, 0x00	; 0
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	0e 94 90 04 	call	0x920	; 0x920 <LCD_voidGoTOXY>
						LCD_voidSendString("Max Digits is 4");
     1c0:	87 e8       	ldi	r24, 0x87	; 135
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 99 04 	call	0x932	; 0x932 <LCD_voidSendString>
						Local_u8DigitsCount=0;
     1c8:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1924>
						Global_u16EPROMDoorPass=0;
     1cc:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     1d0:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <Global_u16EPROMDoorPass>
					}

					if(Local_u8Keypad_Key==KPD_CLEAR){
     1d4:	cd 30       	cpi	r28, 0x0D	; 13
     1d6:	49 f4       	brne	.+18     	; 0x1ea <void_Locker+0x92>
						Local_u8DigitsCount=0;
     1d8:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1924>
						LCD_voidClearDisplay();
     1dc:	0e 94 8c 04 	call	0x918	; 0x918 <LCD_voidClearDisplay>
						Global_u16EPROMDoorPass=0;
     1e0:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     1e4:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <Global_u16EPROMDoorPass>
     1e8:	da cf       	rjmp	.-76     	; 0x19e <void_Locker+0x46>

					}
					else if(Local_u8Keypad_Key !=KPD_NO_PRESS && Local_u8Keypad_Key!=KPD_ENTER){
     1ea:	ca 3a       	cpi	r28, 0xAA	; 170
     1ec:	c1 f2       	breq	.-80     	; 0x19e <void_Locker+0x46>
     1ee:	cc 30       	cpi	r28, 0x0C	; 12
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <void_Locker+0x9c>
     1f2:	ac c0       	rjmp	.+344    	; 0x34c <void_Locker+0x1f4>
						// if it is the first digit that user enter --> clear any previous message on the screen
						if(Local_u8DigitsCount==0)
     1f4:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <Local_u8DigitsCount.1924>
     1f8:	81 11       	cpse	r24, r1
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <void_Locker+0xa8>
							LCD_voidClearDisplay();
     1fc:	0e 94 8c 04 	call	0x918	; 0x918 <LCD_voidClearDisplay>
						/* dispaly the pressed key for 1.2 Sec then hide it and dispaly *  */
						LCD_voidSendNumber(Local_u8Keypad_Key);
     200:	6c 2f       	mov	r22, r28
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 af 04 	call	0x95e	; 0x95e <LCD_voidSendNumber>
						TIMER_delay_ms(1200);
     20c:	60 eb       	ldi	r22, 0xB0	; 176
     20e:	74 e0       	ldi	r23, 0x04	; 4
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 3c 06 	call	0xc78	; 0xc78 <TIMER_delay_ms>
						LCD_voidGoTOXY(0,Local_u8DigitsCount);
     218:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <Local_u8DigitsCount.1924>
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	0e 94 90 04 	call	0x920	; 0x920 <LCD_voidGoTOXY>
						LCD_voidSendData('*');
     222:	8a e2       	ldi	r24, 0x2A	; 42
     224:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_voidSendData>
						Local_u8DigitsCount++;
     228:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <Local_u8DigitsCount.1924>
     22c:	8f 5f       	subi	r24, 0xFF	; 255
     22e:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <Local_u8DigitsCount.1924>
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
     232:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <Global_u16EPROMDoorPass>
     236:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     23a:	9c 01       	movw	r18, r24
     23c:	22 0f       	add	r18, r18
     23e:	33 1f       	adc	r19, r19
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	82 0f       	add	r24, r18
     24e:	93 1f       	adc	r25, r19
     250:	8c 0f       	add	r24, r28
     252:	91 1d       	adc	r25, r1
     254:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     258:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Global_u16EPROMDoorPass>
     25c:	a0 cf       	rjmp	.-192    	; 0x19e <void_Locker+0x46>

		}

		// Second case : to clear Screen or typed password
		else{
		LCD_voidClearDisplay();
     25e:	0e 94 8c 04 	call	0x918	; 0x918 <LCD_voidClearDisplay>
		Local_u16DoorPassword=0;
     262:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <Local_u16DoorPassword.1923+0x1>
     266:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <Local_u16DoorPassword.1923>
		Local_u8DigitsCount=0;
     26a:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1924>
     26e:	78 c0       	rjmp	.+240    	; 0x360 <void_Locker+0x208>

		}
	}
	/******************************************************************************************************************************************************************/
	/* case user pressed enter or equal */
	else if(Local_u8Keypad_Key==KPD_ENTER){
     270:	8c 30       	cpi	r24, 0x0C	; 12
     272:	89 f5       	brne	.+98     	; 0x2d6 <void_Locker+0x17e>

		LCD_voidClearDisplay();
     274:	0e 94 8c 04 	call	0x918	; 0x918 <LCD_voidClearDisplay>
		// check if entered pass is correct
		 if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
     278:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <Local_u16DoorPassword.1923>
     27c:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <Local_u16DoorPassword.1923+0x1>
     280:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <Global_u16EPROMDoorPass>
     284:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     288:	28 17       	cp	r18, r24
     28a:	39 07       	cpc	r19, r25
     28c:	c9 f4       	brne	.+50     	; 0x2c0 <void_Locker+0x168>
			// check door status
			if(Local_u8DoorStatus==0){
     28e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__data_end>
     292:	81 11       	cpse	r24, r1
     294:	0b c0       	rjmp	.+22     	; 0x2ac <void_Locker+0x154>
				LCD_voidSendString("Locker is opened");
     296:	87 e9       	ldi	r24, 0x97	; 151
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 99 04 	call	0x932	; 0x932 <LCD_voidSendString>
				// run servo
				Servo_voidDegree(180);
     29e:	84 eb       	ldi	r24, 0xB4	; 180
     2a0:	0e 94 d7 04 	call	0x9ae	; 0x9ae <Servo_voidDegree>
				Local_u8DoorStatus=1;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__data_end>
     2aa:	0e c0       	rjmp	.+28     	; 0x2c8 <void_Locker+0x170>

			}
			else{
				LCD_voidSendString("Locker is Closed");
     2ac:	88 ea       	ldi	r24, 0xA8	; 168
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 99 04 	call	0x932	; 0x932 <LCD_voidSendString>
				// stop servo
				Servo_voidDegree(0);
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <Servo_voidDegree>
				Local_u8DoorStatus=0;
     2ba:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <__data_end>
     2be:	04 c0       	rjmp	.+8      	; 0x2c8 <void_Locker+0x170>

			}

		}
		else{
			LCD_voidSendString("Wrong pass! ");
     2c0:	89 eb       	ldi	r24, 0xB9	; 185
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 99 04 	call	0x932	; 0x932 <LCD_voidSendString>
			
			// reset the entered password after typing enter
			
		}
		Local_u16DoorPassword=0;
     2c8:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <Local_u16DoorPassword.1923+0x1>
     2cc:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <Local_u16DoorPassword.1923>
		Local_u8DigitsCount=0;
     2d0:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1924>
     2d4:	45 c0       	rjmp	.+138    	; 0x360 <void_Locker+0x208>
	}

	/****************************************************************************************************************************************************************/
	/* Case user pressed a digit key*/
	else if(Local_u8Keypad_Key != KPD_NO_PRESS){
     2d6:	8a 3a       	cpi	r24, 0xAA	; 170
     2d8:	09 f4       	brne	.+2      	; 0x2dc <void_Locker+0x184>
     2da:	42 c0       	rjmp	.+132    	; 0x360 <void_Locker+0x208>
		// if it is the first digit that user enter --> clear any previous message on the screen
		if(Local_u8DigitsCount==0)
     2dc:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <Local_u8DigitsCount.1924>
     2e0:	81 11       	cpse	r24, r1
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <void_Locker+0x190>
			LCD_voidClearDisplay();
     2e4:	0e 94 8c 04 	call	0x918	; 0x918 <LCD_voidClearDisplay>
		/* dispaly the pressed key for 1.2 Sec then hide it and dispaly *  */
		LCD_voidSendNumber(Local_u8Keypad_Key);
     2e8:	6c 2f       	mov	r22, r28
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 af 04 	call	0x95e	; 0x95e <LCD_voidSendNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f4:	2f e7       	ldi	r18, 0x7F	; 127
     2f6:	8a e1       	ldi	r24, 0x1A	; 26
     2f8:	96 e0       	ldi	r25, 0x06	; 6
     2fa:	21 50       	subi	r18, 0x01	; 1
     2fc:	80 40       	sbci	r24, 0x00	; 0
     2fe:	90 40       	sbci	r25, 0x00	; 0
     300:	e1 f7       	brne	.-8      	; 0x2fa <void_Locker+0x1a2>
     302:	00 c0       	rjmp	.+0      	; 0x304 <void_Locker+0x1ac>
     304:	00 00       	nop
		_delay_ms(250);
		LCD_voidGoTOXY(0,Local_u8DigitsCount);
     306:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <Local_u8DigitsCount.1924>
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	0e 94 90 04 	call	0x920	; 0x920 <LCD_voidGoTOXY>
		LCD_voidSendData('*');
     310:	8a e2       	ldi	r24, 0x2A	; 42
     312:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_voidSendData>

		Local_u8DigitsCount++;
     316:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <Local_u8DigitsCount.1924>
     31a:	8f 5f       	subi	r24, 0xFF	; 255
     31c:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <Local_u8DigitsCount.1924>
		Local_u16DoorPassword=Local_u16DoorPassword*10 + Local_u8Keypad_Key;
     320:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <Local_u16DoorPassword.1923>
     324:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <Local_u16DoorPassword.1923+0x1>
     328:	9c 01       	movw	r18, r24
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	88 0f       	add	r24, r24
     334:	99 1f       	adc	r25, r25
     336:	88 0f       	add	r24, r24
     338:	99 1f       	adc	r25, r25
     33a:	82 0f       	add	r24, r18
     33c:	93 1f       	adc	r25, r19
     33e:	8c 0f       	add	r24, r28
     340:	91 1d       	adc	r25, r1
     342:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <Local_u16DoorPassword.1923+0x1>
     346:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <Local_u16DoorPassword.1923>


	}


}
     34a:	0a c0       	rjmp	.+20     	; 0x360 <void_Locker+0x208>
						Local_u8DigitsCount++;
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
					}

				}
				LCD_voidClearDisplay();
     34c:	0e 94 8c 04 	call	0x918	; 0x918 <LCD_voidClearDisplay>
				LCD_voidSendString("pass is updated");
     350:	86 ec       	ldi	r24, 0xC6	; 198
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 99 04 	call	0x932	; 0x932 <LCD_voidSendString>
				// reset counter
				Local_u8DigitsCount=0;
     358:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <Local_u8DigitsCount.1924>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				// save the new pass to eeprom
				void_SetEPROMLockerPass();
     35c:	0e 94 87 00 	call	0x10e	; 0x10e <void_SetEPROMLockerPass>


	}


}
     360:	cf 91       	pop	r28
     362:	08 95       	ret

00000364 <void_GetEPROMLockerPass>:
}

void void_GetEPROMLockerPass(void){

	// read pass low byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
     364:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     368:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     36c:	87 ea       	ldi	r24, 0xA7	; 167
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	0e 94 2e 03 	call	0x65c	; 0x65c <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
     374:	6c e2       	ldi	r22, 0x2C	; 44
     376:	71 e0       	ldi	r23, 0x01	; 1
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 3c 06 	call	0xc78	; 0xc78 <TIMER_delay_ms>
	// read pass high byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
     380:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
     384:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
     388:	66 5f       	subi	r22, 0xF6	; 246
     38a:	7f 4f       	sbci	r23, 0xFF	; 255
     38c:	84 ea       	ldi	r24, 0xA4	; 164
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	0e 94 2e 03 	call	0x65c	; 0x65c <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
     394:	6c e2       	ldi	r22, 0x2C	; 44
     396:	71 e0       	ldi	r23, 0x01	; 1
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 3c 06 	call	0xc78	; 0xc78 <TIMER_delay_ms>
	// combine the high and low byte
	Global_u16EPROMDoorPass= ( (u16)(Global_u8SavedDoorPassHighByte<<8) )| Global_u8SavedDoorPassLowByte;
     3a0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <Global_u8SavedDoorPassHighByte>
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	98 2f       	mov	r25, r24
     3a8:	88 27       	eor	r24, r24
     3aa:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <Global_u8SavedDoorPassLowByte>
     3ae:	82 2b       	or	r24, r18
     3b0:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     3b4:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Global_u16EPROMDoorPass>
     3b8:	08 95       	ret

000003ba <main>:
void void_Locker(void);
void void_SetEPROMLockerPass(void);
void void_GetEPROMLockerPass(void);

void main(void)
{	
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	1f 92       	push	r1
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16EPROMSystemStateAddress=5;
	u8 Local_u8EPROMSystemState=0;
     3c4:	19 82       	std	Y+1, r1	; 0x01
	
	ADC_voidInit();
     3c6:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_OUTPUT);
     3ca:	41 e0       	ldi	r20, 0x01	; 1
     3cc:	66 e0       	ldi	r22, 0x06	; 6
     3ce:	83 e0       	ldi	r24, 0x03	; 3
     3d0:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_OUTPUT);
     3d4:	41 e0       	ldi	r20, 0x01	; 1
     3d6:	67 e0       	ldi	r22, 0x07	; 7
     3d8:	83 e0       	ldi	r24, 0x03	; 3
     3da:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_voidSetPinDirection>

	LCD_voidInit();
     3de:	0e 94 63 04 	call	0x8c6	; 0x8c6 <LCD_voidInit>
	KPD_voidInit();
     3e2:	0e 94 4d 03 	call	0x69a	; 0x69a <KPD_voidInit>
	//servo pin
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
     3e6:	41 e0       	ldi	r20, 0x01	; 1
     3e8:	65 e0       	ldi	r22, 0x05	; 5
     3ea:	83 e0       	ldi	r24, 0x03	; 3
     3ec:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_voidSetPinDirection>
	Servo_voidInit();
     3f0:	0e 94 ce 04 	call	0x99c	; 0x99c <Servo_voidInit>

	TWI_voidMasterInit(0);
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	0e 94 72 07 	call	0xee4	; 0xee4 <TWI_voidMasterInit>
	
	/*Read system state form EPROM to check if this is the first time to run the project*/
	EEPROM_voidReadDataByte(&Local_u8EPROMSystemState,Local_u16EPROMSystemStateAddress);
     3fa:	65 e0       	ldi	r22, 0x05	; 5
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	ce 01       	movw	r24, r28
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	0e 94 2e 03 	call	0x65c	; 0x65c <EEPROM_voidReadDataByte>
	if(Local_u8EPROMSystemState != SystemHasRunBefore){
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	8c 31       	cpi	r24, 0x1C	; 28
     40a:	d1 f0       	breq	.+52     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		LCD_voidSendString("First Run");
     40c:	86 ed       	ldi	r24, 0xD6	; 214
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	0e 94 99 04 	call	0x932	; 0x932 <LCD_voidSendString>
		// save the system state as has run before
		Local_u8EPROMSystemState=SystemHasRunBefore;
     414:	8c e1       	ldi	r24, 0x1C	; 28
     416:	89 83       	std	Y+1, r24	; 0x01
		// save initial password = 100
		Global_u16EPROMDoorPass=1234;
     418:	82 ed       	ldi	r24, 0xD2	; 210
     41a:	94 e0       	ldi	r25, 0x04	; 4
     41c:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <Global_u16EPROMDoorPass+0x1>
     420:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <Global_u16EPROMDoorPass>
		void_SetEPROMLockerPass();
     424:	0e 94 87 00 	call	0x10e	; 0x10e <void_SetEPROMLockerPass>
		// save the system state to eprom
		EEPROM_voidSendDataByte(Local_u8EPROMSystemState,Local_u16EPROMSystemStateAddress);
     428:	65 e0       	ldi	r22, 0x05	; 5
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	0e 94 16 03 	call	0x62c	; 0x62c <EEPROM_voidSendDataByte>
		TIMER_delay_ms(300);
     432:	6c e2       	ldi	r22, 0x2C	; 44
     434:	71 e0       	ldi	r23, 0x01	; 1
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 3c 06 	call	0xc78	; 0xc78 <TIMER_delay_ms>
     43e:	04 c0       	rjmp	.+8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	}
	else
		LCD_voidSendString("System is On");
     440:	80 ee       	ldi	r24, 0xE0	; 224
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 99 04 	call	0x932	; 0x932 <LCD_voidSendString>

	// get the saved password and store it the global EPROM_variable
	void_GetEPROMLockerPass();
     448:	0e 94 b2 01 	call	0x364	; 0x364 <void_GetEPROMLockerPass>
	
	//LCD_voidSendNumber(Global_u16EPROMDoorPass);
	
	// Initialize USART
	USART_voidInit();
     44c:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <USART_voidInit>
	//Initialize Call Back Function
	USART_voidCallBackFunction(&USART_Start);
     450:	82 e6       	ldi	r24, 0x62	; 98
     452:	92 e0       	ldi	r25, 0x02	; 2
     454:	0e 94 37 08 	call	0x106e	; 0x106e <USART_voidCallBackFunction>
	//Enable USART PIE
	USART_voidEnableRxINT();
     458:	0e 94 3c 08 	call	0x1078	; 0x1078 <USART_voidEnableRxINT>
	//Enable GIE
	GIE_voidEnableGlobalInt();
     45c:	0e 94 38 06 	call	0xc70	; 0xc70 <GIE_voidEnableGlobalInt>
	// LED Pins
	DIO_voidSetPinDirection(DIO_PORTC,LIGHT1,DIO_OUTPUT);
     460:	41 e0       	ldi	r20, 0x01	; 1
     462:	65 e0       	ldi	r22, 0x05	; 5
     464:	82 e0       	ldi	r24, 0x02	; 2
     466:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,LIGHT2,DIO_OUTPUT);
     46a:	41 e0       	ldi	r20, 0x01	; 1
     46c:	66 e0       	ldi	r22, 0x06	; 6
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC,LIGHT3,DIO_OUTPUT);
     474:	41 e0       	ldi	r20, 0x01	; 1
     476:	67 e0       	ldi	r22, 0x07	; 7
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_voidSetPinDirection>

	while(1){
		/*USART is Controlled by ISR TIMER1_COMPB*/
		USART_voidEnableRxINT();
     47e:	0e 94 3c 08 	call	0x1078	; 0x1078 <USART_voidEnableRxINT>
		//Call locker Control Function
		void_Locker();
     482:	0e 94 ac 00 	call	0x158	; 0x158 <void_Locker>
		//Call Temperature Sensor Control Function
		TempSensor();
     486:	0e 94 49 00 	call	0x92	; 0x92 <TempSensor>
     48a:	f9 cf       	rjmp	.-14     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>

0000048c <USART_voidProcessCommand>:
	}
	//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
	Servo_voidInit();
}

ConditionsState USART_voidProcessCommand(u8 command,u8 Local_LightNum) {
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	c8 2f       	mov	r28, r24
     492:	d6 2f       	mov	r29, r22
	ConditionsState Con_St = NoErrors; // Check Variable
	LCD_voidClearDisplay();
     494:	0e 94 8c 04 	call	0x918	; 0x918 <LCD_voidClearDisplay>
	//Check Command to turn Light on or off
	if (command=='1') {
     498:	c1 33       	cpi	r28, 0x31	; 49
     49a:	39 f4       	brne	.+14     	; 0x4aa <USART_voidProcessCommand+0x1e>
		// Turning ON ROOM 1 LIGHT
		DIO_voidSetPinValue(DIO_PORTC,Local_LightNum,DIO_HIGH);
     49c:	41 e0       	ldi	r20, 0x01	; 1
     49e:	6d 2f       	mov	r22, r29
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
		
		Con_St = ROOM_LIGHT_ON;
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	0a c0       	rjmp	.+20     	; 0x4be <USART_voidProcessCommand+0x32>
	}
	else if ( command=='0') {
     4aa:	c0 33       	cpi	r28, 0x30	; 48
     4ac:	39 f4       	brne	.+14     	; 0x4bc <USART_voidProcessCommand+0x30>
		// Turning OFF ROOM 1 LIGHT
		DIO_voidSetPinValue(DIO_PORTC,Local_LightNum,DIO_LOW);
     4ae:	40 e0       	ldi	r20, 0x00	; 0
     4b0:	6d 2f       	mov	r22, r29
     4b2:	82 e0       	ldi	r24, 0x02	; 2
     4b4:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
		
		Con_St = ROOM_LIGHT_OFF;
     4b8:	82 e0       	ldi	r24, 0x02	; 2
     4ba:	01 c0       	rjmp	.+2      	; 0x4be <USART_voidProcessCommand+0x32>
	}
	else{ // IF input is not 0 nor 1 ==> INCORRECT INP
		Con_St = Input_Format_Is_Incorrect;
     4bc:	83 e0       	ldi	r24, 0x03	; 3
	}
	return Con_St;
}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <USART_Start>:
	TIMER_delay_ms(300);
	// combine the high and low byte
	Global_u16EPROMDoorPass= ( (u16)(Global_u8SavedDoorPassHighByte<<8) )| Global_u8SavedDoorPassLowByte;
}

void USART_Start(void){
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <USART_Start+0x12>
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <USART_Start+0x14>
     4d8:	00 d0       	rcall	.+0      	; 0x4da <USART_Start+0x16>
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
	//Save First Received Input AS It MUST be '*' If not return from function
	u8 FirstReceived = USART_u8ReceiverData();
     4de:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <USART_u8ReceiverData>
	if(FirstReceived!='*')
     4e2:	8a 32       	cpi	r24, 0x2A	; 42
     4e4:	09 f0       	breq	.+2      	; 0x4e8 <USART_Start+0x24>
     4e6:	93 c0       	rjmp	.+294    	; 0x60e <USART_Start+0x14a>
		return;
	//Start Display Message
	USART_voidTransmitString("Expected INP Format \" *i*x*x# \" :\r");
     4e8:	8d ee       	ldi	r24, 0xED	; 237
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 21 08 	call	0x1042	; 0x1042 <USART_voidTransmitString>

	//Display first '*'
	USART_voidTransmitData(FirstReceived);
     4f0:	8a e2       	ldi	r24, 0x2A	; 42
     4f2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <USART_voidTransmitData>

	//Clear LCD to Start Displaying on it
	LCD_voidClearDisplay();
     4f6:	0e 94 8c 04 	call	0x918	; 0x918 <LCD_voidClearDisplay>
	LCD_voidSendData('*');
     4fa:	8a e2       	ldi	r24, 0x2A	; 42
     4fc:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_voidSendData>
     500:	8e 01       	movw	r16, r28
     502:	0f 5f       	subi	r16, 0xFF	; 255
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	6e 01       	movw	r12, r28
     508:	87 e0       	ldi	r24, 0x07	; 7
     50a:	c8 0e       	add	r12, r24
     50c:	d1 1c       	adc	r13, r1
	TimeOut TimeOut_Err;
	// Loop until reaching Max val of Input, if stucked Timer will INT and Time out
	while (Max_Num) {
		 //Receive data element by element
		 TimeOut TimeOut_Err;
		 TimeOut_Err = USART_u8TimeOUTReceiverData(&DataReceived[DataIdx]);
     50e:	78 01       	movw	r14, r16
     510:	c8 01       	movw	r24, r16
     512:	0e 94 f5 07 	call	0xfea	; 0xfea <USART_u8TimeOUTReceiverData>
		//DataReceived[DataIdx] = USART_u8ReceiverData();
		if(TimeOut_Err == TimeOUT_Occured){
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	79 f4       	brne	.+30     	; 0x538 <USART_Start+0x74>
			 * 1- SET TCNT1 with 0 before initializing timer
			 * 2- SET Comparing Value by TIMEOUTVALUE Macro  e.g. 40000====> 5.12 sec "time waiting before time out"
			 * 3- Initialize Timer with 1024 Prescaler
			 */
			//Sending Warning Message if TIMEOUT and return from function
			USART_voidTransmitData('\r');
     51a:	8d e0       	ldi	r24, 0x0D	; 13
     51c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <USART_voidTransmitData>
			USART_voidTransmitString("##ERROR: Time Out");
     520:	80 e1       	ldi	r24, 0x10	; 16
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 21 08 	call	0x1042	; 0x1042 <USART_voidTransmitString>
			USART_voidTransmitData('\r');
     528:	8d e0       	ldi	r24, 0x0D	; 13
     52a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <USART_voidTransmitData>
			//Clear LCD
			LCD_voidClearDisplay();
     52e:	0e 94 8c 04 	call	0x918	; 0x918 <LCD_voidClearDisplay>
			//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
			Servo_voidInit();
     532:	0e 94 ce 04 	call	0x99c	; 0x99c <Servo_voidInit>
			return;
     536:	6b c0       	rjmp	.+214    	; 0x60e <USART_Start+0x14a>
		}
		//Send Received Data to Display it on Virtual Terminal
		USART_voidTransmitData(DataReceived[DataIdx] );
     538:	f8 01       	movw	r30, r16
     53a:	81 91       	ld	r24, Z+
     53c:	8f 01       	movw	r16, r30
     53e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <USART_voidTransmitData>
		//Display Data on LCD
		LCD_voidSendData(DataReceived[DataIdx]);
     542:	f7 01       	movw	r30, r14
     544:	80 81       	ld	r24, Z
     546:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_voidSendData>
	//Containing max enter value
	u8 Max_Num = INPUT_DECIDED_LENGTH-1;
	//initialize error state
	TimeOut TimeOut_Err;
	// Loop until reaching Max val of Input, if stucked Timer will INT and Time out
	while (Max_Num) {
     54a:	0c 15       	cp	r16, r12
     54c:	1d 05       	cpc	r17, r13
     54e:	f9 f6       	brne	.-66     	; 0x50e <USART_Start+0x4a>
		Max_Num --;
	
			}

	//Display Enter in the terminal
	USART_voidTransmitData('\r');
     550:	8d e0       	ldi	r24, 0x0D	; 13
     552:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <USART_voidTransmitData>

	//Checking Input Format
	ConditionsState Con_St=NoErrors;
	//Check all input Defined values * and i and * and * and #
	if(DataReceived[0]!='i' || DataReceived[1]!='*' || DataReceived[3]!='*' || DataReceived[5]!='#'){
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	89 36       	cpi	r24, 0x69	; 105
     55a:	49 f4       	brne	.+18     	; 0x56e <USART_Start+0xaa>
     55c:	8a 81       	ldd	r24, Y+2	; 0x02
     55e:	8a 32       	cpi	r24, 0x2A	; 42
     560:	31 f4       	brne	.+12     	; 0x56e <USART_Start+0xaa>
     562:	8c 81       	ldd	r24, Y+4	; 0x04
     564:	8a 32       	cpi	r24, 0x2A	; 42
     566:	19 f4       	brne	.+6      	; 0x56e <USART_Start+0xaa>
     568:	8e 81       	ldd	r24, Y+6	; 0x06
     56a:	83 32       	cpi	r24, 0x23	; 35
     56c:	39 f0       	breq	.+14     	; 0x57c <USART_Start+0xb8>
		Con_St = Input_Format_Is_Incorrect;
		USART_voidTransmitString("##INCORRECT INPUT FORMAT\r");
     56e:	82 e2       	ldi	r24, 0x22	; 34
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	0e 94 21 08 	call	0x1042	; 0x1042 <USART_voidTransmitString>
		//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
		Servo_voidInit();
     576:	0e 94 ce 04 	call	0x99c	; 0x99c <Servo_voidInit>
		return;
     57a:	49 c0       	rjmp	.+146    	; 0x60e <USART_Start+0x14a>
	}
	// Check First Undefined Val to be 1 or 2 or 3
	// also, sending it to USART_voidProcessCommand to light correct led
	// Receiving return value as indicator to incorrect second undefined Val
	if(DataReceived[2]=='1')
     57c:	8b 81       	ldd	r24, Y+3	; 0x03
     57e:	81 33       	cpi	r24, 0x31	; 49
     580:	31 f4       	brne	.+12     	; 0x58e <USART_Start+0xca>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT1);
     582:	65 e0       	ldi	r22, 0x05	; 5
     584:	8d 81       	ldd	r24, Y+5	; 0x05
     586:	0e 94 46 02 	call	0x48c	; 0x48c <USART_voidProcessCommand>
     58a:	18 2f       	mov	r17, r24
     58c:	0f c0       	rjmp	.+30     	; 0x5ac <USART_Start+0xe8>
	else if(DataReceived[2]=='2')
     58e:	82 33       	cpi	r24, 0x32	; 50
     590:	31 f4       	brne	.+12     	; 0x59e <USART_Start+0xda>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT2);
     592:	66 e0       	ldi	r22, 0x06	; 6
     594:	8d 81       	ldd	r24, Y+5	; 0x05
     596:	0e 94 46 02 	call	0x48c	; 0x48c <USART_voidProcessCommand>
     59a:	18 2f       	mov	r17, r24
     59c:	07 c0       	rjmp	.+14     	; 0x5ac <USART_Start+0xe8>
	else if (DataReceived[2]=='3')
     59e:	83 33       	cpi	r24, 0x33	; 51
     5a0:	39 f4       	brne	.+14     	; 0x5b0 <USART_Start+0xec>
		Con_St = USART_voidProcessCommand(DataReceived[4],LIGHT3);
     5a2:	67 e0       	ldi	r22, 0x07	; 7
     5a4:	8d 81       	ldd	r24, Y+5	; 0x05
     5a6:	0e 94 46 02 	call	0x48c	; 0x48c <USART_voidProcessCommand>
     5aa:	18 2f       	mov	r17, r24
	else// If First Undefined Val is not correct
		Con_St = Input_Format_Is_Incorrect;
	//Check on Con_St Condition
	if(Con_St == Input_Format_Is_Incorrect)//There's an Error in the Format Entered
     5ac:	13 30       	cpi	r17, 0x03	; 3
     5ae:	29 f4       	brne	.+10     	; 0x5ba <USART_Start+0xf6>
		USART_voidTransmitString("##INCORRECT ROOM Num or State\r");
     5b0:	8c e3       	ldi	r24, 0x3C	; 60
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	0e 94 21 08 	call	0x1042	; 0x1042 <USART_voidTransmitString>
     5b8:	28 c0       	rjmp	.+80     	; 0x60a <USART_Start+0x146>
	else{//Check is Completed and there's no Error
		USART_voidTransmitString("ROOM ");
     5ba:	8b e5       	ldi	r24, 0x5B	; 91
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	0e 94 21 08 	call	0x1042	; 0x1042 <USART_voidTransmitString>
		USART_voidTransmitData(DataReceived[2]);
     5c2:	8b 81       	ldd	r24, Y+3	; 0x03
     5c4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <USART_voidTransmitData>
		if(Con_St==ROOM_LIGHT_ON){
     5c8:	11 30       	cpi	r17, 0x01	; 1
     5ca:	81 f4       	brne	.+32     	; 0x5ec <USART_Start+0x128>
			USART_voidTransmitString(" Light Is ON\r");
     5cc:	81 e6       	ldi	r24, 0x61	; 97
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	0e 94 21 08 	call	0x1042	; 0x1042 <USART_voidTransmitString>
			LCD_voidSendString("ROOM ");
     5d4:	8b e5       	ldi	r24, 0x5B	; 91
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	0e 94 99 04 	call	0x932	; 0x932 <LCD_voidSendString>
			// display the room number
			LCD_voidSendData(DataReceived[2]);
     5dc:	8b 81       	ldd	r24, Y+3	; 0x03
     5de:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_voidSendData>
			LCD_voidSendString(" is ON");
     5e2:	8f e6       	ldi	r24, 0x6F	; 111
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	0e 94 99 04 	call	0x932	; 0x932 <LCD_voidSendString>
     5ea:	0f c0       	rjmp	.+30     	; 0x60a <USART_Start+0x146>
			}
		else{
			USART_voidTransmitString(" Light Is OFF\r");
     5ec:	86 e7       	ldi	r24, 0x76	; 118
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	0e 94 21 08 	call	0x1042	; 0x1042 <USART_voidTransmitString>
			LCD_voidSendString("ROOM ");
     5f4:	8b e5       	ldi	r24, 0x5B	; 91
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	0e 94 99 04 	call	0x932	; 0x932 <LCD_voidSendString>
			// display the room number
			LCD_voidSendData(DataReceived[2]);
     5fc:	8b 81       	ldd	r24, Y+3	; 0x03
     5fe:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_voidSendData>
			LCD_voidSendString(" is OFF");
     602:	85 e8       	ldi	r24, 0x85	; 133
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	0e 94 99 04 	call	0x932	; 0x932 <LCD_voidSendString>
		}
	}
	//ReCall Servo Initialization as both USART and Servo uses Timer1 with different modes
	Servo_voidInit();
     60a:	0e 94 ce 04 	call	0x99c	; 0x99c <Servo_voidInit>
}
     60e:	26 96       	adiw	r28, 0x06	; 6
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	df 90       	pop	r13
     628:	cf 90       	pop	r12
     62a:	08 95       	ret

0000062c <EEPROM_voidSendDataByte>:

#include "../../MCAL/TWI_Driver/TWI_interface.h"
#include "EPROM_interface.h"

void EEPROM_voidSendDataByte(u8 Copy_u8DataByte,u16 Copy_u16LocationAddress)
{	u8 Address = ((0b1010<<3) | (A2<<2) | (Copy_u16LocationAddress>>8));
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	c8 2f       	mov	r28, r24
     634:	d6 2f       	mov	r29, r22
     636:	17 2f       	mov	r17, r23

	TWI_SendStartCondition();
     638:	0e 94 7e 07 	call	0xefc	; 0xefc <TWI_SendStartCondition>
	TWI_SendSlaveAddressWithWrite(Address);
     63c:	81 2f       	mov	r24, r17
     63e:	80 65       	ori	r24, 0x50	; 80
     640:	0e 94 9f 07 	call	0xf3e	; 0xf3e <TWI_SendSlaveAddressWithWrite>
	//TWI_SendSlaveAddressWithWrite(0b1010000);/**/

	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
     644:	8d 2f       	mov	r24, r29
     646:	0e 94 bf 07 	call	0xf7e	; 0xf7e <TWI_MasterWriteDataByte>
	TWI_MasterWriteDataByte(Copy_u8DataByte);
     64a:	8c 2f       	mov	r24, r28
     64c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <TWI_MasterWriteDataByte>
	TWI_SendStopCondition();
     650:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_SendStopCondition>
}
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	1f 91       	pop	r17
     65a:	08 95       	ret

0000065c <EEPROM_voidReadDataByte>:

void EEPROM_voidReadDataByte(u8 *Copy_u8DataByte,u16 Copy_u16LocationAddress)
{	u8 Address = ((0b1010<<3) | (A2<<2) | (Copy_u16LocationAddress>>8));
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	8c 01       	movw	r16, r24
     666:	d6 2f       	mov	r29, r22
     668:	c7 2f       	mov	r28, r23
     66a:	c0 65       	ori	r28, 0x50	; 80
	TWI_SendStartCondition();
     66c:	0e 94 7e 07 	call	0xefc	; 0xefc <TWI_SendStartCondition>
	TWI_SendSlaveAddressWithWrite(Address);
     670:	8c 2f       	mov	r24, r28
     672:	0e 94 9f 07 	call	0xf3e	; 0xf3e <TWI_SendSlaveAddressWithWrite>
	//TWI_SendSlaveAddressWithWrite(0b1010000);

	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
     676:	8d 2f       	mov	r24, r29
     678:	0e 94 bf 07 	call	0xf7e	; 0xf7e <TWI_MasterWriteDataByte>

	TWI_SendRepeatedStart();
     67c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <TWI_SendRepeatedStart>

	//TWI_MasterWriteDataByte(0b10100001);/**/
	TWI_SendSlaveAddressWithRead(Address);
     680:	8c 2f       	mov	r24, r28
     682:	0e 94 af 07 	call	0xf5e	; 0xf5e <TWI_SendSlaveAddressWithRead>
	TWI_MasterReadDataByte(Copy_u8DataByte);
     686:	c8 01       	movw	r24, r16
     688:	0e 94 c9 07 	call	0xf92	; 0xf92 <TWI_MasterReadDataByte>
	TWI_SendStopCondition();
     68c:	0e 94 dd 07 	call	0xfba	; 0xfba <TWI_SendStopCondition>
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	08 95       	ret

0000069a <KPD_voidInit>:
			
void KPD_voidInit(){
	
	
	// set col s output high
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL0_PIN,DIO_OUTPUT);
     69a:	41 e0       	ldi	r20, 0x01	; 1
     69c:	62 e0       	ldi	r22, 0x02	; 2
     69e:	82 e0       	ldi	r24, 0x02	; 2
     6a0:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL1_PIN,DIO_OUTPUT);
     6a4:	41 e0       	ldi	r20, 0x01	; 1
     6a6:	63 e0       	ldi	r22, 0x03	; 3
     6a8:	82 e0       	ldi	r24, 0x02	; 2
     6aa:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL2_PIN,DIO_OUTPUT);
     6ae:	41 e0       	ldi	r20, 0x01	; 1
     6b0:	64 e0       	ldi	r22, 0x04	; 4
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_voidSetPinDirection>
	//DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL3_PIN,DIO_OUTPUT);

	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL0_PIN,DIO_HIGH);
     6b8:	41 e0       	ldi	r20, 0x01	; 1
     6ba:	62 e0       	ldi	r22, 0x02	; 2
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL1_PIN,DIO_HIGH);
     6c2:	41 e0       	ldi	r20, 0x01	; 1
     6c4:	63 e0       	ldi	r22, 0x03	; 3
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL2_PIN,DIO_HIGH);
     6cc:	41 e0       	ldi	r20, 0x01	; 1
     6ce:	64 e0       	ldi	r22, 0x04	; 4
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL3_PIN,DIO_HIGH);

	// set rows input pull up
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_INPUT);
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	61 e0       	ldi	r22, 0x01	; 1
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_INPUT);
     6e0:	40 e0       	ldi	r20, 0x00	; 0
     6e2:	62 e0       	ldi	r22, 0x02	; 2
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_INPUT);
     6ea:	40 e0       	ldi	r20, 0x00	; 0
     6ec:	63 e0       	ldi	r22, 0x03	; 3
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_INPUT);
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	64 e0       	ldi	r22, 0x04	; 4
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_HIGH);
     6fe:	41 e0       	ldi	r20, 0x01	; 1
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_HIGH);
     708:	41 e0       	ldi	r20, 0x01	; 1
     70a:	62 e0       	ldi	r22, 0x02	; 2
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_HIGH);
     712:	41 e0       	ldi	r20, 0x01	; 1
     714:	63 e0       	ldi	r22, 0x03	; 3
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_HIGH);
     71c:	41 e0       	ldi	r20, 0x01	; 1
     71e:	64 e0       	ldi	r22, 0x04	; 4
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
     726:	08 95       	ret

00000728 <KPD_u8GetPressedKey>:

}

u8 KPD_u8GetPressedKey(void){
     728:	4f 92       	push	r4
     72a:	5f 92       	push	r5
     72c:	6f 92       	push	r6
     72e:	7f 92       	push	r7
     730:	8f 92       	push	r8
     732:	9f 92       	push	r9
     734:	af 92       	push	r10
     736:	bf 92       	push	r11
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	63 97       	sbiw	r28, 0x13	; 19
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	f8 94       	cli
     752:	de bf       	out	0x3e, r29	; 62
     754:	0f be       	out	0x3f, r0	; 63
     756:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8Pressedkey= KPD_NO_PRESS;
	u8 Local_u8RowxValue ;


	u8 Local_u8ColumnsArray[]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN};
     758:	22 e0       	ldi	r18, 0x02	; 2
     75a:	29 83       	std	Y+1, r18	; 0x01
     75c:	93 e0       	ldi	r25, 0x03	; 3
     75e:	9a 83       	std	Y+2, r25	; 0x02
     760:	84 e0       	ldi	r24, 0x04	; 4
     762:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
     764:	31 e0       	ldi	r19, 0x01	; 1
     766:	3c 83       	std	Y+4, r19	; 0x04
     768:	2d 83       	std	Y+5, r18	; 0x05
     76a:	9e 83       	std	Y+6, r25	; 0x06
     76c:	8f 83       	std	Y+7, r24	; 0x07

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;
     76e:	8c e0       	ldi	r24, 0x0C	; 12
     770:	e2 e6       	ldi	r30, 0x62	; 98
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	de 01       	movw	r26, r28
     776:	18 96       	adiw	r26, 0x08	; 8
     778:	01 90       	ld	r0, Z+
     77a:	0d 92       	st	X+, r0
     77c:	8a 95       	dec	r24
     77e:	e1 f7       	brne	.-8      	; 0x778 <KPD_u8GetPressedKey+0x50>
     780:	ce 01       	movw	r24, r28
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	4c 01       	movw	r8, r24
     786:	a1 2c       	mov	r10, r1
     788:	b1 2c       	mov	r11, r1


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);
     78a:	35 01       	movw	r6, r10
     78c:	f4 01       	movw	r30, r8
     78e:	41 90       	ld	r4, Z+
     790:	4f 01       	movw	r8, r30
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	64 2d       	mov	r22, r4
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
     79c:	7e 01       	movw	r14, r28
     79e:	f4 e0       	ldi	r31, 0x04	; 4
     7a0:	ef 0e       	add	r14, r31
     7a2:	f1 1c       	adc	r15, r1
     7a4:	00 e0       	ldi	r16, 0x00	; 0
     7a6:	10 e0       	ldi	r17, 0x00	; 0

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){

			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
     7a8:	68 01       	movw	r12, r16
     7aa:	f7 01       	movw	r30, r14
     7ac:	51 90       	ld	r5, Z+
     7ae:	7f 01       	movw	r14, r30
     7b0:	65 2d       	mov	r22, r5
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	0e 94 8c 05 	call	0xb18	; 0xb18 <DIO_u8GetPinValue>

			if(Local_u8RowxValue==0){
     7b8:	81 11       	cpse	r24, r1
     7ba:	17 c0       	rjmp	.+46     	; 0x7ea <KPD_u8GetPressedKey+0xc2>

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
     7bc:	c8 01       	movw	r24, r16
     7be:	88 0f       	add	r24, r24
     7c0:	99 1f       	adc	r25, r25
     7c2:	c8 0e       	add	r12, r24
     7c4:	d9 1e       	adc	r13, r25
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	8c 0f       	add	r24, r28
     7cc:	9d 1f       	adc	r25, r29
     7ce:	c8 0e       	add	r12, r24
     7d0:	d9 1e       	adc	r13, r25
     7d2:	f6 01       	movw	r30, r12
     7d4:	e6 0d       	add	r30, r6
     7d6:	f7 1d       	adc	r31, r7
     7d8:	17 81       	ldd	r17, Z+7	; 0x07
				while(Local_u8RowxValue==0){
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
     7da:	65 2d       	mov	r22, r5
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	0e 94 8c 05 	call	0xb18	; 0xb18 <DIO_u8GetPinValue>
			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

			if(Local_u8RowxValue==0){

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
				while(Local_u8RowxValue==0){
     7e2:	88 23       	and	r24, r24
     7e4:	d1 f3       	breq	.-12     	; 0x7da <KPD_u8GetPressedKey+0xb2>
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

				}

				return Local_u8Pressedkey ;
     7e6:	81 2f       	mov	r24, r17
     7e8:	13 c0       	rjmp	.+38     	; 0x810 <KPD_u8GetPressedKey+0xe8>
     7ea:	0f 5f       	subi	r16, 0xFF	; 255
     7ec:	1f 4f       	sbci	r17, 0xFF	; 255

	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){
     7ee:	04 30       	cpi	r16, 0x04	; 4
     7f0:	11 05       	cpc	r17, r1
     7f2:	d1 f6       	brne	.-76     	; 0x7a8 <KPD_u8GetPressedKey+0x80>
			}


		}

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_HIGH);
     7f4:	41 e0       	ldi	r20, 0x01	; 1
     7f6:	64 2d       	mov	r22, r4
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
     7fe:	9f ef       	ldi	r25, 0xFF	; 255
     800:	a9 1a       	sub	r10, r25
     802:	b9 0a       	sbc	r11, r25
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){
     804:	e3 e0       	ldi	r30, 0x03	; 3
     806:	ae 16       	cp	r10, r30
     808:	b1 04       	cpc	r11, r1
     80a:	09 f0       	breq	.+2      	; 0x80e <KPD_u8GetPressedKey+0xe6>
     80c:	be cf       	rjmp	.-132    	; 0x78a <KPD_u8GetPressedKey+0x62>


	}


	return Local_u8Pressedkey ;
     80e:	8a ea       	ldi	r24, 0xAA	; 170
     810:	63 96       	adiw	r28, 0x13	; 19
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	ff 90       	pop	r15
     826:	ef 90       	pop	r14
     828:	df 90       	pop	r13
     82a:	cf 90       	pop	r12
     82c:	bf 90       	pop	r11
     82e:	af 90       	pop	r10
     830:	9f 90       	pop	r9
     832:	8f 90       	pop	r8
     834:	7f 90       	pop	r7
     836:	6f 90       	pop	r6
     838:	5f 90       	pop	r5
     83a:	4f 90       	pop	r4
     83c:	08 95       	ret

0000083e <LCD_voidSendData>:
		LCD_voidSendCommand(0b00000010);
		Local_u8AddressCounter=0;
		
	}
	else
		Local_u8AddressCounter++;
     83e:	cf 93       	push	r28
     840:	c8 2f       	mov	r28, r24
     842:	41 e0       	ldi	r20, 0x01	; 1
     844:	65 e0       	ldi	r22, 0x05	; 5
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	66 e0       	ldi	r22, 0x06	; 6
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
     856:	6c 2f       	mov	r22, r28
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <DIO_voidSetPortValue>
     85e:	41 e0       	ldi	r20, 0x01	; 1
     860:	67 e0       	ldi	r22, 0x07	; 7
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
     868:	8f e9       	ldi	r24, 0x9F	; 159
     86a:	9f e0       	ldi	r25, 0x0F	; 15
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	f1 f7       	brne	.-4      	; 0x86c <__stack+0xd>
     870:	00 c0       	rjmp	.+0      	; 0x872 <__stack+0x13>
     872:	00 00       	nop
     874:	40 e0       	ldi	r20, 0x00	; 0
     876:	67 e0       	ldi	r22, 0x07	; 7
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
     87e:	cf 91       	pop	r28
     880:	08 95       	ret

00000882 <LCD_voidSendCommand>:
     882:	cf 93       	push	r28
     884:	c8 2f       	mov	r28, r24
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	65 e0       	ldi	r22, 0x05	; 5
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	66 e0       	ldi	r22, 0x06	; 6
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
     89a:	6c 2f       	mov	r22, r28
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <DIO_voidSetPortValue>
     8a2:	41 e0       	ldi	r20, 0x01	; 1
     8a4:	67 e0       	ldi	r22, 0x07	; 7
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
     8ac:	8f e9       	ldi	r24, 0x9F	; 159
     8ae:	9f e0       	ldi	r25, 0x0F	; 15
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <LCD_voidSendCommand+0x2e>
     8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <LCD_voidSendCommand+0x34>
     8b6:	00 00       	nop
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	67 e0       	ldi	r22, 0x07	; 7
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	0e 94 3e 05 	call	0xa7c	; 0xa7c <DIO_voidSetPinValue>
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <LCD_voidInit>:
     8c6:	6f ef       	ldi	r22, 0xFF	; 255
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	0e 94 6c 05 	call	0xad8	; 0xad8 <DIO_voidSetPortDirection>
     8ce:	41 e0       	ldi	r20, 0x01	; 1
     8d0:	65 e0       	ldi	r22, 0x05	; 5
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_voidSetPinDirection>
     8d8:	41 e0       	ldi	r20, 0x01	; 1
     8da:	66 e0       	ldi	r22, 0x06	; 6
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_voidSetPinDirection>
     8e2:	41 e0       	ldi	r20, 0x01	; 1
     8e4:	67 e0       	ldi	r22, 0x07	; 7
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	0e 94 10 05 	call	0xa20	; 0xa20 <DIO_voidSetPinDirection>
     8ec:	2f ef       	ldi	r18, 0xFF	; 255
     8ee:	89 ef       	ldi	r24, 0xF9	; 249
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	21 50       	subi	r18, 0x01	; 1
     8f4:	80 40       	sbci	r24, 0x00	; 0
     8f6:	90 40       	sbci	r25, 0x00	; 0
     8f8:	e1 f7       	brne	.-8      	; 0x8f2 <LCD_voidInit+0x2c>
     8fa:	00 c0       	rjmp	.+0      	; 0x8fc <LCD_voidInit+0x36>
     8fc:	00 00       	nop
     8fe:	88 e3       	ldi	r24, 0x38	; 56
     900:	0e 94 41 04 	call	0x882	; 0x882 <LCD_voidSendCommand>
     904:	8c e0       	ldi	r24, 0x0C	; 12
     906:	0e 94 41 04 	call	0x882	; 0x882 <LCD_voidSendCommand>
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	0e 94 41 04 	call	0x882	; 0x882 <LCD_voidSendCommand>
     910:	86 e0       	ldi	r24, 0x06	; 6
     912:	0e 94 41 04 	call	0x882	; 0x882 <LCD_voidSendCommand>
     916:	08 95       	ret

00000918 <LCD_voidClearDisplay>:
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	0e 94 41 04 	call	0x882	; 0x882 <LCD_voidSendCommand>
     91e:	08 95       	ret

00000920 <LCD_voidGoTOXY>:
     920:	90 e4       	ldi	r25, 0x40	; 64
     922:	89 9f       	mul	r24, r25
     924:	60 0d       	add	r22, r0
     926:	11 24       	eor	r1, r1
     928:	86 2f       	mov	r24, r22
     92a:	80 68       	ori	r24, 0x80	; 128
     92c:	0e 94 41 04 	call	0x882	; 0x882 <LCD_voidSendCommand>
     930:	08 95       	ret

00000932 <LCD_voidSendString>:
		
		
}

void LCD_voidSendString(u8* Copy_pcString)
{
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	cf 93       	push	r28
     938:	fc 01       	movw	r30, r24
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
     93a:	80 81       	ld	r24, Z
     93c:	88 23       	and	r24, r24
     93e:	59 f0       	breq	.+22     	; 0x956 <LCD_voidSendString+0x24>
     940:	8f 01       	movw	r16, r30
     942:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
     944:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_voidSendData>
		Local_u8Index++;
     948:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_voidSendString(u8* Copy_pcString)
{
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
     94a:	f8 01       	movw	r30, r16
     94c:	ec 0f       	add	r30, r28
     94e:	f1 1d       	adc	r31, r1
     950:	80 81       	ld	r24, Z
     952:	81 11       	cpse	r24, r1
     954:	f7 cf       	rjmp	.-18     	; 0x944 <LCD_voidSendString+0x12>
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
		Local_u8Index++;
	}
}
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	08 95       	ret

0000095e <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	2a 97       	sbiw	r28, 0x0a	; 10
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	cd bf       	out	0x3d, r28	; 61
     972:	dc 01       	movw	r26, r24
     974:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     976:	4a e0       	ldi	r20, 0x0A	; 10
     978:	be 01       	movw	r22, r28
     97a:	6f 5f       	subi	r22, 0xFF	; 255
     97c:	7f 4f       	sbci	r23, 0xFF	; 255
     97e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <__itoa_ncheck>
	u8 Local_u8Str[10];
	itoa(Copy_u32Number, Local_u8Str,10);
	LCD_voidSendString(Local_u8Str);
     982:	ce 01       	movw	r24, r28
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	0e 94 99 04 	call	0x932	; 0x932 <LCD_voidSendString>

}
     98a:	2a 96       	adiw	r28, 0x0a	; 10
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <Servo_voidInit>:

#include"../../MCAL/TIMER_Driver/TIMER_Interface.h"
 u16 Ticks=0;
 void Servo_voidInit(void){
	 //Using Timer 1 PWM Mode,  prescaller 8 ==>010
		TIMER_voidTimer1Init(PWM,10);
     99c:	6a e0       	ldi	r22, 0x0A	; 10
     99e:	82 e0       	ldi	r24, 0x02	; 2
     9a0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <TIMER_voidTimer1Init>
	 // Servo Total time = 20ms
		TIMER_voidSetOverFlow(20000);
     9a4:	80 e2       	ldi	r24, 0x20	; 32
     9a6:	9e e4       	ldi	r25, 0x4E	; 78
     9a8:	0e 94 c8 06 	call	0xd90	; 0xd90 <TIMER_voidSetOverFlow>
     9ac:	08 95       	ret

000009ae <Servo_voidDegree>:

void Servo_voidDegree(u8 Copy_u8Degree){
	if(Copy_u8Degree>180)
		Copy_u8Degree = 180;
	f32 Ton = (1/180.0) * Copy_u8Degree + 1;
	Ticks = Ton * 1000;
     9ae:	85 3b       	cpi	r24, 0xB5	; 181
     9b0:	08 f0       	brcs	.+2      	; 0x9b4 <Servo_voidDegree+0x6>
     9b2:	84 eb       	ldi	r24, 0xB4	; 180
     9b4:	68 2f       	mov	r22, r24
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 77 09 	call	0x12ee	; 0x12ee <__floatsisf>
     9c0:	21 e6       	ldi	r18, 0x61	; 97
     9c2:	3b e0       	ldi	r19, 0x0B	; 11
     9c4:	46 eb       	ldi	r20, 0xB6	; 182
     9c6:	5b e3       	ldi	r21, 0x3B	; 59
     9c8:	0e 94 03 0a 	call	0x1406	; 0x1406 <__mulsf3>
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	40 e8       	ldi	r20, 0x80	; 128
     9d2:	5f e3       	ldi	r21, 0x3F	; 63
     9d4:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__addsf3>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	4a e7       	ldi	r20, 0x7A	; 122
     9de:	54 e4       	ldi	r21, 0x44	; 68
     9e0:	0e 94 03 0a 	call	0x1406	; 0x1406 <__mulsf3>
     9e4:	0e 94 46 09 	call	0x128c	; 0x128c <__fixunssfsi>
     9e8:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <Ticks+0x1>
     9ec:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <Ticks>
	TIMER_voidTimer1ChannelASetCompareValue(Ticks);
     9f0:	cb 01       	movw	r24, r22
     9f2:	0e 94 cb 06 	call	0xd96	; 0xd96 <TIMER_voidTimer1ChannelASetCompareValue>
     9f6:	08 95       	ret

000009f8 <ADC_voidInit>:
	2- 8bit res --> left adjustment
	3- prescaler
	4- enable ADC
	*/
	// use AVCC
	SET_BIT(ADMUX,6);
     9f8:	3e 9a       	sbi	0x07, 6	; 7
	CLR_BIT(ADMUX,7);
     9fa:	3f 98       	cbi	0x07, 7	; 7
	// left adjust
	SET_BIT(ADMUX,5);
     9fc:	3d 9a       	sbi	0x07, 5	; 7
	// prescaler  --> /64
	CLR_BIT(ADCSRA,0);
     9fe:	30 98       	cbi	0x06, 0	; 6
	SET_BIT(ADCSRA,1);
     a00:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,2);
     a02:	32 9a       	sbi	0x06, 2	; 6
	// enable 
	SET_BIT(ADCSRA,7);
     a04:	37 9a       	sbi	0x06, 7	; 6
     a06:	08 95       	ret

00000a08 <ADC_u8StartConversion>:
	
}

u8 ADC_u8StartConversion(u8 Copy_u8ChannelNumber){
	// channel select
	ADMUX &= 0b11100000;
     a08:	97 b1       	in	r25, 0x07	; 7
     a0a:	90 7e       	andi	r25, 0xE0	; 224
     a0c:	97 b9       	out	0x07, r25	; 7
	ADMUX |=Copy_u8ChannelNumber;
     a0e:	97 b1       	in	r25, 0x07	; 7
     a10:	89 2b       	or	r24, r25
     a12:	87 b9       	out	0x07, r24	; 7
	
	// start conversion
	SET_BIT(ADCSRA,6);
     a14:	36 9a       	sbi	0x06, 6	; 6
	
	// wait until conversion complete
	// by checking the flag
	while(GET_BIT(ADCSRA,4)==0);
     a16:	34 9b       	sbis	0x06, 4	; 6
     a18:	fe cf       	rjmp	.-4      	; 0xa16 <ADC_u8StartConversion+0xe>
	
	//clear flag 
	SET_BIT(ADCSRA,4);
     a1a:	34 9a       	sbi	0x06, 4	; 6
	
	return ADCH;
     a1c:	85 b1       	in	r24, 0x05	; 5
}
     a1e:	08 95       	ret

00000a20 <DIO_voidSetPinDirection>:


void DIO_voidSetPinDirection(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinState ){

	volatile u8* Local_u8PTR_DDRx;
	switch(Copy_u8PortName){
     a20:	81 30       	cpi	r24, 0x01	; 1
     a22:	49 f0       	breq	.+18     	; 0xa36 <DIO_voidSetPinDirection+0x16>
     a24:	28 f0       	brcs	.+10     	; 0xa30 <DIO_voidSetPinDirection+0x10>
     a26:	82 30       	cpi	r24, 0x02	; 2
     a28:	49 f0       	breq	.+18     	; 0xa3c <DIO_voidSetPinDirection+0x1c>
     a2a:	83 30       	cpi	r24, 0x03	; 3
     a2c:	51 f0       	breq	.+20     	; 0xa42 <DIO_voidSetPinDirection+0x22>
     a2e:	0b c0       	rjmp	.+22     	; 0xa46 <DIO_voidSetPinDirection+0x26>

		case DIO_PORTA:
		Local_u8PTR_DDRx=&DDRA;
     a30:	ea e3       	ldi	r30, 0x3A	; 58
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	08 c0       	rjmp	.+16     	; 0xa46 <DIO_voidSetPinDirection+0x26>
		break;
		case DIO_PORTB:
		Local_u8PTR_DDRx=&DDRB;
     a36:	e7 e3       	ldi	r30, 0x37	; 55
     a38:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <DIO_voidSetPinDirection+0x26>
		case DIO_PORTC:
		Local_u8PTR_DDRx=&DDRC;
     a3c:	e4 e3       	ldi	r30, 0x34	; 52
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <DIO_voidSetPinDirection+0x26>
		case DIO_PORTD:
		Local_u8PTR_DDRx=&DDRD;
     a42:	e1 e3       	ldi	r30, 0x31	; 49
     a44:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinState){
     a46:	44 23       	and	r20, r20
     a48:	69 f0       	breq	.+26     	; 0xa64 <DIO_voidSetPinDirection+0x44>
     a4a:	41 30       	cpi	r20, 0x01	; 1
     a4c:	b1 f4       	brne	.+44     	; 0xa7a <DIO_voidSetPinDirection+0x5a>

		case DIO_OUTPUT:
		SET_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
     a4e:	20 81       	ld	r18, Z
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <DIO_voidSetPinDirection+0x3a>
     a56:	88 0f       	add	r24, r24
     a58:	99 1f       	adc	r25, r25
     a5a:	6a 95       	dec	r22
     a5c:	e2 f7       	brpl	.-8      	; 0xa56 <DIO_voidSetPinDirection+0x36>
     a5e:	82 2b       	or	r24, r18
     a60:	80 83       	st	Z, r24
		break;
     a62:	08 95       	ret
		case DIO_INPUT:
		CLR_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
     a64:	20 81       	ld	r18, Z
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <DIO_voidSetPinDirection+0x50>
     a6c:	88 0f       	add	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	6a 95       	dec	r22
     a72:	e2 f7       	brpl	.-8      	; 0xa6c <DIO_voidSetPinDirection+0x4c>
     a74:	80 95       	com	r24
     a76:	82 23       	and	r24, r18
     a78:	80 83       	st	Z, r24
     a7a:	08 95       	ret

00000a7c <DIO_voidSetPinValue>:

}
void DIO_voidSetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinValue ){

	volatile u8* Local_u8PTR_PORTx;
	switch(Copy_u8PortName){
     a7c:	81 30       	cpi	r24, 0x01	; 1
     a7e:	49 f0       	breq	.+18     	; 0xa92 <DIO_voidSetPinValue+0x16>
     a80:	28 f0       	brcs	.+10     	; 0xa8c <DIO_voidSetPinValue+0x10>
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	49 f0       	breq	.+18     	; 0xa98 <DIO_voidSetPinValue+0x1c>
     a86:	83 30       	cpi	r24, 0x03	; 3
     a88:	51 f0       	breq	.+20     	; 0xa9e <DIO_voidSetPinValue+0x22>
     a8a:	0b c0       	rjmp	.+22     	; 0xaa2 <DIO_voidSetPinValue+0x26>

		case DIO_PORTA:
		Local_u8PTR_PORTx=&PORTA;
     a8c:	eb e3       	ldi	r30, 0x3B	; 59
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	08 c0       	rjmp	.+16     	; 0xaa2 <DIO_voidSetPinValue+0x26>
		break;
		case DIO_PORTB:
		Local_u8PTR_PORTx=&PORTB;
     a92:	e8 e3       	ldi	r30, 0x38	; 56
     a94:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     a96:	05 c0       	rjmp	.+10     	; 0xaa2 <DIO_voidSetPinValue+0x26>
		case DIO_PORTC:
		Local_u8PTR_PORTx=&PORTC;
     a98:	e5 e3       	ldi	r30, 0x35	; 53
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
		break;
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <DIO_voidSetPinValue+0x26>
		case DIO_PORTD:
		Local_u8PTR_PORTx=&PORTD;
     a9e:	e2 e3       	ldi	r30, 0x32	; 50
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinValue){
     aa2:	44 23       	and	r20, r20
     aa4:	69 f0       	breq	.+26     	; 0xac0 <DIO_voidSetPinValue+0x44>
     aa6:	41 30       	cpi	r20, 0x01	; 1
     aa8:	b1 f4       	brne	.+44     	; 0xad6 <DIO_voidSetPinValue+0x5a>

		case DIO_HIGH:
		SET_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
     aaa:	20 81       	ld	r18, Z
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <DIO_voidSetPinValue+0x3a>
     ab2:	88 0f       	add	r24, r24
     ab4:	99 1f       	adc	r25, r25
     ab6:	6a 95       	dec	r22
     ab8:	e2 f7       	brpl	.-8      	; 0xab2 <DIO_voidSetPinValue+0x36>
     aba:	82 2b       	or	r24, r18
     abc:	80 83       	st	Z, r24
		break;
     abe:	08 95       	ret
		case DIO_LOW:
		CLR_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
     ac0:	20 81       	ld	r18, Z
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <DIO_voidSetPinValue+0x50>
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	6a 95       	dec	r22
     ace:	e2 f7       	brpl	.-8      	; 0xac8 <DIO_voidSetPinValue+0x4c>
     ad0:	80 95       	com	r24
     ad2:	82 23       	and	r24, r18
     ad4:	80 83       	st	Z, r24
     ad6:	08 95       	ret

00000ad8 <DIO_voidSetPortDirection>:

}

void DIO_voidSetPortDirection(u8 Copy_u8PortName ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
     ad8:	81 30       	cpi	r24, 0x01	; 1
     ada:	41 f0       	breq	.+16     	; 0xaec <DIO_voidSetPortDirection+0x14>
     adc:	28 f0       	brcs	.+10     	; 0xae8 <DIO_voidSetPortDirection+0x10>
     ade:	82 30       	cpi	r24, 0x02	; 2
     ae0:	39 f0       	breq	.+14     	; 0xaf0 <DIO_voidSetPortDirection+0x18>
     ae2:	83 30       	cpi	r24, 0x03	; 3
     ae4:	39 f0       	breq	.+14     	; 0xaf4 <DIO_voidSetPortDirection+0x1c>
     ae6:	08 95       	ret

		case DIO_PORTA:
		DDRA=Copy_u8PortValue;
     ae8:	6a bb       	out	0x1a, r22	; 26
		break;
     aea:	08 95       	ret
		case DIO_PORTB:
		DDRB=Copy_u8PortValue;
     aec:	67 bb       	out	0x17, r22	; 23
		break;
     aee:	08 95       	ret
		case DIO_PORTC:
		DDRC=Copy_u8PortValue;
     af0:	64 bb       	out	0x14, r22	; 20
		break;
     af2:	08 95       	ret
		case DIO_PORTD:
		DDRD=Copy_u8PortValue;
     af4:	61 bb       	out	0x11, r22	; 17
     af6:	08 95       	ret

00000af8 <DIO_voidSetPortValue>:
	}

}
void DIO_voidSetPortValue(u8 Copy_u8PortName  ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	41 f0       	breq	.+16     	; 0xb0c <DIO_voidSetPortValue+0x14>
     afc:	28 f0       	brcs	.+10     	; 0xb08 <DIO_voidSetPortValue+0x10>
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	39 f0       	breq	.+14     	; 0xb10 <DIO_voidSetPortValue+0x18>
     b02:	83 30       	cpi	r24, 0x03	; 3
     b04:	39 f0       	breq	.+14     	; 0xb14 <DIO_voidSetPortValue+0x1c>
     b06:	08 95       	ret

		case DIO_PORTA:
		PORTA=Copy_u8PortValue;
     b08:	6b bb       	out	0x1b, r22	; 27
		break;
     b0a:	08 95       	ret
		case DIO_PORTB:
		PORTB=Copy_u8PortValue;
     b0c:	68 bb       	out	0x18, r22	; 24
		break;
     b0e:	08 95       	ret
		case DIO_PORTC:
		PORTC=Copy_u8PortValue;
     b10:	65 bb       	out	0x15, r22	; 21
		break;
     b12:	08 95       	ret
		case DIO_PORTD:
		PORTD=Copy_u8PortValue;
     b14:	62 bb       	out	0x12, r22	; 18
     b16:	08 95       	ret

00000b18 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber){

	
	u8 Local_u8PinValue;
	switch(Copy_u8PortName){
     b18:	81 30       	cpi	r24, 0x01	; 1
     b1a:	81 f0       	breq	.+32     	; 0xb3c <DIO_u8GetPinValue+0x24>
     b1c:	28 f0       	brcs	.+10     	; 0xb28 <DIO_u8GetPinValue+0x10>
     b1e:	82 30       	cpi	r24, 0x02	; 2
     b20:	b9 f0       	breq	.+46     	; 0xb50 <DIO_u8GetPinValue+0x38>
     b22:	83 30       	cpi	r24, 0x03	; 3
     b24:	f9 f0       	breq	.+62     	; 0xb64 <DIO_u8GetPinValue+0x4c>
     b26:	27 c0       	rjmp	.+78     	; 0xb76 <DIO_u8GetPinValue+0x5e>

		case DIO_PORTA:
		Local_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
     b28:	89 b3       	in	r24, 0x19	; 25
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <DIO_u8GetPinValue+0x1a>
     b2e:	95 95       	asr	r25
     b30:	87 95       	ror	r24
     b32:	6a 95       	dec	r22
     b34:	e2 f7       	brpl	.-8      	; 0xb2e <DIO_u8GetPinValue+0x16>
     b36:	98 2f       	mov	r25, r24
     b38:	91 70       	andi	r25, 0x01	; 1
		break;
     b3a:	1d c0       	rjmp	.+58     	; 0xb76 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTB:
		Local_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
     b3c:	86 b3       	in	r24, 0x16	; 22
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <DIO_u8GetPinValue+0x2e>
     b42:	95 95       	asr	r25
     b44:	87 95       	ror	r24
     b46:	6a 95       	dec	r22
     b48:	e2 f7       	brpl	.-8      	; 0xb42 <DIO_u8GetPinValue+0x2a>
     b4a:	98 2f       	mov	r25, r24
     b4c:	91 70       	andi	r25, 0x01	; 1
		break;
     b4e:	13 c0       	rjmp	.+38     	; 0xb76 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTC:
		Local_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
     b50:	83 b3       	in	r24, 0x13	; 19
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <DIO_u8GetPinValue+0x42>
     b56:	95 95       	asr	r25
     b58:	87 95       	ror	r24
     b5a:	6a 95       	dec	r22
     b5c:	e2 f7       	brpl	.-8      	; 0xb56 <DIO_u8GetPinValue+0x3e>
     b5e:	98 2f       	mov	r25, r24
     b60:	91 70       	andi	r25, 0x01	; 1
		break;
     b62:	09 c0       	rjmp	.+18     	; 0xb76 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTD:
		Local_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
     b64:	80 b3       	in	r24, 0x10	; 16
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <DIO_u8GetPinValue+0x56>
     b6a:	95 95       	asr	r25
     b6c:	87 95       	ror	r24
     b6e:	6a 95       	dec	r22
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <DIO_u8GetPinValue+0x52>
     b72:	98 2f       	mov	r25, r24
     b74:	91 70       	andi	r25, 0x01	; 1

	

	return Local_u8PinValue;

}
     b76:	89 2f       	mov	r24, r25
     b78:	08 95       	ret

00000b7a <__vector_1>:
void EXTI_voidSetCallBackINT2(void(*NotifyFunc2)(void)){
	
	Global_pvINT2NotifyFunc=NotifyFunc2;
}

ISR(INT0_vect){
     b7a:	1f 92       	push	r1
     b7c:	0f 92       	push	r0
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	0f 92       	push	r0
     b82:	11 24       	eor	r1, r1
     b84:	2f 93       	push	r18
     b86:	3f 93       	push	r19
     b88:	4f 93       	push	r20
     b8a:	5f 93       	push	r21
     b8c:	6f 93       	push	r22
     b8e:	7f 93       	push	r23
     b90:	8f 93       	push	r24
     b92:	9f 93       	push	r25
     b94:	af 93       	push	r26
     b96:	bf 93       	push	r27
     b98:	ef 93       	push	r30
     b9a:	ff 93       	push	r31
	
	if(Global_pvINT0NotifyFunc!=NULL_PTR)
     b9c:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <Global_pvINT0NotifyFunc>
     ba0:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <Global_pvINT0NotifyFunc+0x1>
     ba4:	30 97       	sbiw	r30, 0x00	; 0
     ba6:	09 f0       	breq	.+2      	; 0xbaa <__vector_1+0x30>
			Global_pvINT0NotifyFunc();
     ba8:	09 95       	icall
	
}
     baa:	ff 91       	pop	r31
     bac:	ef 91       	pop	r30
     bae:	bf 91       	pop	r27
     bb0:	af 91       	pop	r26
     bb2:	9f 91       	pop	r25
     bb4:	8f 91       	pop	r24
     bb6:	7f 91       	pop	r23
     bb8:	6f 91       	pop	r22
     bba:	5f 91       	pop	r21
     bbc:	4f 91       	pop	r20
     bbe:	3f 91       	pop	r19
     bc0:	2f 91       	pop	r18
     bc2:	0f 90       	pop	r0
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	0f 90       	pop	r0
     bc8:	1f 90       	pop	r1
     bca:	18 95       	reti

00000bcc <__vector_2>:

ISR(INT1_vect){
     bcc:	1f 92       	push	r1
     bce:	0f 92       	push	r0
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	0f 92       	push	r0
     bd4:	11 24       	eor	r1, r1
     bd6:	2f 93       	push	r18
     bd8:	3f 93       	push	r19
     bda:	4f 93       	push	r20
     bdc:	5f 93       	push	r21
     bde:	6f 93       	push	r22
     be0:	7f 93       	push	r23
     be2:	8f 93       	push	r24
     be4:	9f 93       	push	r25
     be6:	af 93       	push	r26
     be8:	bf 93       	push	r27
     bea:	ef 93       	push	r30
     bec:	ff 93       	push	r31
	
	if(Global_pvINT1NotifyFunc!=NULL_PTR)
     bee:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <Global_pvINT1NotifyFunc>
     bf2:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <Global_pvINT1NotifyFunc+0x1>
     bf6:	30 97       	sbiw	r30, 0x00	; 0
     bf8:	09 f0       	breq	.+2      	; 0xbfc <__vector_2+0x30>
			Global_pvINT1NotifyFunc();
     bfa:	09 95       	icall
	
}
     bfc:	ff 91       	pop	r31
     bfe:	ef 91       	pop	r30
     c00:	bf 91       	pop	r27
     c02:	af 91       	pop	r26
     c04:	9f 91       	pop	r25
     c06:	8f 91       	pop	r24
     c08:	7f 91       	pop	r23
     c0a:	6f 91       	pop	r22
     c0c:	5f 91       	pop	r21
     c0e:	4f 91       	pop	r20
     c10:	3f 91       	pop	r19
     c12:	2f 91       	pop	r18
     c14:	0f 90       	pop	r0
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	0f 90       	pop	r0
     c1a:	1f 90       	pop	r1
     c1c:	18 95       	reti

00000c1e <__vector_3>:
ISR(INT2_vect){
     c1e:	1f 92       	push	r1
     c20:	0f 92       	push	r0
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	0f 92       	push	r0
     c26:	11 24       	eor	r1, r1
     c28:	2f 93       	push	r18
     c2a:	3f 93       	push	r19
     c2c:	4f 93       	push	r20
     c2e:	5f 93       	push	r21
     c30:	6f 93       	push	r22
     c32:	7f 93       	push	r23
     c34:	8f 93       	push	r24
     c36:	9f 93       	push	r25
     c38:	af 93       	push	r26
     c3a:	bf 93       	push	r27
     c3c:	ef 93       	push	r30
     c3e:	ff 93       	push	r31
	
	if(Global_pvINT2NotifyFunc!=NULL_PTR)
     c40:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <Global_pvINT2NotifyFunc>
     c44:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <Global_pvINT2NotifyFunc+0x1>
     c48:	30 97       	sbiw	r30, 0x00	; 0
     c4a:	09 f0       	breq	.+2      	; 0xc4e <__vector_3+0x30>
			Global_pvINT2NotifyFunc();
     c4c:	09 95       	icall
	
     c4e:	ff 91       	pop	r31
     c50:	ef 91       	pop	r30
     c52:	bf 91       	pop	r27
     c54:	af 91       	pop	r26
     c56:	9f 91       	pop	r25
     c58:	8f 91       	pop	r24
     c5a:	7f 91       	pop	r23
     c5c:	6f 91       	pop	r22
     c5e:	5f 91       	pop	r21
     c60:	4f 91       	pop	r20
     c62:	3f 91       	pop	r19
     c64:	2f 91       	pop	r18
     c66:	0f 90       	pop	r0
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	0f 90       	pop	r0
     c6c:	1f 90       	pop	r1
     c6e:	18 95       	reti

00000c70 <GIE_voidEnableGlobalInt>:
#include<avr/io.h>
#include"../../LIB/BIT_MATH.h"

void GIE_voidEnableGlobalInt(void){
	
	SET_BIT(SREG,7);
     c70:	8f b7       	in	r24, 0x3f	; 63
     c72:	80 68       	ori	r24, 0x80	; 128
     c74:	8f bf       	out	0x3f, r24	; 63
     c76:	08 95       	ret

00000c78 <TIMER_delay_ms>:
	GLOBAL_ICU_ISR = Copy_PTR_ICUFunction;
}

u16 ICU_u16ReadInputCapture(void){
	return ICR1;
}
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	8b 01       	movw	r16, r22
     c7e:	9c 01       	movw	r18, r24
     c80:	67 2b       	or	r22, r23
     c82:	68 2b       	or	r22, r24
     c84:	69 2b       	or	r22, r25
     c86:	69 f4       	brne	.+26     	; 0xca2 <TIMER_delay_ms+0x2a>
     c88:	12 c0       	rjmp	.+36     	; 0xcae <TIMER_delay_ms+0x36>
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <TIMER_delay_ms+0x12>
     c8e:	4f 5f       	subi	r20, 0xFF	; 255
     c90:	5f 4f       	sbci	r21, 0xFF	; 255
     c92:	6f 4f       	sbci	r22, 0xFF	; 255
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
     c96:	04 17       	cp	r16, r20
     c98:	15 07       	cpc	r17, r21
     c9a:	26 07       	cpc	r18, r22
     c9c:	37 07       	cpc	r19, r23
     c9e:	21 f4       	brne	.+8      	; 0xca8 <TIMER_delay_ms+0x30>
     ca0:	06 c0       	rjmp	.+12     	; 0xcae <TIMER_delay_ms+0x36>
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	ba 01       	movw	r22, r20
     ca8:	8e e5       	ldi	r24, 0x5E	; 94
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	ee cf       	rjmp	.-36     	; 0xc8a <TIMER_delay_ms+0x12>
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	08 95       	ret

00000cb4 <TIMER_voidTimer1Init>:
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	a1 f0       	breq	.+40     	; 0xce0 <TIMER_voidTimer1Init+0x2c>
     cb8:	18 f0       	brcs	.+6      	; 0xcc0 <TIMER_voidTimer1Init+0xc>
     cba:	82 30       	cpi	r24, 0x02	; 2
     cbc:	09 f1       	breq	.+66     	; 0xd00 <TIMER_voidTimer1Init+0x4c>
     cbe:	32 c0       	rjmp	.+100    	; 0xd24 <TIMER_voidTimer1Init+0x70>
     cc0:	8f b5       	in	r24, 0x2f	; 47
     cc2:	8e 7f       	andi	r24, 0xFE	; 254
     cc4:	8f bd       	out	0x2f, r24	; 47
     cc6:	8f b5       	in	r24, 0x2f	; 47
     cc8:	8d 7f       	andi	r24, 0xFD	; 253
     cca:	8f bd       	out	0x2f, r24	; 47
     ccc:	8e b5       	in	r24, 0x2e	; 46
     cce:	87 7f       	andi	r24, 0xF7	; 247
     cd0:	8e bd       	out	0x2e, r24	; 46
     cd2:	8e b5       	in	r24, 0x2e	; 46
     cd4:	8f 7e       	andi	r24, 0xEF	; 239
     cd6:	8e bd       	out	0x2e, r24	; 46
     cd8:	89 b7       	in	r24, 0x39	; 57
     cda:	84 60       	ori	r24, 0x04	; 4
     cdc:	89 bf       	out	0x39, r24	; 57
     cde:	22 c0       	rjmp	.+68     	; 0xd24 <TIMER_voidTimer1Init+0x70>
     ce0:	8f b5       	in	r24, 0x2f	; 47
     ce2:	8e 7f       	andi	r24, 0xFE	; 254
     ce4:	8f bd       	out	0x2f, r24	; 47
     ce6:	8f b5       	in	r24, 0x2f	; 47
     ce8:	8d 7f       	andi	r24, 0xFD	; 253
     cea:	8f bd       	out	0x2f, r24	; 47
     cec:	8e b5       	in	r24, 0x2e	; 46
     cee:	88 60       	ori	r24, 0x08	; 8
     cf0:	8e bd       	out	0x2e, r24	; 46
     cf2:	8e b5       	in	r24, 0x2e	; 46
     cf4:	8f 7e       	andi	r24, 0xEF	; 239
     cf6:	8e bd       	out	0x2e, r24	; 46
     cf8:	89 b7       	in	r24, 0x39	; 57
     cfa:	80 61       	ori	r24, 0x10	; 16
     cfc:	89 bf       	out	0x39, r24	; 57
     cfe:	12 c0       	rjmp	.+36     	; 0xd24 <TIMER_voidTimer1Init+0x70>
     d00:	8f b5       	in	r24, 0x2f	; 47
     d02:	8f 7b       	andi	r24, 0xBF	; 191
     d04:	8f bd       	out	0x2f, r24	; 47
     d06:	8f b5       	in	r24, 0x2f	; 47
     d08:	80 68       	ori	r24, 0x80	; 128
     d0a:	8f bd       	out	0x2f, r24	; 47
     d0c:	8f b5       	in	r24, 0x2f	; 47
     d0e:	8e 7f       	andi	r24, 0xFE	; 254
     d10:	8f bd       	out	0x2f, r24	; 47
     d12:	8f b5       	in	r24, 0x2f	; 47
     d14:	82 60       	ori	r24, 0x02	; 2
     d16:	8f bd       	out	0x2f, r24	; 47
     d18:	8e b5       	in	r24, 0x2e	; 46
     d1a:	88 60       	ori	r24, 0x08	; 8
     d1c:	8e bd       	out	0x2e, r24	; 46
     d1e:	8e b5       	in	r24, 0x2e	; 46
     d20:	80 61       	ori	r24, 0x10	; 16
     d22:	8e bd       	out	0x2e, r24	; 46
     d24:	e0 e0       	ldi	r30, 0x00	; 0
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	4d ec       	ldi	r20, 0xCD	; 205
     d2a:	a1 e0       	ldi	r26, 0x01	; 1
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	64 9f       	mul	r22, r20
     d30:	81 2d       	mov	r24, r1
     d32:	11 24       	eor	r1, r1
     d34:	86 95       	lsr	r24
     d36:	86 95       	lsr	r24
     d38:	86 95       	lsr	r24
     d3a:	88 0f       	add	r24, r24
     d3c:	98 2f       	mov	r25, r24
     d3e:	99 0f       	add	r25, r25
     d40:	99 0f       	add	r25, r25
     d42:	89 0f       	add	r24, r25
     d44:	96 2f       	mov	r25, r22
     d46:	98 1b       	sub	r25, r24
     d48:	91 30       	cpi	r25, 0x01	; 1
     d4a:	59 f4       	brne	.+22     	; 0xd62 <TIMER_voidTimer1Init+0xae>
     d4c:	2e b5       	in	r18, 0x2e	; 46
     d4e:	cd 01       	movw	r24, r26
     d50:	0e 2e       	mov	r0, r30
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <TIMER_voidTimer1Init+0xa4>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	0a 94       	dec	r0
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <TIMER_voidTimer1Init+0xa0>
     d5c:	82 2b       	or	r24, r18
     d5e:	8e bd       	out	0x2e, r24	; 46
     d60:	0c c0       	rjmp	.+24     	; 0xd7a <TIMER_voidTimer1Init+0xc6>
     d62:	9e b5       	in	r25, 0x2e	; 46
     d64:	9d 01       	movw	r18, r26
     d66:	0e 2e       	mov	r0, r30
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <TIMER_voidTimer1Init+0xba>
     d6a:	22 0f       	add	r18, r18
     d6c:	33 1f       	adc	r19, r19
     d6e:	0a 94       	dec	r0
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <TIMER_voidTimer1Init+0xb6>
     d72:	82 2f       	mov	r24, r18
     d74:	80 95       	com	r24
     d76:	89 23       	and	r24, r25
     d78:	8e bd       	out	0x2e, r24	; 46
     d7a:	64 9f       	mul	r22, r20
     d7c:	61 2d       	mov	r22, r1
     d7e:	11 24       	eor	r1, r1
     d80:	66 95       	lsr	r22
     d82:	66 95       	lsr	r22
     d84:	66 95       	lsr	r22
     d86:	31 96       	adiw	r30, 0x01	; 1
     d88:	e3 30       	cpi	r30, 0x03	; 3
     d8a:	f1 05       	cpc	r31, r1
     d8c:	81 f6       	brne	.-96     	; 0xd2e <TIMER_voidTimer1Init+0x7a>
     d8e:	08 95       	ret

00000d90 <TIMER_voidSetOverFlow>:
     d90:	97 bd       	out	0x27, r25	; 39
     d92:	86 bd       	out	0x26, r24	; 38
     d94:	08 95       	ret

00000d96 <TIMER_voidTimer1ChannelASetCompareValue>:
     d96:	9b bd       	out	0x2b, r25	; 43
     d98:	8a bd       	out	0x2a, r24	; 42
     d9a:	08 95       	ret

00000d9c <__vector_11>:



//Timer 0 Normal ISR
void __vector_11(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_11(void){
     d9c:	1f 92       	push	r1
     d9e:	0f 92       	push	r0
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	0f 92       	push	r0
     da4:	11 24       	eor	r1, r1
     da6:	2f 93       	push	r18
     da8:	3f 93       	push	r19
     daa:	4f 93       	push	r20
     dac:	5f 93       	push	r21
     dae:	6f 93       	push	r22
     db0:	7f 93       	push	r23
     db2:	8f 93       	push	r24
     db4:	9f 93       	push	r25
     db6:	af 93       	push	r26
     db8:	bf 93       	push	r27
     dba:	ef 93       	push	r30
     dbc:	ff 93       	push	r31
	if(TIMER0_Normal_ISR_PTR!=0x00)
     dbe:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <TIMER0_Normal_ISR_PTR>
     dc2:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <TIMER0_Normal_ISR_PTR+0x1>
     dc6:	30 97       	sbiw	r30, 0x00	; 0
     dc8:	09 f0       	breq	.+2      	; 0xdcc <__vector_11+0x30>
		TIMER0_Normal_ISR_PTR();
     dca:	09 95       	icall
}
     dcc:	ff 91       	pop	r31
     dce:	ef 91       	pop	r30
     dd0:	bf 91       	pop	r27
     dd2:	af 91       	pop	r26
     dd4:	9f 91       	pop	r25
     dd6:	8f 91       	pop	r24
     dd8:	7f 91       	pop	r23
     dda:	6f 91       	pop	r22
     ddc:	5f 91       	pop	r21
     dde:	4f 91       	pop	r20
     de0:	3f 91       	pop	r19
     de2:	2f 91       	pop	r18
     de4:	0f 90       	pop	r0
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	0f 90       	pop	r0
     dea:	1f 90       	pop	r1
     dec:	18 95       	reti

00000dee <__vector_10>:

//Timer 0 CTC ISR
void __vector_10(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_10(void){
     dee:	1f 92       	push	r1
     df0:	0f 92       	push	r0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	0f 92       	push	r0
     df6:	11 24       	eor	r1, r1
     df8:	2f 93       	push	r18
     dfa:	3f 93       	push	r19
     dfc:	4f 93       	push	r20
     dfe:	5f 93       	push	r21
     e00:	6f 93       	push	r22
     e02:	7f 93       	push	r23
     e04:	8f 93       	push	r24
     e06:	9f 93       	push	r25
     e08:	af 93       	push	r26
     e0a:	bf 93       	push	r27
     e0c:	ef 93       	push	r30
     e0e:	ff 93       	push	r31
	if(TIMER0_CTC_ISR_PTR!=0x00)
     e10:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <TIMER0_CTC_ISR_PTR>
     e14:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <TIMER0_CTC_ISR_PTR+0x1>
     e18:	30 97       	sbiw	r30, 0x00	; 0
     e1a:	09 f0       	breq	.+2      	; 0xe1e <__vector_10+0x30>
		TIMER0_CTC_ISR_PTR();
     e1c:	09 95       	icall

}
     e1e:	ff 91       	pop	r31
     e20:	ef 91       	pop	r30
     e22:	bf 91       	pop	r27
     e24:	af 91       	pop	r26
     e26:	9f 91       	pop	r25
     e28:	8f 91       	pop	r24
     e2a:	7f 91       	pop	r23
     e2c:	6f 91       	pop	r22
     e2e:	5f 91       	pop	r21
     e30:	4f 91       	pop	r20
     e32:	3f 91       	pop	r19
     e34:	2f 91       	pop	r18
     e36:	0f 90       	pop	r0
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	0f 90       	pop	r0
     e3c:	1f 90       	pop	r1
     e3e:	18 95       	reti

00000e40 <__vector_6>:

//ICU
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void){
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	2f 93       	push	r18
     e4c:	3f 93       	push	r19
     e4e:	4f 93       	push	r20
     e50:	5f 93       	push	r21
     e52:	6f 93       	push	r22
     e54:	7f 93       	push	r23
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
     e5a:	af 93       	push	r26
     e5c:	bf 93       	push	r27
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
	if(GLOBAL_ICU_ISR!=0x00)
     e62:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <GLOBAL_ICU_ISR>
     e66:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <GLOBAL_ICU_ISR+0x1>
     e6a:	30 97       	sbiw	r30, 0x00	; 0
     e6c:	09 f0       	breq	.+2      	; 0xe70 <__vector_6+0x30>
		GLOBAL_ICU_ISR();
     e6e:	09 95       	icall
}
     e70:	ff 91       	pop	r31
     e72:	ef 91       	pop	r30
     e74:	bf 91       	pop	r27
     e76:	af 91       	pop	r26
     e78:	9f 91       	pop	r25
     e7a:	8f 91       	pop	r24
     e7c:	7f 91       	pop	r23
     e7e:	6f 91       	pop	r22
     e80:	5f 91       	pop	r21
     e82:	4f 91       	pop	r20
     e84:	3f 91       	pop	r19
     e86:	2f 91       	pop	r18
     e88:	0f 90       	pop	r0
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	0f 90       	pop	r0
     e8e:	1f 90       	pop	r1
     e90:	18 95       	reti

00000e92 <__vector_7>:

//Timer 1 CTC ISR
void __vector_7(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_7(void){
     e92:	1f 92       	push	r1
     e94:	0f 92       	push	r0
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	0f 92       	push	r0
     e9a:	11 24       	eor	r1, r1
     e9c:	2f 93       	push	r18
     e9e:	3f 93       	push	r19
     ea0:	4f 93       	push	r20
     ea2:	5f 93       	push	r21
     ea4:	6f 93       	push	r22
     ea6:	7f 93       	push	r23
     ea8:	8f 93       	push	r24
     eaa:	9f 93       	push	r25
     eac:	af 93       	push	r26
     eae:	bf 93       	push	r27
     eb0:	ef 93       	push	r30
     eb2:	ff 93       	push	r31
	if(GLOBAL_TIMER1_COMPARE_MATCH_PTR!=0x00)
     eb4:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <GLOBAL_TIMER1_COMPARE_MATCH_PTR>
     eb8:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <GLOBAL_TIMER1_COMPARE_MATCH_PTR+0x1>
     ebc:	30 97       	sbiw	r30, 0x00	; 0
     ebe:	09 f0       	breq	.+2      	; 0xec2 <__vector_7+0x30>
		GLOBAL_TIMER1_COMPARE_MATCH_PTR();
     ec0:	09 95       	icall
}
     ec2:	ff 91       	pop	r31
     ec4:	ef 91       	pop	r30
     ec6:	bf 91       	pop	r27
     ec8:	af 91       	pop	r26
     eca:	9f 91       	pop	r25
     ecc:	8f 91       	pop	r24
     ece:	7f 91       	pop	r23
     ed0:	6f 91       	pop	r22
     ed2:	5f 91       	pop	r21
     ed4:	4f 91       	pop	r20
     ed6:	3f 91       	pop	r19
     ed8:	2f 91       	pop	r18
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	0f 90       	pop	r0
     ee0:	1f 90       	pop	r1
     ee2:	18 95       	reti

00000ee4 <TWI_voidMasterInit>:
void TWI_voidSlaveInit(u8 Copy_SlaveAddress){
	//Set Slave Address
	TWAR = Copy_SlaveAddress <<1;

	//Enable TWI
	SET_BIT(TWCR,TWEN);
     ee4:	96 e9       	ldi	r25, 0x96	; 150
     ee6:	90 b9       	out	0x00, r25	; 0
     ee8:	09 98       	cbi	0x01, 1	; 1
     eea:	08 98       	cbi	0x01, 0	; 1
     eec:	88 23       	and	r24, r24
     eee:	11 f0       	breq	.+4      	; 0xef4 <TWI_voidMasterInit+0x10>
     ef0:	88 0f       	add	r24, r24
     ef2:	82 b9       	out	0x02, r24	; 2
     ef4:	86 b7       	in	r24, 0x36	; 54
     ef6:	84 60       	ori	r24, 0x04	; 4
     ef8:	86 bf       	out	0x36, r24	; 54
     efa:	08 95       	ret

00000efc <TWI_SendStartCondition>:
}

TWI_ErrStatus TWI_SendStartCondition(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
     efc:	86 b7       	in	r24, 0x36	; 54
     efe:	80 62       	ori	r24, 0x20	; 32
     f00:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     f02:	86 b7       	in	r24, 0x36	; 54
     f04:	80 68       	ori	r24, 0x80	; 128
     f06:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f08:	06 b6       	in	r0, 0x36	; 54
     f0a:	07 fe       	sbrs	r0, 7
     f0c:	fd cf       	rjmp	.-6      	; 0xf08 <TWI_SendStartCondition+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=START_ACK){
     f0e:	91 b1       	in	r25, 0x01	; 1
		Local_ErrStatus = StartConditionErr;
		}
	return Local_ErrStatus;
     f10:	98 7f       	andi	r25, 0xF8	; 248
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	98 30       	cpi	r25, 0x08	; 8
     f16:	09 f4       	brne	.+2      	; 0xf1a <TWI_SendStartCondition+0x1e>
     f18:	80 e0       	ldi	r24, 0x00	; 0
}
     f1a:	08 95       	ret

00000f1c <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
     f1c:	86 b7       	in	r24, 0x36	; 54
     f1e:	80 62       	ori	r24, 0x20	; 32
     f20:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     f22:	86 b7       	in	r24, 0x36	; 54
     f24:	80 68       	ori	r24, 0x80	; 128
     f26:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f28:	06 b6       	in	r0, 0x36	; 54
     f2a:	07 fe       	sbrs	r0, 7
     f2c:	fd cf       	rjmp	.-6      	; 0xf28 <TWI_SendRepeatedStart+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
     f2e:	81 b1       	in	r24, 0x01	; 1
     f30:	88 7f       	andi	r24, 0xF8	; 248
     f32:	80 31       	cpi	r24, 0x10	; 16
     f34:	11 f0       	breq	.+4      	; 0xf3a <TWI_SendRepeatedStart+0x1e>
		Local_ErrStatus = RepeatedStartErr;
     f36:	82 e0       	ldi	r24, 0x02	; 2
     f38:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     f3a:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
		Local_ErrStatus = RepeatedStartErr;
		}
	return Local_ErrStatus;
}
     f3c:	08 95       	ret

00000f3e <TWI_SendSlaveAddressWithWrite>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
     f3e:	88 0f       	add	r24, r24
     f40:	83 b9       	out	0x03, r24	; 3
	//For Write Operation
	CLR_BIT(TWDR,0);
     f42:	18 98       	cbi	0x03, 0	; 3

	//Clear Flag to start previous operation  //Enable TWI
	TWCR=(1<<TWINT)|(1<<TWEN);
     f44:	84 e8       	ldi	r24, 0x84	; 132
     f46:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f48:	06 b6       	in	r0, 0x36	; 54
     f4a:	07 fe       	sbrs	r0, 7
     f4c:	fd cf       	rjmp	.-6      	; 0xf48 <TWI_SendSlaveAddressWithWrite+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
     f4e:	81 b1       	in	r24, 0x01	; 1
     f50:	88 7f       	andi	r24, 0xF8	; 248
     f52:	88 31       	cpi	r24, 0x18	; 24
     f54:	11 f0       	breq	.+4      	; 0xf5a <TWI_SendSlaveAddressWithWrite+0x1c>
		Local_ErrStatus = SlaveAddressWithWriteErr;
     f56:	83 e0       	ldi	r24, 0x03	; 3
     f58:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
		Local_ErrStatus = SlaveAddressWithWriteErr;
		}
	return Local_ErrStatus;
}
     f5c:	08 95       	ret

00000f5e <TWI_SendSlaveAddressWithRead>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
     f5e:	88 0f       	add	r24, r24
     f60:	83 b9       	out	0x03, r24	; 3
	//For Read Operation
	SET_BIT(TWDR,0);
     f62:	18 9a       	sbi	0x03, 0	; 3

	//Clear Flag to start previous operation
	TWCR=(1<<TWINT)|(1<<TWEN);
     f64:	84 e8       	ldi	r24, 0x84	; 132
     f66:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f68:	06 b6       	in	r0, 0x36	; 54
     f6a:	07 fe       	sbrs	r0, 7
     f6c:	fd cf       	rjmp	.-6      	; 0xf68 <TWI_SendSlaveAddressWithRead+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
     f6e:	81 b1       	in	r24, 0x01	; 1
     f70:	88 7f       	andi	r24, 0xF8	; 248
     f72:	80 34       	cpi	r24, 0x40	; 64
     f74:	11 f0       	breq	.+4      	; 0xf7a <TWI_SendSlaveAddressWithRead+0x1c>
		Local_ErrStatus = SlaveAddressWithReadErr;
     f76:	84 e0       	ldi	r24, 0x04	; 4
     f78:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     f7a:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
		Local_ErrStatus = SlaveAddressWithReadErr;
		}
	return Local_ErrStatus;
}
     f7c:	08 95       	ret

00000f7e <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte){
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Write Data to data byte
	TWDR = Copy_u8DataByte;
     f7e:	83 b9       	out	0x03, r24	; 3

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     f80:	86 b7       	in	r24, 0x36	; 54
     f82:	80 68       	ori	r24, 0x80	; 128
     f84:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     f86:	06 b6       	in	r0, 0x36	; 54
     f88:	07 fe       	sbrs	r0, 7
     f8a:	fd cf       	rjmp	.-6      	; 0xf86 <TWI_MasterWriteDataByte+0x8>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MasterWriteDataByteErr){
     f8c:	81 b1       	in	r24, 0x01	; 1
		Local_ErrStatus = MasterWriteDataByteErr;
		}
	return Local_ErrStatus;

}
     f8e:	85 e0       	ldi	r24, 0x05	; 5
     f90:	08 95       	ret

00000f92 <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
     f92:	fc 01       	movw	r30, r24
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Enable ACK
	SET_BIT(TWCR,TWEA);
     f94:	96 b7       	in	r25, 0x36	; 54
     f96:	90 64       	ori	r25, 0x40	; 64
     f98:	96 bf       	out	0x36, r25	; 54
	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
     f9a:	96 b7       	in	r25, 0x36	; 54
     f9c:	90 68       	ori	r25, 0x80	; 128
     f9e:	96 bf       	out	0x36, r25	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
     fa0:	06 b6       	in	r0, 0x36	; 54
     fa2:	07 fe       	sbrs	r0, 7
     fa4:	fd cf       	rjmp	.-6      	; 0xfa0 <TWI_MasterReadDataByte+0xe>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
     fa6:	91 b1       	in	r25, 0x01	; 1
     fa8:	98 7f       	andi	r25, 0xF8	; 248
     faa:	90 35       	cpi	r25, 0x50	; 80
     fac:	21 f4       	brne	.+8      	; 0xfb6 <TWI_MasterReadDataByte+0x24>
		Local_ErrStatus = MasterReadDataByteErr;
		}
	else{
		// Read Data
		*Copy_Pu8DataByte = TWDR;
     fae:	83 b1       	in	r24, 0x03	; 3
     fb0:	80 83       	st	Z, r24

}

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
	TWI_ErrStatus 	Local_ErrStatus = NoError;
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	08 95       	ret
	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
		Local_ErrStatus = MasterReadDataByteErr;
     fb6:	86 e0       	ldi	r24, 0x06	; 6
		// Read Data
		*Copy_Pu8DataByte = TWDR;

	}
	return Local_ErrStatus;
}
     fb8:	08 95       	ret

00000fba <TWI_SendStopCondition>:

void TWI_SendStopCondition(void)
{
	/* generate stop condition on the bus */
	SET_BIT(TWCR,TWSTO);
     fba:	86 b7       	in	r24, 0x36	; 54
     fbc:	80 61       	ori	r24, 0x10	; 16
     fbe:	86 bf       	out	0x36, r24	; 54

	/* Clear the interrupt flag to start the previous operation */
	SET_BIT(TWCR,TWINT);
     fc0:	86 b7       	in	r24, 0x36	; 54
     fc2:	80 68       	ori	r24, 0x80	; 128
     fc4:	86 bf       	out	0x36, r24	; 54
     fc6:	08 95       	ret

00000fc8 <USART_voidInit>:
void USART_voidEnableRxINT(void){
	SET_BIT(UCSRB,7);
}

void USART_voidDisableRxINT(void){
	CLR_BIT(UCSRB,7);
     fc8:	52 98       	cbi	0x0a, 2	; 10
     fca:	86 e8       	ldi	r24, 0x86	; 134
     fcc:	80 bd       	out	0x20, r24	; 32
     fce:	83 e3       	ldi	r24, 0x33	; 51
     fd0:	89 b9       	out	0x09, r24	; 9
     fd2:	53 9a       	sbi	0x0a, 3	; 10
     fd4:	54 9a       	sbi	0x0a, 4	; 10
     fd6:	08 95       	ret

00000fd8 <USART_voidTransmitData>:
     fd8:	5d 9b       	sbis	0x0b, 5	; 11
     fda:	fe cf       	rjmp	.-4      	; 0xfd8 <USART_voidTransmitData>
     fdc:	5d 9a       	sbi	0x0b, 5	; 11
     fde:	8c b9       	out	0x0c, r24	; 12
     fe0:	08 95       	ret

00000fe2 <USART_u8ReceiverData>:
     fe2:	5f 9b       	sbis	0x0b, 7	; 11
     fe4:	fe cf       	rjmp	.-4      	; 0xfe2 <USART_u8ReceiverData>
     fe6:	8c b1       	in	r24, 0x0c	; 12
     fe8:	08 95       	ret

00000fea <USART_u8TimeOUTReceiverData>:
     fea:	fc 01       	movw	r30, r24
     fec:	1d bc       	out	0x2d, r1	; 45
     fee:	1c bc       	out	0x2c, r1	; 44
     ff0:	8f b5       	in	r24, 0x2f	; 47
     ff2:	8e 7f       	andi	r24, 0xFE	; 254
     ff4:	8f bd       	out	0x2f, r24	; 47
     ff6:	9f b5       	in	r25, 0x2f	; 47
     ff8:	9d 7f       	andi	r25, 0xFD	; 253
     ffa:	9f bd       	out	0x2f, r25	; 47
     ffc:	9e b5       	in	r25, 0x2e	; 46
     ffe:	97 7f       	andi	r25, 0xF7	; 247
    1000:	9e bd       	out	0x2e, r25	; 46
    1002:	9e b5       	in	r25, 0x2e	; 46
    1004:	9f 7e       	andi	r25, 0xEF	; 239
    1006:	9e bd       	out	0x2e, r25	; 46
    1008:	9e b5       	in	r25, 0x2e	; 46
    100a:	91 60       	ori	r25, 0x01	; 1
    100c:	9e bd       	out	0x2e, r25	; 46
    100e:	9e b5       	in	r25, 0x2e	; 46
    1010:	9d 7f       	andi	r25, 0xFD	; 253
    1012:	9e bd       	out	0x2e, r25	; 46
    1014:	9e b5       	in	r25, 0x2e	; 46
    1016:	94 60       	ori	r25, 0x04	; 4
    1018:	9e bd       	out	0x2e, r25	; 46
    101a:	0b c0       	rjmp	.+22     	; 0x1032 <USART_u8TimeOUTReceiverData+0x48>
    101c:	2c b5       	in	r18, 0x2c	; 44
    101e:	3d b5       	in	r19, 0x2d	; 45
    1020:	20 34       	cpi	r18, 0x40	; 64
    1022:	3c 49       	sbci	r19, 0x9C	; 156
    1024:	30 f0       	brcs	.+12     	; 0x1032 <USART_u8TimeOUTReceiverData+0x48>
    1026:	5f 9a       	sbi	0x0b, 7	; 11
    1028:	8e b5       	in	r24, 0x2e	; 46
    102a:	88 7f       	andi	r24, 0xF8	; 248
    102c:	8e bd       	out	0x2e, r24	; 46
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	08 95       	ret
    1032:	5f 9b       	sbis	0x0b, 7	; 11
    1034:	f3 cf       	rjmp	.-26     	; 0x101c <USART_u8TimeOUTReceiverData+0x32>
    1036:	8c b1       	in	r24, 0x0c	; 12
    1038:	80 83       	st	Z, r24
    103a:	1d bc       	out	0x2d, r1	; 45
    103c:	1c bc       	out	0x2c, r1	; 44
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	08 95       	ret

00001042 <USART_voidTransmitString>:
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	cf 93       	push	r28
    1048:	fc 01       	movw	r30, r24
    104a:	80 81       	ld	r24, Z
    104c:	88 23       	and	r24, r24
    104e:	59 f0       	breq	.+22     	; 0x1066 <USART_voidTransmitString+0x24>
    1050:	8f 01       	movw	r16, r30
    1052:	c0 e0       	ldi	r28, 0x00	; 0
    1054:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <USART_voidTransmitData>
    1058:	cf 5f       	subi	r28, 0xFF	; 255
    105a:	f8 01       	movw	r30, r16
    105c:	ec 0f       	add	r30, r28
    105e:	f1 1d       	adc	r31, r1
    1060:	80 81       	ld	r24, Z
    1062:	81 11       	cpse	r24, r1
    1064:	f7 cf       	rjmp	.-18     	; 0x1054 <USART_voidTransmitString+0x12>
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	08 95       	ret

0000106e <USART_voidCallBackFunction>:
    106e:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <GLOBAL_PTR_CallBack+0x1>
    1072:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <GLOBAL_PTR_CallBack>
    1076:	08 95       	ret

00001078 <USART_voidEnableRxINT>:
    1078:	57 9a       	sbi	0x0a, 7	; 10
    107a:	08 95       	ret

0000107c <__vector_13>:
}

void __vector_13 (void) __attribute__((signal));
void __vector_13 (void){
    107c:	1f 92       	push	r1
    107e:	0f 92       	push	r0
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	0f 92       	push	r0
    1084:	11 24       	eor	r1, r1
    1086:	2f 93       	push	r18
    1088:	3f 93       	push	r19
    108a:	4f 93       	push	r20
    108c:	5f 93       	push	r21
    108e:	6f 93       	push	r22
    1090:	7f 93       	push	r23
    1092:	8f 93       	push	r24
    1094:	9f 93       	push	r25
    1096:	af 93       	push	r26
    1098:	bf 93       	push	r27
    109a:	ef 93       	push	r30
    109c:	ff 93       	push	r31
	if(GLOBAL_PTR_CallBack!=0x00)
    109e:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <GLOBAL_PTR_CallBack>
    10a2:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <GLOBAL_PTR_CallBack+0x1>
    10a6:	30 97       	sbiw	r30, 0x00	; 0
    10a8:	09 f0       	breq	.+2      	; 0x10ac <__vector_13+0x30>
		GLOBAL_PTR_CallBack();
    10aa:	09 95       	icall
}
    10ac:	ff 91       	pop	r31
    10ae:	ef 91       	pop	r30
    10b0:	bf 91       	pop	r27
    10b2:	af 91       	pop	r26
    10b4:	9f 91       	pop	r25
    10b6:	8f 91       	pop	r24
    10b8:	7f 91       	pop	r23
    10ba:	6f 91       	pop	r22
    10bc:	5f 91       	pop	r21
    10be:	4f 91       	pop	r20
    10c0:	3f 91       	pop	r19
    10c2:	2f 91       	pop	r18
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0
    10ca:	1f 90       	pop	r1
    10cc:	18 95       	reti

000010ce <__subsf3>:
    10ce:	50 58       	subi	r21, 0x80	; 128

000010d0 <__addsf3>:
    10d0:	bb 27       	eor	r27, r27
    10d2:	aa 27       	eor	r26, r26
    10d4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__addsf3x>
    10d8:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__fp_round>
    10dc:	0e 94 bb 09 	call	0x1376	; 0x1376 <__fp_pscA>
    10e0:	38 f0       	brcs	.+14     	; 0x10f0 <__addsf3+0x20>
    10e2:	0e 94 c2 09 	call	0x1384	; 0x1384 <__fp_pscB>
    10e6:	20 f0       	brcs	.+8      	; 0x10f0 <__addsf3+0x20>
    10e8:	39 f4       	brne	.+14     	; 0x10f8 <__addsf3+0x28>
    10ea:	9f 3f       	cpi	r25, 0xFF	; 255
    10ec:	19 f4       	brne	.+6      	; 0x10f4 <__addsf3+0x24>
    10ee:	26 f4       	brtc	.+8      	; 0x10f8 <__addsf3+0x28>
    10f0:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__fp_nan>
    10f4:	0e f4       	brtc	.+2      	; 0x10f8 <__addsf3+0x28>
    10f6:	e0 95       	com	r30
    10f8:	e7 fb       	bst	r30, 7
    10fa:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__fp_inf>

000010fe <__addsf3x>:
    10fe:	e9 2f       	mov	r30, r25
    1100:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__fp_split3>
    1104:	58 f3       	brcs	.-42     	; 0x10dc <__addsf3+0xc>
    1106:	ba 17       	cp	r27, r26
    1108:	62 07       	cpc	r22, r18
    110a:	73 07       	cpc	r23, r19
    110c:	84 07       	cpc	r24, r20
    110e:	95 07       	cpc	r25, r21
    1110:	20 f0       	brcs	.+8      	; 0x111a <__addsf3x+0x1c>
    1112:	79 f4       	brne	.+30     	; 0x1132 <__addsf3x+0x34>
    1114:	a6 f5       	brtc	.+104    	; 0x117e <__addsf3x+0x80>
    1116:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__fp_zero>
    111a:	0e f4       	brtc	.+2      	; 0x111e <__addsf3x+0x20>
    111c:	e0 95       	com	r30
    111e:	0b 2e       	mov	r0, r27
    1120:	ba 2f       	mov	r27, r26
    1122:	a0 2d       	mov	r26, r0
    1124:	0b 01       	movw	r0, r22
    1126:	b9 01       	movw	r22, r18
    1128:	90 01       	movw	r18, r0
    112a:	0c 01       	movw	r0, r24
    112c:	ca 01       	movw	r24, r20
    112e:	a0 01       	movw	r20, r0
    1130:	11 24       	eor	r1, r1
    1132:	ff 27       	eor	r31, r31
    1134:	59 1b       	sub	r21, r25
    1136:	99 f0       	breq	.+38     	; 0x115e <__addsf3x+0x60>
    1138:	59 3f       	cpi	r21, 0xF9	; 249
    113a:	50 f4       	brcc	.+20     	; 0x1150 <__addsf3x+0x52>
    113c:	50 3e       	cpi	r21, 0xE0	; 224
    113e:	68 f1       	brcs	.+90     	; 0x119a <__addsf3x+0x9c>
    1140:	1a 16       	cp	r1, r26
    1142:	f0 40       	sbci	r31, 0x00	; 0
    1144:	a2 2f       	mov	r26, r18
    1146:	23 2f       	mov	r18, r19
    1148:	34 2f       	mov	r19, r20
    114a:	44 27       	eor	r20, r20
    114c:	58 5f       	subi	r21, 0xF8	; 248
    114e:	f3 cf       	rjmp	.-26     	; 0x1136 <__addsf3x+0x38>
    1150:	46 95       	lsr	r20
    1152:	37 95       	ror	r19
    1154:	27 95       	ror	r18
    1156:	a7 95       	ror	r26
    1158:	f0 40       	sbci	r31, 0x00	; 0
    115a:	53 95       	inc	r21
    115c:	c9 f7       	brne	.-14     	; 0x1150 <__addsf3x+0x52>
    115e:	7e f4       	brtc	.+30     	; 0x117e <__addsf3x+0x80>
    1160:	1f 16       	cp	r1, r31
    1162:	ba 0b       	sbc	r27, r26
    1164:	62 0b       	sbc	r22, r18
    1166:	73 0b       	sbc	r23, r19
    1168:	84 0b       	sbc	r24, r20
    116a:	ba f0       	brmi	.+46     	; 0x119a <__addsf3x+0x9c>
    116c:	91 50       	subi	r25, 0x01	; 1
    116e:	a1 f0       	breq	.+40     	; 0x1198 <__addsf3x+0x9a>
    1170:	ff 0f       	add	r31, r31
    1172:	bb 1f       	adc	r27, r27
    1174:	66 1f       	adc	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	88 1f       	adc	r24, r24
    117a:	c2 f7       	brpl	.-16     	; 0x116c <__addsf3x+0x6e>
    117c:	0e c0       	rjmp	.+28     	; 0x119a <__addsf3x+0x9c>
    117e:	ba 0f       	add	r27, r26
    1180:	62 1f       	adc	r22, r18
    1182:	73 1f       	adc	r23, r19
    1184:	84 1f       	adc	r24, r20
    1186:	48 f4       	brcc	.+18     	; 0x119a <__addsf3x+0x9c>
    1188:	87 95       	ror	r24
    118a:	77 95       	ror	r23
    118c:	67 95       	ror	r22
    118e:	b7 95       	ror	r27
    1190:	f7 95       	ror	r31
    1192:	9e 3f       	cpi	r25, 0xFE	; 254
    1194:	08 f0       	brcs	.+2      	; 0x1198 <__addsf3x+0x9a>
    1196:	b0 cf       	rjmp	.-160    	; 0x10f8 <__addsf3+0x28>
    1198:	93 95       	inc	r25
    119a:	88 0f       	add	r24, r24
    119c:	08 f0       	brcs	.+2      	; 0x11a0 <__addsf3x+0xa2>
    119e:	99 27       	eor	r25, r25
    11a0:	ee 0f       	add	r30, r30
    11a2:	97 95       	ror	r25
    11a4:	87 95       	ror	r24
    11a6:	08 95       	ret

000011a8 <__divsf3>:
    11a8:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__divsf3x>
    11ac:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__fp_round>
    11b0:	0e 94 c2 09 	call	0x1384	; 0x1384 <__fp_pscB>
    11b4:	58 f0       	brcs	.+22     	; 0x11cc <__divsf3+0x24>
    11b6:	0e 94 bb 09 	call	0x1376	; 0x1376 <__fp_pscA>
    11ba:	40 f0       	brcs	.+16     	; 0x11cc <__divsf3+0x24>
    11bc:	29 f4       	brne	.+10     	; 0x11c8 <__divsf3+0x20>
    11be:	5f 3f       	cpi	r21, 0xFF	; 255
    11c0:	29 f0       	breq	.+10     	; 0x11cc <__divsf3+0x24>
    11c2:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__fp_inf>
    11c6:	51 11       	cpse	r21, r1
    11c8:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__fp_szero>
    11cc:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__fp_nan>

000011d0 <__divsf3x>:
    11d0:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__fp_split3>
    11d4:	68 f3       	brcs	.-38     	; 0x11b0 <__divsf3+0x8>

000011d6 <__divsf3_pse>:
    11d6:	99 23       	and	r25, r25
    11d8:	b1 f3       	breq	.-20     	; 0x11c6 <__divsf3+0x1e>
    11da:	55 23       	and	r21, r21
    11dc:	91 f3       	breq	.-28     	; 0x11c2 <__divsf3+0x1a>
    11de:	95 1b       	sub	r25, r21
    11e0:	55 0b       	sbc	r21, r21
    11e2:	bb 27       	eor	r27, r27
    11e4:	aa 27       	eor	r26, r26
    11e6:	62 17       	cp	r22, r18
    11e8:	73 07       	cpc	r23, r19
    11ea:	84 07       	cpc	r24, r20
    11ec:	38 f0       	brcs	.+14     	; 0x11fc <__divsf3_pse+0x26>
    11ee:	9f 5f       	subi	r25, 0xFF	; 255
    11f0:	5f 4f       	sbci	r21, 0xFF	; 255
    11f2:	22 0f       	add	r18, r18
    11f4:	33 1f       	adc	r19, r19
    11f6:	44 1f       	adc	r20, r20
    11f8:	aa 1f       	adc	r26, r26
    11fa:	a9 f3       	breq	.-22     	; 0x11e6 <__divsf3_pse+0x10>
    11fc:	35 d0       	rcall	.+106    	; 0x1268 <__divsf3_pse+0x92>
    11fe:	0e 2e       	mov	r0, r30
    1200:	3a f0       	brmi	.+14     	; 0x1210 <__divsf3_pse+0x3a>
    1202:	e0 e8       	ldi	r30, 0x80	; 128
    1204:	32 d0       	rcall	.+100    	; 0x126a <__divsf3_pse+0x94>
    1206:	91 50       	subi	r25, 0x01	; 1
    1208:	50 40       	sbci	r21, 0x00	; 0
    120a:	e6 95       	lsr	r30
    120c:	00 1c       	adc	r0, r0
    120e:	ca f7       	brpl	.-14     	; 0x1202 <__divsf3_pse+0x2c>
    1210:	2b d0       	rcall	.+86     	; 0x1268 <__divsf3_pse+0x92>
    1212:	fe 2f       	mov	r31, r30
    1214:	29 d0       	rcall	.+82     	; 0x1268 <__divsf3_pse+0x92>
    1216:	66 0f       	add	r22, r22
    1218:	77 1f       	adc	r23, r23
    121a:	88 1f       	adc	r24, r24
    121c:	bb 1f       	adc	r27, r27
    121e:	26 17       	cp	r18, r22
    1220:	37 07       	cpc	r19, r23
    1222:	48 07       	cpc	r20, r24
    1224:	ab 07       	cpc	r26, r27
    1226:	b0 e8       	ldi	r27, 0x80	; 128
    1228:	09 f0       	breq	.+2      	; 0x122c <__divsf3_pse+0x56>
    122a:	bb 0b       	sbc	r27, r27
    122c:	80 2d       	mov	r24, r0
    122e:	bf 01       	movw	r22, r30
    1230:	ff 27       	eor	r31, r31
    1232:	93 58       	subi	r25, 0x83	; 131
    1234:	5f 4f       	sbci	r21, 0xFF	; 255
    1236:	3a f0       	brmi	.+14     	; 0x1246 <__divsf3_pse+0x70>
    1238:	9e 3f       	cpi	r25, 0xFE	; 254
    123a:	51 05       	cpc	r21, r1
    123c:	78 f0       	brcs	.+30     	; 0x125c <__divsf3_pse+0x86>
    123e:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__fp_inf>
    1242:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__fp_szero>
    1246:	5f 3f       	cpi	r21, 0xFF	; 255
    1248:	e4 f3       	brlt	.-8      	; 0x1242 <__divsf3_pse+0x6c>
    124a:	98 3e       	cpi	r25, 0xE8	; 232
    124c:	d4 f3       	brlt	.-12     	; 0x1242 <__divsf3_pse+0x6c>
    124e:	86 95       	lsr	r24
    1250:	77 95       	ror	r23
    1252:	67 95       	ror	r22
    1254:	b7 95       	ror	r27
    1256:	f7 95       	ror	r31
    1258:	9f 5f       	subi	r25, 0xFF	; 255
    125a:	c9 f7       	brne	.-14     	; 0x124e <__divsf3_pse+0x78>
    125c:	88 0f       	add	r24, r24
    125e:	91 1d       	adc	r25, r1
    1260:	96 95       	lsr	r25
    1262:	87 95       	ror	r24
    1264:	97 f9       	bld	r25, 7
    1266:	08 95       	ret
    1268:	e1 e0       	ldi	r30, 0x01	; 1
    126a:	66 0f       	add	r22, r22
    126c:	77 1f       	adc	r23, r23
    126e:	88 1f       	adc	r24, r24
    1270:	bb 1f       	adc	r27, r27
    1272:	62 17       	cp	r22, r18
    1274:	73 07       	cpc	r23, r19
    1276:	84 07       	cpc	r24, r20
    1278:	ba 07       	cpc	r27, r26
    127a:	20 f0       	brcs	.+8      	; 0x1284 <__divsf3_pse+0xae>
    127c:	62 1b       	sub	r22, r18
    127e:	73 0b       	sbc	r23, r19
    1280:	84 0b       	sbc	r24, r20
    1282:	ba 0b       	sbc	r27, r26
    1284:	ee 1f       	adc	r30, r30
    1286:	88 f7       	brcc	.-30     	; 0x126a <__divsf3_pse+0x94>
    1288:	e0 95       	com	r30
    128a:	08 95       	ret

0000128c <__fixunssfsi>:
    128c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fp_splitA>
    1290:	88 f0       	brcs	.+34     	; 0x12b4 <__fixunssfsi+0x28>
    1292:	9f 57       	subi	r25, 0x7F	; 127
    1294:	98 f0       	brcs	.+38     	; 0x12bc <__fixunssfsi+0x30>
    1296:	b9 2f       	mov	r27, r25
    1298:	99 27       	eor	r25, r25
    129a:	b7 51       	subi	r27, 0x17	; 23
    129c:	b0 f0       	brcs	.+44     	; 0x12ca <__fixunssfsi+0x3e>
    129e:	e1 f0       	breq	.+56     	; 0x12d8 <__fixunssfsi+0x4c>
    12a0:	66 0f       	add	r22, r22
    12a2:	77 1f       	adc	r23, r23
    12a4:	88 1f       	adc	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	1a f0       	brmi	.+6      	; 0x12b0 <__fixunssfsi+0x24>
    12aa:	ba 95       	dec	r27
    12ac:	c9 f7       	brne	.-14     	; 0x12a0 <__fixunssfsi+0x14>
    12ae:	14 c0       	rjmp	.+40     	; 0x12d8 <__fixunssfsi+0x4c>
    12b0:	b1 30       	cpi	r27, 0x01	; 1
    12b2:	91 f0       	breq	.+36     	; 0x12d8 <__fixunssfsi+0x4c>
    12b4:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__fp_zero>
    12b8:	b1 e0       	ldi	r27, 0x01	; 1
    12ba:	08 95       	ret
    12bc:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__fp_zero>
    12c0:	67 2f       	mov	r22, r23
    12c2:	78 2f       	mov	r23, r24
    12c4:	88 27       	eor	r24, r24
    12c6:	b8 5f       	subi	r27, 0xF8	; 248
    12c8:	39 f0       	breq	.+14     	; 0x12d8 <__fixunssfsi+0x4c>
    12ca:	b9 3f       	cpi	r27, 0xF9	; 249
    12cc:	cc f3       	brlt	.-14     	; 0x12c0 <__fixunssfsi+0x34>
    12ce:	86 95       	lsr	r24
    12d0:	77 95       	ror	r23
    12d2:	67 95       	ror	r22
    12d4:	b3 95       	inc	r27
    12d6:	d9 f7       	brne	.-10     	; 0x12ce <__fixunssfsi+0x42>
    12d8:	3e f4       	brtc	.+14     	; 0x12e8 <__fixunssfsi+0x5c>
    12da:	90 95       	com	r25
    12dc:	80 95       	com	r24
    12de:	70 95       	com	r23
    12e0:	61 95       	neg	r22
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255
    12e4:	8f 4f       	sbci	r24, 0xFF	; 255
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	08 95       	ret

000012ea <__floatunsisf>:
    12ea:	e8 94       	clt
    12ec:	09 c0       	rjmp	.+18     	; 0x1300 <__floatsisf+0x12>

000012ee <__floatsisf>:
    12ee:	97 fb       	bst	r25, 7
    12f0:	3e f4       	brtc	.+14     	; 0x1300 <__floatsisf+0x12>
    12f2:	90 95       	com	r25
    12f4:	80 95       	com	r24
    12f6:	70 95       	com	r23
    12f8:	61 95       	neg	r22
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255
    12fc:	8f 4f       	sbci	r24, 0xFF	; 255
    12fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1300:	99 23       	and	r25, r25
    1302:	a9 f0       	breq	.+42     	; 0x132e <__floatsisf+0x40>
    1304:	f9 2f       	mov	r31, r25
    1306:	96 e9       	ldi	r25, 0x96	; 150
    1308:	bb 27       	eor	r27, r27
    130a:	93 95       	inc	r25
    130c:	f6 95       	lsr	r31
    130e:	87 95       	ror	r24
    1310:	77 95       	ror	r23
    1312:	67 95       	ror	r22
    1314:	b7 95       	ror	r27
    1316:	f1 11       	cpse	r31, r1
    1318:	f8 cf       	rjmp	.-16     	; 0x130a <__floatsisf+0x1c>
    131a:	fa f4       	brpl	.+62     	; 0x135a <__floatsisf+0x6c>
    131c:	bb 0f       	add	r27, r27
    131e:	11 f4       	brne	.+4      	; 0x1324 <__floatsisf+0x36>
    1320:	60 ff       	sbrs	r22, 0
    1322:	1b c0       	rjmp	.+54     	; 0x135a <__floatsisf+0x6c>
    1324:	6f 5f       	subi	r22, 0xFF	; 255
    1326:	7f 4f       	sbci	r23, 0xFF	; 255
    1328:	8f 4f       	sbci	r24, 0xFF	; 255
    132a:	9f 4f       	sbci	r25, 0xFF	; 255
    132c:	16 c0       	rjmp	.+44     	; 0x135a <__floatsisf+0x6c>
    132e:	88 23       	and	r24, r24
    1330:	11 f0       	breq	.+4      	; 0x1336 <__floatsisf+0x48>
    1332:	96 e9       	ldi	r25, 0x96	; 150
    1334:	11 c0       	rjmp	.+34     	; 0x1358 <__floatsisf+0x6a>
    1336:	77 23       	and	r23, r23
    1338:	21 f0       	breq	.+8      	; 0x1342 <__floatsisf+0x54>
    133a:	9e e8       	ldi	r25, 0x8E	; 142
    133c:	87 2f       	mov	r24, r23
    133e:	76 2f       	mov	r23, r22
    1340:	05 c0       	rjmp	.+10     	; 0x134c <__floatsisf+0x5e>
    1342:	66 23       	and	r22, r22
    1344:	71 f0       	breq	.+28     	; 0x1362 <__floatsisf+0x74>
    1346:	96 e8       	ldi	r25, 0x86	; 134
    1348:	86 2f       	mov	r24, r22
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	2a f0       	brmi	.+10     	; 0x135a <__floatsisf+0x6c>
    1350:	9a 95       	dec	r25
    1352:	66 0f       	add	r22, r22
    1354:	77 1f       	adc	r23, r23
    1356:	88 1f       	adc	r24, r24
    1358:	da f7       	brpl	.-10     	; 0x1350 <__floatsisf+0x62>
    135a:	88 0f       	add	r24, r24
    135c:	96 95       	lsr	r25
    135e:	87 95       	ror	r24
    1360:	97 f9       	bld	r25, 7
    1362:	08 95       	ret

00001364 <__fp_inf>:
    1364:	97 f9       	bld	r25, 7
    1366:	9f 67       	ori	r25, 0x7F	; 127
    1368:	80 e8       	ldi	r24, 0x80	; 128
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	60 e0       	ldi	r22, 0x00	; 0
    136e:	08 95       	ret

00001370 <__fp_nan>:
    1370:	9f ef       	ldi	r25, 0xFF	; 255
    1372:	80 ec       	ldi	r24, 0xC0	; 192
    1374:	08 95       	ret

00001376 <__fp_pscA>:
    1376:	00 24       	eor	r0, r0
    1378:	0a 94       	dec	r0
    137a:	16 16       	cp	r1, r22
    137c:	17 06       	cpc	r1, r23
    137e:	18 06       	cpc	r1, r24
    1380:	09 06       	cpc	r0, r25
    1382:	08 95       	ret

00001384 <__fp_pscB>:
    1384:	00 24       	eor	r0, r0
    1386:	0a 94       	dec	r0
    1388:	12 16       	cp	r1, r18
    138a:	13 06       	cpc	r1, r19
    138c:	14 06       	cpc	r1, r20
    138e:	05 06       	cpc	r0, r21
    1390:	08 95       	ret

00001392 <__fp_round>:
    1392:	09 2e       	mov	r0, r25
    1394:	03 94       	inc	r0
    1396:	00 0c       	add	r0, r0
    1398:	11 f4       	brne	.+4      	; 0x139e <__fp_round+0xc>
    139a:	88 23       	and	r24, r24
    139c:	52 f0       	brmi	.+20     	; 0x13b2 <__fp_round+0x20>
    139e:	bb 0f       	add	r27, r27
    13a0:	40 f4       	brcc	.+16     	; 0x13b2 <__fp_round+0x20>
    13a2:	bf 2b       	or	r27, r31
    13a4:	11 f4       	brne	.+4      	; 0x13aa <__fp_round+0x18>
    13a6:	60 ff       	sbrs	r22, 0
    13a8:	04 c0       	rjmp	.+8      	; 0x13b2 <__fp_round+0x20>
    13aa:	6f 5f       	subi	r22, 0xFF	; 255
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255
    13ae:	8f 4f       	sbci	r24, 0xFF	; 255
    13b0:	9f 4f       	sbci	r25, 0xFF	; 255
    13b2:	08 95       	ret

000013b4 <__fp_split3>:
    13b4:	57 fd       	sbrc	r21, 7
    13b6:	90 58       	subi	r25, 0x80	; 128
    13b8:	44 0f       	add	r20, r20
    13ba:	55 1f       	adc	r21, r21
    13bc:	59 f0       	breq	.+22     	; 0x13d4 <__fp_splitA+0x10>
    13be:	5f 3f       	cpi	r21, 0xFF	; 255
    13c0:	71 f0       	breq	.+28     	; 0x13de <__fp_splitA+0x1a>
    13c2:	47 95       	ror	r20

000013c4 <__fp_splitA>:
    13c4:	88 0f       	add	r24, r24
    13c6:	97 fb       	bst	r25, 7
    13c8:	99 1f       	adc	r25, r25
    13ca:	61 f0       	breq	.+24     	; 0x13e4 <__fp_splitA+0x20>
    13cc:	9f 3f       	cpi	r25, 0xFF	; 255
    13ce:	79 f0       	breq	.+30     	; 0x13ee <__fp_splitA+0x2a>
    13d0:	87 95       	ror	r24
    13d2:	08 95       	ret
    13d4:	12 16       	cp	r1, r18
    13d6:	13 06       	cpc	r1, r19
    13d8:	14 06       	cpc	r1, r20
    13da:	55 1f       	adc	r21, r21
    13dc:	f2 cf       	rjmp	.-28     	; 0x13c2 <__fp_split3+0xe>
    13de:	46 95       	lsr	r20
    13e0:	f1 df       	rcall	.-30     	; 0x13c4 <__fp_splitA>
    13e2:	08 c0       	rjmp	.+16     	; 0x13f4 <__fp_splitA+0x30>
    13e4:	16 16       	cp	r1, r22
    13e6:	17 06       	cpc	r1, r23
    13e8:	18 06       	cpc	r1, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	f1 cf       	rjmp	.-30     	; 0x13d0 <__fp_splitA+0xc>
    13ee:	86 95       	lsr	r24
    13f0:	71 05       	cpc	r23, r1
    13f2:	61 05       	cpc	r22, r1
    13f4:	08 94       	sec
    13f6:	08 95       	ret

000013f8 <__fp_zero>:
    13f8:	e8 94       	clt

000013fa <__fp_szero>:
    13fa:	bb 27       	eor	r27, r27
    13fc:	66 27       	eor	r22, r22
    13fe:	77 27       	eor	r23, r23
    1400:	cb 01       	movw	r24, r22
    1402:	97 f9       	bld	r25, 7
    1404:	08 95       	ret

00001406 <__mulsf3>:
    1406:	0e 94 16 0a 	call	0x142c	; 0x142c <__mulsf3x>
    140a:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__fp_round>
    140e:	0e 94 bb 09 	call	0x1376	; 0x1376 <__fp_pscA>
    1412:	38 f0       	brcs	.+14     	; 0x1422 <__mulsf3+0x1c>
    1414:	0e 94 c2 09 	call	0x1384	; 0x1384 <__fp_pscB>
    1418:	20 f0       	brcs	.+8      	; 0x1422 <__mulsf3+0x1c>
    141a:	95 23       	and	r25, r21
    141c:	11 f0       	breq	.+4      	; 0x1422 <__mulsf3+0x1c>
    141e:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__fp_inf>
    1422:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__fp_nan>
    1426:	11 24       	eor	r1, r1
    1428:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__fp_szero>

0000142c <__mulsf3x>:
    142c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__fp_split3>
    1430:	70 f3       	brcs	.-36     	; 0x140e <__mulsf3+0x8>

00001432 <__mulsf3_pse>:
    1432:	95 9f       	mul	r25, r21
    1434:	c1 f3       	breq	.-16     	; 0x1426 <__mulsf3+0x20>
    1436:	95 0f       	add	r25, r21
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	55 1f       	adc	r21, r21
    143c:	62 9f       	mul	r22, r18
    143e:	f0 01       	movw	r30, r0
    1440:	72 9f       	mul	r23, r18
    1442:	bb 27       	eor	r27, r27
    1444:	f0 0d       	add	r31, r0
    1446:	b1 1d       	adc	r27, r1
    1448:	63 9f       	mul	r22, r19
    144a:	aa 27       	eor	r26, r26
    144c:	f0 0d       	add	r31, r0
    144e:	b1 1d       	adc	r27, r1
    1450:	aa 1f       	adc	r26, r26
    1452:	64 9f       	mul	r22, r20
    1454:	66 27       	eor	r22, r22
    1456:	b0 0d       	add	r27, r0
    1458:	a1 1d       	adc	r26, r1
    145a:	66 1f       	adc	r22, r22
    145c:	82 9f       	mul	r24, r18
    145e:	22 27       	eor	r18, r18
    1460:	b0 0d       	add	r27, r0
    1462:	a1 1d       	adc	r26, r1
    1464:	62 1f       	adc	r22, r18
    1466:	73 9f       	mul	r23, r19
    1468:	b0 0d       	add	r27, r0
    146a:	a1 1d       	adc	r26, r1
    146c:	62 1f       	adc	r22, r18
    146e:	83 9f       	mul	r24, r19
    1470:	a0 0d       	add	r26, r0
    1472:	61 1d       	adc	r22, r1
    1474:	22 1f       	adc	r18, r18
    1476:	74 9f       	mul	r23, r20
    1478:	33 27       	eor	r19, r19
    147a:	a0 0d       	add	r26, r0
    147c:	61 1d       	adc	r22, r1
    147e:	23 1f       	adc	r18, r19
    1480:	84 9f       	mul	r24, r20
    1482:	60 0d       	add	r22, r0
    1484:	21 1d       	adc	r18, r1
    1486:	82 2f       	mov	r24, r18
    1488:	76 2f       	mov	r23, r22
    148a:	6a 2f       	mov	r22, r26
    148c:	11 24       	eor	r1, r1
    148e:	9f 57       	subi	r25, 0x7F	; 127
    1490:	50 40       	sbci	r21, 0x00	; 0
    1492:	9a f0       	brmi	.+38     	; 0x14ba <__mulsf3_pse+0x88>
    1494:	f1 f0       	breq	.+60     	; 0x14d2 <__mulsf3_pse+0xa0>
    1496:	88 23       	and	r24, r24
    1498:	4a f0       	brmi	.+18     	; 0x14ac <__mulsf3_pse+0x7a>
    149a:	ee 0f       	add	r30, r30
    149c:	ff 1f       	adc	r31, r31
    149e:	bb 1f       	adc	r27, r27
    14a0:	66 1f       	adc	r22, r22
    14a2:	77 1f       	adc	r23, r23
    14a4:	88 1f       	adc	r24, r24
    14a6:	91 50       	subi	r25, 0x01	; 1
    14a8:	50 40       	sbci	r21, 0x00	; 0
    14aa:	a9 f7       	brne	.-22     	; 0x1496 <__mulsf3_pse+0x64>
    14ac:	9e 3f       	cpi	r25, 0xFE	; 254
    14ae:	51 05       	cpc	r21, r1
    14b0:	80 f0       	brcs	.+32     	; 0x14d2 <__mulsf3_pse+0xa0>
    14b2:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__fp_inf>
    14b6:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__fp_szero>
    14ba:	5f 3f       	cpi	r21, 0xFF	; 255
    14bc:	e4 f3       	brlt	.-8      	; 0x14b6 <__mulsf3_pse+0x84>
    14be:	98 3e       	cpi	r25, 0xE8	; 232
    14c0:	d4 f3       	brlt	.-12     	; 0x14b6 <__mulsf3_pse+0x84>
    14c2:	86 95       	lsr	r24
    14c4:	77 95       	ror	r23
    14c6:	67 95       	ror	r22
    14c8:	b7 95       	ror	r27
    14ca:	f7 95       	ror	r31
    14cc:	e7 95       	ror	r30
    14ce:	9f 5f       	subi	r25, 0xFF	; 255
    14d0:	c1 f7       	brne	.-16     	; 0x14c2 <__mulsf3_pse+0x90>
    14d2:	fe 2b       	or	r31, r30
    14d4:	88 0f       	add	r24, r24
    14d6:	91 1d       	adc	r25, r1
    14d8:	96 95       	lsr	r25
    14da:	87 95       	ror	r24
    14dc:	97 f9       	bld	r25, 7
    14de:	08 95       	ret

000014e0 <__itoa_ncheck>:
    14e0:	bb 27       	eor	r27, r27
    14e2:	4a 30       	cpi	r20, 0x0A	; 10
    14e4:	31 f4       	brne	.+12     	; 0x14f2 <__itoa_ncheck+0x12>
    14e6:	99 23       	and	r25, r25
    14e8:	22 f4       	brpl	.+8      	; 0x14f2 <__itoa_ncheck+0x12>
    14ea:	bd e2       	ldi	r27, 0x2D	; 45
    14ec:	90 95       	com	r25
    14ee:	81 95       	neg	r24
    14f0:	9f 4f       	sbci	r25, 0xFF	; 255
    14f2:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__utoa_common>

000014f6 <__utoa_ncheck>:
    14f6:	bb 27       	eor	r27, r27

000014f8 <__utoa_common>:
    14f8:	fb 01       	movw	r30, r22
    14fa:	55 27       	eor	r21, r21
    14fc:	aa 27       	eor	r26, r26
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	aa 1f       	adc	r26, r26
    1504:	a4 17       	cp	r26, r20
    1506:	10 f0       	brcs	.+4      	; 0x150c <__utoa_common+0x14>
    1508:	a4 1b       	sub	r26, r20
    150a:	83 95       	inc	r24
    150c:	50 51       	subi	r21, 0x10	; 16
    150e:	b9 f7       	brne	.-18     	; 0x14fe <__utoa_common+0x6>
    1510:	a0 5d       	subi	r26, 0xD0	; 208
    1512:	aa 33       	cpi	r26, 0x3A	; 58
    1514:	08 f0       	brcs	.+2      	; 0x1518 <__utoa_common+0x20>
    1516:	a9 5d       	subi	r26, 0xD9	; 217
    1518:	a1 93       	st	Z+, r26
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	79 f7       	brne	.-34     	; 0x14fc <__utoa_common+0x4>
    151e:	b1 11       	cpse	r27, r1
    1520:	b1 93       	st	Z+, r27
    1522:	11 92       	st	Z+, r1
    1524:	cb 01       	movw	r24, r22
    1526:	0c 94 95 0a 	jmp	0x152a	; 0x152a <strrev>

0000152a <strrev>:
    152a:	dc 01       	movw	r26, r24
    152c:	fc 01       	movw	r30, r24
    152e:	67 2f       	mov	r22, r23
    1530:	71 91       	ld	r23, Z+
    1532:	77 23       	and	r23, r23
    1534:	e1 f7       	brne	.-8      	; 0x152e <strrev+0x4>
    1536:	32 97       	sbiw	r30, 0x02	; 2
    1538:	04 c0       	rjmp	.+8      	; 0x1542 <strrev+0x18>
    153a:	7c 91       	ld	r23, X
    153c:	6d 93       	st	X+, r22
    153e:	70 83       	st	Z, r23
    1540:	62 91       	ld	r22, -Z
    1542:	ae 17       	cp	r26, r30
    1544:	bf 07       	cpc	r27, r31
    1546:	c8 f3       	brcs	.-14     	; 0x153a <strrev+0x10>
    1548:	08 95       	ret

0000154a <_exit>:
    154a:	f8 94       	cli

0000154c <__stop_program>:
    154c:	ff cf       	rjmp	.-2      	; 0x154c <__stop_program>
