
ITI_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00000fba  0000104e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008000bc  008000bc  000010aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000275c  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e6d  00000000  00000000  00003b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001944  00000000  00000000  000049d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000750  00000000  00000000  00006318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f1c  00000000  00000000  00006a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001513  00000000  00000000  00007984  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00008e97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2c 04 	jmp	0x858	; 0x858 <__vector_1>
   8:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__vector_2>
   c:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__vector_10>
  2c:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3b       	cpi	r26, 0xBC	; 188
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac eb       	ldi	r26, 0xBC	; 188
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3d       	cpi	r26, 0xD1	; 209
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3f 01 	call	0x27e	; 0x27e <main>
  8a:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TempSensor>:
	}

}

void TempSensor(void){
	u8 Temp = ADC_u8StartConversion(0);
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 73 03 	call	0x6e6	; 0x6e6 <ADC_u8StartConversion>
	 * LM35 Temperatur Sensor Vout Calculations with connection applied in proteus:
	 * Vout = 10 mV/C
	 * 25 C ===> (10*(10^-3)*25*2^8) / 5 = 12.8
	 * 35 C ===> (10*(10^-3)*35*2^8) / 5 = 17.9
	 */
	if(Temp>=18){
  98:	82 31       	cpi	r24, 0x12	; 18
  9a:	58 f0       	brcs	.+22     	; 0xb2 <TempSensor+0x20>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	66 e0       	ldi	r22, 0x06	; 6
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	67 e0       	ldi	r22, 0x07	; 7
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
  b0:	08 95       	ret
	}
	else if (Temp>=13){
  b2:	8d 30       	cpi	r24, 0x0D	; 13
  b4:	58 f0       	brcs	.+22     	; 0xcc <TempSensor+0x3a>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	66 e0       	ldi	r22, 0x06	; 6
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH);
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	67 e0       	ldi	r22, 0x07	; 7
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
  ca:	08 95       	ret
	}
	else{
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	66 e0       	ldi	r22, 0x06	; 6
  d0:	83 e0       	ldi	r24, 0x03	; 3
  d2:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_LOW);
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	67 e0       	ldi	r22, 0x07	; 7
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
  e0:	08 95       	ret

000000e2 <DoorPass>:
	}
}

void DoorPass(){
  e2:	cf 93       	push	r28
	
	u8 Local_u8Keypad_Key=KPD_u8GetPressedKey();
  e4:	0e 94 0a 02 	call	0x414	; 0x414 <KPD_u8GetPressedKey>
  e8:	c8 2f       	mov	r28, r24
	static u8 Local_u8DoorStatus=0;
	static u16 Local_u16DoorPassword=0;
	
	if(Local_u8Keypad_Key==KPD_CLEAR){
  ea:	8d 30       	cpi	r24, 0x0D	; 13
  ec:	09 f0       	breq	.+2      	; 0xf0 <DoorPass+0xe>
  ee:	4e c0       	rjmp	.+156    	; 0x18c <DoorPass+0xaa>
		
		//set new pass
		if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
  f0:	20 91 bd 00 	lds	r18, 0x00BD	; 0x8000bd <Local_u16DoorPassword.1915>
  f4:	30 91 be 00 	lds	r19, 0x00BE	; 0x8000be <Local_u16DoorPassword.1915+0x1>
  f8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <Global_u16EPROMDoorPass>
  fc:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <Global_u16EPROMDoorPass+0x1>
 100:	28 17       	cp	r18, r24
 102:	39 07       	cpc	r19, r25
 104:	e1 f5       	brne	.+120    	; 0x17e <DoorPass+0x9c>
			
			LCD_voidClearDisplay();
 106:	0e 94 04 03 	call	0x608	; 0x608 <LCD_voidClearDisplay>
			// setting new password
			
				Global_u16EPROMDoorPass=0;
 10a:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <Global_u16EPROMDoorPass+0x1>
 10e:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <Global_u16EPROMDoorPass>
				Local_u16DoorPassword=0;
 112:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <Local_u16DoorPassword.1915+0x1>
 116:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <Local_u16DoorPassword.1915>
				LCD_voidSendString("Set new pass:");
 11a:	8e e6       	ldi	r24, 0x6E	; 110
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 08 03 	call	0x610	; 0x610 <LCD_voidSendString>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				while(Local_u8Keypad_Key != KPD_ENTER ){
					
					Local_u8Keypad_Key=KPD_u8GetPressedKey();
 122:	0e 94 0a 02 	call	0x414	; 0x414 <KPD_u8GetPressedKey>
 126:	c8 2f       	mov	r28, r24
					if(Local_u8Keypad_Key==KPD_CLEAR){
 128:	8d 30       	cpi	r24, 0x0D	; 13
 12a:	59 f4       	brne	.+22     	; 0x142 <DoorPass+0x60>
						LCD_voidClearDisplay();
 12c:	0e 94 04 03 	call	0x608	; 0x608 <LCD_voidClearDisplay>
						Global_u16EPROMDoorPass=0;
 130:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <Global_u16EPROMDoorPass+0x1>
 134:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <Global_u16EPROMDoorPass>
						LCD_voidSendString("Set new pass:");
 138:	8e e6       	ldi	r24, 0x6E	; 110
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 08 03 	call	0x610	; 0x610 <LCD_voidSendString>
 140:	f0 cf       	rjmp	.-32     	; 0x122 <DoorPass+0x40>
					}
					else if(Local_u8Keypad_Key !=KPD_NO_PRESS && Local_u8Keypad_Key!=KPD_ENTER){
 142:	8a 3a       	cpi	r24, 0xAA	; 170
 144:	71 f3       	breq	.-36     	; 0x122 <DoorPass+0x40>
 146:	8c 30       	cpi	r24, 0x0C	; 12
 148:	09 f4       	brne	.+2      	; 0x14c <DoorPass+0x6a>
 14a:	75 c0       	rjmp	.+234    	; 0x236 <DoorPass+0x154>
						
						LCD_voidSendData('*');
 14c:	8a e2       	ldi	r24, 0x2A	; 42
 14e:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_voidSendData>
						
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
 152:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <Global_u16EPROMDoorPass>
 156:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <Global_u16EPROMDoorPass+0x1>
 15a:	9c 01       	movw	r18, r24
 15c:	22 0f       	add	r18, r18
 15e:	33 1f       	adc	r19, r19
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	82 0f       	add	r24, r18
 16e:	93 1f       	adc	r25, r19
 170:	8c 0f       	add	r24, r28
 172:	91 1d       	adc	r25, r1
 174:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <Global_u16EPROMDoorPass+0x1>
 178:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <Global_u16EPROMDoorPass>
 17c:	d2 cf       	rjmp	.-92     	; 0x122 <DoorPass+0x40>
				EEPROM_voidSendDataByte(Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
				
		}
		
		else{
		LCD_voidClearDisplay();
 17e:	0e 94 04 03 	call	0x608	; 0x608 <LCD_voidClearDisplay>
		Local_u16DoorPassword=0;
 182:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <Local_u16DoorPassword.1915+0x1>
 186:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <Local_u16DoorPassword.1915>
 18a:	77 c0       	rjmp	.+238    	; 0x27a <DoorPass+0x198>
		
		}
	}
	else if(Local_u8Keypad_Key==KPD_ENTER){
 18c:	8c 30       	cpi	r24, 0x0C	; 12
 18e:	79 f5       	brne	.+94     	; 0x1ee <DoorPass+0x10c>
		
		LCD_voidClearDisplay();
 190:	0e 94 04 03 	call	0x608	; 0x608 <LCD_voidClearDisplay>
		 if(Local_u16DoorPassword==Global_u16EPROMDoorPass){
 194:	20 91 bd 00 	lds	r18, 0x00BD	; 0x8000bd <Local_u16DoorPassword.1915>
 198:	30 91 be 00 	lds	r19, 0x00BE	; 0x8000be <Local_u16DoorPassword.1915+0x1>
 19c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <Global_u16EPROMDoorPass>
 1a0:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <Global_u16EPROMDoorPass+0x1>
 1a4:	28 17       	cp	r18, r24
 1a6:	39 07       	cpc	r19, r25
 1a8:	c9 f4       	brne	.+50     	; 0x1dc <DoorPass+0xfa>
			
			if(Local_u8DoorStatus==0){
 1aa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__data_end>
 1ae:	81 11       	cpse	r24, r1
 1b0:	0b c0       	rjmp	.+22     	; 0x1c8 <DoorPass+0xe6>
				LCD_voidSendString("Door is opened");
 1b2:	8c e7       	ldi	r24, 0x7C	; 124
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 08 03 	call	0x610	; 0x610 <LCD_voidSendString>
				// run servo
				Servo_VoidDegree(180);
 1ba:	84 eb       	ldi	r24, 0xB4	; 180
 1bc:	0e 94 46 03 	call	0x68c	; 0x68c <Servo_VoidDegree>
				Local_u8DoorStatus=1;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__data_end>
 1c6:	0e c0       	rjmp	.+28     	; 0x1e4 <DoorPass+0x102>
				
			}
			else{
				LCD_voidSendString("Door is Closed");
 1c8:	8b e8       	ldi	r24, 0x8B	; 139
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 08 03 	call	0x610	; 0x610 <LCD_voidSendString>
				// stop servo 
				Servo_VoidDegree(0);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 46 03 	call	0x68c	; 0x68c <Servo_VoidDegree>
				Local_u8DoorStatus=0;
 1d6:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__data_end>
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <DoorPass+0x102>
				
			}
			
		}
		else
			LCD_voidSendString("Wrong password !");
 1dc:	8a e9       	ldi	r24, 0x9A	; 154
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 08 03 	call	0x610	; 0x610 <LCD_voidSendString>
			
			Local_u16DoorPassword=0;
 1e4:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <Local_u16DoorPassword.1915+0x1>
 1e8:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <Local_u16DoorPassword.1915>
 1ec:	46 c0       	rjmp	.+140    	; 0x27a <DoorPass+0x198>
		
	}
	
	else if(Local_u8Keypad_Key != KPD_NO_PRESS){
 1ee:	8a 3a       	cpi	r24, 0xAA	; 170
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <DoorPass+0x112>
 1f2:	43 c0       	rjmp	.+134    	; 0x27a <DoorPass+0x198>
		if(Local_u16DoorPassword==0)
 1f4:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <Local_u16DoorPassword.1915>
 1f8:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <Local_u16DoorPassword.1915+0x1>
 1fc:	89 2b       	or	r24, r25
 1fe:	11 f4       	brne	.+4      	; 0x204 <DoorPass+0x122>
			LCD_voidClearDisplay();
 200:	0e 94 04 03 	call	0x608	; 0x608 <LCD_voidClearDisplay>
		LCD_voidSendData('*');
 204:	8a e2       	ldi	r24, 0x2A	; 42
 206:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_voidSendData>
		Local_u16DoorPassword=Local_u16DoorPassword*10 + Local_u8Keypad_Key;
 20a:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <Local_u16DoorPassword.1915>
 20e:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <Local_u16DoorPassword.1915+0x1>
 212:	9c 01       	movw	r18, r24
 214:	22 0f       	add	r18, r18
 216:	33 1f       	adc	r19, r19
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	82 0f       	add	r24, r18
 226:	93 1f       	adc	r25, r19
 228:	8c 0f       	add	r24, r28
 22a:	91 1d       	adc	r25, r1
 22c:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <Local_u16DoorPassword.1915+0x1>
 230:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <Local_u16DoorPassword.1915>
		
	}
	
	
}
 234:	22 c0       	rjmp	.+68     	; 0x27a <DoorPass+0x198>
						
						Global_u16EPROMDoorPass=Global_u16EPROMDoorPass*10 +Local_u8Keypad_Key;
					}
					
				}
				LCD_voidClearDisplay();
 236:	0e 94 04 03 	call	0x608	; 0x608 <LCD_voidClearDisplay>
				LCD_voidSendString("pass is updated");
 23a:	8b ea       	ldi	r24, 0xAB	; 171
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 08 03 	call	0x610	; 0x610 <LCD_voidSendString>
				Local_u8Keypad_Key=KPD_NO_PRESS;
				// save the new pass to eeprom
				// save low byte
				Global_u8SavedDoorPassLowByte=(u8)Global_u16EPROMDoorPass;
 242:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <Global_u16EPROMDoorPass>
 246:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <Global_u8SavedDoorPassLowByte>
				EEPROM_voidSendDataByte(Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
 24a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
 24e:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
 252:	0e 94 8c 01 	call	0x318	; 0x318 <EEPROM_voidSendDataByte>
				TIMER_delay_ms(300);
 256:	6c e2       	ldi	r22, 0x2C	; 44
 258:	71 e0       	ldi	r23, 0x01	; 1
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 a7 04 	call	0x94e	; 0x94e <TIMER_delay_ms>
				// save high byte
				Global_u8SavedDoorPassHighByte=(u8)(Global_u16EPROMDoorPass>>8);
 262:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <Global_u16EPROMDoorPass+0x1>
 266:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <Global_u8SavedDoorPassHighByte>
				EEPROM_voidSendDataByte(Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
 26a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
 26e:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
 272:	66 5f       	subi	r22, 0xF6	; 246
 274:	7f 4f       	sbci	r23, 0xFF	; 255
 276:	0e 94 8c 01 	call	0x318	; 0x318 <EEPROM_voidSendDataByte>
		Local_u16DoorPassword=Local_u16DoorPassword*10 + Local_u8Keypad_Key;
		
	}
	
	
}
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <main>:
	TIMER_delay_ms(3000);
	DIO_voidSetPortValue(DIO_PORTA,var2);
}
void main(void)
{	
	ADC_voidInit();
 27e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_OUTPUT);
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	66 e0       	ldi	r22, 0x06	; 6
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_OUTPUT);
 28c:	41 e0       	ldi	r20, 0x01	; 1
 28e:	67 e0       	ldi	r22, 0x07	; 7
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinDirection>
	
	LCD_voidInit();
 296:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_voidInit>
	KPD_voidInit();
 29a:	0e 94 c3 01 	call	0x386	; 0x386 <KPD_voidInit>
	//servo pin
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	65 e0       	ldi	r22, 0x05	; 5
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinDirection>
	Servo_VoidInit();
 2a8:	0e 94 3d 03 	call	0x67a	; 0x67a <Servo_VoidInit>
	
	TWI_voidMasterInit(0);
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 a1 05 	call	0xb42	; 0xb42 <TWI_voidMasterInit>
	TIMER_delay_ms(300);
	
	EEPROM_voidSendDataByte(Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
	TIMER_delay_ms(300);*/
	// read pass low byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassLowByte,Global_u16EPROMPassAddress);
 2b2:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
 2b6:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
 2ba:	80 ed       	ldi	r24, 0xD0	; 208
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 a4 01 	call	0x348	; 0x348 <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
 2c2:	6c e2       	ldi	r22, 0x2C	; 44
 2c4:	71 e0       	ldi	r23, 0x01	; 1
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 a7 04 	call	0x94e	; 0x94e <TIMER_delay_ms>
	// read pass high byte
	EEPROM_voidReadDataByte(&Global_u8SavedDoorPassHighByte,Global_u16EPROMPassAddress+10);
 2ce:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <Global_u16EPROMPassAddress>
 2d2:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <Global_u16EPROMPassAddress+0x1>
 2d6:	66 5f       	subi	r22, 0xF6	; 246
 2d8:	7f 4f       	sbci	r23, 0xFF	; 255
 2da:	8d ec       	ldi	r24, 0xCD	; 205
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 a4 01 	call	0x348	; 0x348 <EEPROM_voidReadDataByte>
	TIMER_delay_ms(300);
 2e2:	6c e2       	ldi	r22, 0x2C	; 44
 2e4:	71 e0       	ldi	r23, 0x01	; 1
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 a7 04 	call	0x94e	; 0x94e <TIMER_delay_ms>
	// combine the high and low byte
	Global_u16EPROMDoorPass= ( (u16)(Global_u8SavedDoorPassHighByte<<8) )| Global_u8SavedDoorPassLowByte;
 2ee:	60 91 cd 00 	lds	r22, 0x00CD	; 0x8000cd <Global_u8SavedDoorPassHighByte>
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	76 2f       	mov	r23, r22
 2f6:	66 27       	eor	r22, r22
 2f8:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <Global_u8SavedDoorPassLowByte>
 2fc:	68 2b       	or	r22, r24
 2fe:	70 93 cf 00 	sts	0x00CF, r23	; 0x8000cf <Global_u16EPROMDoorPass+0x1>
 302:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <Global_u16EPROMDoorPass>
	LCD_voidSendNumber(Global_u16EPROMDoorPass);
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 1e 03 	call	0x63c	; 0x63c <LCD_voidSendNumber>
	while(1){
		
		DoorPass();
 30e:	0e 94 71 00 	call	0xe2	; 0xe2 <DoorPass>
		TempSensor();
 312:	0e 94 49 00 	call	0x92	; 0x92 <TempSensor>
 316:	fb cf       	rjmp	.-10     	; 0x30e <main+0x90>

00000318 <EEPROM_voidSendDataByte>:

#include "../../MCAL/TWI_Driver/TWI_interface.h"
#include "EPROM_interface.h"

void EEPROM_voidSendDataByte(u8 Copy_u8DataByte,u16 Copy_u16LocationAddress)
{	u8 Address = ((0b1010<<3) | (A2<<2) | (Copy_u16LocationAddress>>8));
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	c8 2f       	mov	r28, r24
 320:	d6 2f       	mov	r29, r22
 322:	17 2f       	mov	r17, r23

	TWI_SendStartCondition();
 324:	0e 94 ad 05 	call	0xb5a	; 0xb5a <TWI_SendStartCondition>
	TWI_SendSlaveAddressWithWrite(Address);
 328:	81 2f       	mov	r24, r17
 32a:	80 65       	ori	r24, 0x50	; 80
 32c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <TWI_SendSlaveAddressWithWrite>
	//TWI_SendSlaveAddressWithWrite(0b1010000);/**/

	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
 330:	8d 2f       	mov	r24, r29
 332:	0e 94 ee 05 	call	0xbdc	; 0xbdc <TWI_MasterWriteDataByte>
	TWI_MasterWriteDataByte(Copy_u8DataByte);
 336:	8c 2f       	mov	r24, r28
 338:	0e 94 ee 05 	call	0xbdc	; 0xbdc <TWI_MasterWriteDataByte>
	TWI_SendStopCondition();
 33c:	0e 94 0c 06 	call	0xc18	; 0xc18 <TWI_SendStopCondition>
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	08 95       	ret

00000348 <EEPROM_voidReadDataByte>:

void EEPROM_voidReadDataByte(u8 *Copy_u8DataByte,u16 Copy_u16LocationAddress)
{	u8 Address = ((0b1010<<3) | (A2<<2) | (Copy_u16LocationAddress>>8));
 348:	0f 93       	push	r16
 34a:	1f 93       	push	r17
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	8c 01       	movw	r16, r24
 352:	d6 2f       	mov	r29, r22
 354:	c7 2f       	mov	r28, r23
 356:	c0 65       	ori	r28, 0x50	; 80
	TWI_SendStartCondition();
 358:	0e 94 ad 05 	call	0xb5a	; 0xb5a <TWI_SendStartCondition>
	TWI_SendSlaveAddressWithWrite(Address);
 35c:	8c 2f       	mov	r24, r28
 35e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <TWI_SendSlaveAddressWithWrite>
	//TWI_SendSlaveAddressWithWrite(0b1010000);

	TWI_MasterWriteDataByte((u8)Copy_u16LocationAddress);
 362:	8d 2f       	mov	r24, r29
 364:	0e 94 ee 05 	call	0xbdc	; 0xbdc <TWI_MasterWriteDataByte>

	TWI_SendRepeatedStart();
 368:	0e 94 bd 05 	call	0xb7a	; 0xb7a <TWI_SendRepeatedStart>

	//TWI_MasterWriteDataByte(0b10100001);/**/
	TWI_SendSlaveAddressWithRead(Address);
 36c:	8c 2f       	mov	r24, r28
 36e:	0e 94 de 05 	call	0xbbc	; 0xbbc <TWI_SendSlaveAddressWithRead>
	TWI_MasterReadDataByte(Copy_u8DataByte);
 372:	c8 01       	movw	r24, r16
 374:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <TWI_MasterReadDataByte>
	TWI_SendStopCondition();
 378:	0e 94 0c 06 	call	0xc18	; 0xc18 <TWI_SendStopCondition>
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	08 95       	ret

00000386 <KPD_voidInit>:
			
void KPD_voidInit(){
	
	
	// set col s output high
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL0_PIN,DIO_OUTPUT);
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	64 e0       	ldi	r22, 0x04	; 4
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL1_PIN,DIO_OUTPUT);
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	65 e0       	ldi	r22, 0x05	; 5
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL2_PIN,DIO_OUTPUT);
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	66 e0       	ldi	r22, 0x06	; 6
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinDirection>
	//DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL3_PIN,DIO_OUTPUT);

	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL0_PIN,DIO_HIGH);
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	64 e0       	ldi	r22, 0x04	; 4
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL1_PIN,DIO_HIGH);
 3ae:	41 e0       	ldi	r20, 0x01	; 1
 3b0:	65 e0       	ldi	r22, 0x05	; 5
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL2_PIN,DIO_HIGH);
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	66 e0       	ldi	r22, 0x06	; 6
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
	//DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL3_PIN,DIO_HIGH);

	// set rows input pull up
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_INPUT);
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_INPUT);
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	62 e0       	ldi	r22, 0x02	; 2
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_INPUT);
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	63 e0       	ldi	r22, 0x03	; 3
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_INPUT);
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	64 e0       	ldi	r22, 0x04	; 4
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW0_PIN,DIO_HIGH);
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW1_PIN,DIO_HIGH);
 3f4:	41 e0       	ldi	r20, 0x01	; 1
 3f6:	62 e0       	ldi	r22, 0x02	; 2
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW2_PIN,DIO_HIGH);
 3fe:	41 e0       	ldi	r20, 0x01	; 1
 400:	63 e0       	ldi	r22, 0x03	; 3
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT,KPD_ROW3_PIN,DIO_HIGH);
 408:	41 e0       	ldi	r20, 0x01	; 1
 40a:	64 e0       	ldi	r22, 0x04	; 4
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
 412:	08 95       	ret

00000414 <KPD_u8GetPressedKey>:

}

u8 KPD_u8GetPressedKey(void){
 414:	4f 92       	push	r4
 416:	5f 92       	push	r5
 418:	6f 92       	push	r6
 41a:	7f 92       	push	r7
 41c:	8f 92       	push	r8
 41e:	9f 92       	push	r9
 420:	af 92       	push	r10
 422:	bf 92       	push	r11
 424:	cf 92       	push	r12
 426:	df 92       	push	r13
 428:	ef 92       	push	r14
 42a:	ff 92       	push	r15
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	cd b7       	in	r28, 0x3d	; 61
 436:	de b7       	in	r29, 0x3e	; 62
 438:	63 97       	sbiw	r28, 0x13	; 19
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	f8 94       	cli
 43e:	de bf       	out	0x3e, r29	; 62
 440:	0f be       	out	0x3f, r0	; 63
 442:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8Pressedkey= KPD_NO_PRESS;
	u8 Local_u8RowxValue ;


	u8 Local_u8ColumnsArray[]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN};
 444:	84 e0       	ldi	r24, 0x04	; 4
 446:	89 83       	std	Y+1, r24	; 0x01
 448:	95 e0       	ldi	r25, 0x05	; 5
 44a:	9a 83       	std	Y+2, r25	; 0x02
 44c:	96 e0       	ldi	r25, 0x06	; 6
 44e:	9b 83       	std	Y+3, r25	; 0x03
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	9c 83       	std	Y+4, r25	; 0x04
 454:	92 e0       	ldi	r25, 0x02	; 2
 456:	9d 83       	std	Y+5, r25	; 0x05
 458:	93 e0       	ldi	r25, 0x03	; 3
 45a:	9e 83       	std	Y+6, r25	; 0x06
 45c:	8f 83       	std	Y+7, r24	; 0x07

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;
 45e:	8c e0       	ldi	r24, 0x0C	; 12
 460:	e2 e6       	ldi	r30, 0x62	; 98
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	de 01       	movw	r26, r28
 466:	18 96       	adiw	r26, 0x08	; 8
 468:	01 90       	ld	r0, Z+
 46a:	0d 92       	st	X+, r0
 46c:	8a 95       	dec	r24
 46e:	e1 f7       	brne	.-8      	; 0x468 <KPD_u8GetPressedKey+0x54>
 470:	ce 01       	movw	r24, r28
 472:	01 96       	adiw	r24, 0x01	; 1
 474:	4c 01       	movw	r8, r24
 476:	a1 2c       	mov	r10, r1
 478:	b1 2c       	mov	r11, r1


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);
 47a:	35 01       	movw	r6, r10
 47c:	f4 01       	movw	r30, r8
 47e:	41 90       	ld	r4, Z+
 480:	4f 01       	movw	r8, r30
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	64 2d       	mov	r22, r4
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
 48c:	7e 01       	movw	r14, r28
 48e:	f4 e0       	ldi	r31, 0x04	; 4
 490:	ef 0e       	add	r14, r31
 492:	f1 1c       	adc	r15, r1
 494:	00 e0       	ldi	r16, 0x00	; 0
 496:	10 e0       	ldi	r17, 0x00	; 0

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){

			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
 498:	68 01       	movw	r12, r16
 49a:	f7 01       	movw	r30, r14
 49c:	51 90       	ld	r5, Z+
 49e:	7f 01       	movw	r14, r30
 4a0:	65 2d       	mov	r22, r5
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <DIO_u8GetPinValue>

			if(Local_u8RowxValue==0){
 4a8:	81 11       	cpse	r24, r1
 4aa:	17 c0       	rjmp	.+46     	; 0x4da <KPD_u8GetPressedKey+0xc6>

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
 4ac:	c8 01       	movw	r24, r16
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	c8 0e       	add	r12, r24
 4b4:	d9 1e       	adc	r13, r25
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	8c 0f       	add	r24, r28
 4bc:	9d 1f       	adc	r25, r29
 4be:	c8 0e       	add	r12, r24
 4c0:	d9 1e       	adc	r13, r25
 4c2:	f6 01       	movw	r30, r12
 4c4:	e6 0d       	add	r30, r6
 4c6:	f7 1d       	adc	r31, r7
 4c8:	17 81       	ldd	r17, Z+7	; 0x07
				while(Local_u8RowxValue==0){
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);
 4ca:	65 2d       	mov	r22, r5
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <DIO_u8GetPinValue>
			Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

			if(Local_u8RowxValue==0){

				Local_u8Pressedkey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8CloumnsIndex];
				while(Local_u8RowxValue==0){
 4d2:	88 23       	and	r24, r24
 4d4:	d1 f3       	breq	.-12     	; 0x4ca <KPD_u8GetPressedKey+0xb6>
					Local_u8RowxValue= DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowsArray[Local_u8RowsIndex]);

				}

				return Local_u8Pressedkey ;
 4d6:	81 2f       	mov	r24, r17
 4d8:	13 c0       	rjmp	.+38     	; 0x500 <KPD_u8GetPressedKey+0xec>
 4da:	0f 5f       	subi	r16, 0xFF	; 255
 4dc:	1f 4f       	sbci	r17, 0xFF	; 255

	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_LOW);

		for ( u8 Local_u8RowsIndex=0 ; Local_u8RowsIndex<KPD_NROW ; Local_u8RowsIndex++ ){
 4de:	04 30       	cpi	r16, 0x04	; 4
 4e0:	11 05       	cpc	r17, r1
 4e2:	d1 f6       	brne	.-76     	; 0x498 <KPD_u8GetPressedKey+0x84>
			}


		}

		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColumnsArray[Local_u8CloumnsIndex],DIO_HIGH);
 4e4:	41 e0       	ldi	r20, 0x01	; 1
 4e6:	64 2d       	mov	r22, r4
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
 4ee:	9f ef       	ldi	r25, 0xFF	; 255
 4f0:	a9 1a       	sub	r10, r25
 4f2:	b9 0a       	sbc	r11, r25
	u8 Local_u8RowsArray[]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	u8 Local_u8KeyArray[KPD_NROW][KPD_NCOL]=KPD_KEY_ARRAY;


	for(u8 Local_u8CloumnsIndex=0 ; Local_u8CloumnsIndex<KPD_NCOL ; Local_u8CloumnsIndex++){
 4f4:	e3 e0       	ldi	r30, 0x03	; 3
 4f6:	ae 16       	cp	r10, r30
 4f8:	b1 04       	cpc	r11, r1
 4fa:	09 f0       	breq	.+2      	; 0x4fe <KPD_u8GetPressedKey+0xea>
 4fc:	be cf       	rjmp	.-132    	; 0x47a <KPD_u8GetPressedKey+0x66>


	}


	return Local_u8Pressedkey ;
 4fe:	8a ea       	ldi	r24, 0xAA	; 170
 500:	63 96       	adiw	r28, 0x13	; 19
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	f8 94       	cli
 506:	de bf       	out	0x3e, r29	; 62
 508:	0f be       	out	0x3f, r0	; 63
 50a:	cd bf       	out	0x3d, r28	; 61
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	1f 91       	pop	r17
 512:	0f 91       	pop	r16
 514:	ff 90       	pop	r15
 516:	ef 90       	pop	r14
 518:	df 90       	pop	r13
 51a:	cf 90       	pop	r12
 51c:	bf 90       	pop	r11
 51e:	af 90       	pop	r10
 520:	9f 90       	pop	r9
 522:	8f 90       	pop	r8
 524:	7f 90       	pop	r7
 526:	6f 90       	pop	r6
 528:	5f 90       	pop	r5
 52a:	4f 90       	pop	r4
 52c:	08 95       	ret

0000052e <LCD_voidSendData>:
		LCD_voidSendCommand(0b00000010);
		Local_u8AddressCounter=0;
		
	}
	else
		Local_u8AddressCounter++;
 52e:	cf 93       	push	r28
 530:	c8 2f       	mov	r28, r24
 532:	41 e0       	ldi	r20, 0x01	; 1
 534:	65 e0       	ldi	r22, 0x05	; 5
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
 53c:	40 e0       	ldi	r20, 0x00	; 0
 53e:	66 e0       	ldi	r22, 0x06	; 6
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
 546:	6c 2f       	mov	r22, r28
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <DIO_voidSetPortValue>
 54e:	41 e0       	ldi	r20, 0x01	; 1
 550:	67 e0       	ldi	r22, 0x07	; 7
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
 558:	8f e9       	ldi	r24, 0x9F	; 159
 55a:	9f e0       	ldi	r25, 0x0F	; 15
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	f1 f7       	brne	.-4      	; 0x55c <LCD_voidSendData+0x2e>
 560:	00 c0       	rjmp	.+0      	; 0x562 <LCD_voidSendData+0x34>
 562:	00 00       	nop
 564:	40 e0       	ldi	r20, 0x00	; 0
 566:	67 e0       	ldi	r22, 0x07	; 7
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

00000572 <LCD_voidSendCommand>:
 572:	cf 93       	push	r28
 574:	c8 2f       	mov	r28, r24
 576:	40 e0       	ldi	r20, 0x00	; 0
 578:	65 e0       	ldi	r22, 0x05	; 5
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	66 e0       	ldi	r22, 0x06	; 6
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
 58a:	6c 2f       	mov	r22, r28
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <DIO_voidSetPortValue>
 592:	41 e0       	ldi	r20, 0x01	; 1
 594:	67 e0       	ldi	r22, 0x07	; 7
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
 59c:	8f e9       	ldi	r24, 0x9F	; 159
 59e:	9f e0       	ldi	r25, 0x0F	; 15
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <LCD_voidSendCommand+0x2e>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <LCD_voidSendCommand+0x34>
 5a6:	00 00       	nop
 5a8:	40 e0       	ldi	r20, 0x00	; 0
 5aa:	67 e0       	ldi	r22, 0x07	; 7
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinValue>
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <LCD_voidInit>:
 5b6:	6f ef       	ldi	r22, 0xFF	; 255
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	0e 94 db 03 	call	0x7b6	; 0x7b6 <DIO_voidSetPortDirection>
 5be:	41 e0       	ldi	r20, 0x01	; 1
 5c0:	65 e0       	ldi	r22, 0x05	; 5
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinDirection>
 5c8:	41 e0       	ldi	r20, 0x01	; 1
 5ca:	66 e0       	ldi	r22, 0x06	; 6
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinDirection>
 5d2:	41 e0       	ldi	r20, 0x01	; 1
 5d4:	67 e0       	ldi	r22, 0x07	; 7
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPinDirection>
 5dc:	2f ef       	ldi	r18, 0xFF	; 255
 5de:	89 ef       	ldi	r24, 0xF9	; 249
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	21 50       	subi	r18, 0x01	; 1
 5e4:	80 40       	sbci	r24, 0x00	; 0
 5e6:	90 40       	sbci	r25, 0x00	; 0
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <LCD_voidInit+0x2c>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <LCD_voidInit+0x36>
 5ec:	00 00       	nop
 5ee:	88 e3       	ldi	r24, 0x38	; 56
 5f0:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_voidSendCommand>
 5f4:	8c e0       	ldi	r24, 0x0C	; 12
 5f6:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_voidSendCommand>
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_voidSendCommand>
 600:	86 e0       	ldi	r24, 0x06	; 6
 602:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_voidSendCommand>
 606:	08 95       	ret

00000608 <LCD_voidClearDisplay>:
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	0e 94 b9 02 	call	0x572	; 0x572 <LCD_voidSendCommand>
 60e:	08 95       	ret

00000610 <LCD_voidSendString>:
		
		
}

void LCD_voidSendString(u8* Copy_pcString)
{
 610:	0f 93       	push	r16
 612:	1f 93       	push	r17
 614:	cf 93       	push	r28
 616:	fc 01       	movw	r30, r24
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
 618:	80 81       	ld	r24, Z
 61a:	88 23       	and	r24, r24
 61c:	59 f0       	breq	.+22     	; 0x634 <LCD_voidSendString+0x24>
 61e:	8f 01       	movw	r16, r30
 620:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
 622:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_voidSendData>
		Local_u8Index++;
 626:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_voidSendString(u8* Copy_pcString)
{
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
 628:	f8 01       	movw	r30, r16
 62a:	ec 0f       	add	r30, r28
 62c:	f1 1d       	adc	r31, r1
 62e:	80 81       	ld	r24, Z
 630:	81 11       	cpse	r24, r1
 632:	f7 cf       	rjmp	.-18     	; 0x622 <LCD_voidSendString+0x12>
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
		Local_u8Index++;
	}
}
 634:	cf 91       	pop	r28
 636:	1f 91       	pop	r17
 638:	0f 91       	pop	r16
 63a:	08 95       	ret

0000063c <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	cd b7       	in	r28, 0x3d	; 61
 642:	de b7       	in	r29, 0x3e	; 62
 644:	2a 97       	sbiw	r28, 0x0a	; 10
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	f8 94       	cli
 64a:	de bf       	out	0x3e, r29	; 62
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	cd bf       	out	0x3d, r28	; 61
 650:	dc 01       	movw	r26, r24
 652:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 654:	4a e0       	ldi	r20, 0x0A	; 10
 656:	be 01       	movw	r22, r28
 658:	6f 5f       	subi	r22, 0xFF	; 255
 65a:	7f 4f       	sbci	r23, 0xFF	; 255
 65c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__itoa_ncheck>
	u8 Local_u8Str[10];
	itoa(Copy_u32Number, Local_u8Str,10);
	LCD_voidSendString(Local_u8Str);
 660:	ce 01       	movw	r24, r28
 662:	01 96       	adiw	r24, 0x01	; 1
 664:	0e 94 08 03 	call	0x610	; 0x610 <LCD_voidSendString>

}
 668:	2a 96       	adiw	r28, 0x0a	; 10
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	f8 94       	cli
 66e:	de bf       	out	0x3e, r29	; 62
 670:	0f be       	out	0x3f, r0	; 63
 672:	cd bf       	out	0x3d, r28	; 61
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	08 95       	ret

0000067a <Servo_VoidInit>:

#include"../../MCAL/TIMER_Driver/TIMER_Interface.h"
 u16 Ticks=0;
 void Servo_VoidInit(void){
	 //Using Timer 1 PWM Mode,  prescaller 8 ==>010
		TIMER_VoidTimer1Init(PWM,10);
 67a:	6a e0       	ldi	r22, 0x0A	; 10
 67c:	82 e0       	ldi	r24, 0x02	; 2
 67e:	0e 94 c5 04 	call	0x98a	; 0x98a <TIMER_VoidTimer1Init>
	 // Servo Total time = 20ms
		TIMER_VoidSetOverFlow(20000);
 682:	80 e2       	ldi	r24, 0x20	; 32
 684:	9e e4       	ldi	r25, 0x4E	; 78
 686:	0e 94 20 05 	call	0xa40	; 0xa40 <TIMER_VoidSetOverFlow>
 68a:	08 95       	ret

0000068c <Servo_VoidDegree>:

void Servo_VoidDegree(u8 Copy_u8Degree){
	if(Copy_u8Degree>180)
		Copy_u8Degree = 180;
	f32 Ton = (1/180.0) * Copy_u8Degree + 1;
	Ticks = Ton * 1000;
 68c:	85 3b       	cpi	r24, 0xB5	; 181
 68e:	08 f0       	brcs	.+2      	; 0x692 <Servo_VoidDegree+0x6>
 690:	84 eb       	ldi	r24, 0xB4	; 180
 692:	68 2f       	mov	r22, r24
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__floatsisf>
 69e:	21 e6       	ldi	r18, 0x61	; 97
 6a0:	3b e0       	ldi	r19, 0x0B	; 11
 6a2:	46 eb       	ldi	r20, 0xB6	; 182
 6a4:	5b e3       	ldi	r21, 0x3B	; 59
 6a6:	0e 94 39 07 	call	0xe72	; 0xe72 <__mulsf3>
 6aa:	20 e0       	ldi	r18, 0x00	; 0
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	40 e8       	ldi	r20, 0x80	; 128
 6b0:	5f e3       	ldi	r21, 0x3F	; 63
 6b2:	0e 94 10 06 	call	0xc20	; 0xc20 <__addsf3>
 6b6:	20 e0       	ldi	r18, 0x00	; 0
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	4a e7       	ldi	r20, 0x7A	; 122
 6bc:	54 e4       	ldi	r21, 0x44	; 68
 6be:	0e 94 39 07 	call	0xe72	; 0xe72 <__mulsf3>
 6c2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fixunssfsi>
 6c6:	70 93 c0 00 	sts	0x00C0, r23	; 0x8000c0 <Ticks+0x1>
 6ca:	60 93 bf 00 	sts	0x00BF, r22	; 0x8000bf <Ticks>
	TIMER_VoidTimer1ChannelASetCompareValue(Ticks);
 6ce:	cb 01       	movw	r24, r22
 6d0:	0e 94 23 05 	call	0xa46	; 0xa46 <TIMER_VoidTimer1ChannelASetCompareValue>
 6d4:	08 95       	ret

000006d6 <ADC_voidInit>:
	2- 8bit res --> left adjustment
	3- prescaler
	4- enable ADC
	*/
	// use AVCC
	SET_BIT(ADMUX,6);
 6d6:	3e 9a       	sbi	0x07, 6	; 7
	CLR_BIT(ADMUX,7);
 6d8:	3f 98       	cbi	0x07, 7	; 7
	// left adjust
	SET_BIT(ADMUX,5);
 6da:	3d 9a       	sbi	0x07, 5	; 7
	// prescaler  --> /64
	CLR_BIT(ADCSRA,0);
 6dc:	30 98       	cbi	0x06, 0	; 6
	SET_BIT(ADCSRA,1);
 6de:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,2);
 6e0:	32 9a       	sbi	0x06, 2	; 6
	// enable 
	SET_BIT(ADCSRA,7);
 6e2:	37 9a       	sbi	0x06, 7	; 6
 6e4:	08 95       	ret

000006e6 <ADC_u8StartConversion>:
	
}

u8 ADC_u8StartConversion(u8 Copy_u8ChannelNumber){
	// channel select
	ADMUX &= 0b11100000;
 6e6:	97 b1       	in	r25, 0x07	; 7
 6e8:	90 7e       	andi	r25, 0xE0	; 224
 6ea:	97 b9       	out	0x07, r25	; 7
	ADMUX |=Copy_u8ChannelNumber;
 6ec:	97 b1       	in	r25, 0x07	; 7
 6ee:	89 2b       	or	r24, r25
 6f0:	87 b9       	out	0x07, r24	; 7
	
	// start conversion
	SET_BIT(ADCSRA,6);
 6f2:	36 9a       	sbi	0x06, 6	; 6
	
	// wait until conversion complete
	// by checking the flag
	while(GET_BIT(ADCSRA,4)==0);
 6f4:	34 9b       	sbis	0x06, 4	; 6
 6f6:	fe cf       	rjmp	.-4      	; 0x6f4 <ADC_u8StartConversion+0xe>
	
	//clear flag 
	SET_BIT(ADCSRA,4);
 6f8:	34 9a       	sbi	0x06, 4	; 6
	
	return ADCH;
 6fa:	85 b1       	in	r24, 0x05	; 5
}
 6fc:	08 95       	ret

000006fe <DIO_voidSetPinDirection>:


void DIO_voidSetPinDirection(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinState ){

	volatile u8* Local_u8PTR_DDRx;
	switch(Copy_u8PortName){
 6fe:	81 30       	cpi	r24, 0x01	; 1
 700:	49 f0       	breq	.+18     	; 0x714 <DIO_voidSetPinDirection+0x16>
 702:	28 f0       	brcs	.+10     	; 0x70e <DIO_voidSetPinDirection+0x10>
 704:	82 30       	cpi	r24, 0x02	; 2
 706:	49 f0       	breq	.+18     	; 0x71a <DIO_voidSetPinDirection+0x1c>
 708:	83 30       	cpi	r24, 0x03	; 3
 70a:	51 f0       	breq	.+20     	; 0x720 <DIO_voidSetPinDirection+0x22>
 70c:	0b c0       	rjmp	.+22     	; 0x724 <DIO_voidSetPinDirection+0x26>

		case DIO_PORTA:
		Local_u8PTR_DDRx=&DDRA;
 70e:	ea e3       	ldi	r30, 0x3A	; 58
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	08 c0       	rjmp	.+16     	; 0x724 <DIO_voidSetPinDirection+0x26>
		break;
		case DIO_PORTB:
		Local_u8PTR_DDRx=&DDRB;
 714:	e7 e3       	ldi	r30, 0x37	; 55
 716:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 718:	05 c0       	rjmp	.+10     	; 0x724 <DIO_voidSetPinDirection+0x26>
		case DIO_PORTC:
		Local_u8PTR_DDRx=&DDRC;
 71a:	e4 e3       	ldi	r30, 0x34	; 52
 71c:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 71e:	02 c0       	rjmp	.+4      	; 0x724 <DIO_voidSetPinDirection+0x26>
		case DIO_PORTD:
		Local_u8PTR_DDRx=&DDRD;
 720:	e1 e3       	ldi	r30, 0x31	; 49
 722:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinState){
 724:	44 23       	and	r20, r20
 726:	69 f0       	breq	.+26     	; 0x742 <DIO_voidSetPinDirection+0x44>
 728:	41 30       	cpi	r20, 0x01	; 1
 72a:	b1 f4       	brne	.+44     	; 0x758 <DIO_voidSetPinDirection+0x5a>

		case DIO_OUTPUT:
		SET_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
 72c:	20 81       	ld	r18, Z
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	02 c0       	rjmp	.+4      	; 0x738 <DIO_voidSetPinDirection+0x3a>
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	6a 95       	dec	r22
 73a:	e2 f7       	brpl	.-8      	; 0x734 <DIO_voidSetPinDirection+0x36>
 73c:	82 2b       	or	r24, r18
 73e:	80 83       	st	Z, r24
		break;
 740:	08 95       	ret
		case DIO_INPUT:
		CLR_BIT(*Local_u8PTR_DDRx,Copy_u8PinNumber);
 742:	20 81       	ld	r18, Z
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_voidSetPinDirection+0x50>
 74a:	88 0f       	add	r24, r24
 74c:	99 1f       	adc	r25, r25
 74e:	6a 95       	dec	r22
 750:	e2 f7       	brpl	.-8      	; 0x74a <DIO_voidSetPinDirection+0x4c>
 752:	80 95       	com	r24
 754:	82 23       	and	r24, r18
 756:	80 83       	st	Z, r24
 758:	08 95       	ret

0000075a <DIO_voidSetPinValue>:

}
void DIO_voidSetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber ,u8 Copy_u8PinValue ){

	volatile u8* Local_u8PTR_PORTx;
	switch(Copy_u8PortName){
 75a:	81 30       	cpi	r24, 0x01	; 1
 75c:	49 f0       	breq	.+18     	; 0x770 <DIO_voidSetPinValue+0x16>
 75e:	28 f0       	brcs	.+10     	; 0x76a <DIO_voidSetPinValue+0x10>
 760:	82 30       	cpi	r24, 0x02	; 2
 762:	49 f0       	breq	.+18     	; 0x776 <DIO_voidSetPinValue+0x1c>
 764:	83 30       	cpi	r24, 0x03	; 3
 766:	51 f0       	breq	.+20     	; 0x77c <DIO_voidSetPinValue+0x22>
 768:	0b c0       	rjmp	.+22     	; 0x780 <DIO_voidSetPinValue+0x26>

		case DIO_PORTA:
		Local_u8PTR_PORTx=&PORTA;
 76a:	eb e3       	ldi	r30, 0x3B	; 59
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	08 c0       	rjmp	.+16     	; 0x780 <DIO_voidSetPinValue+0x26>
		break;
		case DIO_PORTB:
		Local_u8PTR_PORTx=&PORTB;
 770:	e8 e3       	ldi	r30, 0x38	; 56
 772:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 774:	05 c0       	rjmp	.+10     	; 0x780 <DIO_voidSetPinValue+0x26>
		case DIO_PORTC:
		Local_u8PTR_PORTx=&PORTC;
 776:	e5 e3       	ldi	r30, 0x35	; 53
 778:	f0 e0       	ldi	r31, 0x00	; 0
		break;
 77a:	02 c0       	rjmp	.+4      	; 0x780 <DIO_voidSetPinValue+0x26>
		case DIO_PORTD:
		Local_u8PTR_PORTx=&PORTD;
 77c:	e2 e3       	ldi	r30, 0x32	; 50
 77e:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	}

	switch(Copy_u8PinValue){
 780:	44 23       	and	r20, r20
 782:	69 f0       	breq	.+26     	; 0x79e <DIO_voidSetPinValue+0x44>
 784:	41 30       	cpi	r20, 0x01	; 1
 786:	b1 f4       	brne	.+44     	; 0x7b4 <DIO_voidSetPinValue+0x5a>

		case DIO_HIGH:
		SET_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
 788:	20 81       	ld	r18, Z
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	02 c0       	rjmp	.+4      	; 0x794 <DIO_voidSetPinValue+0x3a>
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	6a 95       	dec	r22
 796:	e2 f7       	brpl	.-8      	; 0x790 <DIO_voidSetPinValue+0x36>
 798:	82 2b       	or	r24, r18
 79a:	80 83       	st	Z, r24
		break;
 79c:	08 95       	ret
		case DIO_LOW:
		CLR_BIT(*Local_u8PTR_PORTx,Copy_u8PinNumber);
 79e:	20 81       	ld	r18, Z
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <DIO_voidSetPinValue+0x50>
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	6a 95       	dec	r22
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <DIO_voidSetPinValue+0x4c>
 7ae:	80 95       	com	r24
 7b0:	82 23       	and	r24, r18
 7b2:	80 83       	st	Z, r24
 7b4:	08 95       	ret

000007b6 <DIO_voidSetPortDirection>:

}

void DIO_voidSetPortDirection(u8 Copy_u8PortName ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
 7b6:	81 30       	cpi	r24, 0x01	; 1
 7b8:	41 f0       	breq	.+16     	; 0x7ca <DIO_voidSetPortDirection+0x14>
 7ba:	28 f0       	brcs	.+10     	; 0x7c6 <DIO_voidSetPortDirection+0x10>
 7bc:	82 30       	cpi	r24, 0x02	; 2
 7be:	39 f0       	breq	.+14     	; 0x7ce <DIO_voidSetPortDirection+0x18>
 7c0:	83 30       	cpi	r24, 0x03	; 3
 7c2:	39 f0       	breq	.+14     	; 0x7d2 <DIO_voidSetPortDirection+0x1c>
 7c4:	08 95       	ret

		case DIO_PORTA:
		DDRA=Copy_u8PortValue;
 7c6:	6a bb       	out	0x1a, r22	; 26
		break;
 7c8:	08 95       	ret
		case DIO_PORTB:
		DDRB=Copy_u8PortValue;
 7ca:	67 bb       	out	0x17, r22	; 23
		break;
 7cc:	08 95       	ret
		case DIO_PORTC:
		DDRC=Copy_u8PortValue;
 7ce:	64 bb       	out	0x14, r22	; 20
		break;
 7d0:	08 95       	ret
		case DIO_PORTD:
		DDRD=Copy_u8PortValue;
 7d2:	61 bb       	out	0x11, r22	; 17
 7d4:	08 95       	ret

000007d6 <DIO_voidSetPortValue>:
	}

}
void DIO_voidSetPortValue(u8 Copy_u8PortName  ,u8 Copy_u8PortValue ){

	switch(Copy_u8PortName){
 7d6:	81 30       	cpi	r24, 0x01	; 1
 7d8:	41 f0       	breq	.+16     	; 0x7ea <DIO_voidSetPortValue+0x14>
 7da:	28 f0       	brcs	.+10     	; 0x7e6 <DIO_voidSetPortValue+0x10>
 7dc:	82 30       	cpi	r24, 0x02	; 2
 7de:	39 f0       	breq	.+14     	; 0x7ee <DIO_voidSetPortValue+0x18>
 7e0:	83 30       	cpi	r24, 0x03	; 3
 7e2:	39 f0       	breq	.+14     	; 0x7f2 <DIO_voidSetPortValue+0x1c>
 7e4:	08 95       	ret

		case DIO_PORTA:
		PORTA=Copy_u8PortValue;
 7e6:	6b bb       	out	0x1b, r22	; 27
		break;
 7e8:	08 95       	ret
		case DIO_PORTB:
		PORTB=Copy_u8PortValue;
 7ea:	68 bb       	out	0x18, r22	; 24
		break;
 7ec:	08 95       	ret
		case DIO_PORTC:
		PORTC=Copy_u8PortValue;
 7ee:	65 bb       	out	0x15, r22	; 21
		break;
 7f0:	08 95       	ret
		case DIO_PORTD:
		PORTD=Copy_u8PortValue;
 7f2:	62 bb       	out	0x12, r22	; 18
 7f4:	08 95       	ret

000007f6 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNumber){

	
	u8 Local_u8PinValue;
	switch(Copy_u8PortName){
 7f6:	81 30       	cpi	r24, 0x01	; 1
 7f8:	81 f0       	breq	.+32     	; 0x81a <DIO_u8GetPinValue+0x24>
 7fa:	28 f0       	brcs	.+10     	; 0x806 <DIO_u8GetPinValue+0x10>
 7fc:	82 30       	cpi	r24, 0x02	; 2
 7fe:	b9 f0       	breq	.+46     	; 0x82e <DIO_u8GetPinValue+0x38>
 800:	83 30       	cpi	r24, 0x03	; 3
 802:	f9 f0       	breq	.+62     	; 0x842 <DIO_u8GetPinValue+0x4c>
 804:	27 c0       	rjmp	.+78     	; 0x854 <DIO_u8GetPinValue+0x5e>

		case DIO_PORTA:
		Local_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
 806:	89 b3       	in	r24, 0x19	; 25
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	02 c0       	rjmp	.+4      	; 0x810 <DIO_u8GetPinValue+0x1a>
 80c:	95 95       	asr	r25
 80e:	87 95       	ror	r24
 810:	6a 95       	dec	r22
 812:	e2 f7       	brpl	.-8      	; 0x80c <DIO_u8GetPinValue+0x16>
 814:	98 2f       	mov	r25, r24
 816:	91 70       	andi	r25, 0x01	; 1
		break;
 818:	1d c0       	rjmp	.+58     	; 0x854 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTB:
		Local_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
 81a:	86 b3       	in	r24, 0x16	; 22
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	02 c0       	rjmp	.+4      	; 0x824 <DIO_u8GetPinValue+0x2e>
 820:	95 95       	asr	r25
 822:	87 95       	ror	r24
 824:	6a 95       	dec	r22
 826:	e2 f7       	brpl	.-8      	; 0x820 <DIO_u8GetPinValue+0x2a>
 828:	98 2f       	mov	r25, r24
 82a:	91 70       	andi	r25, 0x01	; 1
		break;
 82c:	13 c0       	rjmp	.+38     	; 0x854 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTC:
		Local_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
 82e:	83 b3       	in	r24, 0x13	; 19
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	02 c0       	rjmp	.+4      	; 0x838 <DIO_u8GetPinValue+0x42>
 834:	95 95       	asr	r25
 836:	87 95       	ror	r24
 838:	6a 95       	dec	r22
 83a:	e2 f7       	brpl	.-8      	; 0x834 <DIO_u8GetPinValue+0x3e>
 83c:	98 2f       	mov	r25, r24
 83e:	91 70       	andi	r25, 0x01	; 1
		break;
 840:	09 c0       	rjmp	.+18     	; 0x854 <DIO_u8GetPinValue+0x5e>
		case DIO_PORTD:
		Local_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
 842:	80 b3       	in	r24, 0x10	; 16
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	02 c0       	rjmp	.+4      	; 0x84c <DIO_u8GetPinValue+0x56>
 848:	95 95       	asr	r25
 84a:	87 95       	ror	r24
 84c:	6a 95       	dec	r22
 84e:	e2 f7       	brpl	.-8      	; 0x848 <DIO_u8GetPinValue+0x52>
 850:	98 2f       	mov	r25, r24
 852:	91 70       	andi	r25, 0x01	; 1

	

	return Local_u8PinValue;

}
 854:	89 2f       	mov	r24, r25
 856:	08 95       	ret

00000858 <__vector_1>:
void EXTI_voidSetCallBackINT2(void(*NotifyFunc2)(void)){
	
	Global_pvINT2NotifyFunc=NotifyFunc2;
}

ISR(INT0_vect){
 858:	1f 92       	push	r1
 85a:	0f 92       	push	r0
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	0f 92       	push	r0
 860:	11 24       	eor	r1, r1
 862:	2f 93       	push	r18
 864:	3f 93       	push	r19
 866:	4f 93       	push	r20
 868:	5f 93       	push	r21
 86a:	6f 93       	push	r22
 86c:	7f 93       	push	r23
 86e:	8f 93       	push	r24
 870:	9f 93       	push	r25
 872:	af 93       	push	r26
 874:	bf 93       	push	r27
 876:	ef 93       	push	r30
 878:	ff 93       	push	r31
	
	if(Global_pvINT0NotifyFunc!=NULL_PTR)
 87a:	e0 91 c5 00 	lds	r30, 0x00C5	; 0x8000c5 <Global_pvINT0NotifyFunc>
 87e:	f0 91 c6 00 	lds	r31, 0x00C6	; 0x8000c6 <Global_pvINT0NotifyFunc+0x1>
 882:	30 97       	sbiw	r30, 0x00	; 0
 884:	09 f0       	breq	.+2      	; 0x888 <__stack+0x29>
			Global_pvINT0NotifyFunc();
 886:	09 95       	icall
	
}
 888:	ff 91       	pop	r31
 88a:	ef 91       	pop	r30
 88c:	bf 91       	pop	r27
 88e:	af 91       	pop	r26
 890:	9f 91       	pop	r25
 892:	8f 91       	pop	r24
 894:	7f 91       	pop	r23
 896:	6f 91       	pop	r22
 898:	5f 91       	pop	r21
 89a:	4f 91       	pop	r20
 89c:	3f 91       	pop	r19
 89e:	2f 91       	pop	r18
 8a0:	0f 90       	pop	r0
 8a2:	0f be       	out	0x3f, r0	; 63
 8a4:	0f 90       	pop	r0
 8a6:	1f 90       	pop	r1
 8a8:	18 95       	reti

000008aa <__vector_2>:

ISR(INT1_vect){
 8aa:	1f 92       	push	r1
 8ac:	0f 92       	push	r0
 8ae:	0f b6       	in	r0, 0x3f	; 63
 8b0:	0f 92       	push	r0
 8b2:	11 24       	eor	r1, r1
 8b4:	2f 93       	push	r18
 8b6:	3f 93       	push	r19
 8b8:	4f 93       	push	r20
 8ba:	5f 93       	push	r21
 8bc:	6f 93       	push	r22
 8be:	7f 93       	push	r23
 8c0:	8f 93       	push	r24
 8c2:	9f 93       	push	r25
 8c4:	af 93       	push	r26
 8c6:	bf 93       	push	r27
 8c8:	ef 93       	push	r30
 8ca:	ff 93       	push	r31
	
	if(Global_pvINT1NotifyFunc!=NULL_PTR)
 8cc:	e0 91 c3 00 	lds	r30, 0x00C3	; 0x8000c3 <Global_pvINT1NotifyFunc>
 8d0:	f0 91 c4 00 	lds	r31, 0x00C4	; 0x8000c4 <Global_pvINT1NotifyFunc+0x1>
 8d4:	30 97       	sbiw	r30, 0x00	; 0
 8d6:	09 f0       	breq	.+2      	; 0x8da <__vector_2+0x30>
			Global_pvINT1NotifyFunc();
 8d8:	09 95       	icall
	
}
 8da:	ff 91       	pop	r31
 8dc:	ef 91       	pop	r30
 8de:	bf 91       	pop	r27
 8e0:	af 91       	pop	r26
 8e2:	9f 91       	pop	r25
 8e4:	8f 91       	pop	r24
 8e6:	7f 91       	pop	r23
 8e8:	6f 91       	pop	r22
 8ea:	5f 91       	pop	r21
 8ec:	4f 91       	pop	r20
 8ee:	3f 91       	pop	r19
 8f0:	2f 91       	pop	r18
 8f2:	0f 90       	pop	r0
 8f4:	0f be       	out	0x3f, r0	; 63
 8f6:	0f 90       	pop	r0
 8f8:	1f 90       	pop	r1
 8fa:	18 95       	reti

000008fc <__vector_3>:
ISR(INT2_vect){
 8fc:	1f 92       	push	r1
 8fe:	0f 92       	push	r0
 900:	0f b6       	in	r0, 0x3f	; 63
 902:	0f 92       	push	r0
 904:	11 24       	eor	r1, r1
 906:	2f 93       	push	r18
 908:	3f 93       	push	r19
 90a:	4f 93       	push	r20
 90c:	5f 93       	push	r21
 90e:	6f 93       	push	r22
 910:	7f 93       	push	r23
 912:	8f 93       	push	r24
 914:	9f 93       	push	r25
 916:	af 93       	push	r26
 918:	bf 93       	push	r27
 91a:	ef 93       	push	r30
 91c:	ff 93       	push	r31
	
	if(Global_pvINT2NotifyFunc!=NULL_PTR)
 91e:	e0 91 c1 00 	lds	r30, 0x00C1	; 0x8000c1 <Global_pvINT2NotifyFunc>
 922:	f0 91 c2 00 	lds	r31, 0x00C2	; 0x8000c2 <Global_pvINT2NotifyFunc+0x1>
 926:	30 97       	sbiw	r30, 0x00	; 0
 928:	09 f0       	breq	.+2      	; 0x92c <__vector_3+0x30>
			Global_pvINT2NotifyFunc();
 92a:	09 95       	icall
	
 92c:	ff 91       	pop	r31
 92e:	ef 91       	pop	r30
 930:	bf 91       	pop	r27
 932:	af 91       	pop	r26
 934:	9f 91       	pop	r25
 936:	8f 91       	pop	r24
 938:	7f 91       	pop	r23
 93a:	6f 91       	pop	r22
 93c:	5f 91       	pop	r21
 93e:	4f 91       	pop	r20
 940:	3f 91       	pop	r19
 942:	2f 91       	pop	r18
 944:	0f 90       	pop	r0
 946:	0f be       	out	0x3f, r0	; 63
 948:	0f 90       	pop	r0
 94a:	1f 90       	pop	r1
 94c:	18 95       	reti

0000094e <TIMER_delay_ms>:
	GLOBAL_ICU_ISR = Copy_PTR_ICUFunction;
}

u16 ICU_u16ReadInputCapture(void){
	return ICR1;
}
 94e:	0f 93       	push	r16
 950:	1f 93       	push	r17
 952:	8b 01       	movw	r16, r22
 954:	9c 01       	movw	r18, r24
 956:	67 2b       	or	r22, r23
 958:	68 2b       	or	r22, r24
 95a:	69 2b       	or	r22, r25
 95c:	69 f4       	brne	.+26     	; 0x978 <TIMER_delay_ms+0x2a>
 95e:	12 c0       	rjmp	.+36     	; 0x984 <TIMER_delay_ms+0x36>
 960:	01 97       	sbiw	r24, 0x01	; 1
 962:	f1 f7       	brne	.-4      	; 0x960 <TIMER_delay_ms+0x12>
 964:	4f 5f       	subi	r20, 0xFF	; 255
 966:	5f 4f       	sbci	r21, 0xFF	; 255
 968:	6f 4f       	sbci	r22, 0xFF	; 255
 96a:	7f 4f       	sbci	r23, 0xFF	; 255
 96c:	04 17       	cp	r16, r20
 96e:	15 07       	cpc	r17, r21
 970:	26 07       	cpc	r18, r22
 972:	37 07       	cpc	r19, r23
 974:	21 f4       	brne	.+8      	; 0x97e <TIMER_delay_ms+0x30>
 976:	06 c0       	rjmp	.+12     	; 0x984 <TIMER_delay_ms+0x36>
 978:	40 e0       	ldi	r20, 0x00	; 0
 97a:	50 e0       	ldi	r21, 0x00	; 0
 97c:	ba 01       	movw	r22, r20
 97e:	8e e5       	ldi	r24, 0x5E	; 94
 980:	91 e0       	ldi	r25, 0x01	; 1
 982:	ee cf       	rjmp	.-36     	; 0x960 <TIMER_delay_ms+0x12>
 984:	1f 91       	pop	r17
 986:	0f 91       	pop	r16
 988:	08 95       	ret

0000098a <TIMER_VoidTimer1Init>:
 98a:	20 e0       	ldi	r18, 0x00	; 0
 98c:	30 e0       	ldi	r19, 0x00	; 0
 98e:	5d ec       	ldi	r21, 0xCD	; 205
 990:	a1 e0       	ldi	r26, 0x01	; 1
 992:	b0 e0       	ldi	r27, 0x00	; 0
 994:	65 9f       	mul	r22, r21
 996:	91 2d       	mov	r25, r1
 998:	11 24       	eor	r1, r1
 99a:	96 95       	lsr	r25
 99c:	96 95       	lsr	r25
 99e:	96 95       	lsr	r25
 9a0:	99 0f       	add	r25, r25
 9a2:	49 2f       	mov	r20, r25
 9a4:	44 0f       	add	r20, r20
 9a6:	44 0f       	add	r20, r20
 9a8:	94 0f       	add	r25, r20
 9aa:	46 2f       	mov	r20, r22
 9ac:	49 1b       	sub	r20, r25
 9ae:	41 30       	cpi	r20, 0x01	; 1
 9b0:	59 f4       	brne	.+22     	; 0x9c8 <TIMER_VoidTimer1Init+0x3e>
 9b2:	9e b5       	in	r25, 0x2e	; 46
 9b4:	fd 01       	movw	r30, r26
 9b6:	02 2e       	mov	r0, r18
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <TIMER_VoidTimer1Init+0x34>
 9ba:	ee 0f       	add	r30, r30
 9bc:	ff 1f       	adc	r31, r31
 9be:	0a 94       	dec	r0
 9c0:	e2 f7       	brpl	.-8      	; 0x9ba <TIMER_VoidTimer1Init+0x30>
 9c2:	e9 2b       	or	r30, r25
 9c4:	ee bd       	out	0x2e, r30	; 46
 9c6:	0c c0       	rjmp	.+24     	; 0x9e0 <TIMER_VoidTimer1Init+0x56>
 9c8:	4e b5       	in	r20, 0x2e	; 46
 9ca:	fd 01       	movw	r30, r26
 9cc:	02 2e       	mov	r0, r18
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <TIMER_VoidTimer1Init+0x4a>
 9d0:	ee 0f       	add	r30, r30
 9d2:	ff 1f       	adc	r31, r31
 9d4:	0a 94       	dec	r0
 9d6:	e2 f7       	brpl	.-8      	; 0x9d0 <TIMER_VoidTimer1Init+0x46>
 9d8:	9e 2f       	mov	r25, r30
 9da:	90 95       	com	r25
 9dc:	94 23       	and	r25, r20
 9de:	9e bd       	out	0x2e, r25	; 46
 9e0:	65 9f       	mul	r22, r21
 9e2:	61 2d       	mov	r22, r1
 9e4:	11 24       	eor	r1, r1
 9e6:	66 95       	lsr	r22
 9e8:	66 95       	lsr	r22
 9ea:	66 95       	lsr	r22
 9ec:	2f 5f       	subi	r18, 0xFF	; 255
 9ee:	3f 4f       	sbci	r19, 0xFF	; 255
 9f0:	23 30       	cpi	r18, 0x03	; 3
 9f2:	31 05       	cpc	r19, r1
 9f4:	79 f6       	brne	.-98     	; 0x994 <TIMER_VoidTimer1Init+0xa>
 9f6:	88 23       	and	r24, r24
 9f8:	19 f0       	breq	.+6      	; 0xa00 <TIMER_VoidTimer1Init+0x76>
 9fa:	82 30       	cpi	r24, 0x02	; 2
 9fc:	71 f0       	breq	.+28     	; 0xa1a <TIMER_VoidTimer1Init+0x90>
 9fe:	08 95       	ret
 a00:	8f b5       	in	r24, 0x2f	; 47
 a02:	8e 7f       	andi	r24, 0xFE	; 254
 a04:	8f bd       	out	0x2f, r24	; 47
 a06:	8f b5       	in	r24, 0x2f	; 47
 a08:	8d 7f       	andi	r24, 0xFD	; 253
 a0a:	8f bd       	out	0x2f, r24	; 47
 a0c:	8e b5       	in	r24, 0x2e	; 46
 a0e:	87 7f       	andi	r24, 0xF7	; 247
 a10:	8e bd       	out	0x2e, r24	; 46
 a12:	8e b5       	in	r24, 0x2e	; 46
 a14:	8f 7e       	andi	r24, 0xEF	; 239
 a16:	8e bd       	out	0x2e, r24	; 46
 a18:	08 95       	ret
 a1a:	8f b5       	in	r24, 0x2f	; 47
 a1c:	8f 7b       	andi	r24, 0xBF	; 191
 a1e:	8f bd       	out	0x2f, r24	; 47
 a20:	8f b5       	in	r24, 0x2f	; 47
 a22:	80 68       	ori	r24, 0x80	; 128
 a24:	8f bd       	out	0x2f, r24	; 47
 a26:	8f b5       	in	r24, 0x2f	; 47
 a28:	8e 7f       	andi	r24, 0xFE	; 254
 a2a:	8f bd       	out	0x2f, r24	; 47
 a2c:	8f b5       	in	r24, 0x2f	; 47
 a2e:	82 60       	ori	r24, 0x02	; 2
 a30:	8f bd       	out	0x2f, r24	; 47
 a32:	8e b5       	in	r24, 0x2e	; 46
 a34:	88 60       	ori	r24, 0x08	; 8
 a36:	8e bd       	out	0x2e, r24	; 46
 a38:	8e b5       	in	r24, 0x2e	; 46
 a3a:	80 61       	ori	r24, 0x10	; 16
 a3c:	8e bd       	out	0x2e, r24	; 46
 a3e:	08 95       	ret

00000a40 <TIMER_VoidSetOverFlow>:
 a40:	97 bd       	out	0x27, r25	; 39
 a42:	86 bd       	out	0x26, r24	; 38
 a44:	08 95       	ret

00000a46 <TIMER_VoidTimer1ChannelASetCompareValue>:
 a46:	9b bd       	out	0x2b, r25	; 43
 a48:	8a bd       	out	0x2a, r24	; 42
 a4a:	08 95       	ret

00000a4c <__vector_11>:



//Normal ISR
void __vector_11(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_11(void){
 a4c:	1f 92       	push	r1
 a4e:	0f 92       	push	r0
 a50:	0f b6       	in	r0, 0x3f	; 63
 a52:	0f 92       	push	r0
 a54:	11 24       	eor	r1, r1
 a56:	2f 93       	push	r18
 a58:	3f 93       	push	r19
 a5a:	4f 93       	push	r20
 a5c:	5f 93       	push	r21
 a5e:	6f 93       	push	r22
 a60:	7f 93       	push	r23
 a62:	8f 93       	push	r24
 a64:	9f 93       	push	r25
 a66:	af 93       	push	r26
 a68:	bf 93       	push	r27
 a6a:	ef 93       	push	r30
 a6c:	ff 93       	push	r31
	if(TIMER0_Normal_ISR_PTR!=0x00)
 a6e:	e0 91 cb 00 	lds	r30, 0x00CB	; 0x8000cb <TIMER0_Normal_ISR_PTR>
 a72:	f0 91 cc 00 	lds	r31, 0x00CC	; 0x8000cc <TIMER0_Normal_ISR_PTR+0x1>
 a76:	30 97       	sbiw	r30, 0x00	; 0
 a78:	09 f0       	breq	.+2      	; 0xa7c <__vector_11+0x30>
		TIMER0_Normal_ISR_PTR();
 a7a:	09 95       	icall
}
 a7c:	ff 91       	pop	r31
 a7e:	ef 91       	pop	r30
 a80:	bf 91       	pop	r27
 a82:	af 91       	pop	r26
 a84:	9f 91       	pop	r25
 a86:	8f 91       	pop	r24
 a88:	7f 91       	pop	r23
 a8a:	6f 91       	pop	r22
 a8c:	5f 91       	pop	r21
 a8e:	4f 91       	pop	r20
 a90:	3f 91       	pop	r19
 a92:	2f 91       	pop	r18
 a94:	0f 90       	pop	r0
 a96:	0f be       	out	0x3f, r0	; 63
 a98:	0f 90       	pop	r0
 a9a:	1f 90       	pop	r1
 a9c:	18 95       	reti

00000a9e <__vector_10>:

//CTC ISR
void __vector_10(void) __attribute__((signal));  //minus 1 from Datasheet as it should started from 0 not 1
void __vector_10(void){
 a9e:	1f 92       	push	r1
 aa0:	0f 92       	push	r0
 aa2:	0f b6       	in	r0, 0x3f	; 63
 aa4:	0f 92       	push	r0
 aa6:	11 24       	eor	r1, r1
 aa8:	2f 93       	push	r18
 aaa:	3f 93       	push	r19
 aac:	4f 93       	push	r20
 aae:	5f 93       	push	r21
 ab0:	6f 93       	push	r22
 ab2:	7f 93       	push	r23
 ab4:	8f 93       	push	r24
 ab6:	9f 93       	push	r25
 ab8:	af 93       	push	r26
 aba:	bf 93       	push	r27
 abc:	ef 93       	push	r30
 abe:	ff 93       	push	r31
	if(TIMER0_CTC_ISR_PTR!=0x00)
 ac0:	e0 91 c9 00 	lds	r30, 0x00C9	; 0x8000c9 <TIMER0_CTC_ISR_PTR>
 ac4:	f0 91 ca 00 	lds	r31, 0x00CA	; 0x8000ca <TIMER0_CTC_ISR_PTR+0x1>
 ac8:	30 97       	sbiw	r30, 0x00	; 0
 aca:	09 f0       	breq	.+2      	; 0xace <__vector_10+0x30>
		TIMER0_CTC_ISR_PTR();
 acc:	09 95       	icall

}
 ace:	ff 91       	pop	r31
 ad0:	ef 91       	pop	r30
 ad2:	bf 91       	pop	r27
 ad4:	af 91       	pop	r26
 ad6:	9f 91       	pop	r25
 ad8:	8f 91       	pop	r24
 ada:	7f 91       	pop	r23
 adc:	6f 91       	pop	r22
 ade:	5f 91       	pop	r21
 ae0:	4f 91       	pop	r20
 ae2:	3f 91       	pop	r19
 ae4:	2f 91       	pop	r18
 ae6:	0f 90       	pop	r0
 ae8:	0f be       	out	0x3f, r0	; 63
 aea:	0f 90       	pop	r0
 aec:	1f 90       	pop	r1
 aee:	18 95       	reti

00000af0 <__vector_6>:

//ICU
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void){
 af0:	1f 92       	push	r1
 af2:	0f 92       	push	r0
 af4:	0f b6       	in	r0, 0x3f	; 63
 af6:	0f 92       	push	r0
 af8:	11 24       	eor	r1, r1
 afa:	2f 93       	push	r18
 afc:	3f 93       	push	r19
 afe:	4f 93       	push	r20
 b00:	5f 93       	push	r21
 b02:	6f 93       	push	r22
 b04:	7f 93       	push	r23
 b06:	8f 93       	push	r24
 b08:	9f 93       	push	r25
 b0a:	af 93       	push	r26
 b0c:	bf 93       	push	r27
 b0e:	ef 93       	push	r30
 b10:	ff 93       	push	r31
	if(GLOBAL_ICU_ISR!=0x00)
 b12:	e0 91 c7 00 	lds	r30, 0x00C7	; 0x8000c7 <GLOBAL_ICU_ISR>
 b16:	f0 91 c8 00 	lds	r31, 0x00C8	; 0x8000c8 <GLOBAL_ICU_ISR+0x1>
 b1a:	30 97       	sbiw	r30, 0x00	; 0
 b1c:	09 f0       	breq	.+2      	; 0xb20 <__vector_6+0x30>
		GLOBAL_ICU_ISR();
 b1e:	09 95       	icall
}
 b20:	ff 91       	pop	r31
 b22:	ef 91       	pop	r30
 b24:	bf 91       	pop	r27
 b26:	af 91       	pop	r26
 b28:	9f 91       	pop	r25
 b2a:	8f 91       	pop	r24
 b2c:	7f 91       	pop	r23
 b2e:	6f 91       	pop	r22
 b30:	5f 91       	pop	r21
 b32:	4f 91       	pop	r20
 b34:	3f 91       	pop	r19
 b36:	2f 91       	pop	r18
 b38:	0f 90       	pop	r0
 b3a:	0f be       	out	0x3f, r0	; 63
 b3c:	0f 90       	pop	r0
 b3e:	1f 90       	pop	r1
 b40:	18 95       	reti

00000b42 <TWI_voidMasterInit>:
void TWI_voidSlaveInit(u8 Copy_SlaveAddress){
	//Set Slave Address
	TWAR = Copy_SlaveAddress <<1;

	//Enable TWI
	SET_BIT(TWCR,TWEN);
 b42:	96 e9       	ldi	r25, 0x96	; 150
 b44:	90 b9       	out	0x00, r25	; 0
 b46:	09 98       	cbi	0x01, 1	; 1
 b48:	08 98       	cbi	0x01, 0	; 1
 b4a:	88 23       	and	r24, r24
 b4c:	11 f0       	breq	.+4      	; 0xb52 <TWI_voidMasterInit+0x10>
 b4e:	88 0f       	add	r24, r24
 b50:	82 b9       	out	0x02, r24	; 2
 b52:	86 b7       	in	r24, 0x36	; 54
 b54:	84 60       	ori	r24, 0x04	; 4
 b56:	86 bf       	out	0x36, r24	; 54
 b58:	08 95       	ret

00000b5a <TWI_SendStartCondition>:
}

TWI_ErrStatus TWI_SendStartCondition(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
 b5a:	86 b7       	in	r24, 0x36	; 54
 b5c:	80 62       	ori	r24, 0x20	; 32
 b5e:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
 b60:	86 b7       	in	r24, 0x36	; 54
 b62:	80 68       	ori	r24, 0x80	; 128
 b64:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
 b66:	06 b6       	in	r0, 0x36	; 54
 b68:	07 fe       	sbrs	r0, 7
 b6a:	fd cf       	rjmp	.-6      	; 0xb66 <TWI_SendStartCondition+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=START_ACK){
 b6c:	91 b1       	in	r25, 0x01	; 1
		Local_ErrStatus = StartConditionErr;
		}
	return Local_ErrStatus;
 b6e:	98 7f       	andi	r25, 0xF8	; 248
 b70:	81 e0       	ldi	r24, 0x01	; 1
 b72:	98 30       	cpi	r25, 0x08	; 8
 b74:	09 f4       	brne	.+2      	; 0xb78 <TWI_SendStartCondition+0x1e>
 b76:	80 e0       	ldi	r24, 0x00	; 0
}
 b78:	08 95       	ret

00000b7a <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
	//Send Start Condition
	SET_BIT(TWCR,TWSTA);
 b7a:	86 b7       	in	r24, 0x36	; 54
 b7c:	80 62       	ori	r24, 0x20	; 32
 b7e:	86 bf       	out	0x36, r24	; 54

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
 b80:	86 b7       	in	r24, 0x36	; 54
 b82:	80 68       	ori	r24, 0x80	; 128
 b84:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
 b86:	06 b6       	in	r0, 0x36	; 54
 b88:	07 fe       	sbrs	r0, 7
 b8a:	fd cf       	rjmp	.-6      	; 0xb86 <TWI_SendRepeatedStart+0xc>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
 b8c:	81 b1       	in	r24, 0x01	; 1
 b8e:	88 7f       	andi	r24, 0xF8	; 248
 b90:	80 31       	cpi	r24, 0x10	; 16
 b92:	11 f0       	breq	.+4      	; 0xb98 <TWI_SendRepeatedStart+0x1e>
		Local_ErrStatus = RepeatedStartErr;
 b94:	82 e0       	ldi	r24, 0x02	; 2
 b96:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendRepeatedStart(void){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
 b98:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=REP_START_ACK){
		Local_ErrStatus = RepeatedStartErr;
		}
	return Local_ErrStatus;
}
 b9a:	08 95       	ret

00000b9c <TWI_SendSlaveAddressWithWrite>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
 b9c:	88 0f       	add	r24, r24
 b9e:	83 b9       	out	0x03, r24	; 3
	//For Write Operation
	CLR_BIT(TWDR,0);
 ba0:	18 98       	cbi	0x03, 0	; 3

	//Clear Flag to start previous operation  //Enable TWI
	TWCR=(1<<TWINT)|(1<<TWEN);
 ba2:	84 e8       	ldi	r24, 0x84	; 132
 ba4:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
 ba6:	06 b6       	in	r0, 0x36	; 54
 ba8:	07 fe       	sbrs	r0, 7
 baa:	fd cf       	rjmp	.-6      	; 0xba6 <TWI_SendSlaveAddressWithWrite+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
 bac:	81 b1       	in	r24, 0x01	; 1
 bae:	88 7f       	andi	r24, 0xF8	; 248
 bb0:	88 31       	cpi	r24, 0x18	; 24
 bb2:	11 f0       	breq	.+4      	; 0xbb8 <TWI_SendSlaveAddressWithWrite+0x1c>
		Local_ErrStatus = SlaveAddressWithWriteErr;
 bb4:	83 e0       	ldi	r24, 0x03	; 3
 bb6:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
 bb8:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_WR_ACK){
		Local_ErrStatus = SlaveAddressWithWriteErr;
		}
	return Local_ErrStatus;
}
 bba:	08 95       	ret

00000bbc <TWI_SendSlaveAddressWithRead>:

	//Clear Start Condition
	//CLR_BIT(TWCR,TWSTA);

	//Set Slave Address
	TWDR = Copy_SlaveAddress <<1;
 bbc:	88 0f       	add	r24, r24
 bbe:	83 b9       	out	0x03, r24	; 3
	//For Read Operation
	SET_BIT(TWDR,0);
 bc0:	18 9a       	sbi	0x03, 0	; 3

	//Clear Flag to start previous operation
	TWCR=(1<<TWINT)|(1<<TWEN);
 bc2:	84 e8       	ldi	r24, 0x84	; 132
 bc4:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
 bc6:	06 b6       	in	r0, 0x36	; 54
 bc8:	07 fe       	sbrs	r0, 7
 bca:	fd cf       	rjmp	.-6      	; 0xbc6 <TWI_SendSlaveAddressWithRead+0xa>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
 bcc:	81 b1       	in	r24, 0x01	; 1
 bce:	88 7f       	andi	r24, 0xF8	; 248
 bd0:	80 34       	cpi	r24, 0x40	; 64
 bd2:	11 f0       	breq	.+4      	; 0xbd8 <TWI_SendSlaveAddressWithRead+0x1c>
		Local_ErrStatus = SlaveAddressWithReadErr;
 bd4:	84 e0       	ldi	r24, 0x04	; 4
 bd6:	08 95       	ret
		}
	return Local_ErrStatus;
}

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_SlaveAddress){
	TWI_ErrStatus 	Local_ErrStatus = NoError;
 bd8:	80 e0       	ldi	r24, 0x00	; 0
	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=SLAVE_ADD_AND_RD_ACK){
		Local_ErrStatus = SlaveAddressWithReadErr;
		}
	return Local_ErrStatus;
}
 bda:	08 95       	ret

00000bdc <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte){
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Write Data to data byte
	TWDR = Copy_u8DataByte;
 bdc:	83 b9       	out	0x03, r24	; 3

	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
 bde:	86 b7       	in	r24, 0x36	; 54
 be0:	80 68       	ori	r24, 0x80	; 128
 be2:	86 bf       	out	0x36, r24	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
 be4:	06 b6       	in	r0, 0x36	; 54
 be6:	07 fe       	sbrs	r0, 7
 be8:	fd cf       	rjmp	.-6      	; 0xbe4 <TWI_MasterWriteDataByte+0x8>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MasterWriteDataByteErr){
 bea:	81 b1       	in	r24, 0x01	; 1
		Local_ErrStatus = MasterWriteDataByteErr;
		}
	return Local_ErrStatus;

}
 bec:	85 e0       	ldi	r24, 0x05	; 5
 bee:	08 95       	ret

00000bf0 <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
 bf0:	fc 01       	movw	r30, r24
	TWI_ErrStatus 	Local_ErrStatus = NoError;

	//Enable ACK
	SET_BIT(TWCR,TWEA);
 bf2:	96 b7       	in	r25, 0x36	; 54
 bf4:	90 64       	ori	r25, 0x40	; 64
 bf6:	96 bf       	out	0x36, r25	; 54
	//Clear Flag to start previous operation
	SET_BIT(TWCR,TWINT);
 bf8:	96 b7       	in	r25, 0x36	; 54
 bfa:	90 68       	ori	r25, 0x80	; 128
 bfc:	96 bf       	out	0x36, r25	; 54

	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));
 bfe:	06 b6       	in	r0, 0x36	; 54
 c00:	07 fe       	sbrs	r0, 7
 c02:	fd cf       	rjmp	.-6      	; 0xbfe <TWI_MasterReadDataByte+0xe>

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
 c04:	91 b1       	in	r25, 0x01	; 1
 c06:	98 7f       	andi	r25, 0xF8	; 248
 c08:	90 35       	cpi	r25, 0x50	; 80
 c0a:	21 f4       	brne	.+8      	; 0xc14 <TWI_MasterReadDataByte+0x24>
		Local_ErrStatus = MasterReadDataByteErr;
		}
	else{
		// Read Data
		*Copy_Pu8DataByte = TWDR;
 c0c:	83 b1       	in	r24, 0x03	; 3
 c0e:	80 83       	st	Z, r24

}

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_Pu8DataByte)
{
	TWI_ErrStatus 	Local_ErrStatus = NoError;
 c10:	80 e0       	ldi	r24, 0x00	; 0
 c12:	08 95       	ret
	//Wait Until Interrupt Flag is Raised Again and previous operation is completed
	while(!GET_BIT(TWCR,TWINT));

	//Check Status  ,  Status is in bit3 => 7 in  TWSR Reg
	if((TWSR & 0xF8)!=MSTR_RD_BYTE_WITH_ACK){
		Local_ErrStatus = MasterReadDataByteErr;
 c14:	86 e0       	ldi	r24, 0x06	; 6
		// Read Data
		*Copy_Pu8DataByte = TWDR;

	}
	return Local_ErrStatus;
}
 c16:	08 95       	ret

00000c18 <TWI_SendStopCondition>:
void TWI_SendStopCondition(void)
{
    /* generate stop condition on the bus /

    / Clear the interrupt flag to start the previous operation */
    TWCR = (1<<TWINT)|(1<<TWEN)|
 c18:	84 e9       	ldi	r24, 0x94	; 148
 c1a:	86 bf       	out	0x36, r24	; 54
 c1c:	08 95       	ret

00000c1e <__subsf3>:
 c1e:	50 58       	subi	r21, 0x80	; 128

00000c20 <__addsf3>:
 c20:	bb 27       	eor	r27, r27
 c22:	aa 27       	eor	r26, r26
 c24:	0e 94 27 06 	call	0xc4e	; 0xc4e <__addsf3x>
 c28:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_round>
 c2c:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_pscA>
 c30:	38 f0       	brcs	.+14     	; 0xc40 <__addsf3+0x20>
 c32:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fp_pscB>
 c36:	20 f0       	brcs	.+8      	; 0xc40 <__addsf3+0x20>
 c38:	39 f4       	brne	.+14     	; 0xc48 <__addsf3+0x28>
 c3a:	9f 3f       	cpi	r25, 0xFF	; 255
 c3c:	19 f4       	brne	.+6      	; 0xc44 <__addsf3+0x24>
 c3e:	26 f4       	brtc	.+8      	; 0xc48 <__addsf3+0x28>
 c40:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_nan>
 c44:	0e f4       	brtc	.+2      	; 0xc48 <__addsf3+0x28>
 c46:	e0 95       	com	r30
 c48:	e7 fb       	bst	r30, 7
 c4a:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>

00000c4e <__addsf3x>:
 c4e:	e9 2f       	mov	r30, r25
 c50:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_split3>
 c54:	58 f3       	brcs	.-42     	; 0xc2c <__addsf3+0xc>
 c56:	ba 17       	cp	r27, r26
 c58:	62 07       	cpc	r22, r18
 c5a:	73 07       	cpc	r23, r19
 c5c:	84 07       	cpc	r24, r20
 c5e:	95 07       	cpc	r25, r21
 c60:	20 f0       	brcs	.+8      	; 0xc6a <__addsf3x+0x1c>
 c62:	79 f4       	brne	.+30     	; 0xc82 <__addsf3x+0x34>
 c64:	a6 f5       	brtc	.+104    	; 0xcce <__addsf3x+0x80>
 c66:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_zero>
 c6a:	0e f4       	brtc	.+2      	; 0xc6e <__addsf3x+0x20>
 c6c:	e0 95       	com	r30
 c6e:	0b 2e       	mov	r0, r27
 c70:	ba 2f       	mov	r27, r26
 c72:	a0 2d       	mov	r26, r0
 c74:	0b 01       	movw	r0, r22
 c76:	b9 01       	movw	r22, r18
 c78:	90 01       	movw	r18, r0
 c7a:	0c 01       	movw	r0, r24
 c7c:	ca 01       	movw	r24, r20
 c7e:	a0 01       	movw	r20, r0
 c80:	11 24       	eor	r1, r1
 c82:	ff 27       	eor	r31, r31
 c84:	59 1b       	sub	r21, r25
 c86:	99 f0       	breq	.+38     	; 0xcae <__addsf3x+0x60>
 c88:	59 3f       	cpi	r21, 0xF9	; 249
 c8a:	50 f4       	brcc	.+20     	; 0xca0 <__addsf3x+0x52>
 c8c:	50 3e       	cpi	r21, 0xE0	; 224
 c8e:	68 f1       	brcs	.+90     	; 0xcea <__addsf3x+0x9c>
 c90:	1a 16       	cp	r1, r26
 c92:	f0 40       	sbci	r31, 0x00	; 0
 c94:	a2 2f       	mov	r26, r18
 c96:	23 2f       	mov	r18, r19
 c98:	34 2f       	mov	r19, r20
 c9a:	44 27       	eor	r20, r20
 c9c:	58 5f       	subi	r21, 0xF8	; 248
 c9e:	f3 cf       	rjmp	.-26     	; 0xc86 <__addsf3x+0x38>
 ca0:	46 95       	lsr	r20
 ca2:	37 95       	ror	r19
 ca4:	27 95       	ror	r18
 ca6:	a7 95       	ror	r26
 ca8:	f0 40       	sbci	r31, 0x00	; 0
 caa:	53 95       	inc	r21
 cac:	c9 f7       	brne	.-14     	; 0xca0 <__addsf3x+0x52>
 cae:	7e f4       	brtc	.+30     	; 0xcce <__addsf3x+0x80>
 cb0:	1f 16       	cp	r1, r31
 cb2:	ba 0b       	sbc	r27, r26
 cb4:	62 0b       	sbc	r22, r18
 cb6:	73 0b       	sbc	r23, r19
 cb8:	84 0b       	sbc	r24, r20
 cba:	ba f0       	brmi	.+46     	; 0xcea <__addsf3x+0x9c>
 cbc:	91 50       	subi	r25, 0x01	; 1
 cbe:	a1 f0       	breq	.+40     	; 0xce8 <__addsf3x+0x9a>
 cc0:	ff 0f       	add	r31, r31
 cc2:	bb 1f       	adc	r27, r27
 cc4:	66 1f       	adc	r22, r22
 cc6:	77 1f       	adc	r23, r23
 cc8:	88 1f       	adc	r24, r24
 cca:	c2 f7       	brpl	.-16     	; 0xcbc <__addsf3x+0x6e>
 ccc:	0e c0       	rjmp	.+28     	; 0xcea <__addsf3x+0x9c>
 cce:	ba 0f       	add	r27, r26
 cd0:	62 1f       	adc	r22, r18
 cd2:	73 1f       	adc	r23, r19
 cd4:	84 1f       	adc	r24, r20
 cd6:	48 f4       	brcc	.+18     	; 0xcea <__addsf3x+0x9c>
 cd8:	87 95       	ror	r24
 cda:	77 95       	ror	r23
 cdc:	67 95       	ror	r22
 cde:	b7 95       	ror	r27
 ce0:	f7 95       	ror	r31
 ce2:	9e 3f       	cpi	r25, 0xFE	; 254
 ce4:	08 f0       	brcs	.+2      	; 0xce8 <__addsf3x+0x9a>
 ce6:	b0 cf       	rjmp	.-160    	; 0xc48 <__addsf3+0x28>
 ce8:	93 95       	inc	r25
 cea:	88 0f       	add	r24, r24
 cec:	08 f0       	brcs	.+2      	; 0xcf0 <__addsf3x+0xa2>
 cee:	99 27       	eor	r25, r25
 cf0:	ee 0f       	add	r30, r30
 cf2:	97 95       	ror	r25
 cf4:	87 95       	ror	r24
 cf6:	08 95       	ret

00000cf8 <__fixunssfsi>:
 cf8:	0e 94 18 07 	call	0xe30	; 0xe30 <__fp_splitA>
 cfc:	88 f0       	brcs	.+34     	; 0xd20 <__fixunssfsi+0x28>
 cfe:	9f 57       	subi	r25, 0x7F	; 127
 d00:	98 f0       	brcs	.+38     	; 0xd28 <__fixunssfsi+0x30>
 d02:	b9 2f       	mov	r27, r25
 d04:	99 27       	eor	r25, r25
 d06:	b7 51       	subi	r27, 0x17	; 23
 d08:	b0 f0       	brcs	.+44     	; 0xd36 <__fixunssfsi+0x3e>
 d0a:	e1 f0       	breq	.+56     	; 0xd44 <__fixunssfsi+0x4c>
 d0c:	66 0f       	add	r22, r22
 d0e:	77 1f       	adc	r23, r23
 d10:	88 1f       	adc	r24, r24
 d12:	99 1f       	adc	r25, r25
 d14:	1a f0       	brmi	.+6      	; 0xd1c <__fixunssfsi+0x24>
 d16:	ba 95       	dec	r27
 d18:	c9 f7       	brne	.-14     	; 0xd0c <__fixunssfsi+0x14>
 d1a:	14 c0       	rjmp	.+40     	; 0xd44 <__fixunssfsi+0x4c>
 d1c:	b1 30       	cpi	r27, 0x01	; 1
 d1e:	91 f0       	breq	.+36     	; 0xd44 <__fixunssfsi+0x4c>
 d20:	0e 94 32 07 	call	0xe64	; 0xe64 <__fp_zero>
 d24:	b1 e0       	ldi	r27, 0x01	; 1
 d26:	08 95       	ret
 d28:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_zero>
 d2c:	67 2f       	mov	r22, r23
 d2e:	78 2f       	mov	r23, r24
 d30:	88 27       	eor	r24, r24
 d32:	b8 5f       	subi	r27, 0xF8	; 248
 d34:	39 f0       	breq	.+14     	; 0xd44 <__fixunssfsi+0x4c>
 d36:	b9 3f       	cpi	r27, 0xF9	; 249
 d38:	cc f3       	brlt	.-14     	; 0xd2c <__fixunssfsi+0x34>
 d3a:	86 95       	lsr	r24
 d3c:	77 95       	ror	r23
 d3e:	67 95       	ror	r22
 d40:	b3 95       	inc	r27
 d42:	d9 f7       	brne	.-10     	; 0xd3a <__fixunssfsi+0x42>
 d44:	3e f4       	brtc	.+14     	; 0xd54 <__fixunssfsi+0x5c>
 d46:	90 95       	com	r25
 d48:	80 95       	com	r24
 d4a:	70 95       	com	r23
 d4c:	61 95       	neg	r22
 d4e:	7f 4f       	sbci	r23, 0xFF	; 255
 d50:	8f 4f       	sbci	r24, 0xFF	; 255
 d52:	9f 4f       	sbci	r25, 0xFF	; 255
 d54:	08 95       	ret

00000d56 <__floatunsisf>:
 d56:	e8 94       	clt
 d58:	09 c0       	rjmp	.+18     	; 0xd6c <__floatsisf+0x12>

00000d5a <__floatsisf>:
 d5a:	97 fb       	bst	r25, 7
 d5c:	3e f4       	brtc	.+14     	; 0xd6c <__floatsisf+0x12>
 d5e:	90 95       	com	r25
 d60:	80 95       	com	r24
 d62:	70 95       	com	r23
 d64:	61 95       	neg	r22
 d66:	7f 4f       	sbci	r23, 0xFF	; 255
 d68:	8f 4f       	sbci	r24, 0xFF	; 255
 d6a:	9f 4f       	sbci	r25, 0xFF	; 255
 d6c:	99 23       	and	r25, r25
 d6e:	a9 f0       	breq	.+42     	; 0xd9a <__floatsisf+0x40>
 d70:	f9 2f       	mov	r31, r25
 d72:	96 e9       	ldi	r25, 0x96	; 150
 d74:	bb 27       	eor	r27, r27
 d76:	93 95       	inc	r25
 d78:	f6 95       	lsr	r31
 d7a:	87 95       	ror	r24
 d7c:	77 95       	ror	r23
 d7e:	67 95       	ror	r22
 d80:	b7 95       	ror	r27
 d82:	f1 11       	cpse	r31, r1
 d84:	f8 cf       	rjmp	.-16     	; 0xd76 <__floatsisf+0x1c>
 d86:	fa f4       	brpl	.+62     	; 0xdc6 <__floatsisf+0x6c>
 d88:	bb 0f       	add	r27, r27
 d8a:	11 f4       	brne	.+4      	; 0xd90 <__floatsisf+0x36>
 d8c:	60 ff       	sbrs	r22, 0
 d8e:	1b c0       	rjmp	.+54     	; 0xdc6 <__floatsisf+0x6c>
 d90:	6f 5f       	subi	r22, 0xFF	; 255
 d92:	7f 4f       	sbci	r23, 0xFF	; 255
 d94:	8f 4f       	sbci	r24, 0xFF	; 255
 d96:	9f 4f       	sbci	r25, 0xFF	; 255
 d98:	16 c0       	rjmp	.+44     	; 0xdc6 <__floatsisf+0x6c>
 d9a:	88 23       	and	r24, r24
 d9c:	11 f0       	breq	.+4      	; 0xda2 <__floatsisf+0x48>
 d9e:	96 e9       	ldi	r25, 0x96	; 150
 da0:	11 c0       	rjmp	.+34     	; 0xdc4 <__floatsisf+0x6a>
 da2:	77 23       	and	r23, r23
 da4:	21 f0       	breq	.+8      	; 0xdae <__floatsisf+0x54>
 da6:	9e e8       	ldi	r25, 0x8E	; 142
 da8:	87 2f       	mov	r24, r23
 daa:	76 2f       	mov	r23, r22
 dac:	05 c0       	rjmp	.+10     	; 0xdb8 <__floatsisf+0x5e>
 dae:	66 23       	and	r22, r22
 db0:	71 f0       	breq	.+28     	; 0xdce <__floatsisf+0x74>
 db2:	96 e8       	ldi	r25, 0x86	; 134
 db4:	86 2f       	mov	r24, r22
 db6:	70 e0       	ldi	r23, 0x00	; 0
 db8:	60 e0       	ldi	r22, 0x00	; 0
 dba:	2a f0       	brmi	.+10     	; 0xdc6 <__floatsisf+0x6c>
 dbc:	9a 95       	dec	r25
 dbe:	66 0f       	add	r22, r22
 dc0:	77 1f       	adc	r23, r23
 dc2:	88 1f       	adc	r24, r24
 dc4:	da f7       	brpl	.-10     	; 0xdbc <__floatsisf+0x62>
 dc6:	88 0f       	add	r24, r24
 dc8:	96 95       	lsr	r25
 dca:	87 95       	ror	r24
 dcc:	97 f9       	bld	r25, 7
 dce:	08 95       	ret

00000dd0 <__fp_inf>:
 dd0:	97 f9       	bld	r25, 7
 dd2:	9f 67       	ori	r25, 0x7F	; 127
 dd4:	80 e8       	ldi	r24, 0x80	; 128
 dd6:	70 e0       	ldi	r23, 0x00	; 0
 dd8:	60 e0       	ldi	r22, 0x00	; 0
 dda:	08 95       	ret

00000ddc <__fp_nan>:
 ddc:	9f ef       	ldi	r25, 0xFF	; 255
 dde:	80 ec       	ldi	r24, 0xC0	; 192
 de0:	08 95       	ret

00000de2 <__fp_pscA>:
 de2:	00 24       	eor	r0, r0
 de4:	0a 94       	dec	r0
 de6:	16 16       	cp	r1, r22
 de8:	17 06       	cpc	r1, r23
 dea:	18 06       	cpc	r1, r24
 dec:	09 06       	cpc	r0, r25
 dee:	08 95       	ret

00000df0 <__fp_pscB>:
 df0:	00 24       	eor	r0, r0
 df2:	0a 94       	dec	r0
 df4:	12 16       	cp	r1, r18
 df6:	13 06       	cpc	r1, r19
 df8:	14 06       	cpc	r1, r20
 dfa:	05 06       	cpc	r0, r21
 dfc:	08 95       	ret

00000dfe <__fp_round>:
 dfe:	09 2e       	mov	r0, r25
 e00:	03 94       	inc	r0
 e02:	00 0c       	add	r0, r0
 e04:	11 f4       	brne	.+4      	; 0xe0a <__fp_round+0xc>
 e06:	88 23       	and	r24, r24
 e08:	52 f0       	brmi	.+20     	; 0xe1e <__fp_round+0x20>
 e0a:	bb 0f       	add	r27, r27
 e0c:	40 f4       	brcc	.+16     	; 0xe1e <__fp_round+0x20>
 e0e:	bf 2b       	or	r27, r31
 e10:	11 f4       	brne	.+4      	; 0xe16 <__fp_round+0x18>
 e12:	60 ff       	sbrs	r22, 0
 e14:	04 c0       	rjmp	.+8      	; 0xe1e <__fp_round+0x20>
 e16:	6f 5f       	subi	r22, 0xFF	; 255
 e18:	7f 4f       	sbci	r23, 0xFF	; 255
 e1a:	8f 4f       	sbci	r24, 0xFF	; 255
 e1c:	9f 4f       	sbci	r25, 0xFF	; 255
 e1e:	08 95       	ret

00000e20 <__fp_split3>:
 e20:	57 fd       	sbrc	r21, 7
 e22:	90 58       	subi	r25, 0x80	; 128
 e24:	44 0f       	add	r20, r20
 e26:	55 1f       	adc	r21, r21
 e28:	59 f0       	breq	.+22     	; 0xe40 <__fp_splitA+0x10>
 e2a:	5f 3f       	cpi	r21, 0xFF	; 255
 e2c:	71 f0       	breq	.+28     	; 0xe4a <__fp_splitA+0x1a>
 e2e:	47 95       	ror	r20

00000e30 <__fp_splitA>:
 e30:	88 0f       	add	r24, r24
 e32:	97 fb       	bst	r25, 7
 e34:	99 1f       	adc	r25, r25
 e36:	61 f0       	breq	.+24     	; 0xe50 <__fp_splitA+0x20>
 e38:	9f 3f       	cpi	r25, 0xFF	; 255
 e3a:	79 f0       	breq	.+30     	; 0xe5a <__fp_splitA+0x2a>
 e3c:	87 95       	ror	r24
 e3e:	08 95       	ret
 e40:	12 16       	cp	r1, r18
 e42:	13 06       	cpc	r1, r19
 e44:	14 06       	cpc	r1, r20
 e46:	55 1f       	adc	r21, r21
 e48:	f2 cf       	rjmp	.-28     	; 0xe2e <__fp_split3+0xe>
 e4a:	46 95       	lsr	r20
 e4c:	f1 df       	rcall	.-30     	; 0xe30 <__fp_splitA>
 e4e:	08 c0       	rjmp	.+16     	; 0xe60 <__fp_splitA+0x30>
 e50:	16 16       	cp	r1, r22
 e52:	17 06       	cpc	r1, r23
 e54:	18 06       	cpc	r1, r24
 e56:	99 1f       	adc	r25, r25
 e58:	f1 cf       	rjmp	.-30     	; 0xe3c <__fp_splitA+0xc>
 e5a:	86 95       	lsr	r24
 e5c:	71 05       	cpc	r23, r1
 e5e:	61 05       	cpc	r22, r1
 e60:	08 94       	sec
 e62:	08 95       	ret

00000e64 <__fp_zero>:
 e64:	e8 94       	clt

00000e66 <__fp_szero>:
 e66:	bb 27       	eor	r27, r27
 e68:	66 27       	eor	r22, r22
 e6a:	77 27       	eor	r23, r23
 e6c:	cb 01       	movw	r24, r22
 e6e:	97 f9       	bld	r25, 7
 e70:	08 95       	ret

00000e72 <__mulsf3>:
 e72:	0e 94 4c 07 	call	0xe98	; 0xe98 <__mulsf3x>
 e76:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_round>
 e7a:	0e 94 f1 06 	call	0xde2	; 0xde2 <__fp_pscA>
 e7e:	38 f0       	brcs	.+14     	; 0xe8e <__mulsf3+0x1c>
 e80:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fp_pscB>
 e84:	20 f0       	brcs	.+8      	; 0xe8e <__mulsf3+0x1c>
 e86:	95 23       	and	r25, r21
 e88:	11 f0       	breq	.+4      	; 0xe8e <__mulsf3+0x1c>
 e8a:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>
 e8e:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_nan>
 e92:	11 24       	eor	r1, r1
 e94:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_szero>

00000e98 <__mulsf3x>:
 e98:	0e 94 10 07 	call	0xe20	; 0xe20 <__fp_split3>
 e9c:	70 f3       	brcs	.-36     	; 0xe7a <__mulsf3+0x8>

00000e9e <__mulsf3_pse>:
 e9e:	95 9f       	mul	r25, r21
 ea0:	c1 f3       	breq	.-16     	; 0xe92 <__mulsf3+0x20>
 ea2:	95 0f       	add	r25, r21
 ea4:	50 e0       	ldi	r21, 0x00	; 0
 ea6:	55 1f       	adc	r21, r21
 ea8:	62 9f       	mul	r22, r18
 eaa:	f0 01       	movw	r30, r0
 eac:	72 9f       	mul	r23, r18
 eae:	bb 27       	eor	r27, r27
 eb0:	f0 0d       	add	r31, r0
 eb2:	b1 1d       	adc	r27, r1
 eb4:	63 9f       	mul	r22, r19
 eb6:	aa 27       	eor	r26, r26
 eb8:	f0 0d       	add	r31, r0
 eba:	b1 1d       	adc	r27, r1
 ebc:	aa 1f       	adc	r26, r26
 ebe:	64 9f       	mul	r22, r20
 ec0:	66 27       	eor	r22, r22
 ec2:	b0 0d       	add	r27, r0
 ec4:	a1 1d       	adc	r26, r1
 ec6:	66 1f       	adc	r22, r22
 ec8:	82 9f       	mul	r24, r18
 eca:	22 27       	eor	r18, r18
 ecc:	b0 0d       	add	r27, r0
 ece:	a1 1d       	adc	r26, r1
 ed0:	62 1f       	adc	r22, r18
 ed2:	73 9f       	mul	r23, r19
 ed4:	b0 0d       	add	r27, r0
 ed6:	a1 1d       	adc	r26, r1
 ed8:	62 1f       	adc	r22, r18
 eda:	83 9f       	mul	r24, r19
 edc:	a0 0d       	add	r26, r0
 ede:	61 1d       	adc	r22, r1
 ee0:	22 1f       	adc	r18, r18
 ee2:	74 9f       	mul	r23, r20
 ee4:	33 27       	eor	r19, r19
 ee6:	a0 0d       	add	r26, r0
 ee8:	61 1d       	adc	r22, r1
 eea:	23 1f       	adc	r18, r19
 eec:	84 9f       	mul	r24, r20
 eee:	60 0d       	add	r22, r0
 ef0:	21 1d       	adc	r18, r1
 ef2:	82 2f       	mov	r24, r18
 ef4:	76 2f       	mov	r23, r22
 ef6:	6a 2f       	mov	r22, r26
 ef8:	11 24       	eor	r1, r1
 efa:	9f 57       	subi	r25, 0x7F	; 127
 efc:	50 40       	sbci	r21, 0x00	; 0
 efe:	9a f0       	brmi	.+38     	; 0xf26 <__mulsf3_pse+0x88>
 f00:	f1 f0       	breq	.+60     	; 0xf3e <__mulsf3_pse+0xa0>
 f02:	88 23       	and	r24, r24
 f04:	4a f0       	brmi	.+18     	; 0xf18 <__mulsf3_pse+0x7a>
 f06:	ee 0f       	add	r30, r30
 f08:	ff 1f       	adc	r31, r31
 f0a:	bb 1f       	adc	r27, r27
 f0c:	66 1f       	adc	r22, r22
 f0e:	77 1f       	adc	r23, r23
 f10:	88 1f       	adc	r24, r24
 f12:	91 50       	subi	r25, 0x01	; 1
 f14:	50 40       	sbci	r21, 0x00	; 0
 f16:	a9 f7       	brne	.-22     	; 0xf02 <__mulsf3_pse+0x64>
 f18:	9e 3f       	cpi	r25, 0xFE	; 254
 f1a:	51 05       	cpc	r21, r1
 f1c:	80 f0       	brcs	.+32     	; 0xf3e <__mulsf3_pse+0xa0>
 f1e:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_inf>
 f22:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__fp_szero>
 f26:	5f 3f       	cpi	r21, 0xFF	; 255
 f28:	e4 f3       	brlt	.-8      	; 0xf22 <__mulsf3_pse+0x84>
 f2a:	98 3e       	cpi	r25, 0xE8	; 232
 f2c:	d4 f3       	brlt	.-12     	; 0xf22 <__mulsf3_pse+0x84>
 f2e:	86 95       	lsr	r24
 f30:	77 95       	ror	r23
 f32:	67 95       	ror	r22
 f34:	b7 95       	ror	r27
 f36:	f7 95       	ror	r31
 f38:	e7 95       	ror	r30
 f3a:	9f 5f       	subi	r25, 0xFF	; 255
 f3c:	c1 f7       	brne	.-16     	; 0xf2e <__mulsf3_pse+0x90>
 f3e:	fe 2b       	or	r31, r30
 f40:	88 0f       	add	r24, r24
 f42:	91 1d       	adc	r25, r1
 f44:	96 95       	lsr	r25
 f46:	87 95       	ror	r24
 f48:	97 f9       	bld	r25, 7
 f4a:	08 95       	ret

00000f4c <__itoa_ncheck>:
 f4c:	bb 27       	eor	r27, r27
 f4e:	4a 30       	cpi	r20, 0x0A	; 10
 f50:	31 f4       	brne	.+12     	; 0xf5e <__itoa_ncheck+0x12>
 f52:	99 23       	and	r25, r25
 f54:	22 f4       	brpl	.+8      	; 0xf5e <__itoa_ncheck+0x12>
 f56:	bd e2       	ldi	r27, 0x2D	; 45
 f58:	90 95       	com	r25
 f5a:	81 95       	neg	r24
 f5c:	9f 4f       	sbci	r25, 0xFF	; 255
 f5e:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__utoa_common>

00000f62 <__utoa_ncheck>:
 f62:	bb 27       	eor	r27, r27

00000f64 <__utoa_common>:
 f64:	fb 01       	movw	r30, r22
 f66:	55 27       	eor	r21, r21
 f68:	aa 27       	eor	r26, r26
 f6a:	88 0f       	add	r24, r24
 f6c:	99 1f       	adc	r25, r25
 f6e:	aa 1f       	adc	r26, r26
 f70:	a4 17       	cp	r26, r20
 f72:	10 f0       	brcs	.+4      	; 0xf78 <__utoa_common+0x14>
 f74:	a4 1b       	sub	r26, r20
 f76:	83 95       	inc	r24
 f78:	50 51       	subi	r21, 0x10	; 16
 f7a:	b9 f7       	brne	.-18     	; 0xf6a <__utoa_common+0x6>
 f7c:	a0 5d       	subi	r26, 0xD0	; 208
 f7e:	aa 33       	cpi	r26, 0x3A	; 58
 f80:	08 f0       	brcs	.+2      	; 0xf84 <__utoa_common+0x20>
 f82:	a9 5d       	subi	r26, 0xD9	; 217
 f84:	a1 93       	st	Z+, r26
 f86:	00 97       	sbiw	r24, 0x00	; 0
 f88:	79 f7       	brne	.-34     	; 0xf68 <__utoa_common+0x4>
 f8a:	b1 11       	cpse	r27, r1
 f8c:	b1 93       	st	Z+, r27
 f8e:	11 92       	st	Z+, r1
 f90:	cb 01       	movw	r24, r22
 f92:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <strrev>

00000f96 <strrev>:
 f96:	dc 01       	movw	r26, r24
 f98:	fc 01       	movw	r30, r24
 f9a:	67 2f       	mov	r22, r23
 f9c:	71 91       	ld	r23, Z+
 f9e:	77 23       	and	r23, r23
 fa0:	e1 f7       	brne	.-8      	; 0xf9a <strrev+0x4>
 fa2:	32 97       	sbiw	r30, 0x02	; 2
 fa4:	04 c0       	rjmp	.+8      	; 0xfae <strrev+0x18>
 fa6:	7c 91       	ld	r23, X
 fa8:	6d 93       	st	X+, r22
 faa:	70 83       	st	Z, r23
 fac:	62 91       	ld	r22, -Z
 fae:	ae 17       	cp	r26, r30
 fb0:	bf 07       	cpc	r27, r31
 fb2:	c8 f3       	brcs	.-14     	; 0xfa6 <strrev+0x10>
 fb4:	08 95       	ret

00000fb6 <_exit>:
 fb6:	f8 94       	cli

00000fb8 <__stop_program>:
 fb8:	ff cf       	rjmp	.-2      	; 0xfb8 <__stop_program>
